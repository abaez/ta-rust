ArgumentType			enum ArgumentType 
CollectCustomDerives			impl<'a> CollectCustomDerives<'a> 
CollectCustomDerives			struct CollectCustomDerives<'a> 
Context			impl<'a, 'b> Context<'a, 'b> 
Context			struct Context<'a, 'b: 'a> 
CustomDerive			impl CustomDerive 
CustomDerive			pub struct CustomDerive 
CustomDerive			struct CustomDerive 
FieldInfo			pub struct FieldInfo<'a> 
LifetimeBounds			impl<'a> LifetimeBounds<'a> 
LifetimeBounds			pub struct LifetimeBounds<'a> 
MethodDef			impl<'a> MethodDef<'a> 
MethodDef			pub struct MethodDef<'a> 
MultiItemModifier for CustomDerive			impl MultiItemModifier for CustomDerive 
OrderingOp			pub enum OrderingOp 
Path			impl<'a> Path<'a> 
Path			pub struct Path<'a> 
Position			enum Position 
PtrTy			pub enum PtrTy<'a> 
Result			    impl Result 
Result			    struct Result 
State			enum State 
State			impl State 
StaticFields			pub enum StaticFields 
Substructure			pub struct Substructure<'a> 
SubstructureFields			pub enum SubstructureFields<'a> 
TraitDef			impl<'a> TraitDef<'a> 
TraitDef			pub struct TraitDef<'a> 
Ty			impl<'a> Ty<'a> 
Ty			pub enum Ty<'a> 
Visitor			    struct Visitor<'a, 'b: 'a> 
Visitor for CollectCustomDerives			impl<'a> Visitor for CollectCustomDerives<'a> 
allow_unstable			fn allow_unstable(cx: &mut ExtCtxt, span: Span, attr_name: &str) -> Span 
asm			mod asm;
assert_ty_bounds			    fn assert_ty_bounds(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>,
assert_ty_bounds			    fn assert_ty_bounds(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>,
base::MacResult for Result			    impl base::MacResult for Result 
borrowed			pub fn borrowed<'r>(ty: Box<Ty<'r>>) -> Ty<'r> 
borrowed_explicit_self			pub fn borrowed_explicit_self<'r>() -> Option<Option<PtrTy<'r>>> 
borrowed_ptrty			pub fn borrowed_ptrty<'r>() -> PtrTy<'r> 
borrowed_self			pub fn borrowed_self<'r>() -> Ty<'r> 
bounds			pub mod bounds;
build_enum_match_tuple			    fn build_enum_match_tuple<'b>(&self,
build_index_map			    fn build_index_map(&mut self) 
call_intrinsic			fn call_intrinsic(cx: &ExtCtxt,
call_substructure_method			    fn call_substructure_method(&self,
cfg			mod cfg;
check_not_pub_in_root			    fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) 
clone			pub mod clone;
combine_substructure			pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)
concat			mod concat;
concat_idents			mod concat_idents;
create_derived_impl			    fn create_derived_impl(&self,
create_enum_variant_pattern			    fn create_enum_variant_pattern
create_method			    fn create_method(&self,
create_struct_pattern			    fn create_struct_pattern
create_subpatterns			    fn create_subpatterns(&self,
cs_clone			fn cs_clone(name: &str,
cs_clone_shallow			fn cs_clone_shallow(name: &str,
cs_cmp			pub fn cs_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> 
cs_eq			    fn cs_eq(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> 
cs_fold			pub fn cs_fold<F>(use_foldl: bool,
cs_ne			    fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> 
cs_op			fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> 
cs_partial_cmp			pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> 
cs_same_method			pub fn cs_same_method<F>(f: F,
cs_total_eq_assert			fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> 
custom			pub mod custom;
debug			pub mod debug;
decodable			pub mod decodable;
decodable_substructure			fn decodable_substructure(cx: &mut ExtCtxt,
decode_static_fields			fn decode_static_fields<F>(cx: &mut ExtCtxt,
default			pub mod default;
default_substructure			fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> 
deriving			pub mod deriving;
describe_num_args			    fn describe_num_args(&self) -> String 
empty			    pub fn empty() -> LifetimeBounds<'a> 
encodable			pub mod encodable;
encodable_substructure			fn encodable_substructure(cx: &mut ExtCtxt,
env			mod env;
eq			pub mod eq;
expand			    fn expand(&self,
expand			    pub fn expand(&self,
expand_asm			pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,
expand_builtin			        fn expand_builtin(name: &str,
expand_cfg			pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,
expand_derive			pub fn expand_derive(cx: &mut ExtCtxt,
expand_deriving_clone			pub fn expand_deriving_clone(cx: &mut ExtCtxt,
expand_deriving_copy			pub fn expand_deriving_copy(cx: &mut ExtCtxt,
expand_deriving_debug			pub fn expand_deriving_debug(cx: &mut ExtCtxt,
expand_deriving_decodable			pub fn expand_deriving_decodable(cx: &mut ExtCtxt,
expand_deriving_decodable_imp			fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,
expand_deriving_default			pub fn expand_deriving_default(cx: &mut ExtCtxt,
expand_deriving_encodable			pub fn expand_deriving_encodable(cx: &mut ExtCtxt,
expand_deriving_encodable_imp			fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,
expand_deriving_eq			pub fn expand_deriving_eq(cx: &mut ExtCtxt,
expand_deriving_hash			pub fn expand_deriving_hash(cx: &mut ExtCtxt,
expand_deriving_ord			pub fn expand_deriving_ord(cx: &mut ExtCtxt,
expand_deriving_partial_eq			pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,
expand_deriving_partial_ord			pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,
expand_deriving_rustc_decodable			pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,
expand_deriving_rustc_encodable			pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,
expand_deriving_unsafe_bound			pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,
expand_enum_def			    fn expand_enum_def(&self,
expand_enum_method_body			    fn expand_enum_method_body<'b>(&self,
expand_env			pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt,
expand_ext			    pub fn expand_ext(&self,
expand_format_args			pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,
expand_option_env			pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,
expand_preparsed_format_args			pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,
expand_static_enum_method_body			    fn expand_static_enum_method_body(&self,
expand_static_struct_method_body			    fn expand_static_struct_method_body(&self,
expand_struct_def			    fn expand_struct_def(&self,
expand_struct_method_body			    fn expand_struct_method_body<'b>(&self,
expand_syntax_ext			pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,
expand_syntax_ext			pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,
expand_syntax_ext			pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,
expand_trace_macros			pub fn expand_trace_macros(cx: &mut ExtCtxt,
find_repr_type_name			fn find_repr_type_name(diagnostic: &Handler, type_attrs: &[ast::Attribute]) -> &'static str 
find_type_parameters			fn find_type_parameters(ty: &ast::Ty,
format			mod format;
format_arg			    fn format_arg(ecx: &ExtCtxt,
generic			pub mod generic;
get_explicit_self			pub fn get_explicit_self(cx: &ExtCtxt,
get_ret_ty			    fn get_ret_ty(&self,
hash			pub mod hash;
hash_substructure			fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> 
hygienic_type_parameter			fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String 
into_expr			    fn into_expr(mut self) -> P<ast::Expr> 
is_builtin_trait			        pub fn is_builtin_trait(name: &str) -> bool 
is_static			    fn is_static(&self) -> bool 
is_type_without_fields			pub fn is_type_without_fields(item: &Annotatable) -> bool 
log_syntax			mod log_syntax;
make_expr			        fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> 
make_ty			        fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> 
mk_generics			fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, span: Span)
mk_lifetime			fn mk_lifetime(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Option<ast::Lifetime> 
mk_lifetimes			fn mk_lifetimes(cx: &ExtCtxt, span: Span, lt: &Option<&str>) -> Vec<ast::Lifetime> 
mk_registrar			fn mk_registrar(cx: &mut ExtCtxt,
mk_ty_param			fn mk_ty_param(cx: &ExtCtxt,
modify			pub fn modify(sess: &ParseSess,
new			    pub fn new(inner: fn(TokenStream) -> TokenStream) -> CustomDerive 
new			    pub fn new<'r>(path: Vec<&'r str>) -> Path<'r> 
new_			    pub fn new_<'r>(path: Vec<&'r str>,
new_local			    pub fn new_local<'r>(path: &'r str) -> Path<'r> 
next			    fn next(&self) -> State 
nil_ty			pub fn nil_ty<'r>() -> Ty<'r> 
ord			pub mod ord;
ordering_collapsed			pub fn ordering_collapsed(cx: &mut ExtCtxt,
parse_args			fn parse_args(ecx: &mut ExtCtxt,
partial_eq			pub mod partial_eq;
partial_ord			pub mod partial_ord;
path			        fn path(&self) -> ast::Path 
process_variant			    fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) 
process_variant			    fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &ast::VariantData) 
register_builtins			pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver, enable_quotes: bool) 
resolve_name_inplace			    fn resolve_name_inplace(&self, p: &mut parse::Piece) 
rtpath			    fn rtpath(ecx: &ExtCtxt, s: &str) -> Vec<ast::Ident> 
rustc_macro_registrar			pub mod rustc_macro_registrar;
show_substructure			fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> 
some_ordering_collapsed			pub fn some_ordering_collapsed(cx: &mut ExtCtxt,
split_self_nonself_args			    fn split_self_nonself_args
static_array			    fn static_array(ecx: &mut ExtCtxt,
stmt_let_undescore			fn stmt_let_undescore(cx: &mut ExtCtxt, sp: Span, expr: P<ast::Expr>) -> ast::Stmt 
summarise_struct			    fn summarise_struct(&self, cx: &mut ExtCtxt, struct_def: &VariantData) -> StaticFields 
to_generics			    pub fn to_generics(&self,
to_path			    pub fn to_path(&self,
to_ty			    pub fn to_ty(&self,
trace_macros			mod trace_macros;
trans_count			    fn trans_count(&self, c: parse::Count) -> P<ast::Expr> 
trans_literal_string			    fn trans_literal_string(&mut self) -> P<ast::Expr> 
trans_piece			    fn trans_piece(&mut self,
ty			pub mod ty;
verify_arg_type			    fn verify_arg_type(&mut self, arg: Position, ty: ArgumentType) 
verify_count			    fn verify_count(&mut self, c: parse::Count) 
verify_piece			    fn verify_piece(&mut self, p: &parse::Piece) 
visit::Visitor for Visitor			    impl<'a, 'b> visit::Visitor for Visitor<'a, 'b> 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_mac			        fn visit_mac(&mut self, mac: &ast::Mac) 
visit_mac			    fn visit_mac(&mut self, mac: &ast::Mac) 
visit_mod			    fn visit_mod(&mut self, m: &ast::Mod, _s: Span, id: NodeId) 
visit_ty			        fn visit_ty(&mut self, ty: &ast::Ty) 
warn_if_deprecated			fn warn_if_deprecated(ecx: &mut ExtCtxt, sp: Span, name: &str) 
