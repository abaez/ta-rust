CacheEntry			struct CacheEntry 
CachingCodemapView			impl<'tcx> CachingCodemapView<'tcx> 
CachingCodemapView			pub struct CachingCodemapView<'tcx> 
CrateInfo			pub struct CrateInfo 
Debug for DefIdDirectory			impl Debug for DefIdDirectory 
DefHash			pub enum DefHash 
DefIdDirectory			impl DefIdDirectory 
DefIdDirectory			pub struct DefIdDirectory 
DefIdDirectoryBuilder			impl<'a,'tcx> DefIdDirectoryBuilder<'a,'tcx> 
DefIdDirectoryBuilder			pub struct DefIdDirectoryBuilder<'a,'tcx:'a> 
DefPathHashes			impl<'a, 'tcx> DefPathHashes<'a, 'tcx> 
DefPathHashes			pub struct DefPathHashes<'a, 'tcx: 'a> 
DefPathIndex			pub struct DefPathIndex 
DirtyCleanMetadataVisitor			impl<'a, 'tcx, 'm> DirtyCleanMetadataVisitor<'a, 'tcx, 'm> 
DirtyCleanMetadataVisitor			pub struct DirtyCleanMetadataVisitor<'a, 'tcx:'a, 'm> 
DirtyCleanVisitor			impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> 
DirtyCleanVisitor			pub struct DirtyCleanVisitor<'a, 'tcx:'a> 
GraphvizDepGraph			pub struct GraphvizDepGraph<'q>(FnvHashSet<&'q DepNode<DefId>>,
HashContext			impl<'a, 'tcx> HashContext<'a, 'tcx> 
HashContext			pub struct HashContext<'a, 'tcx: 'a> 
HashItemsVisitor			impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> 
HashItemsVisitor			struct HashItemsVisitor<'a, 'tcx: 'a> 
IfThisChanged			impl<'a, 'tcx> IfThisChanged<'a, 'tcx> 
IfThisChanged			struct IfThisChanged<'a, 'tcx:'a> 
IncrementalHashesMap			impl IncrementalHashesMap 
IncrementalHashesMap			pub struct IncrementalHashesMap 
Predecessors			impl<'q> Predecessors<'q> 
Predecessors			pub struct Predecessors<'query> 
RetracedDefIdDirectory			impl RetracedDefIdDirectory 
RetracedDefIdDirectory			pub struct RetracedDefIdDirectory 
SawAbiComponent			enum SawAbiComponent<'a> 
SawExprComponent			enum SawExprComponent<'a> 
SawSpanExpnKind			enum SawSpanExpnKind 
SerializedDepGraph			pub struct SerializedDepGraph 
SerializedHash			pub struct SerializedHash 
SerializedMetadataHash			pub struct SerializedMetadataHash 
SerializedMetadataHashes			pub struct SerializedMetadataHashes 
SerializedWorkProduct			pub struct SerializedWorkProduct 
State			    enum State { Undecided, Deciding, Included, Excluded }
StrictVersionHashVisitor			impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> 
StrictVersionHashVisitor			pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> 
Visitor for DirtyCleanMetadataVisitor			impl<'a, 'tcx, 'm> Visitor<'tcx> for DirtyCleanMetadataVisitor<'a, 'tcx, 'm> 
Visitor for DirtyCleanVisitor			impl<'a, 'tcx> Visitor<'tcx> for DirtyCleanVisitor<'a, 'tcx> 
Visitor for IfThisChanged			impl<'a, 'tcx> Visitor<'tcx> for IfThisChanged<'a, 'tcx> 
add			    pub fn add(&mut self, def_id: DefId) -> DefPathIndex 
all_except_most_recent			fn all_except_most_recent(deletion_candidates: Vec<(SystemTime, PathBuf, Option<flock::Lock>)>)
argument			    fn argument(&self, attr: &ast::Attribute) -> Option<InternedString> 
assert_clean			    fn assert_clean(&self, item: &hir::Item, dep_node: DepNode<DefId>) 
assert_dep_graph			pub fn assert_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
assert_dep_graph			mod assert_dep_graph;
assert_dirty			    fn assert_dirty(&self, item: &hir::Item, dep_node: DepNode<DefId>) 
assert_no_characters_lost			fn assert_no_characters_lost(s: &str) 
assert_state			    fn assert_state(&self, should_be_clean: bool, def_id: DefId, span: Span) 
byte_pos_to_line_and_col			    pub fn byte_pos_to_line_and_col(&mut self,
caching_codemap_view			mod caching_codemap_view;
calculate_def_id			    fn calculate_def_id<W>(&mut self, def_id: DefId, mut walk_op: W)
calculate_node_id			    fn calculate_node_id<W>(&mut self, id: ast::NodeId, walk_op: W)
calculate_svh			mod calculate_svh;
check_config			fn check_config(tcx: TyCtxt, attr: &ast::Attribute) -> bool 
check_dirty_clean_annotations			pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_dirty_clean_metadata			pub fn check_dirty_clean_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_paths			fn check_paths<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
codemap			    pub fn codemap(&self) -> &'tcx CodeMap 
compute_crate_hash			    fn compute_crate_hash(&mut self) 
compute_def_id_hash			    fn compute_def_id_hash(&mut self, def_id: DefId) -> u64 
compute_incremental_hashes_map			pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)
copy_files			fn copy_files(target_dir: &Path,
crate_path			fn crate_path(sess: &Session,
crate_path_tcx			fn crate_path_tcx(tcx: TyCtxt, cnum: CrateNum) -> PathBuf 
create_dir			fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(),()> 
data			mod data;
decode_dep_graph			pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
def_id			    pub fn def_id(&self, index: DefPathIndex) -> Option<DefId> 
def_path_hash			mod def_path_hash;
def_path_string			    pub fn def_path_string(&self, tcx: TyCtxt, index: DefPathIndex) -> String 
delete_all_session_dir_contents			pub fn delete_all_session_dir_contents(sess: &Session) -> io::Result<()> 
delete_dirty_work_product			fn delete_dirty_work_product(tcx: TyCtxt,
delete_session_dir_lock_file			fn delete_session_dir_lock_file(sess: &Session,
dep_graph_path			pub fn dep_graph_path(sess: &Session) -> PathBuf 
dep_node			    fn dep_node(&self, attr: &Attribute, def_id: DefId) -> DepNode<DefId> 
dep_node_str			    fn dep_node_str(&self, dep_node: &DepNode<DefId>) -> DepNode<String> 
directory			    pub fn directory(&self) -> &DefIdDirectory 
directory			mod directory;
dirty_clean			mod dirty_clean;
dirty_nodes			fn dirty_nodes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
dot::GraphWalk for GraphvizDepGraph			impl<'a, 'tcx, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> 
dot::Labeller for GraphvizDepGraph			impl<'a, 'tcx, 'q> dot::Labeller<'a> for GraphvizDepGraph<'q> 
dump_graph			fn dump_graph(tcx: TyCtxt) 
edges			    fn edges(&self) -> dot::Edges<(&'q DepNode<DefId>, &'q DepNode<DefId>)> 
encode_base_36			fn encode_base_36(mut n: u64) -> String 
encode_dep_graph			pub fn encode_dep_graph(preds: &Predecessors,
encode_metadata_hashes			pub fn encode_metadata_hashes(tcx: TyCtxt,
encode_work_products			pub fn encode_work_products(sess: &Session, encoder: &mut Encoder) -> io::Result<()> 
expect_associated_value			fn expect_associated_value(tcx: TyCtxt, item: &NestedMetaItem) -> InternedString 
extract_timestamp_from_session_dir			fn extract_timestamp_from_session_dir(directory_name: &str)
file_format			mod file_format;
filter_edges			fn filter_edges<'q>(query: &'q DepGraphQuery<DefId>,
filter_nodes			fn filter_nodes<'q>(query: &'q DepGraphQuery<DefId>,
finalize_session_directory			pub fn finalize_session_directory(sess: &Session, svh: Svh) 
find_metadata_hashes_for			pub fn find_metadata_hashes_for(tcx: TyCtxt, cnum: CrateNum) -> Option<PathBuf> 
find_metadata_hashes_iter			fn find_metadata_hashes_iter<'a, I>(target_svh: &str, iter: I) -> Option<OsString>
find_source_directory			fn find_source_directory(crate_dir: &Path,
find_source_directory_in_iter			fn find_source_directory_in_iter<I>(iter: I,
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> 
fs			mod fs;
garbage_collect_session_directories			pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> 
generate_session_dir_path			fn generate_session_dir_path(crate_dir: &Path) -> PathBuf 
graph_id			    fn graph_id(&self) -> dot::Id 
hash			    pub fn hash(&mut self, def_id: DefId) -> u64 
hash			    pub fn hash(&mut self, dep_node: &DepNode<DefId>) -> Option<u64> 
hash			mod hash;
hash_attributes			    pub fn hash_attributes(&mut self, attributes: &[ast::Attribute]) 
hash_def			    fn hash_def(&mut self, def: Def) 
hash_def_id			    fn hash_def_id(&mut self, def_id: DefId) 
hash_discriminant			    fn hash_discriminant<T>(&mut self, v: &T) 
hash_meta_item			    fn hash_meta_item(&mut self, meta_item: &ast::MetaItem) 
hash_partial_def			    fn hash_partial_def(&mut self, def: &PathResolution) 
hash_resolve			    fn hash_resolve(&mut self, id: ast::NodeId) 
hash_span			    fn hash_span(&mut self, span: Span) 
in_incr_comp_dir			pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBuf 
in_incr_comp_dir_sess			pub fn in_incr_comp_dir_sess(sess: &Session, file_name: &str) -> PathBuf 
index			    fn index(&self, index: &'a DepNode<DefId>) -> &u64 
indices_sorted_by			    fn indices_sorted_by<T, K, F>(&mut self, items: &[T], get_key: F) -> Vec<usize>
insert			    pub fn insert(&mut self, k: DepNode<DefId>, v: u64) -> Option<u64> 
is_finalized			fn is_finalized(directory_name: &str) -> bool 
is_hashable			    pub fn is_hashable(dep_node: &DepNode<DefId>) -> bool 
is_old_enough_to_be_collected			fn is_old_enough_to_be_collected(timestamp: SystemTime) -> bool 
is_session_directory			fn is_session_directory(directory_name: &str) -> bool 
is_session_directory_lock_file			fn is_session_directory_lock_file(file_name: &str) -> bool 
iter			    pub fn iter<'a>(&'a self) -> ::std::collections::hash_map::Iter<'a, DepNode<DefId>, u64> 
krate_still_valid			    pub fn krate_still_valid(&self,
load			mod load;
load_data			    fn load_data(&mut self, cnum: CrateNum) 
load_data			fn load_data(sess: &Session, path: &Path) -> Option<Vec<u8>> 
load_dep_graph			pub fn load_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
load_dep_graph_if_exists			fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
load_from_data			    fn load_from_data(&mut self,
load_prev_metadata_hashes			fn load_prev_metadata_hashes(tcx: TyCtxt,
lock_directory			fn lock_directory(sess: &Session,
lock_file_path			pub fn lock_file_path(session_dir: &Path) -> PathBuf 
lookup_def_path			    pub fn lookup_def_path(&self, id: DefPathIndex) -> &DefPath 
map			    pub fn map(&mut self, node: &DepNode<DefId>) -> DepNode<DefPathIndex> 
map			    pub fn map(&self, node: &DepNode<DefPathIndex>) -> Option<DepNode<DefId>> 
max_current_crate			    fn max_current_crate(&self, tcx: TyCtxt) -> CrateNum 
metadata_hash			    fn metadata_hash(&mut self, def_id: DefId) -> u64 
metadata_hash_export_path			pub fn metadata_hash_export_path(sess: &Session) -> PathBuf 
metadata_hash_import_path			pub fn metadata_hash_import_path(import_session_dir: &Path) -> PathBuf 
new			    pub fn new<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CachingCodemapView<'tcx> 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self 
new			    pub fn new() -> IncrementalHashesMap 
new			    pub fn new(st: &'a mut DefaultHasher,
new			    pub fn new(krates: Vec<CrateInfo>) -> DefIdDirectory 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> DefIdDirectoryBuilder<'a, 'tcx> 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    pub fn new(query: &'q DepGraphQuery<DefId>, hcx: &mut HashContext) -> Self 
node_id			    fn node_id(&self, n: &&'q DepNode<DefId>) -> dot::Id 
node_label			    fn node_label(&self, n: &&'q DepNode<DefId>) -> dot::LabelText 
node_set			fn node_set<'q>(query: &'q DepGraphQuery<DefId>, filter: &DepNodeFilter)
nodes			    fn nodes(&self) -> dot::Nodes<&'q DepNode<DefId>> 
persist			mod persist;
preds			mod preds;
prepare_session_directory			pub fn prepare_session_directory(tcx: TyCtxt) -> Result<bool, ()> 
process_attrs			    fn process_attrs(&mut self, node_id: ast::NodeId, attrs: &[ast::Attribute]) 
read_file			pub fn read_file(path: &Path) -> io::Result<Option<Vec<u8>>> 
reconcile_work_products			fn reconcile_work_products<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
recurse			    fn recurse(query: &DepGraphQuery<DefId>,
retrace			    pub fn retrace(&self, tcx: TyCtxt) -> RetracedDefIdDirectory 
rustc_version			fn rustc_version() -> String 
safe_remove_dir_all			fn safe_remove_dir_all(p: &Path) -> io::Result<()> 
safe_remove_file			fn safe_remove_file(p: &Path) -> io::Result<()> 
save			mod save;
save_dep_graph			pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
save_in			fn save_in<F>(sess: &Session, path_buf: PathBuf, encode: F)
save_trans_partition			pub fn save_trans_partition(sess: &Session,
save_work_products			pub fn save_work_products(sess: &Session) 
saw_expr			fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> 
source			    fn source(&self, edge: &(&'q DepNode<DefId>, &'q DepNode<DefId>)) -> &'q DepNode<DefId> 
string_to_timestamp			fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> 
svh_visitor			mod svh_visitor;
target			    fn target(&self, edge: &(&'q DepNode<DefId>, &'q DepNode<DefId>)) -> &'q DepNode<DefId> 
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> 
test			    fn test(n: u64) 
timestamp_to_string			fn timestamp_to_string(timestamp: SystemTime) -> String 
visit::Visitor for HashItemsVisitor			impl<'a, 'tcx> visit::Visitor<'tcx> for HashItemsVisitor<'a, 'tcx> 
visit::Visitor for StrictVersionHashVisitor			impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> 
visit_arm			    fn visit_arm(&mut self, a: &'tcx Arm) 
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'tcx TypeBinding) 
visit_attribute			    fn visit_attribute(&mut self, _: &ast::Attribute) 
visit_block			    fn visit_block(&mut self, b: &'tcx Block) 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx Expr) 
visit_foreign_item			    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'tcx ForeignItem) 
visit_generics			    fn visit_generics(&mut self, g: &'tcx Generics) 
visit_id			    fn visit_id(&mut self, id: NodeId) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'tcx ImplItem) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, i: &'tcx Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_lifetime			    fn visit_lifetime(&mut self, l: &'tcx Lifetime) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, l: &'tcx LifetimeDef) 
visit_local			    fn visit_local(&mut self, l: &'tcx Local) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'tcx MacroDef) 
visit_mod			    fn visit_mod(&mut self, m: &'tcx Mod, _s: Span, n: NodeId) 
visit_name			    fn visit_name(&mut self, span: Span, name: Name) 
visit_nested_item			    fn visit_nested_item(&mut self, _: ItemId) 
visit_pat			    fn visit_pat(&mut self, p: &'tcx Pat) 
visit_path			    fn visit_path(&mut self, path: &'tcx Path, _: ast::NodeId) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &'tcx Path, item: &'tcx PathListItem) 
visit_path_parameters			    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'tcx PathParameters) 
visit_path_segment			    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'tcx PathSegment) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self, t: &'tcx PolyTraitRef, m: &'tcx TraitBoundModifier) 
visit_stmt			    fn visit_stmt(&mut self, s: &'tcx Stmt) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'tcx StructField) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'tcx TraitItem) 
visit_ty			    fn visit_ty(&mut self, t: &'tcx Ty) 
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'tcx TyParamBound) 
visit_variant			    fn visit_variant(&mut self,
visit_variant_data			    fn visit_variant_data(&mut self,
visit_vis			    fn visit_vis(&mut self, v: &'tcx Visibility) 
visit_where_predicate			    fn visit_where_predicate(&mut self, predicate: &'tcx WherePredicate) 
walk_between			fn walk_between<'q>(query: &'q DepGraphQuery<DefId>,
walk_nodes			fn walk_nodes<'q>(query: &'q DepGraphQuery<DefId>,
work_product			mod work_product;
work_products_path			pub fn work_products_path(sess: &Session) -> PathBuf 
write_file_header			pub fn write_file_header<W: io::Write>(stream: &mut W) -> io::Result<()> 
