Alignment			pub enum Alignment 
Argument			pub struct Argument<'a> 
Count			pub enum Count<'a> 
Flag			pub enum Flag 
FormatSpec			pub struct FormatSpec<'a> 
Iterator for Parser			impl<'a> Iterator for Parser<'a> 
Parser			impl<'a> Parser<'a> 
Parser			pub struct Parser<'a> 
Piece			pub enum Piece<'a> 
Position			pub enum Position<'a> 
argument			    fn argument(&mut self) -> Argument<'a> 
consume			    fn consume(&mut self, c: char) -> bool 
count			    fn count(&mut self) -> Count<'a> 
err			    fn err(&mut self, msg: &str) 
err_with_note			    fn err_with_note(&mut self, msg: &str, note: &str) 
fmtdflt			    fn fmtdflt() -> FormatSpec<'static> 
format			    fn format(&mut self) -> FormatSpec<'a> 
format_align_fill			    fn format_align_fill() 
format_counts			    fn format_counts() 
format_flags			    fn format_flags() 
format_mixture			    fn format_mixture() 
format_nothing			    fn format_nothing() 
format_position			    fn format_position() 
format_position_nothing_else			    fn format_position_nothing_else() 
format_type			    fn format_type() 
integer			    fn integer(&mut self) -> Option<usize> 
invalid01			    fn invalid01() 
invalid02			    fn invalid02() 
invalid04			    fn invalid04() 
invalid05			    fn invalid05() 
invalid06			    fn invalid06() 
must_consume			    fn must_consume(&mut self, c: char) 
musterr			    fn musterr(s: &str) 
new			    pub fn new(s: &'a str) -> Parser<'a> 
next			    fn next(&mut self) -> Option<Piece<'a>> 
position			    fn position(&mut self) -> Option<Position<'a>> 
same			    fn same(fmt: &'static str, p: &[Piece<'static>]) 
simple			    fn simple() 
string			    fn string(&mut self, start: usize) -> &'a str 
tests			mod tests 
word			    fn word(&mut self) -> &'a str 
ws			    fn ws(&mut self) 
