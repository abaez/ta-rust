Annotation			enum Annotation 
Arm			pub struct Arm<'tcx> 
ArmBlocks			struct ArmBlocks 
Binding			struct Binding<'tcx> 
BindingMode			pub enum BindingMode 
Block			pub struct Block<'tcx> 
BlockAnd			pub struct BlockAnd<T>(BasicBlock, T);
BlockAndExtension			trait BlockAndExtension 
BlockAndExtension for BasicBlock			impl BlockAndExtension for BasicBlock 
BreakCriticalEdges			pub struct BreakCriticalEdges;
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
Builder			pub struct Builder<'a, 'tcx: 'a> 
Builder			impl<'a,'tcx> Builder<'a,'tcx> 
CFG			impl<'tcx> CFG<'tcx> 
CFG			struct CFG<'tcx> 
Candidate			pub struct Candidate<'pat, 'tcx:'pat> 
Category			impl Category 
Category			pub enum Category 
Cx			impl<'a,'tcx:'a> Cx<'a, 'tcx> 
Cx			impl<'a,'tcx> Cx<'a,'tcx> 
Cx			pub struct Cx<'a, 'tcx: 'a> 
Cx			impl<'cx, 'tcx> Cx<'cx, 'tcx> 
DropData			struct DropData<'tcx> 
EraseRegions			pub struct EraseRegions;
EraseRegionsVisitor			impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> 
EraseRegionsVisitor			struct EraseRegionsVisitor<'a, 'tcx: 'a> 
EvalInto			pub trait EvalInto<'tcx> 
EvalInto for Expr			impl<'tcx> EvalInto<'tcx> for Expr<'tcx> 
EvalInto for ExprRef			impl<'tcx> EvalInto<'tcx> for ExprRef<'tcx> 
Expr			pub struct Expr<'tcx> 
ExprKind			pub enum ExprKind<'tcx> 
ExprRef			pub enum ExprRef<'tcx> 
FieldAccessError			enum FieldAccessError 
FieldExprRef			pub struct FieldExprRef<'tcx> 
FieldPattern			pub struct FieldPattern<'tcx> 
FreeData			struct FreeData<'tcx> 
FruInfo			pub struct FruInfo<'tcx> 
Index for ScopeAuxiliaryVec			impl Index<ScopeId> for ScopeAuxiliaryVec 
IndexMut for ScopeAuxiliaryVec			impl IndexMut<ScopeId> for ScopeAuxiliaryVec 
InnerDump			struct InnerDump<'a, 'm, 'tcx: 'a + 'm> 
Iterator for Postorder			impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> 
Iterator for Preorder			impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> 
Iterator for ReversePostorder			impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> 
Location			pub struct Location 
LogicalOp			pub enum LogicalOp 
LoopScope			pub struct LoopScope 
MatchPair			pub struct MatchPair<'pat, 'tcx:'pat> 
MatchPair			impl<'pat, 'tcx> MatchPair<'pat, 'tcx> 
MirPass for BreakCriticalEdges			impl<'tcx> MirPass<'tcx> for BreakCriticalEdges 
MirPass for EraseRegions			impl<'tcx> MirPass<'tcx> for EraseRegions 
MirPass for NoLandingPads			impl<'tcx> MirPass<'tcx> for NoLandingPads 
MirPass for RemoveDeadBlocks			impl<'tcx> MirPass<'tcx> for RemoveDeadBlocks 
MirPass for SimplifyCfg			impl<'tcx> MirPass<'tcx> for SimplifyCfg 
MirPass for TypeckMir			impl<'tcx> MirPass<'tcx> for TypeckMir 
Mirror			impl<'tcx> Mirror<'tcx> for &'tcx hir::Block 
Mirror			impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr 
Mirror			pub trait Mirror<'tcx> 
Mirror for Block			impl<'tcx> Mirror<'tcx> for Block<'tcx> 
Mirror for Expr			impl<'tcx> Mirror<'tcx> for Expr<'tcx> 
Mirror for ExprRef			impl<'tcx> Mirror<'tcx> for ExprRef<'tcx> 
Mirror for Stmt			impl<'tcx> Mirror<'tcx> for Stmt<'tcx> 
Mirror for StmtRef			impl<'tcx> Mirror<'tcx> for StmtRef<'tcx> 
MutVisitor for EraseRegionsVisitor			impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> 
MutVisitor for NoLandingPads			impl<'tcx> MutVisitor<'tcx> for NoLandingPads 
NoLandingPads			pub struct NoLandingPads;
OuterDump			impl<'a, 'tcx> OuterDump<'a, 'tcx> 
OuterDump			struct OuterDump<'a, 'tcx: 'a> 
Pass for BreakCriticalEdges			impl Pass for BreakCriticalEdges {}
Pass for EraseRegions			impl Pass for EraseRegions {}
Pass for NoLandingPads			impl Pass for NoLandingPads {}
Pass for RemoveDeadBlocks			impl Pass for RemoveDeadBlocks {}
Pass for SimplifyCfg			impl Pass for SimplifyCfg {}
Pass for TypeckMir			impl Pass for TypeckMir {}
PassArgs			enum PassArgs 
PatCx			impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> 
PatCx			struct PatCx<'patcx, 'cx: 'patcx, 'tcx: 'cx> 
Pattern			pub struct Pattern<'tcx> 
PatternKind			pub enum PatternKind<'tcx> 
Postorder			impl<'a, 'tcx> Postorder<'a, 'tcx> 
Postorder			pub struct Postorder<'a, 'tcx: 'a> 
Preorder			impl<'a, 'tcx> Preorder<'a, 'tcx> 
Preorder			pub struct Preorder<'a, 'tcx: 'a> 
RemoveDeadBlocks			pub struct RemoveDeadBlocks;
ReversePostorder			impl<'a, 'tcx> ReversePostorder<'a, 'tcx> 
ReversePostorder			pub struct ReversePostorder<'a, 'tcx: 'a> 
RvalueFunc			pub enum RvalueFunc 
Scope			impl<'tcx> Scope<'tcx> 
Scope			pub struct Scope<'tcx> 
ScopeAuxiliary			pub struct ScopeAuxiliary 
ScopeAuxiliaryVec			pub struct ScopeAuxiliaryVec 
SimplifyCfg			impl SimplifyCfg 
SimplifyCfg			pub struct SimplifyCfg;
Stmt			pub struct Stmt<'tcx> 
StmtKind			pub enum StmtKind<'tcx> 
StmtRef			pub enum StmtRef<'tcx> 
Test			pub struct Test<'tcx> 
TestKind			enum TestKind<'tcx> 
ToRef			impl<'a,'tcx:'a,T,U> ToRef for &'tcx Option<T>
ToRef			impl<'a,'tcx:'a,T,U> ToRef for &'tcx P<[T]>
ToRef			impl<'a,'tcx:'a,T,U> ToRef for &'tcx Vec<T>
ToRef			impl<'a,'tcx:'a> ToRef for &'tcx P<hir::Expr> 
ToRef			impl<'a,'tcx:'a> ToRef for &'tcx hir::Expr 
ToRef			pub trait ToRef 
ToRef for Expr			impl<'a,'tcx:'a> ToRef for Expr<'tcx> 
TypeChecker			impl<'a, 'tcx> TypeChecker<'a, 'tcx> 
TypeChecker			pub struct TypeChecker<'a, 'tcx: 'a> 
TypeVerifier			impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> 
TypeVerifier			struct TypeVerifier<'a, 'b: 'a, 'tcx: 'b> 
TypeckMir			impl TypeckMir 
TypeckMir			pub struct TypeckMir;
Visitor for InnerDump			impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> 
Visitor for OuterDump			impl<'a, 'tcx> Visitor<'tcx> for OuterDump<'a, 'tcx> 
Visitor for TypeVerifier			impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> 
add_cases_to_switch			    pub fn add_cases_to_switch<'pat>(&mut self,
all_fields			    pub fn all_fields(&mut self, adt_def: ty::AdtDef<'tcx>, variant_index: usize) -> Vec<Field> 
and			    fn and<T>(self, v: T) -> BlockAnd<T> 
and			    fn and<T>(self, v: T) -> BlockAnd<T>;
args_and_body			    fn args_and_body(&mut self,
as_constant			    pub fn as_constant<M>(&mut self, expr: M) -> Constant<'tcx>
as_constant			mod as_constant;
as_lvalue			    pub fn as_lvalue<M>(&mut self,
as_lvalue			mod as_lvalue;
as_operand			    pub fn as_operand<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Operand<'tcx>>
as_operand			mod as_operand;
as_rvalue			    pub fn as_rvalue<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Rvalue<'tcx>>
as_rvalue			mod as_rvalue;
as_temp			    pub fn as_temp<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Lvalue<'tcx>>
as_temp			mod as_temp;
ast_block			    pub fn ast_block(&mut self,
bin_op			fn bin_op(op: hir::BinOp_) -> BinOp 
bind_and_guard_matched_candidate			    fn bind_and_guard_matched_candidate<'pat>(&mut self,
bind_matched_candidate			    fn bind_matched_candidate(&mut self,
block			mod block;
block			mod block;
block_data			    pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> 
block_data_mut			    pub fn block_data_mut(&mut self, blk: BasicBlock) -> &mut BasicBlockData<'tcx> 
bool_ty			    pub fn bool_ty(&mut self) -> Ty<'tcx> 
break_critical_edges			fn break_critical_edges(mir: &mut Mir) 
break_critical_edges			pub mod break_critical_edges;
break_or_continue			    fn break_or_continue<F>(&mut self,
build			pub mod build;
build_diverge_scope			fn build_diverge_scope<'tcx>(tcx: &TyCtxt<'tcx>,
build_drop			    pub fn build_drop(&mut self,
build_free			fn build_free<'tcx>(tcx: &TyCtxt<'tcx>,
build_mir			fn build_mir<'a,'tcx:'a>(cx: Cx<'a,'tcx>,
build_mir_for_crate			pub fn build_mir_for_crate<'tcx>(tcx: &TyCtxt<'tcx>) -> MirMap<'tcx> 
build_scope_drops			fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,
cached_block			    fn cached_block(&self) -> Option<BasicBlock> 
candidate_after_variant_switch			    fn candidate_after_variant_switch<'pat>(&mut self,
candidate_without_match_pair			    fn candidate_without_match_pair<'pat>(&mut self,
capture_freevar			fn capture_freevar<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,
category			mod category;
cfg			mod cfg;
check_box_free_inputs			    fn check_box_free_inputs(&self,
check_call_dest			    fn check_call_dest(&self,
check_call_inputs			    fn check_call_inputs(&self,
check_stmt			    fn check_stmt(&mut self, mir: &Mir<'tcx>, stmt: &Statement<'tcx>) 
check_terminator			    fn check_terminator(&self,
closure_self_ty			fn closure_self_ty<'a, 'tcx>(tcx: &TyCtxt<'tcx>,
comment			fn comment(tcx: &TyCtxt,
compare			    fn compare(&mut self,
const_eval_literal			    pub fn const_eval_literal(&mut self, e: &hir::Expr) -> Literal<'tcx> 
construct			pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,
convert_arm			fn convert_arm<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> 
convert_path_expr			fn convert_path_expr<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr) -> ExprKind<'tcx> 
convert_var			fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,
current_location			    pub fn current_location(&mut self, block: BasicBlock) -> Location 
cx			pub mod cx;
declare_binding			    fn declare_binding(&mut self,
declare_bindings			    pub fn declare_bindings(&mut self, var_scope_id: ScopeId, pattern: &Pattern<'tcx>) 
diverge_cleanup			    pub fn diverge_cleanup(&mut self) -> Option<BasicBlock> 
dump_mir			pub fn dump_mir<'a, 'tcx>(tcx: &TyCtxt<'tcx>,
erase_regions			pub mod erase_regions;
error			    fn error(&mut self) -> Ty<'tcx> 
error_simplifyable			    fn error_simplifyable<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> ! 
escape			fn escape<T: Debug>(t: &T) -> String 
eval_into			    fn eval_into<'a>(self,
exit_scope			    pub fn exit_scope(&mut self,
expr			mod expr;
expr			mod expr;
expr_as_constant			    fn expr_as_constant(&mut self, expr: Expr<'tcx>) -> Constant<'tcx> 
expr_as_lvalue			    fn expr_as_lvalue(&mut self,
expr_as_operand			    fn expr_as_operand(&mut self,
expr_as_rvalue			    fn expr_as_rvalue(&mut self,
expr_as_temp			    fn expr_as_temp(&mut self, mut block: BasicBlock, expr: Expr<'tcx>) -> BlockAnd<Lvalue<'tcx>> 
expr_into_pattern			    pub fn expr_into_pattern(&mut self,
extent_of_innermost_scope			    pub fn extent_of_innermost_scope(&self) -> CodeExtent 
extent_of_return_scope			    pub fn extent_of_return_scope(&self) -> CodeExtent 
false_literal			    pub fn false_literal(&mut self) -> Literal<'tcx> 
field_match_pairs			    pub fn field_match_pairs<'pat>(&mut self,
field_refs			fn field_refs<'tcx>(variant: VariantDef<'tcx>,
field_ty			    fn field_ty(&mut self,
final_target			        fn final_target(mir: &Mir, mut target: BasicBlock) -> Option<BasicBlock> 
find_loop_scope			    pub fn find_loop_scope(&mut self,
get_unit_temp			    fn get_unit_temp(&mut self) -> Lvalue<'tcx> 
graphviz			pub mod graphviz;
hair			mod hair;
in_loop_scope			    pub fn in_loop_scope<F>(&mut self,
in_scope			    pub fn in_scope<F, R>(&mut self, extent: CodeExtent, mut block: BasicBlock, f: F) -> BlockAnd<R>
index			    fn index(&self, index: ScopeId) -> &ScopeAuxiliary 
index_mut			    fn index_mut(&mut self, index: ScopeId) -> &mut ScopeAuxiliary 
infcx			    fn infcx(&self) -> &'a InferCtxt<'a, 'tcx> 
innermost_scope_id			    pub fn innermost_scope_id(&self) -> ScopeId 
into			mod into;
into			    pub fn into<E>(&mut self,
into			mod into;
into_expr			    pub fn into_expr(&mut self,
invalidate_cache			    fn invalidate_cache(&mut self) 
irrefutable_pat			    pub fn irrefutable_pat(&mut self, pat: &hir::Pat) -> Pattern<'tcx> 
is_box_free			    fn is_box_free(&self, operand: &Operand<'tcx>) -> bool 
is_switch_ty			fn is_switch_ty<'tcx>(ty: Ty<'tcx>) -> bool 
join_otherwise_blocks			    fn join_otherwise_blocks(&mut self,
lang_function			    fn lang_function(&mut self, lang_item: lang_items::LangItem) -> Constant<'tcx> 
literal_operand			    pub fn literal_operand(&mut self,
loop_label			fn loop_label<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr) -> CodeExtent 
lvalue_into_pattern			    pub fn lvalue_into_pattern(&mut self,
make_mirror			    fn make_mirror<'a>(self, cx: &mut Cx<'a, 'tcx>) -> Block<'tcx> 
make_mirror			    fn make_mirror<'a>(self, cx: &mut Cx<'a, 'tcx>) -> Expr<'tcx> 
make_mirror			    fn make_mirror<'a>(self, _: &mut Cx<'a, 'tcx>) -> Block<'tcx> 
make_mirror			    fn make_mirror<'a>(self, _: &mut Cx<'a, 'tcx>) -> Expr<'tcx> 
make_mirror			    fn make_mirror<'a>(self, _: &mut Cx<'a, 'tcx>) -> Stmt<'tcx> 
make_mirror			    fn make_mirror<'a>(self, _: &mut Cx<'a,'tcx>) -> Stmt<'tcx> 
make_mirror			    fn make_mirror<'a>(self, cx: &mut Cx<'a, 'tcx>) -> Self::Output;
make_mirror			    fn make_mirror<'a>(self, hir: &mut Cx<'a, 'tcx>) -> Expr<'tcx> 
match_candidates			    fn match_candidates<'pat>(&mut self,
match_expr			    pub fn match_expr(&mut self,
matches			mod matches;
method_callee			fn method_callee<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,
mir_map			pub mod mir_map;
mirror			    pub fn mirror<M: Mirror<'tcx>>(&mut self, ast: M) -> M::Output 
mirror_stmts			fn mirror_stmts<'a,'tcx:'a>(cx: &mut Cx<'a,'tcx>,
misc			mod misc;
mk_eqty			    fn mk_eqty(&self, span: Span, a: Ty<'tcx>, b: Ty<'tcx>)
mk_subty			    fn mk_subty(&self, span: Span, sup: Ty<'tcx>, sub: Ty<'tcx>)
needs_drop			    pub fn needs_drop(&mut self, ty: Ty<'tcx>) -> bool 
new			    pub fn new(lvalue: Lvalue<'tcx>, pattern: &'pat Pattern<'tcx>) -> MatchPair<'pat, 'tcx> 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Cx<'a, 'tcx> 
new			    fn new(cx: &'patcx mut Cx<'cx, 'tcx>,
new			    pub fn new(tcx: &'a TyCtxt<'tcx>) -> Self 
new			    pub fn new() -> SimplifyCfg 
new			    fn new(cx: &'a mut TypeChecker<'b, 'tcx>, mir: &'a Mir<'tcx>) -> Self 
new			    fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self 
new			    pub fn new() -> Self 
new			    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> 
new			    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> 
new			    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> 
next			    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> 
no_landing_pads			pub mod no_landing_pads;
node			fn node(block: BasicBlock) -> String 
normalize			    fn normalize(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
num_variants			    pub fn num_variants(&mut self, adt_def: ty::AdtDef<'tcx>) -> usize 
of			    pub fn of<'tcx>(ek: &ExprKind<'tcx>) -> Option<Category> 
overloaded_lvalue			fn overloaded_lvalue<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,
overloaded_operator			fn overloaded_operator<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,
panic			    pub fn panic(&mut self, block: BasicBlock, msg: &'static str, span: Span) 
panic_bounds_check			    pub fn panic_bounds_check(&mut self,
pattern			mod pattern;
perform_test			    pub fn perform_test(&mut self,
pop_scope			    pub fn pop_scope(&mut self,
postorder			pub fn postorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> Postorder<'a, 'tcx> 
prefix_suffix			    fn prefix_suffix<'pat>(&mut self,
prefix_suffix_slice			    pub fn prefix_suffix_slice<'pat>(&mut self,
preorder			pub fn preorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> Preorder<'a, 'tcx> 
pretty			pub mod pretty;
push			    pub fn push(&mut self, block: BasicBlock, statement: Statement<'tcx>) 
push_assign			    pub fn push_assign(&mut self,
push_assign_constant			    pub fn push_assign_constant(&mut self,
push_assign_unit			    pub fn push_assign_unit(&mut self,
push_scope			    pub fn push_scope(&mut self, extent: CodeExtent, entry: BasicBlock) -> ScopeId 
push_usize			    pub fn push_usize(&mut self,
refutable_pat			    pub fn refutable_pat(&mut self,
remove_dead_blocks			pub mod remove_dead_blocks;
remove_goto_chains			    fn remove_goto_chains(&self, mir: &mut Mir) -> bool 
reset			    pub fn reset(&mut self) 
retain_basic_blocks			fn retain_basic_blocks(mir: &mut Mir, keep: &BitVector) 
reverse_postorder			pub fn reverse_postorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> ReversePostorder<'a, 'tcx> 
run_pass			    fn run_pass(&mut self, _: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) 
run_pass			    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) 
run_pass			    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) 
run_pass			    fn run_pass(&mut self, _: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) 
run_pass			    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, id: NodeId, mir: &mut Mir<'tcx>) 
run_pass			    fn run_pass(&mut self, tcx: &TyCtxt<'tcx>, id: NodeId, mir: &mut Mir<'tcx>) 
sanitize_lvalue			    fn sanitize_lvalue(&mut self, lvalue: &Lvalue<'tcx>) -> LvalueTy<'tcx> 
sanitize_projection			    fn sanitize_projection(&mut self,
sanitize_type			    fn sanitize_type(&mut self, parent: &fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> 
schedule_box_free			    pub fn schedule_box_free(&mut self,
schedule_drop			    pub fn schedule_drop(&mut self,
scope			mod scope;
simplify			mod simplify;
simplify_branches			    fn simplify_branches(&self, mir: &mut Mir) -> bool 
simplify_candidate			    pub fn simplify_candidate<'pat>(&mut self,
simplify_cfg			pub mod simplify_cfg;
simplify_match_pair			    fn simplify_match_pair<'pat>(&mut self,
slice_or_array_pattern			    fn slice_or_array_pattern(&mut self,
sort_candidate			    pub fn sort_candidate<'pat>(&mut self,
span_to_fileline_args			    fn span_to_fileline_args(&mut self, span: Span) -> (Constant<'tcx>, Constant<'tcx>) 
start_new_block			    pub fn start_new_block(&mut self) -> BasicBlock 
start_new_cleanup_block			    pub fn start_new_cleanup_block(&mut self) -> BasicBlock 
str_literal			    pub fn str_literal(&mut self, value: token::InternedString) -> Literal<'tcx> 
tcx			    pub fn tcx(&self) -> &'a TyCtxt<'tcx> 
tcx			    fn tcx(&self) -> &'a TyCtxt<'tcx> 
temp			    pub fn temp(&mut self, ty: Ty<'tcx>) -> Lvalue<'tcx> 
term_is_invoke			fn term_is_invoke(term: &Terminator) -> bool 
terminate			    pub fn terminate(&mut self,
test			mod test;
test			    pub fn test<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> Test<'tcx> 
to_borrow_kind			fn to_borrow_kind(m: hir::Mutability) -> BorrowKind 
to_expr_ref			pub fn to_expr_ref<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>, block: &'tcx hir::Block) -> ExprRef<'tcx> 
to_opt_pattern			    fn to_opt_pattern(&mut self, pat: &Option<P<hir::Pat>>) -> Option<Pattern<'tcx>> 
to_pattern			    fn to_pattern(&mut self, pat: &hir::Pat) -> Pattern<'tcx> 
to_patterns			    fn to_patterns(&mut self, pats: &[P<hir::Pat>]) -> Vec<Pattern<'tcx>> 
to_ref			mod to_ref;
to_ref			    fn to_ref(self) -> ExprRef<'tcx> 
to_ref			    fn to_ref(self) -> Option<U> 
to_ref			    fn to_ref(self) -> Self::Output;
to_ref			    fn to_ref(self) -> Vec<U> 
trait_method			    pub fn trait_method(&mut self,
transform			pub mod transform;
traversal			pub mod traversal;
traverse_successor			    fn traverse_successor(&mut self) 
true_literal			    pub fn true_literal(&mut self) -> Literal<'tcx> 
try_const_eval_literal			    pub fn try_const_eval_literal(&mut self, e: &hir::Expr) -> Option<Literal<'tcx>> 
type_check			pub mod type_check;
typeck_mir			    fn typeck_mir(&mut self, mir: &Mir<'tcx>) 
unit			    fn unit(self) -> BlockAnd<()> 
unit			    fn unit(self) -> BlockAnd<()>;
unit_ty			    pub fn unit_ty(&mut self) -> Ty<'tcx> 
usize_literal			    pub fn usize_literal(&mut self, value: u64) -> Literal<'tcx> 
usize_ty			    pub fn usize_ty(&mut self) -> Ty<'tcx> 
util			mod util;
variant_or_leaf			    fn variant_or_leaf(&mut self,
verify_obligations			    fn verify_obligations(&mut self, mir: &Mir<'tcx>) 
visit_constant			    fn visit_constant(&mut self, constant: &Constant<'tcx>) 
visit_fn			    fn visit_fn(&mut self,
visit_impl_item			    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_lvalue			    fn visit_lvalue(&mut self, lvalue: &Lvalue<'tcx>, _context: visit::LvalueContext) 
visit_mir			    fn visit_mir<OP>(&mut self, attributes: &'a [ast::Attribute], mut walk_op: OP)
visit_mir			    fn visit_mir(&mut self, mir: &Mir<'tcx>) 
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>) 
visit_span			    fn visit_span(&mut self, span: &Span) 
visit_substs			    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) 
visit_terminator			    fn visit_terminator(&mut self, bb: BasicBlock, terminator: &mut Terminator<'tcx>) 
visit_trait_item			    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) 
visit_ty			    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) 
write_basic_block			fn write_basic_block(tcx: &TyCtxt,
write_edges			fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> 
write_graph_label			fn write_graph_label<W: Write>(tcx: &ty::TyCtxt, nid: NodeId, mir: &Mir, w: &mut W)
write_mir_fn			pub fn write_mir_fn<'tcx>(tcx: &TyCtxt<'tcx>,
write_mir_graphviz			pub fn write_mir_graphviz<'a, 't, W, I>(tcx: &ty::TyCtxt<'t>, iter: I, w: &mut W) -> io::Result<()>
write_mir_intro			fn write_mir_intro(tcx: &TyCtxt, nid: NodeId, mir: &Mir, w: &mut Write)
write_mir_pretty			pub fn write_mir_pretty<'a, 'tcx, I>(tcx: &TyCtxt<'tcx>,
write_node			fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> 
write_node_label			pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,
write_scope_tree			fn write_scope_tree(tcx: &TyCtxt,
