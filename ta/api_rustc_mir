AbstractOperand			pub struct AbstractOperand;
Action			enum Action<'tcx> 
Action			impl<'tcx> Action<'tcx> 
AddCallGuards			pub struct AddCallGuards;
Adjustment			enum Adjustment 
AllSets			impl<E:Idx> AllSets<E> 
AllSets			pub struct AllSets<E: Idx> 
Arm			pub struct Arm<'tcx> 
ArmBlocks			struct ArmBlocks 
Bar			struct Bar {x: u8}
Binding			struct Binding<'tcx> 
BitDenotation			pub trait BitDenotation 
BitDenotation for DefinitelyInitializedLvals			impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> 
BitDenotation for MaybeInitializedLvals			impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> 
BitDenotation for MaybeUninitializedLvals			impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> 
BitDenotation for MovingOutStatements			impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> 
Bits			impl<E:Idx> Bits<E> 
Bits			struct Bits<E:Idx> 
BitwiseOperator for DefinitelyInitializedLvals			impl<'a, 'tcx> BitwiseOperator for DefinitelyInitializedLvals<'a, 'tcx> 
BitwiseOperator for MaybeInitializedLvals			impl<'a, 'tcx> BitwiseOperator for MaybeInitializedLvals<'a, 'tcx> 
BitwiseOperator for MaybeUninitializedLvals			impl<'a, 'tcx> BitwiseOperator for MaybeUninitializedLvals<'a, 'tcx> 
BitwiseOperator for MovingOutStatements			impl<'a, 'tcx> BitwiseOperator for MovingOutStatements<'a, 'tcx> 
Block			pub struct Block<'tcx> 
BlockAnd			struct BlockAnd<T>(BasicBlock, T);
BlockAndExtension			trait BlockAndExtension 
BlockAndExtension for BasicBlock			impl BlockAndExtension for BasicBlock 
BlockSets			impl<'a, E:Idx> BlockSets<'a, E> 
BlockSets			pub struct BlockSets<'a, E: Idx> 
BreakableScope			pub struct BreakableScope<'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
Builder			struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Builder			impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> 
C			struct C { a: Cell<usize> }
CFG			impl<'tcx> CFG<'tcx> 
CFG			struct CFG<'tcx> 
CallKind			enum CallKind 
CallSite			struct CallSite<'tcx> 
Candidate			pub struct Candidate<'pat, 'tcx:'pat> 
Candidate			pub enum Candidate 
Category			impl Category 
Category			pub enum Category 
CfgSimplifier			impl<'a, 'tcx: 'a> CfgSimplifier<'a, 'tcx> 
CfgSimplifier			pub struct CfgSimplifier<'a, 'tcx: 'a> 
CleanEndRegions			pub struct CleanEndRegions;
Clone for Bits			impl<E:Idx> Clone for Bits<E> 
ConstantPropagationVisitor			impl<'tcx> ConstantPropagationVisitor<'tcx> 
ConstantPropagationVisitor			struct ConstantPropagationVisitor<'tcx> 
CopyPropagation			pub struct CopyPropagation;
Cx			impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> 
Cx			pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> 
Dataflow			pub trait Dataflow<BD: BitDenotation> 
Dataflow for DataflowBuilder			impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD>
DataflowAnalysis			impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>
DataflowAnalysis			impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>
DataflowAnalysis			impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O>
DataflowAnalysis			pub struct DataflowAnalysis<'a, 'tcx: 'a, O>
DataflowBuilder			impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD>
DataflowOperator			pub trait DataflowOperator: BitwiseOperator 
DataflowOperator for DefinitelyInitializedLvals			impl<'a, 'tcx> DataflowOperator for DefinitelyInitializedLvals<'a, 'tcx> 
DataflowOperator for MaybeInitializedLvals			impl<'a, 'tcx> DataflowOperator for MaybeInitializedLvals<'a, 'tcx> 
DataflowOperator for MaybeUninitializedLvals			impl<'a, 'tcx> DataflowOperator for MaybeUninitializedLvals<'a, 'tcx> 
DataflowOperator for MovingOutStatements			impl<'a, 'tcx> DataflowOperator for MovingOutStatements<'a, 'tcx> 
DataflowResults			impl<O: BitDenotation> DataflowResults<O> 
DataflowResults			pub struct DataflowResults<O>(pub(crate) DataflowState<O>) where O: BitDenotation;
DataflowState			impl<O: BitDenotation> DataflowState<O> 
DataflowState			pub struct DataflowState<O: BitDenotation>
Deaggregator			pub struct Deaggregator;
DeclMarker			struct DeclMarker 
DefUseAnalysis			impl<'tcx> DefUseAnalysis<'tcx> 
DefUseAnalysis			pub struct DefUseAnalysis<'tcx> 
DefUseFinder			impl<'tcx> DefUseFinder<'tcx> 
DefUseFinder			struct DefUseFinder<'tcx> 
DefinitelyInitializedLvals			impl<'a, 'tcx: 'a> DefinitelyInitializedLvals<'a, 'tcx> 
DefinitelyInitializedLvals			impl<'a, 'tcx> DefinitelyInitializedLvals<'a, 'tcx> 
DefinitelyInitializedLvals			pub struct DefinitelyInitializedLvals<'a, 'tcx: 'a> 
DeleteTrivialEndRegions			struct DeleteTrivialEndRegions<'a> 
Disambiguator			pub struct Disambiguator 
Drop for Foo			impl Drop for Foo 
DropCtxt			impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>
DropCtxt			struct DropCtxt<'l, 'b: 'l, 'tcx: 'b, D>
DropData			struct DropData<'tcx> 
DropElaborator			pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug 
DropElaborator for DropShimElaborator			impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> 
DropElaborator for Elaborator			impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> 
DropFlagMode			pub enum DropFlagMode 
DropFlagState			impl DropFlagState 
DropFlagState			pub enum DropFlagState 
DropKind			enum DropKind 
DropShimElaborator			pub struct DropShimElaborator<'a, 'tcx: 'a> 
DropStyle			pub enum DropStyle 
DumpMir			pub struct DumpMir;
Edge			pub struct Edge { source: BasicBlock, index: usize }
ElaborateDrops			pub struct ElaborateDrops;
ElaborateDropsCtxt			impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> 
ElaborateDropsCtxt			struct ElaborateDropsCtxt<'a, 'tcx: 'a> 
Elaborator			struct Elaborator<'a, 'b: 'a, 'tcx: 'b> 
EraseRegions			pub struct EraseRegions;
EraseRegionsVisitor			impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> 
EraseRegionsVisitor			struct EraseRegionsVisitor<'a, 'tcx: 'a> 
EvalInto for Expr			impl<'tcx> EvalInto<'tcx> for Expr<'tcx> 
EvalInto for ExprRef			impl<'tcx> EvalInto<'tcx> for ExprRef<'tcx> 
Expr			pub struct Expr<'tcx> 
ExprKind			pub enum ExprKind<'tcx> 
ExprRef			pub enum ExprRef<'tcx> 
FieldAccessError			enum FieldAccessError 
FieldExprRef			pub struct FieldExprRef<'tcx> 
Foo			struct Foo 
FreeData			struct FreeData<'tcx> 
FruInfo			pub struct FruInfo<'tcx> 
GatherBorrowedRegions			struct GatherBorrowedRegions 
GatherCtors			    struct GatherCtors<'a, 'tcx: 'a> 
GlobalizeMir			struct GlobalizeMir<'a, 'gcx: 'a> 
Graph			struct Graph<'a, 'tcx, MWF:'a, P> where
HasMoveData			pub trait HasMoveData<'tcx> 
HasMoveData for DefinitelyInitializedLvals			impl<'a, 'tcx: 'a> HasMoveData<'tcx> for DefinitelyInitializedLvals<'a, 'tcx> 
HasMoveData for MaybeInitializedLvals			impl<'a, 'tcx: 'a> HasMoveData<'tcx> for MaybeInitializedLvals<'a, 'tcx> 
HasMoveData for MaybeUninitializedLvals			impl<'a, 'tcx: 'a> HasMoveData<'tcx> for MaybeUninitializedLvals<'a, 'tcx> 
HasMoveData for MovingOutStatements			impl<'a, 'tcx> HasMoveData<'tcx> for MovingOutStatements<'a, 'tcx> 
Idx			            impl Idx for 
Idx for ScopeId			impl Idx for ScopeId 
Index for LocationMap			impl<T> Index<Location> for LocationMap<T> 
IndexMut for LocationMap			impl<T> IndexMut<Location> for LocationMap<T> 
Info			impl<'tcx> Info<'tcx> 
Info			pub struct Info<'tcx> 
InitializationData			impl InitializationData 
InitializationData			struct InitializationData 
Inline			pub struct Inline;
Inliner			impl<'a, 'tcx> Inliner<'a, 'tcx> 
Inliner			struct Inliner<'a, 'tcx: 'a> 
InstCombine			pub struct InstCombine;
InstCombineVisitor			pub struct InstCombineVisitor 
Integrator			impl<'a, 'tcx> Integrator<'a, 'tcx> 
Integrator			struct Integrator<'a, 'tcx: 'a> 
Lift			pub trait Lift 
Lift for LvalueElem			impl<'tcx> Lift for LvalueElem<'tcx> 
Lift for Operand			impl<'tcx> Lift for Operand<'tcx> 
LocalUpdater			struct LocalUpdater 
LocationMap			impl<T> LocationMap<T> where T: Default + Clone 
LocationMap			pub struct LocationMap<T> 
LogicalOp			pub enum LogicalOp 
LookupResult			pub enum LookupResult 
Marker			pub struct Marker(pub &'static str);
MatchPair			pub struct MatchPair<'pat, 'tcx:'pat> 
MatchPair			impl<'pat, 'tcx> MatchPair<'pat, 'tcx> 
MaybeInitializedLvals			impl<'a, 'tcx: 'a> MaybeInitializedLvals<'a, 'tcx> 
MaybeInitializedLvals			impl<'a, 'tcx> MaybeInitializedLvals<'a, 'tcx> 
MaybeInitializedLvals			pub struct MaybeInitializedLvals<'a, 'tcx: 'a> 
MaybeUninitializedLvals			impl<'a, 'tcx: 'a> MaybeUninitializedLvals<'a, 'tcx> 
MaybeUninitializedLvals			impl<'a, 'tcx> MaybeUninitializedLvals<'a, 'tcx> 
MaybeUninitializedLvals			pub struct MaybeUninitializedLvals<'a, 'tcx: 'a> 
MirPass for AddCallGuards			impl MirPass for AddCallGuards 
MirPass for CleanEndRegions			impl MirPass for CleanEndRegions 
MirPass for CopyPropagation			impl MirPass for CopyPropagation 
MirPass for Deaggregator			impl MirPass for Deaggregator 
MirPass for ElaborateDrops			impl MirPass for ElaborateDrops 
MirPass for EraseRegions			impl MirPass for EraseRegions 
MirPass for Inline			impl MirPass for Inline 
MirPass for InstCombine			impl MirPass for InstCombine 
MirPass for Marker			impl MirPass for Marker 
MirPass for NoLandingPads			impl MirPass for NoLandingPads 
MirPass for QualifyAndPromoteConstants			impl MirPass for QualifyAndPromoteConstants 
MirPass for SanityCheck			impl MirPass for SanityCheck 
MirPass for SimplifyBranches			impl MirPass for SimplifyBranches 
MirPass for SimplifyCfg			impl MirPass for SimplifyCfg 
MirPass for SimplifyLocals			impl MirPass for SimplifyLocals 
MirPass for TypeckMir			impl MirPass for TypeckMir 
MirPatch			impl<'tcx> MirPatch<'tcx> 
MirPatch			pub struct MirPatch<'tcx> 
MirWithFlowState			pub trait MirWithFlowState<'tcx> 
MirWithFlowState for DataflowBuilder			impl<'a, 'tcx: 'a, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>
Mirror			impl<'tcx> Mirror<'tcx> for &'tcx hir::Block 
Mirror			impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr 
Mirror			pub trait Mirror<'tcx> 
Mirror for Block			impl<'tcx> Mirror<'tcx> for Block<'tcx> 
Mirror for Expr			impl<'tcx> Mirror<'tcx> for Expr<'tcx> 
Mirror for ExprRef			impl<'tcx> Mirror<'tcx> for ExprRef<'tcx> 
Mirror for Stmt			impl<'tcx> Mirror<'tcx> for Stmt<'tcx> 
Mirror for StmtRef			impl<'tcx> Mirror<'tcx> for StmtRef<'tcx> 
Mode			enum Mode 
MoveData			impl<'a, 'tcx> MoveData<'tcx> 
MoveData			pub struct MoveData<'tcx> 
MoveDataBuilder			impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> 
MoveDataParamEnv			pub struct MoveDataParamEnv<'tcx> 
MoveOut			pub struct MoveOut 
MoveOutIndex			impl MoveOutIndex 
MovePath			pub struct MovePath<'tcx> 
MovePathError			pub enum MovePathError 
MovePathLookup			impl<'tcx> MovePathLookup<'tcx> 
MovePathLookup			pub struct MovePathLookup<'tcx> 
MovingOutStatements			impl<'a, 'tcx: 'a> MovingOutStatements<'a, 'tcx> 
MovingOutStatements			pub struct MovingOutStatements<'a, 'tcx: 'a> 
MutVisitor for ConstantPropagationVisitor			impl<'tcx> MutVisitor<'tcx> for ConstantPropagationVisitor<'tcx> 
MutVisitor for DeleteTrivialEndRegions			impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> 
MutVisitor for EraseRegionsVisitor			impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> 
MutVisitor for GlobalizeMir			impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> 
MutVisitor for InstCombineVisitor			impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor 
MutVisitor for Integrator			impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> 
MutVisitor for LocalUpdater			impl<'tcx> MutVisitor<'tcx> for LocalUpdater 
MutVisitor for MutateUseVisitor			impl<'tcx, F> MutVisitor<'tcx> for MutateUseVisitor<'tcx, F>
MutVisitor for NoLandingPads			impl<'tcx> MutVisitor<'tcx> for NoLandingPads 
MutVisitor for Promoter			impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> 
MutateUseVisitor			impl<'tcx, F> MutateUseVisitor<'tcx, F> 
MutateUseVisitor			struct MutateUseVisitor<'tcx, F> 
NoLandingPads			pub struct NoLandingPads;
NotThreadSafe			struct NotThreadSafe<T> 
OptimizationFinder			impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> 
OptimizationFinder			struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> 
OptimizationList			struct OptimizationList 
PassHook for DumpMir			impl PassHook for DumpMir 
Promoter			impl<'a, 'tcx> Promoter<'a, 'tcx> 
Promoter			struct Promoter<'a, 'tcx: 'a> 
PropagationContext			impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>
PropagationContext			struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O>
Qualif			impl<'a, 'tcx> Qualif 
Qualifier			impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> 
Qualifier			struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
QualifyAndPromoteConstants			pub struct QualifyAndPromoteConstants;
RvalueFunc			pub enum RvalueFunc 
SanityCheck			pub struct SanityCheck;
Scope			impl<'tcx> Scope<'tcx> 
Scope			pub struct Scope<'tcx> 
ScopeId			pub struct ScopeId(u32);
SimplifyBranches			impl SimplifyBranches 
SimplifyBranches			pub struct SimplifyBranches { label: String }
SimplifyCfg			impl SimplifyCfg 
SimplifyCfg			pub struct SimplifyCfg { label: String }
SimplifyLocals			pub struct SimplifyLocals;
Stmt			pub struct Stmt<'tcx> 
StmtKind			pub enum StmtKind<'tcx> 
StmtRef			pub enum StmtRef<'tcx> 
Sync for NotThreadSafe			unsafe impl<T> Sync for NotThreadSafe<T> {}
TempCollector			struct TempCollector<'tcx> 
TempState			impl TempState 
TempState			pub enum TempState 
Test			pub struct Test<'tcx> 
Test			enum Test 
Test			impl Test 
TestKind			enum TestKind<'tcx> 
ToRef			impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx Option<T>
ToRef			impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx P<[T]>
ToRef			impl<'a, 'tcx: 'a, T, U> ToRef for &'tcx Vec<T>
ToRef			impl<'a, 'tcx: 'a> ToRef for &'tcx P<hir::Expr> 
ToRef			impl<'a, 'tcx: 'a> ToRef for &'tcx hir::Expr 
ToRef			pub trait ToRef 
ToRef for Expr			impl<'a, 'tcx: 'a> ToRef for Expr<'tcx> 
TypeChecker			impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> 
TypeChecker			pub struct TypeChecker<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
TypeVerifier			impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> 
TypeVerifier			struct TypeVerifier<'a, 'b: 'a, 'gcx: 'b+'tcx, 'tcx: 'b> 
TypeckMir			impl TypeckMir 
TypeckMir			pub struct TypeckMir;
Unwind			impl Unwind 
Unwind			pub enum Unwind 
Use			pub struct Use<'tcx> 
Visitor for DeclMarker			impl<'tcx> Visitor<'tcx> for DeclMarker 
Visitor for DefUseFinder			impl<'tcx> Visitor<'tcx> for DefUseFinder<'tcx> 
Visitor for GatherBorrowedRegions			impl<'tcx> Visitor<'tcx> for GatherBorrowedRegions 
Visitor for GatherCtors			    impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> 
Visitor for OptimizationFinder			impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> 
Visitor for Qualifier			impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> 
Visitor for TempCollector			impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> 
Visitor for TypeVerifier			impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> 
abs_domain			mod abs_domain;
add			    fn add(&mut self, qualif: Qualif) 
add_assign			    pub fn add_assign(&mut self, loc: Location, lv: Lvalue<'tcx>, rv: Rvalue<'tcx>) 
add_call_guards			pub fn add_call_guards(mir: &mut Mir) 
add_call_guards			pub mod add_call_guards;
add_cases_to_switch			    pub fn add_cases_to_switch<'pat>(&mut self,
add_statement			    pub fn add_statement(&mut self, loc: Location, stmt: StatementKind<'tcx>) 
add_type			    fn add_type(&mut self, ty: Ty<'tcx>) 
add_variants_to_switch			    pub fn add_variants_to_switch<'pat>(&mut self,
adt_switch_block			    fn adt_switch_block(&mut self,
all_fields			    pub fn all_fields(&mut self, adt_def: &ty::AdtDef, variant_index: usize) -> Vec<Field> 
analyze			    pub fn analyze(&mut self, mir: &Mir<'tcx>) 
and			    fn and<T>(self, v: T) -> BlockAnd<T> 
and			    fn and<T>(self, v: T) -> BlockAnd<T>;
and			                                  struct and enum constructors",
apply			    pub fn apply(self, mir: &mut Mir<'tcx>) 
apply_adjustment			fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
apply_location			    fn apply_location<'a,'tcx>(&mut self,
arg_index			    fn arg_index(&self, arg: Local) -> Option<usize> 
args_and_body			    fn args_and_body(&mut self,
as_constant			    pub fn as_constant<M>(&mut self, expr: M) -> Constant<'tcx>
as_constant			mod as_constant;
as_local_operand			    pub fn as_local_operand<M>(&mut self, block: BasicBlock, expr: M)
as_local_rvalue			    pub fn as_local_rvalue<M>(&mut self, block: BasicBlock, expr: M)
as_lvalue			    pub fn as_lvalue<M>(&mut self,
as_lvalue			mod as_lvalue;
as_operand			    pub fn as_operand<M>(&mut self,
as_operand			mod as_operand;
as_rvalue			    pub fn as_rvalue<M>(&mut self, block: BasicBlock, scope: Option<CodeExtent>, expr: M)
as_rvalue			mod as_rvalue;
as_temp			    pub fn as_temp<M>(&mut self,
as_temp			mod as_temp;
assert			    pub fn assert(&mut self, block: BasicBlock,
assert_iscleanup			    fn assert_iscleanup(&mut self,
assign			    fn assign(&mut self, dest: Local, rvalue: Rvalue<'tcx>, span: Span) 
assign			    fn assign(&mut self, dest: &Lvalue<'tcx>, location: Location) 
assign			    fn assign(&self, lhs: &Lvalue<'tcx>, rhs: Rvalue<'tcx>) -> Statement<'tcx> 
ast_block			    pub fn ast_block(&mut self,
ast_block_stmts			    fn ast_block_stmts(&mut self,
bin_op			fn bin_op(op: hir::BinOp_) -> BinOp 
bind_and_guard_matched_candidate			    fn bind_and_guard_matched_candidate<'pat>(&mut self,
bind_matched_candidate			    fn bind_matched_candidate(&mut self,
bits_per_block			    fn bits_per_block(&self) -> usize 
bits_per_block			    fn bits_per_block(&self) -> usize;
bits_per_block			    pub fn bits_per_block(&self) -> usize { self.bits_per_block }
block			mod block;
block			mod block;
block_data			    pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> 
block_data_mut			    pub fn block_data_mut(&mut self, blk: BasicBlock) -> &mut BasicBlockData<'tcx> 
bool_ty			    pub fn bool_ty(&mut self) -> Ty<'tcx> 
bottom_value			    fn bottom_value() -> bool 
bottom_value			    fn bottom_value() -> bool;
box_free_block			    fn box_free_block<'a>(
build			mod build;
build_adt_ctor			pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,
build_binary_op			    pub fn build_binary_op(&mut self, mut block: BasicBlock,
build_call_shim			fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,
build_diverge_scope			fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
build_drop			    pub fn build_drop(&mut self,
build_drop_and_replace			    pub fn build_drop_and_replace(&mut self,
build_drop_shim			fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,
build_free			fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
build_scope_drops			fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,
build_sets			    fn build_sets(&mut self) 
cached_block			    fn cached_block(&self) -> Option<BasicBlock> 
candidate_after_slice_test			    fn candidate_after_slice_test<'pat>(&mut self,
candidate_after_variant_switch			    fn candidate_after_variant_switch<'pat>(&mut self,
candidate_without_match_pair			    fn candidate_without_match_pair<'pat>(&mut self,
capture_freevar			fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
cast_box_free_arg			    fn cast_box_free_arg(&self, arg: Lvalue<'tcx>, ptr_ty: Ty<'tcx>,
category			mod category;
cfg			mod cfg;
check_box_free_inputs			    fn check_box_free_inputs(&mut self,
check_call_dest			    fn check_call_dest(&mut self,
check_call_inputs			    fn check_call_inputs(&mut self,
check_iscleanup			    fn check_iscleanup(&mut self, mir: &Mir<'tcx>, block: &BasicBlockData<'tcx>)
check_local			    fn check_local(&mut self, mir: &Mir<'gcx>, local: Local, local_decl: &LocalDecl<'gcx>) 
check_overflow			    pub fn check_overflow(&self) -> bool 
check_stmt			    fn check_stmt(&mut self, mir: &Mir<'tcx>, stmt: &Statement<'tcx>) 
check_terminator			    fn check_terminator(&mut self,
chunked_present_left			        fn chunked_present_left<W:io::Write>(w: &mut W,
clean_end_regions			pub mod clean_end_regions;
clear_drop_flag			    fn clear_drop_flag(&mut self, _location: Location, _path: Self::Path, _mode: DropFlagMode) 
clear_drop_flag			    fn clear_drop_flag(&mut self, loc: Location, path: Self::Path, mode: DropFlagMode) 
clear_drop_flag			    fn clear_drop_flag(&mut self, location: Location, path: Self::Path, mode: DropFlagMode);
clone			    fn clone(&self) -> Self { Bits { bits: self.bits.clone() } }
closure_self_ty			fn closure_self_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
collapse_goto_chain			    fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) 
collect_drop_flags			    fn collect_drop_flags(&mut self)
collect_temps			pub fn collect_temps(mir: &Mir, rpo: &mut ReversePostorder) -> IndexVec<Local, TempState> 
comment			fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String 
compare			    fn compare(&mut self,
complete_drop			    fn complete_drop<'a>(&mut self,
const_eval_literal			    pub fn const_eval_literal(&mut self, e: &hir::Expr) -> Literal<'tcx> 
constant			    fn constant(src_constant: &Constant<'tcx>) -> Option<Action<'tcx>> 
constant_bool			    fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> 
constant_usize			    fn constant_usize(&self, val: u16) -> Operand<'tcx> 
construct_const			fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,
construct_error			fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,
construct_fn			fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,
convert_arm			fn convert_arm<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> 
convert_path_expr			fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
convert_var			fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
copy_prop			pub mod copy_prop;
create_constructor_shim			fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
create_drop_flag			    fn create_drop_flag(&mut self, index: MovePathIndex, span: Span) 
create_move_path			    fn create_move_path(&mut self, lval: &Lvalue<'tcx>) 
cx			pub mod cx;
dataflow			    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug 
dataflow			    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug;
dataflow			pub mod dataflow;
dataflow_path			fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf 
deaggregator			pub mod deaggregator;
declare_binding			    fn declare_binding(&mut self,
declare_bindings			    pub fn declare_bindings(&mut self,
def_count			    pub fn def_count(&self) -> usize 
def_count_not_including_drop			    pub fn def_count_not_including_drop(&self) -> usize 
def_use			pub mod def_use;
deny_drop			    fn deny_drop(&self) 
deref_subpath			    fn deref_subpath(&self, _path: Self::Path) -> Option<Self::Path> 
deref_subpath			    fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path> 
deref_subpath			    fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path>;
dest_needs_borrow			                fn dest_needs_borrow(lval: &Lvalue) -> bool 
destructor_call_block			    fn destructor_call_block<'a>(&mut self, (succ, unwind): (BasicBlock, Unwind))
diagnostics			pub mod diagnostics;
diverge_cleanup			    pub fn diverge_cleanup(&mut self, span: Span) -> Option<BasicBlock> 
dot::GraphWalk for Graph			impl<'a, 'tcx, MWF, P> dot::GraphWalk<'a> for Graph<'a, 'tcx, MWF, P>
dot::Labeller for Graph			impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>
downcast_subpath			    fn downcast_subpath(&self, _path: Self::Path, _variant: usize) -> Option<Self::Path> 
downcast_subpath			    fn downcast_subpath(&self, path: Self::Path, variant: usize) -> Option<Self::Path> 
downcast_subpath			    fn downcast_subpath(&self, path: Self::Path, variant: usize) -> Option<Self::Path>;
drop			    fn drop(&mut self) {}
drop_block			    fn drop_block<'a>(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock 
drop_flag			    fn drop_flag(&mut self, index: MovePathIndex) -> Option<Lvalue<'tcx>> 
drop_flag_effects			mod drop_flag_effects;
drop_flag_reset_block			    fn drop_flag_reset_block(&mut self,
drop_flag_test_block			    fn drop_flag_test_block(&mut self,
drop_flags_for_args			    fn drop_flags_for_args(&mut self) 
drop_flags_for_fn_rets			    fn drop_flags_for_fn_rets(&mut self) 
drop_flags_for_locs			    fn drop_flags_for_locs(&mut self) 
drop_flags_on_init			    fn drop_flags_on_init(&mut self) 
drop_halfladder			    fn drop_halfladder(&mut self,
drop_ladder			    fn drop_ladder<'a>(&mut self,
drop_ladder_bottom			    fn drop_ladder_bottom(&mut self) -> (BasicBlock, Unwind) 
drop_loop			    fn drop_loop(&mut self,
drop_loop_pair			    fn drop_loop_pair(&mut self, ety: Ty<'tcx>, ptr_based: bool) -> BasicBlock 
drop_style			    fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle 
drop_style			    fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle 
drop_style			    fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;
drop_subpath			    fn drop_subpath(&mut self,
dump_enabled			pub fn dump_enabled<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
dump_matched_mir_node			fn dump_matched_mir_node<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
dump_mir			pub mod dump_mir;
dump_mir			pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
dump_mir_def_ids			pub fn dump_mir_def_ids(tcx: TyCtxt, single: Option<DefId>) -> Vec<DefId> 
each_bit			    fn each_bit<F>(&self, words: &IdxSet<O::Idx>, mut f: F)
each_block			fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
edges			    fn edges(&self) -> dot::Edges<Edge> 
elaborate			    fn elaborate(mut self) -> MirPatch<'tcx>
elaborate_drop			    pub fn elaborate_drop<'a>(&mut self, bb: BasicBlock) 
elaborate_drop			pub fn elaborate_drop<'b, 'tcx, D>(
elaborate_drops			    fn elaborate_drops(&mut self)
elaborate_drops			pub mod elaborate_drops;
elaborate_drops			pub mod elaborate_drops;
elaborate_replace			    fn elaborate_replace(
elaborated_drop_block			    fn elaborated_drop_block<'a>(&mut self) -> BasicBlock 
emit_mir			pub fn emit_mir<'a, 'tcx>(
eq_types			    fn eq_types(&mut self, span: Span, a: Ty<'tcx>, b: Ty<'tcx>)
erase_regions			pub mod erase_regions;
error			    fn error(&mut self) -> Ty<'tcx> 
error_simplifyable			    fn error_simplifyable<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> ! 
escape			fn escape<T: Debug>(t: &T) -> String 
eval_into			    fn eval_into<'a, 'gcx>(self,
exit_scope			    pub fn exit_scope(&mut self,
expr			mod expr;
expr			mod expr;
expr_as_constant			    fn expr_as_constant(&mut self, expr: Expr<'tcx>) -> Constant<'tcx> 
expr_as_lvalue			    fn expr_as_lvalue(&mut self,
expr_as_operand			    fn expr_as_operand(&mut self,
expr_as_rvalue			    fn expr_as_rvalue(&mut self,
expr_as_temp			    fn expr_as_temp(&mut self,
expr_into_pattern			    pub fn expr_into_pattern(&mut self,
extent_of_return_scope			    pub fn extent_of_return_scope(&self) -> CodeExtent 
false_literal			    pub fn false_literal(&mut self) -> Literal<'tcx> 
fatal_const_eval_err			    pub fn fatal_const_eval_err(&self,
field_match_pairs			    pub fn field_match_pairs<'pat>(&mut self,
field_refs			fn field_refs<'tcx>(variant: &'tcx VariantDef,
field_subpath			    fn field_subpath(&self, _path: Self::Path, _field: Field) -> Option<Self::Path> 
field_subpath			    fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> 
field_subpath			    fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path>;
field_ty			    fn field_ty(&mut self,
finalize			    fn finalize(self) -> MoveData<'tcx> 
find			    pub fn find(&self, lval: &Lvalue<'tcx>) -> LookupResult 
find_breakable_scope			    pub fn find_breakable_scope(&mut self,
find_dead_unwinds			fn find_dead_unwinds<'a, 'tcx>(
find_drop_implementation_method_span			    fn find_drop_implementation_method_span(&self) -> Option<Span> 
finish			    fn finish(self,
flow_state			    fn flow_state(&self) -> &DataflowState<Self::BD> { &self.flow_state.flow_state }
flow_state			    fn flow_state(&self) -> &DataflowState<Self::BD>;
fmt			                fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			            impl fmt::Debug for 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> 
fmt			    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for DropShimElaborator			impl<'a, 'tcx> fmt::Debug for DropShimElaborator<'a, 'tcx> 
fmt::Debug for Elaborator			impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> 
fmt::Debug for MoveOut			impl fmt::Debug for MoveOut 
fmt::Debug for MovePath			impl<'tcx> fmt::Debug for MovePath<'tcx> 
fmt::Display for Disambiguator			impl fmt::Display for Disambiguator 
fmt::Display for Mode			impl fmt::Display for Mode 
for_block			    pub fn for_block(&mut self, block_idx: usize) -> BlockSets<E> 
gather_move			    fn gather_move(&mut self, loc: Location, lval: &Lvalue<'tcx>) 
gather_moves			    pub fn gather_moves(mir: &Mir<'tcx>,
gather_moves			fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>,
gather_operand			    fn gather_operand(&mut self, loc: Location, operand: &Operand<'tcx>) 
gather_rvalue			    fn gather_rvalue(&mut self, loc: Location, rvalue: &Rvalue<'tcx>) 
gather_statement			    fn gather_statement(&mut self, loc: Location, stmt: &Statement<'tcx>) 
gather_terminator			    fn gather_terminator(&mut self, loc: Location, term: &Terminator<'tcx>) 
gen			    fn gen(&mut self, e: &E) 
gen_set_for			    pub fn gen_set_for(&self, block_idx: usize) -> &IdxSet<E> 
get_aggregate_statement_index			fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,
get_drop_flag			    fn get_drop_flag(&mut self, _path: Self::Path) -> Option<Operand<'tcx>> 
get_drop_flag			    fn get_drop_flag(&mut self, path: Self::Path) -> Option<Operand<'tcx>> 
get_drop_flag			    fn get_drop_flag(&mut self, path: Self::Path) -> Option<Operand<'tcx>>;
get_unit_temp			    fn get_unit_temp(&mut self) -> Lvalue<'tcx> 
graph_id			    fn graph_id(&self) -> dot::Id 
graphviz			mod graphviz;
graphviz			mod graphviz;
hair			mod hair;
impls			mod impls;
in_breakable_scope			    pub fn in_breakable_scope<F, R>(&mut self,
in_opt_scope			    pub fn in_opt_scope<F, R>(&mut self,
in_scope			    pub fn in_scope<F, R>(&mut self,
index			    fn index(self) -> usize 
index			                fn index(self) -> usize 
index			    fn index(&self, index: Location) -> &Self::Output 
index_mut			    fn index_mut(&mut self, index: Location) -> &mut Self::Output 
initialization_data_at			    fn initialization_data_at(&self, loc: Location) -> InitializationData 
inline			pub mod inline;
inline_call			    fn inline_call(&self,
instcombine			pub mod instcombine;
interpret_set			    pub fn interpret_set<'c, P>(&self,
into			mod into;
into			    pub fn into<E>(&mut self,
into			mod into;
into_expr			    pub fn into_expr(&mut self,
into_option			    fn into_option(self) -> Option<BasicBlock> 
invalidate_cache			    fn invalidate_cache(&mut self, unwind: bool) 
is_box_free			    fn is_box_free(&self, operand: &Operand<'tcx>) -> bool 
is_cleanup			    fn is_cleanup(self) -> bool 
is_mir_available			fn is_mir_available<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool 
is_patched			    pub fn is_patched(&self, bb: BasicBlock) -> bool 
is_promotable			    pub fn is_promotable(&self) -> bool 
is_rustc_peek			fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_switch_ty			fn is_switch_ty<'tcx>(ty: Ty<'tcx>) -> bool 
is_terminal_path			    fn is_terminal_path<'a, 'tcx>(
join			    fn join(&self, pred1: usize, pred2: usize) -> usize 
join_otherwise_blocks			    fn join_otherwise_blocks(&mut self,
kill			    fn kill(&mut self, e: &E) 
kill_set_for			    pub fn kill_set_for(&self, block_idx: usize) -> &IdxSet<E> 
lift			    fn lift(&self) -> Self::Abstract { AbstractOperand }
lift			    fn lift(&self) -> Self::Abstract 
lift			    fn lift(&self) -> Self::Abstract;
literal_operand			    pub fn literal_operand(&mut self,
local_copy			    fn local_copy(mir: &Mir<'tcx>, def_use_analysis: &DefUseAnalysis, src_lvalue: &Lvalue<'tcx>)
local_decls_for_sig			fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)
local_info			    pub fn local_info(&self, local: Local) -> &Info<'tcx> 
local_info_mut			    pub fn local_info_mut(&mut self, local: Local) -> &mut Info<'tcx> 
local_scope			    pub fn local_scope(&self) -> Option<CodeExtent> 
lookup_set_for			    fn lookup_set_for<'a>(&self, sets: &'a Bits<E>, block_idx: usize) -> &'a IdxSet<E> 
lvalue_contents_drop_state_cannot_differ			fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
lvalue_into_pattern			    pub fn lvalue_into_pattern(&mut self,
lvalue_mut_info			    fn lvalue_mut_info(&mut self, lvalue: &Lvalue<'tcx>) -> Option<&mut Info<'tcx>> 
lvalue_ty			    fn lvalue_ty(&self, lvalue: &Lvalue<'tcx>) -> Ty<'tcx> 
main			fn main() 
make_call_args			    fn make_call_args(&self, args: Vec<Operand<'tcx>>,
make_local_map			fn make_local_map<'tcx, I: Idx, V>(vec: &mut IndexVec<I, V>, mask: BitVector) -> Vec<usize> 
make_mirror			    fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Block<'tcx> 
make_mirror			    fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> 
make_mirror			    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Block<'tcx> 
make_mirror			    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> 
make_mirror			    fn make_mirror<'a, 'gcx>(self, _: &mut Cx<'a, 'gcx, 'tcx>) -> Stmt<'tcx> 
make_mirror			    fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Self::Output;
make_mirror			    fn make_mirror<'a, 'gcx>(self, hir: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> 
make_mirror_unadjusted			fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
make_shim			fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,
map			    fn map<F>(self, f: F) -> Self where F: FnOnce(BasicBlock) -> BasicBlock 
match_candidates			    fn match_candidates<'pat>(&mut self,
match_expr			    pub fn match_expr(&mut self,
matches			mod matches;
merge_successor			    fn merge_successor(&mut self,
method_callee			fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
minval_literal			    fn minval_literal(&mut self, span: Span, ty: ty::Ty<'tcx>) -> Operand<'tcx> 
mir			    fn mir(&self) -> &Mir<'tcx> { self.flow_state.mir() }
mir			    fn mir(&self) -> &Mir<'tcx>;
mir			    pub fn mir(&self) -> &'a Mir<'tcx> { self.mir }
mir			    fn mir(&self) -> &'a Mir<'tcx> { self.mir }
mir			    fn mir(&self) -> &'a Mir<'tcx> 
mir			    fn mir(&self) -> &'a Mir<'tcx>;
mir_build			pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'tcx> 
mir_const			fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> 
mir_const_qualif			fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
mir_keys			fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)
mir_validated			fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> 
mirbug			fn mirbug(tcx: TyCtxt, span: Span, msg: &str) 
mirror			    pub fn mirror<M: Mirror<'tcx>>(&mut self, ast: M) -> M::Output 
mirror_stmts			fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
misc			mod misc;
misc			    fn misc(&self, span: Span) -> traits::ObligationCause<'tcx> 
move_data			    fn move_data(&self) -> &MoveData<'tcx> { &self.mdpe.move_data }
move_data			    fn move_data(&self) -> &MoveData<'tcx>;
move_data			    fn move_data(&self) -> &'b MoveData<'tcx> { &self.env.move_data }
move_path_children_matching			pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,
move_path_for			    fn move_path_for(&mut self, lval: &Lvalue<'tcx>)
move_path_for_projection			    fn move_path_for_projection(&mut self,
move_path_index			    pub fn move_path_index(&self, move_data: &MoveData) -> MovePathIndex 
move_paths			pub mod move_paths;
move_paths_for_fields			    fn move_paths_for_fields(&self,
mutate_defs_and_uses			    fn mutate_defs_and_uses<F>(&self, local: Local, mir: &mut Mir<'tcx>, mut callback: F)
name			    fn name() -> &'static str { "definite_init" }
name			    fn name() -> &'static str { "maybe_init" }
name			    fn name() -> &'static str { "maybe_uninit" }
name			    fn name() -> &'static str { "moving_out" }
name			    fn name() -> &'static str;
name			    fn name<'a>(&'a self) -> Cow<'a, str> 
name			    fn name<'a>(&'a self) -> Cow<'a, str> 
name			    fn name<'a>(&'a self) -> Cow<'a, str> 
needs_drop			    pub fn needs_drop(&mut self, ty: Ty<'tcx>) -> bool 
neg_1_literal			    fn neg_1_literal(&mut self, span: Span, ty: ty::Ty<'tcx>) -> Operand<'tcx> 
nest			    fn nest<F: FnOnce(&mut Self)>(&mut self, f: F) 
nested_visit_map			        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, 'tcx> 
new			    pub fn new(lvalue: Lvalue<'tcx>, pattern: &'pat Pattern<'tcx>) -> MatchPair<'pat, 'tcx> 
new			    fn new(hir: Cx<'a, 'gcx, 'tcx>,
new			    fn new(index: usize) -> ScopeId 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    fn new(bits: IdxSetBuf<E>) -> Self 
new			    pub fn new(_tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			                fn new(idx: usize) -> Self 
new			    fn new(mir: &'a Mir<'tcx>,
new			    fn new(mir: &Mir) -> Self 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>, src: MirSource) -> Cx<'a, 'gcx, 'tcx> 
new			    fn new(dest_local: Local, constant: Constant<'tcx>)
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self 
new			    fn new(mir: &'b Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> OptimizationFinder<'b, 'a, 'tcx> 
new			    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    pub fn new(label: &str) -> Self 
new			    pub fn new(mir: &'a mut Mir<'tcx>) -> Self 
new			    pub fn new(label: &str) -> Self 
new			    fn new(cx: &'a mut TypeChecker<'b, 'gcx, 'tcx>, mir: &'a Mir<'tcx>) -> Self 
new			    fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,
new			    pub fn new() -> Self 
new			    fn new() -> Info<'tcx> 
new			    fn new(query: Local, callback: F, _: &Mir<'tcx>)
new			    pub fn new(mir: &Mir<'tcx>) -> DefUseAnalysis<'tcx> 
new			    pub fn new(mir: &Mir<'tcx>) -> Self 
new_block			    fn new_block(&mut self) -> BasicBlock 
new_block			    fn new_block<'a>(&mut self,
new_block			    pub fn new_block(&mut self, data: BasicBlockData<'tcx>) -> BasicBlock 
new_move_path			    fn new_move_path(move_paths: &mut IndexVec<MovePathIndex, MovePath<'tcx>>,
new_temp			    fn new_temp(&mut self, ty: Ty<'tcx>) -> Local 
new_temp			    pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local 
new_visibility_scope			    pub fn new_visibility_scope(&mut self, span: Span) -> VisibilityScope 
no_landing_pads			pub mod no_landing_pads;
no_landing_pads			pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) 
node			fn node(block: BasicBlock) -> String 
node_id			    fn node_id(&self) -> NodeId { self.node_id }
node_id			    fn node_id(&self) -> NodeId;
node_id			    fn node_id(&self, n: &Node) -> dot::Id 
node_label			    fn node_label(&self, n: &Node) -> dot::LabelText 
node_shape			    fn node_shape(&self, _n: &Node) -> Option<dot::LabelText> 
nodes			    fn nodes(&self) -> dot::Nodes<Node> 
normalize			    fn normalize<T>(&mut self, value: &T) -> T
not_const			    fn not_const(&mut self) 
num_variants			    pub fn num_variants(&mut self, adt_def: &ty::AdtDef) -> usize 
of			    pub fn of<'tcx>(ek: &ExprKind<'tcx>) -> Option<Category> 
on_all_children_bits			    fn on_all_children_bits<'a, 'tcx, F>(
on_entry_set_for			    pub fn on_entry_set_for(&self, block_idx: usize) -> &IdxSet<E> 
on_mir_pass			    fn on_mir_pass<'a, 'tcx: 'a>(&self,
open_drop			    fn open_drop<'a>(&mut self) -> BasicBlock 
open_drop_for_adt			    fn open_drop_for_adt<'a>(&mut self, adt: &'tcx ty::AdtDef, substs: &'tcx Substs<'tcx>)
open_drop_for_adt_contents			    fn open_drop_for_adt_contents(&mut self, adt: &'tcx ty::AdtDef,
open_drop_for_array			    fn open_drop_for_array(&mut self, ety: Ty<'tcx>) -> BasicBlock 
open_drop_for_box			    fn open_drop_for_box<'a>(&mut self, ty: Ty<'tcx>) -> BasicBlock
open_drop_for_multivariant			    fn open_drop_for_multivariant(&mut self, adt: &'tcx ty::AdtDef,
open_drop_for_tuple			    fn open_drop_for_tuple<'a>(&mut self, tys: &[Ty<'tcx>])
optimized_mir			fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> 
outgoing			fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> 
overloaded_lvalue			fn overloaded_lvalue<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
overloaded_operator			fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
param_env			    fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }
param_env			    fn param_env(&self) -> ty::ParamEnv<'tcx> 
param_env			    fn param_env(&self) -> ty::ParamEnv<'tcx>;
patch			    fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }
patch			    fn patch(&mut self) -> &mut MirPatch<'tcx> 
patch			    fn patch(&mut self) -> &mut MirPatch<'tcx>;
patch			pub mod patch;
patch_terminator			    pub fn patch_terminator(&mut self, block: BasicBlock, new: TerminatorKind<'tcx>) 
perform			    fn perform(self,
perform_test			    pub fn perform_test(&mut self,
pop_scope			    pub fn pop_scope(&mut self,
post_dataflow_instrumentation			    fn post_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>
pre_dataflow_instrumentation			    fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>
prefix_slice_suffix			    pub fn prefix_slice_suffix<'pat>(&mut self,
pretty			mod pretty;
promote_candidate			    fn promote_candidate(mut self, candidate: Candidate) 
promote_candidates			pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,
promote_consts			pub mod promote_consts;
promote_temp			    fn promote_temp(&mut self, temp: Local) -> Local 
propagate			    fn propagate(&mut self) 
propagate_bits_into_entry_set_for			    fn propagate_bits_into_entry_set_for(&mut self,
propagate_bits_into_graph_successors_of			    fn propagate_bits_into_graph_successors_of(
propagate_call_return			    fn propagate_call_return(&self,
propagate_call_return			    fn propagate_call_return(&self,
provide			pub fn provide(providers: &mut Providers) 
provide			pub fn provide(providers: &mut Providers) 
provide			pub fn provide(providers: &mut Providers) 
push			    pub fn push(&mut self, block: BasicBlock, statement: Statement<'tcx>) 
push_assign			    pub fn push_assign(&mut self,
push_assign_constant			    pub fn push_assign_constant(&mut self,
push_assign_unit			    pub fn push_assign_unit(&mut self,
push_end_region			    pub fn push_end_region(&mut self,
push_scope			    pub fn push_scope(&mut self, extent: CodeExtent) 
push_usize			    pub fn push_usize(&mut self,
qualify_const			    fn qualify_const(&mut self) -> Qualif 
qualify_consts			pub mod qualify_consts;
register_infer_ok_obligations			    pub fn register_infer_ok_obligations<T>(&mut self, infer_ok: InferOk<'tcx, T>) -> T 
remove_dead_blocks			pub fn remove_dead_blocks(mir: &mut Mir) 
replace_all_defs_and_uses_with			    pub fn replace_all_defs_and_uses_with(&self,
reset			    fn reset(&mut self, bits: &mut IdxSet<BD::Idx>) 
restrict			    fn restrict(&mut self, ty: Ty<'tcx>,
results			    pub fn results(self) -> DataflowResults<O> 
resume_block			    pub fn resume_block(&self) -> BasicBlock 
return_block			    fn return_block(&mut self) -> BasicBlock 
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass(&self, caller_mir: &mut Mir<'tcx>) 
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_pass			    fn run_pass<'a, 'tcx>(&self,
run_suite			fn run_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
rustc_peek			pub mod rustc_peek;
sanitize_lvalue			    fn sanitize_lvalue(&mut self, lvalue: &Lvalue<'tcx>, location: Location) -> LvalueTy<'tcx> 
sanitize_projection			    fn sanitize_projection(&mut self,
sanitize_type			    fn sanitize_type(&mut self, parent: &fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> 
sanity_check_via_rustc_peek			pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
schedule_box_free			    pub fn schedule_box_free(&mut self,
schedule_drop			    pub fn schedule_drop(&mut self,
schedule_drop_for_binding			    pub fn schedule_drop_for_binding(&mut self, var: NodeId, span: Span) 
scope			mod scope;
set_drop_flag			    fn set_drop_flag(&mut self, loc: Location, path: MovePathIndex, val: DropFlagState) 
sets			    pub fn sets(&self) -> &AllSets<O::Idx> 
shim			mod shim;
should_inline			    fn should_inline(&self,
simplify			mod simplify;
simplify			pub mod simplify;
simplify			    pub fn simplify(mut self) 
simplify_branch			    fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool 
simplify_branches			pub mod simplify_branches;
simplify_candidate			    pub fn simplify_candidate<'pat>(&mut self,
simplify_cfg			pub fn simplify_cfg(mir: &mut Mir) 
simplify_match_pair			    fn simplify_match_pair<'pat>(&mut self,
simplify_unwind			    fn simplify_unwind(&mut self, terminator: &mut Terminator<'tcx>) -> bool 
sort_candidate			    pub fn sort_candidate<'pat>(&mut self,
source			    fn source(&self, edge: &Edge) -> Node 
source_info			    fn source_info(&self, span: Span) -> SourceInfo 
source_info			    pub fn source_info(&self, span: Span) -> SourceInfo 
source_info_for_index			    pub fn source_info_for_index(data: &BasicBlockData, loc: Location) -> SourceInfo 
source_info_for_location			    pub fn source_info_for_location(&self, mir: &Mir, loc: Location) -> SourceInfo 
start_block_effect			    fn start_block_effect(&self, _sets: &mut BlockSets<MoveOutIndex>) 
start_block_effect			    fn start_block_effect(&self, sets: &mut BlockSets<MovePathIndex>) 
start_block_effect			    fn start_block_effect(&self, sets: &mut BlockSets<MovePathIndex>)
start_block_effect			    fn start_block_effect(&self, sets: &mut BlockSets<Self::Idx>);
start_new_block			    pub fn start_new_block(&mut self) -> BasicBlock 
start_new_cleanup_block			    pub fn start_new_cleanup_block(&mut self) -> BasicBlock 
state			    fn state(&self, path: MovePathIndex) -> (bool, bool) 
statement_effect			    fn statement_effect(&self,
statement_effect			    fn statement_effect(&self,
statement_like			    fn statement_like(&mut self) 
stmt			mod stmt;
stmt_expr			    pub fn stmt_expr(&mut self, mut block: BasicBlock, expr: Expr<'tcx>) -> BlockAnd<()> 
storage_live_binding			    pub fn storage_live_binding(&mut self, block: BasicBlock, var: NodeId, span: Span)
strip_nops			    fn strip_nops(&mut self) 
sub_types			    fn sub_types(&mut self, sub: Ty<'tcx>, sup: Ty<'tcx>)
tables			    pub fn tables(&self) -> &'a ty::TypeckTables<'gcx> 
target			    fn target(&self, edge: &Edge) -> Node 
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> { self.tcx }
tcx			    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> 
tcx			    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx>;
tcx			    fn tcx(&self) -> ty::TyCtxt<'b, 'tcx, 'tcx> 
temp			    pub fn temp(&mut self, ty: Ty<'tcx>, span: Span) -> Lvalue<'tcx> 
temp_decl			fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl 
terminate			    pub fn terminate(&mut self,
terminator_effect			    fn terminator_effect(&self,
terminator_effect			    fn terminator_effect(&self,
terminator_loc			    fn terminator_loc(&mut self, bb: BasicBlock) -> Location 
terminator_loc			    pub fn terminator_loc(&self, mir: &Mir<'tcx>, bb: BasicBlock) -> Location 
test			mod test;
test			    pub fn test<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> Test<'tcx> 
test			    fn test(&self) -> i32 
to_borrow_kind			fn to_borrow_kind(m: hir::Mutability) -> BorrowKind 
to_expr_ref			pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,
to_ref			mod to_ref;
to_ref			    fn to_ref(self) -> ExprRef<'tcx> 
to_ref			    fn to_ref(self) -> Option<U> 
to_ref			    fn to_ref(self) -> Self::Output;
to_ref			    fn to_ref(self) -> Vec<U> 
topmost_scope			    pub fn topmost_scope(&self) -> CodeExtent 
trait_method			    pub fn trait_method(&mut self,
transform			pub mod transform;
true_literal			    pub fn true_literal(&mut self) -> Literal<'tcx> 
try_consume			    fn try_consume(&mut self) -> bool 
type_check			pub mod type_check;
type_size_of			fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
typeck_mir			    fn typeck_mir(&mut self, mir: &Mir<'gcx>) 
unelaborated_free_block			    fn unelaborated_free_block<'a>(
unit			    fn unit(self) -> BlockAnd<()> 
unit			    fn unit(self) -> BlockAnd<()>;
unit_rvalue			    pub fn unit_rvalue(&mut self) -> Rvalue<'tcx> 
unit_ty			    pub fn unit_ty(&mut self) -> Ty<'tcx> 
update_bits			    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,
update_local			    fn update_local(&self, local: Local) -> Option<Local> 
update_target			    fn update_target(&self, tgt: BasicBlock) -> BasicBlock 
use_count			    pub fn use_count(&self) -> usize 
usize_literal			    pub fn usize_literal(&mut self, value: u64) -> Literal<'tcx> 
usize_ty			    pub fn usize_ty(&mut self) -> Ty<'tcx> 
util			mod util;
util			pub mod util;
value			    pub fn value(self) -> bool 
verify_obligations			    fn verify_obligations(&mut self, mir: &Mir<'tcx>) 
visit_assign			    fn visit_assign(&mut self,
visit_basic_block_data			    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) 
visit_basic_block_data			    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) 
visit_bindings			    pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, mut f: &mut F)
visit_closure_substs			    fn visit_closure_substs(&mut self,
visit_constant			    fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) 
visit_literal			    fn visit_literal(&mut self, literal: &mut Literal<'tcx>, loc: Location) 
visit_local_decl			    fn visit_local_decl(&mut self, local_decl: &LocalDecl<'tcx>) 
visit_lvalue			    fn visit_lvalue(&mut self,
visit_lvalue			    fn visit_lvalue(&mut self,
visit_lvalue			    fn visit_lvalue(&mut self,
visit_lvalue			    fn visit_lvalue(&mut self, lval: &Lvalue<'tcx>, ctx: LvalueContext<'tcx>, loc: Location) 
visit_lvalue			    fn visit_lvalue(&mut self, lval: &mut Lvalue<'tcx>, ctx: LvalueContext<'tcx>, loc: Location) 
visit_lvalue			    fn visit_lvalue(&mut self,
visit_lvalue			    fn visit_lvalue(&mut self,
visit_mir			    fn visit_mir(&mut self, mir: &Mir<'tcx>) 
visit_operand			    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) 
visit_operand			    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) 
visit_operand			    fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) 
visit_rvalue			    fn visit_rvalue(&mut self,
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) 
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) 
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) 
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) 
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) 
visit_source_info			    fn visit_source_info(&mut self, source_info: &SourceInfo) 
visit_source_info			    fn visit_source_info(&mut self, source_info: &SourceInfo) 
visit_span			    fn visit_span(&mut self, span: &Span) 
visit_statement			    fn visit_statement(&mut self,
visit_statement			    fn visit_statement(&mut self,
visit_statement			    fn visit_statement(&mut self, bb: BasicBlock, statement: &Statement<'tcx>, location: Location) 
visit_substs			    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) 
visit_substs			    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>) 
visit_terminator			    fn visit_terminator(&mut self,
visit_terminator			    fn visit_terminator(&mut self,
visit_terminator_kind			    fn visit_terminator_kind(&mut self, block: BasicBlock,
visit_terminator_kind			    fn visit_terminator_kind(&mut self,
visit_ty			    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) 
visit_ty			    fn visit_ty(&mut self, ty: &mut Ty<'tcx>) 
visit_variant_data			        fn visit_variant_data(&mut self,
visit_visibility_scope			    fn visit_visibility_scope(&mut self, scope: &mut VisibilityScope) 
walk_cfg			    fn walk_cfg(&mut self, in_out: &mut IdxSet<BD::Idx>) 
write_basic_block			fn write_basic_block(tcx: TyCtxt,
write_edges			fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> 
write_graph_label			fn write_graph_label<'a, 'tcx, W: Write>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
write_mir_fn			pub fn write_mir_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
write_mir_graphviz			pub fn write_mir_graphviz<'a, 'tcx, W>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
write_mir_intro			fn write_mir_intro<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
write_mir_pretty			pub fn write_mir_pretty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
write_mir_sig			fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write)
write_node			fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> 
write_node_label			pub fn write_node_label<W: Write, INIT, FINI>(block: BasicBlock,
write_scope_tree			fn write_scope_tree(tcx: TyCtxt,
write_temp_decls			fn write_temp_decls(mir: &Mir, w: &mut Write) -> io::Result<()> 
zero_literal			    pub fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> 
zero_to_one			fn zero_to_one(bitvec: &mut [usize], move_index: MoveOutIndex) 
