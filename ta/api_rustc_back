Arch			impl Arch 
Arch			pub enum Arch 
Default for TargetOptions			impl Default for TargetOptions 
Drop for DynamicLibrary			impl Drop for DynamicLibrary 
Drop for TempDir			impl Drop for TempDir 
DynamicLibrary			impl DynamicLibrary 
DynamicLibrary			pub struct DynamicLibrary 
FreeLibrary			        fn FreeLibrary(handle: HMODULE) -> BOOL;
GetModuleHandleExW			        fn GetModuleHandleExW(dwFlags: DWORD,
GetProcAddress			        fn GetProcAddress(handle: HMODULE,
LoadLibraryW			        fn LoadLibraryW(name: LPCWSTR) -> HMODULE;
PanicStrategy			impl PanicStrategy 
PanicStrategy			pub enum PanicStrategy 
SetThreadErrorMode			        fn SetThreadErrorMode(dwNewMode: DWORD,
Target			impl Target 
Target			pub struct Target 
TargetOptions			pub struct TargetOptions 
TempDir			impl TempDir 
TempDir			pub struct TempDir 
ToJson for PanicStrategy			impl ToJson for PanicStrategy 
ToJson for Target			impl ToJson for Target 
_new_in			    fn _new_in(tmpdir: &Path, prefix: &str) -> io::Result<TempDir> 
abi_blacklist			pub fn abi_blacklist() -> Vec<Abi> 
adjust_abi			    pub fn adjust_abi(&self, abi: Abi) -> Abi 
android_base			mod android_base;
apple_base			mod apple_base;
apple_ios_base			mod apple_ios_base;
arm_base			mod arm_base;
bitrig_base			mod bitrig_base;
build_pre_link_args			fn build_pre_link_args(arch: Arch) -> Result<Vec<String>, String> 
check_for_errors_in			    pub fn check_for_errors_in<T, F>(f: F) -> Result<T, String> where
cleanup_dir			    fn cleanup_dir(&mut self) -> io::Result<()> 
close			    pub unsafe fn close(handle: *mut u8) 
close			    pub fn close(mut self) -> io::Result<()> 
create_path			    pub fn create_path(path: &[PathBuf]) -> OsString 
default			    fn default() -> TargetOptions 
desc			    pub fn desc(&self) -> &str 
dl			mod dl 
dragonfly_base			mod dragonfly_base;
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
dynamic_lib			pub mod dynamic_lib;
envvar			    pub fn envvar() -> &'static str 
freebsd_base			mod freebsd_base;
from_json			    pub fn from_json(obj: Json) -> TargetResult 
fuchsia_base			mod fuchsia_base;
get_sdk_root			pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> 
get_targets			        pub fn get_targets() -> Box<Iterator<Item=String>> 
haiku_base			mod haiku_base;
into_path			    pub fn into_path(mut self) -> PathBuf 
is_abi_supported			    pub fn is_abi_supported(&self, abi: Abi) -> bool 
linux_base			mod linux_base;
linux_musl_base			mod linux_musl_base;
load_file			        fn load_file(path: &Path) -> Result<Target, String> 
load_specific			        fn load_specific(target: &str) -> TargetResult 
max_atomic_width			    pub fn max_atomic_width(&self) -> u64 
maybe_jemalloc			fn maybe_jemalloc() -> String 
mut_ref_slice			pub fn mut_ref_slice<T>(ptr: &mut T) -> &mut [T; 1] 
netbsd_base			mod netbsd_base;
new			    pub fn new(prefix: &str) -> io::Result<TempDir> 
new_in			    pub fn new_in<P: AsRef<Path>>(tmpdir: P, prefix: &str)
open			    pub fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> 
open			    pub fn open(filename: Option<&Path>) -> Result<DynamicLibrary, String> 
open_external			    unsafe fn open_external(filename: &OsStr) -> *mut u8 
open_internal			    unsafe fn open_internal() -> *mut u8 
openbsd_base			mod openbsd_base;
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts(arch: Arch) -> Result<TargetOptions, String> 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
path			    pub fn path(&self) -> &path::Path 
prepend_search_path			    pub fn prepend_search_path(path: &Path) 
ptr_result			    fn ptr_result<T>(ptr: *mut T) -> Result<*mut T, String> 
ref_slice			pub fn ref_slice<T>(ptr: &T) -> &[T; 1] 
search			    pub fn search(target: &str) -> Result<Target, String> 
search_path			    pub fn search_path() -> Vec<PathBuf> 
separator			    fn separator() -> &'static str 
slice			pub mod slice;
solaris_base			mod solaris_base;
symbol			    pub unsafe fn symbol(handle: *mut u8,
symbol			    pub unsafe fn symbol<T>(&self, symbol: &str) -> Result<*mut T, String> 
target			pub mod target;
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> Result<Target, String> 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> Result<Target, String> 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target			pub fn target() -> TargetResult 
target_cpu			fn target_cpu(arch: Arch) -> String 
tempdir			pub mod tempdir;
tests			mod tests 
thumb_base			mod thumb_base;
to_json			    fn to_json(&self) -> Json 
to_json			    fn to_json(&self) -> Json 
to_string			    pub fn to_string(&self) -> &'static str 
windows_base			mod windows_base;
windows_msvc_base			mod windows_msvc_base;
