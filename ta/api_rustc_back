Arch			impl Arch 
Arch			pub enum Arch 
Default for TargetOptions			impl Default for TargetOptions 
Digest			pub trait Digest 
Digest for Sha256			impl Digest for Sha256 
Drop for TempDir			impl Drop for TempDir 
Engine256			impl Engine256 
Engine256			struct Engine256 
Engine256State			impl Engine256State 
Engine256State			struct Engine256State 
FixedBuffer			trait FixedBuffer 
FixedBuffer for FixedBuffer64			impl FixedBuffer for FixedBuffer64 
FixedBuffer64			impl FixedBuffer64 
FixedBuffer64			struct FixedBuffer64 
RPathConfig			pub struct RPathConfig<'a> 
SawAbiComponent			    enum SawAbiComponent<'a> 
SawExprComponent			    pub enum SawExprComponent<'a> 
SawStmtComponent			    pub enum SawStmtComponent 
Sha256			impl Sha256 
Sha256			pub struct Sha256 
StandardPadding			trait StandardPadding 
StandardPadding for T			impl <T: FixedBuffer> StandardPadding for T 
StrictVersionHashVisitor			    pub struct StrictVersionHashVisitor<'a> 
Svh			impl Svh 
Svh			pub struct Svh 
Target			impl Target 
Target			pub struct Target 
TargetOptions			pub struct TargetOptions 
TempDir			impl TempDir 
TempDir			pub struct TempDir 
Test			    struct Test 
ToBits			trait ToBits 
ToBits for u64			impl ToBits for u64 
Visitor for StrictVersionHashVisitor			    impl<'a> Visitor<'a> for StrictVersionHashVisitor<'a> 
_new_in			    fn _new_in(tmpdir: &Path, prefix: &str) -> io::Result<TempDir> 
abi			pub mod abi;
add_bytes_to_bits			fn add_bytes_to_bits(bits: u64, bytes: u64) -> u64 
adjust_abi			    pub fn adjust_abi(&self, abi: abi::Abi) -> abi::Abi 
android_base			mod android_base;
apple_base			mod apple_base;
apple_ios_base			mod apple_ios_base;
as_str			    pub fn as_str<'a>(&'a self) -> &'a str 
bench			mod bench 
bitrig_base			mod bitrig_base;
calculate			    pub fn calculate(metadata: &Vec<String>, krate: &hir::Crate) -> Svh 
ch			        fn ch(x: u32, y: u32, z: u32) -> u32 
cleanup_dir			    fn cleanup_dir(&mut self) -> io::Result<()> 
close			    pub fn close(mut self) -> io::Result<()> 
default			    fn default() -> TargetOptions 
dragonfly_base			mod dragonfly_base;
drop			    fn drop(&mut self) 
finish			    fn finish(&mut self) 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for Svh			impl fmt::Display for Svh 
freebsd_base			mod freebsd_base;
from_json			    pub fn from_json(obj: Json) -> Target 
full_buffer			    fn full_buffer<'s>(&'s mut self) -> &'s [u8] 
full_buffer			    fn full_buffer<'s>(&'s mut self) -> &'s [u8];
get_install_prefix_rpath			fn get_install_prefix_rpath(config: &mut RPathConfig) -> String 
get_rpath_flags			pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> 
get_rpath_relative_to_output			fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String 
get_rpaths			fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> 
get_rpaths_relative_to_output			fn get_rpaths_relative_to_output(config: &mut RPathConfig,
get_sdk_root			pub fn get_sdk_root(sdk_name: &str) -> String 
hex			        fn hex(b: u64) -> char 
input			    fn input(&mut self, d: &[u8]) 
input			    fn input(&mut self, input: &[u8]) 
input			    fn input(&mut self, input: &[u8]);
input			    fn input<F>(&mut self, input: &[u8], func: F) where
input			    fn input<F>(&mut self, input: &[u8], mut func: F) where
input_str			    fn input_str(&mut self, input: &str) 
into_path			    pub fn into_path(mut self) -> PathBuf 
linux_base			mod linux_base;
load_file			        fn load_file(path: &Path) -> Result<Target, String> 
log_rpaths			    fn log_rpaths(desc: &str, rpaths: &[String]) 
maj			        fn maj(x: u32, y: u32, z: u32) -> u32 
make			    pub fn make<'a>(st: &'a mut SipHasher, krate: &'a Crate) -> StrictVersionHashVisitor<'a> 
maybe_jemalloc			fn maybe_jemalloc() -> String 
minimize_rpaths			fn minimize_rpaths(rpaths: &[String]) -> Vec<String> 
mut_ref_slice			pub fn mut_ref_slice<T>(ptr: &mut T) -> &mut [T; 1] 
netbsd_base			mod netbsd_base;
new			    fn new() -> FixedBuffer64 
new			    fn new(h: &[u32; 8]) -> Engine256 
new			    fn new(h: &[u32; 8]) -> Engine256State 
new			    pub fn new() -> Sha256 
new			    pub fn new(hash: &str) -> Svh 
new			    pub fn new(prefix: &str) -> io::Result<TempDir> 
new_in			    pub fn new_in<P: AsRef<Path>>(tmpdir: P, prefix: &str)
next			    fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8] 
next			    fn next<'s>(&'s mut self, len: usize) -> &'s mut [u8];
openbsd_base			mod openbsd_base;
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts(arch: Arch) -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
output_bits			    fn output_bits(&self) -> usize { 256 }
output_bits			    fn output_bits(&self) -> usize;
path			    pub fn path(&self) -> &path::Path 
path_relative_from			fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> 
position			    fn position(&self) -> usize { self.buffer_idx }
position			    fn position(&self) -> usize;
pre_link_args			fn pre_link_args(arch: Arch) -> Vec<String> 
process_block			    fn process_block(&mut self, data: &[u8]) 
read_u32_be			fn read_u32_be(input: &[u8]) -> u32 
read_u32v_be			fn read_u32v_be(dst: &mut[u32], input: &[u8]) 
ref_slice			pub fn ref_slice<T>(ptr: &T) -> &[T; 1] 
remaining			    fn remaining(&self) -> usize { 64 - self.buffer_idx }
remaining			    fn remaining(&self) -> usize;
reset			    fn reset(&mut self) 
reset			    fn reset(&mut self);
reset			    fn reset(&mut self, h: &[u32; 8]) 
result			    fn result(&mut self, out: &mut [u8]) 
result			    fn result(&mut self, out: &mut [u8]);
result_bytes			    fn result_bytes(&mut self) -> Vec<u8> 
result_str			    fn result_str(&mut self) -> String 
rpath			pub mod rpath;
rpaths_to_flags			fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> 
saw_expr			    fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> 
saw_stmt			    fn saw_stmt(node: &Stmt_) -> SawStmtComponent 
search			    pub fn search(target: &str) -> Result<Target, String> 
sha2			pub mod sha2;
sha256_10			    pub fn sha256_10(b: &mut Bencher) 
sha256_1k			    pub fn sha256_1k(b: &mut Bencher) 
sha256_64k			    pub fn sha256_64k(b: &mut Bencher) 
sigma0			        fn sigma0(x: u32) -> u32 
sigma1			        fn sigma1(x: u32) -> u32 
size			    fn size(&self) -> usize { 64 }
size			    fn size(&self) -> usize;
slice			pub mod slice;
standard_padding			    fn standard_padding<F>(&mut self, rem: usize, func: F) where F: FnMut(&[u8]);
standard_padding			    fn standard_padding<F>(&mut self, rem: usize, mut func: F) where F: FnMut(&[u8]) 
sum0			        fn sum0(x: u32) -> u32 
sum1			        fn sum1(x: u32) -> u32 
svh			pub mod svh;
svh_visitor			mod svh_visitor 
target			pub mod target;
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target_cpu			fn target_cpu(arch: Arch) -> String 
tempdir			pub mod tempdir;
tests			mod tests 
tests			mod tests 
to_bits			    fn to_bits(self) -> (Self, Self);
to_bits			    fn to_bits(self) -> (u64, u64) 
to_string			    pub fn to_string(&self) -> &'static str 
visit_arm			        fn visit_arm(&mut self, a: &'a Arm) 
visit_block			        fn visit_block(&mut self, b: &'a Block) 
visit_decl			        fn visit_decl(&mut self, d: &'a Decl) 
visit_explicit_self			        fn visit_explicit_self(&mut self, es: &'a ExplicitSelf) 
visit_expr			        fn visit_expr(&mut self, ex: &'a Expr) 
visit_fn			        fn visit_fn(&mut self, fk: FnKind<'a>, fd: &'a FnDecl,
visit_foreign_item			        fn visit_foreign_item(&mut self, i: &'a ForeignItem) 
visit_generics			        fn visit_generics(&mut self, g: &'a Generics) 
visit_impl_item			        fn visit_impl_item(&mut self, ii: &'a ImplItem) 
visit_item			        fn visit_item(&mut self, i: &'a Item) 
visit_lifetime			        fn visit_lifetime(&mut self, l: &'a Lifetime) 
visit_lifetime_def			        fn visit_lifetime_def(&mut self, l: &'a LifetimeDef) 
visit_local			        fn visit_local(&mut self, l: &'a Local) 
visit_mod			        fn visit_mod(&mut self, m: &'a Mod, _s: Span, _n: NodeId) 
visit_name			        fn visit_name(&mut self, _: Span, name: Name) 
visit_nested_item			        fn visit_nested_item(&mut self, item: ItemId) 
visit_pat			        fn visit_pat(&mut self, p: &'a Pat) 
visit_path			        fn visit_path(&mut self, path: &'a Path, _: ast::NodeId) 
visit_path_list_item			        fn visit_path_list_item(&mut self, prefix: &'a Path, item: &'a PathListItem) 
visit_stmt			        fn visit_stmt(&mut self, s: &'a Stmt) 
visit_struct_field			        fn visit_struct_field(&mut self, s: &'a StructField) 
visit_trait_item			        fn visit_trait_item(&mut self, ti: &'a TraitItem) 
visit_ty			        fn visit_ty(&mut self, t: &'a Ty) 
visit_variant			        fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) 
visit_variant_data			        fn visit_variant_data(&mut self, s: &'a VariantData, name: Name,
windows_base			mod windows_base;
windows_msvc_base			mod windows_msvc_base;
write_u32_be			fn write_u32_be(dst: &mut[u8], input: u32) 
zero_until			    fn zero_until(&mut self, idx: usize) 
zero_until			    fn zero_until(&mut self, idx: usize);
