Add			impl<'a> Add<Cow<'a, str>> for Cow<'a, str> 
Add for Cow			impl<'a> Add<&'a str> for Cow<'a, str> 
Add for String			impl<'a> Add<&'a str> for String 
AddAssign			impl<'a> AddAssign<Cow<'a, str>> for Cow<'a, str> 
AddAssign for Cow			impl<'a> AddAssign<&'a str> for Cow<'a, str> 
AddAssign for String			impl<'a> AddAssign<&'a str> for String 
Alloc			pub unsafe trait Alloc 
Alloc for BoundedAlloc			        unsafe impl Alloc for BoundedAlloc 
Alloc for Heap			unsafe impl Alloc for Heap 
AllocErr			impl AllocErr 
AllocErr			pub enum AllocErr 
Arc			impl<T: ?Sized> Arc<T> 
Arc			impl<T: Clone> Arc<T> 
Arc			impl<T> Arc<T> 
Arc			pub struct Arc<T: ?Sized> 
ArcInner			struct ArcInner<T: ?Sized> 
AsMut			impl<T> AsMut<Vec<T>> for Vec<T> 
AsMut for Box			impl<T: ?Sized> AsMut<T> for Box<T> 
AsMut for Vec			impl<T> AsMut<[T]> for Vec<T> 
AsRef			impl<T> AsRef<Vec<T>> for Vec<T> 
AsRef for Arc			impl<T: ?Sized> AsRef<T> for Arc<T> 
AsRef for Box			impl<T: ?Sized> AsRef<T> for Box<T> 
AsRef for Cow			impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> 
AsRef for Rc			impl<T: ?Sized> AsRef<T> for Rc<T> 
AsRef for String			impl AsRef<[u8]> for String 
AsRef for String			impl AsRef<str> for String 
AsRef for Vec			impl<T> AsRef<[T]> for Vec<T> 
BTreeMap			impl<K, V> BTreeMap<K, V> 
BTreeMap			impl<K: Ord, V> BTreeMap<K, V> 
BTreeMap			pub struct BTreeMap<K, V> 
BTreeSet			impl<T: Ord> BTreeSet<T> 
BTreeSet			impl<T> BTreeSet<T> 
BTreeSet			pub struct BTreeSet<T> 
BackPlace			pub struct BackPlace<'a, T: 'a> 
Bad			    struct Bad;
BadElem			    struct BadElem(i32);
Bar			    struct Bar(u32);
BinaryHeap			impl<T: Ord> BinaryHeap<T> 
BinaryHeap			pub struct BinaryHeap<T> 
BinaryHeapPlace			pub struct BinaryHeapPlace<'a, T: 'a>
BitAnd			impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitOr			impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitXor			impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>> for &'a BTreeSet<T> 
Borrow for Cow			impl<'a, B: ?Sized> Borrow<B> for Cow<'a, B>
Borrow for String			impl Borrow<str> for String 
Borrow for Vec			impl<T> Borrow<[T]> for Vec<T> 
BorrowMut for Vec			impl<T> BorrowMut<[T]> for Vec<T> 
Bound			pub enum Bound<T> 
BoundedAlloc			        struct BoundedAlloc { fuel: usize }
Box			impl Box<Any + Send> 
Box			impl Box<Any> 
Box			impl<T: ?Sized> Box<T> 
Box			impl<T> Box<T> 
Box			pub struct Box<T: ?Sized>(Unique<T>);
BoxBuilder			        impl<T> BoxBuilder<T> 
BoxBuilder			        struct BoxBuilder<T> 
BoxPlace for IntermediateBox			impl<T> BoxPlace<T> for IntermediateBox<T> 
Boxed for Box			impl<T> Boxed for Box<T> 
BoxedNode			impl<K, V> BoxedNode<K, V> 
BoxedNode			struct BoxedNode<K, V> 
Canary			    struct Canary(*mut atomic::AtomicUsize);
Canary			    struct Canary 
CannotReallocInPlace			impl CannotReallocInPlace 
CannotReallocInPlace			pub struct CannotReallocInPlace;
Clone for Arc			impl<T: ?Sized> Clone for Arc<T> 
Clone for BTreeMap			impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> 
Clone for BinaryHeap			impl<T: Clone> Clone for BinaryHeap<T> 
Clone for Box			impl Clone for Box<str> 
Clone for Box			impl<T: Clone> Clone for Box<T> 
Clone for Box			impl<T: Clone> Clone for Box<[T]> 
Clone for Canary			    impl Clone for Canary 
Clone for Cow			impl<'a, B: ?Sized> Clone for Cow<'a, B>
Clone for Difference			impl<'a, T> Clone for Difference<'a, T> 
Clone for Handle			impl<Node: Copy, Type> Clone for Handle<Node, Type> 
Clone for Intersection			impl<'a, T> Clone for Intersection<'a, T> 
Clone for IntoIter			impl<T: Clone> Clone for IntoIter<T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, K, V> Clone for Iter<'a, K, V> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Keys			impl<'a, K, V> Clone for Keys<'a, K, V> 
Clone for LinkedList			impl<T: Clone> Clone for LinkedList<T> 
Clone for NodeRef			impl<'a, K: 'a, V: 'a, Type> Clone for NodeRef<marker::Immut<'a>, K, V, Type> 
Clone for ParseError			impl Clone for ParseError 
Clone for Range			impl<'a, K, V> Clone for Range<'a, K, V> 
Clone for Range			impl<'a, T> Clone for Range<'a, T> 
Clone for Rc			impl<T: ?Sized> Clone for Rc<T> 
Clone for String			impl Clone for String 
Clone for SymmetricDifference			impl<'a, T> Clone for SymmetricDifference<'a, T> 
Clone for Union			impl<'a, T> Clone for Union<'a, T> 
Clone for Values			impl<'a, K, V> Clone for Values<'a, K, V> 
Clone for Vec			impl<T: Clone> Clone for Vec<T> 
Clone for VecDeque			impl<T: Clone> Clone for VecDeque<T> 
Clone for Weak			impl<T: ?Sized> Clone for Weak<T> 
Clone for Weak			impl<T: ?Sized> Clone for Weak<T> 
Copy for Handle			impl<Node: Copy, Type> Copy for Handle<Node, Type> { }
Copy for NodeRef			impl<'a, K: 'a, V: 'a, Type> Copy for NodeRef<marker::Immut<'a>, K, V, Type> { }
Cow			impl<'a, B: ?Sized> Cow<'a, B>
Cow			pub enum Cow<'a, B: ?Sized + 'a>
Cycle			        struct Cycle 
Cycle			        struct Cycle 
Debug for BTreeMap			impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> 
Debug for BTreeSet			impl<T: Debug> Debug for BTreeSet<T> 
Debug for Entry			impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for Entry<'a, K, V> 
Debug for OccupiedEntry			impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> 
Debug for VacantEntry			impl<'a, K: 'a + Debug + Ord, V: 'a> Debug for VacantEntry<'a, K, V> 
Default for Arc			impl<T: Default> Default for Arc<T> 
Default for BTreeMap			impl<K: Ord, V> Default for BTreeMap<K, V> 
Default for BTreeSet			impl<T: Ord> Default for BTreeSet<T> 
Default for BinaryHeap			impl<T: Ord> Default for BinaryHeap<T> 
Default for Box			impl Default for Box<str> 
Default for Box			impl<T: Default> Default for Box<T> 
Default for Box			impl<T> Default for Box<[T]> 
Default for Cow			impl<'a, B: ?Sized> Default for Cow<'a, B>
Default for LinkedList			impl<T> Default for LinkedList<T> 
Default for Rc			impl<T: Default> Default for Rc<T> 
Default for String			impl Default for String 
Default for Vec			impl<T> Default for Vec<T> 
Default for VecDeque			impl<T> Default for VecDeque<T> 
Default for Weak			impl<T> Default for Weak<T> 
Default for Weak			impl<T> Default for Weak<T> 
Deref for Arc			impl<T: ?Sized> Deref for Arc<T> 
Deref for Box			impl<T: ?Sized> Deref for Box<T> 
Deref for Cow			impl<'a, B: ?Sized> Deref for Cow<'a, B>
Deref for PeekMut			impl<'a, T: Ord> Deref for PeekMut<'a, T> 
Deref for Rc			impl<T: ?Sized> Deref for Rc<T> 
DerefMut for Box			impl<T: ?Sized> DerefMut for Box<T> 
DerefMut for PeekMut			impl<'a, T: Ord> DerefMut for PeekMut<'a, T> 
DeterministicRng			impl DeterministicRng 
DeterministicRng			struct DeterministicRng 
Difference			pub struct Difference<'a, T: 'a> 
DoubleEndedIterator for Box			impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> 
DoubleEndedIterator for Drain			impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a> DoubleEndedIterator for Drain<'a> 
DoubleEndedIterator for Drain			impl<'a, T> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<K, V> DoubleEndedIterator for IntoIter<K, V> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for IterMut			impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> 
DoubleEndedIterator for IterMut			impl<'a, T> DoubleEndedIterator for IterMut<'a, T> 
DoubleEndedIterator for IterMut			impl<'a, T> DoubleEndedIterator for IterMut<'a, T> 
DoubleEndedIterator for Keys			impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> 
DoubleEndedIterator for Range			impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> 
DoubleEndedIterator for Range			impl<'a, T> DoubleEndedIterator for Range<'a, T> 
DoubleEndedIterator for RangeMut			impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> 
DoubleEndedIterator for Splice			impl<'a, 'b> DoubleEndedIterator for Splice<'a, 'b> 
DoubleEndedIterator for Splice			impl<'a, I: Iterator> DoubleEndedIterator for Splice<'a, I> 
DoubleEndedIterator for Values			impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> 
DoubleEndedIterator for ValuesMut			impl<'a, K, V> DoubleEndedIterator for ValuesMut<'a, K, V> 
Drain			pub struct Drain<'a, T: 'a> 
Drain			pub struct Drain<'a> 
Drain			impl<'a, T> Drain<'a, T> 
Drain			pub struct Drain<'a, T: 'a> 
Drain			pub struct Drain<'a, T: 'a> 
Drop for Arc			unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> 
Drop for BTreeMap			unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> 
Drop for BadElem			    impl Drop for BadElem 
Drop for Box			unsafe impl<#[may_dangle] T: ?Sized> Drop for Box<T> 
Drop for BoxBuilder			        impl<T> Drop for BoxBuilder<T> 
Drop for Canary			    impl Drop for Canary 
Drop for Canary			    impl Drop for Canary 
Drop for Drain			impl<'a> Drop for Drain<'a> 
Drop for Drain			impl<'a, T> Drop for Drain<'a, T> 
Drop for Drain			impl<'a, T: 'a> Drop for Drain<'a, T> 
Drop for DropCounter			impl<'a> Drop for DropCounter<'a> 
Drop for Elem			    impl Drop for Elem 
Drop for Elem			    impl Drop for Elem 
Drop for Hole			impl<'a, T> Drop for Hole<'a, T> 
Drop for InsertionHole			    impl<T> Drop for InsertionHole<T> 
Drop for IntermediateBox			impl<T: ?Sized> Drop for IntermediateBox<T> 
Drop for IntoIter			impl<K, V> Drop for IntoIter<K, V> 
Drop for IntoIter			unsafe impl<#[may_dangle] T> Drop for IntoIter<T> 
Drop for LinkedList			unsafe impl<#[may_dangle] T> Drop for LinkedList<T> 
Drop for MergeHole			    impl<T> Drop for MergeHole<T> 
Drop for PeekMut			impl<'a, T: Ord> Drop for PeekMut<'a, T> 
Drop for RawVec			unsafe impl<#[may_dangle] T, A: Alloc> Drop for RawVec<T, A> 
Drop for Rc			unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> 
Drop for SetLenOnDrop			impl<'a> Drop for SetLenOnDrop<'a> 
Drop for Splice			impl<'a, 'b> Drop for Splice<'a, 'b> 
Drop for Splice			impl<'a, I: Iterator> Drop for Splice<'a, I> 
Drop for Vec			unsafe impl<#[may_dangle] T> Drop for Vec<T> 
Drop for VecDeque			unsafe impl<#[may_dangle] T> Drop for VecDeque<T> 
Drop for Weak			impl<T: ?Sized> Drop for Weak<T> 
Drop for Weak			impl<T: ?Sized> Drop for Weak<T> 
DropCounter			struct DropCounter<'a> 
Edge			    pub enum Edge { }
Elem			    struct Elem(i32);
Elem			    struct Elem;
EncodeUtf16			pub struct EncodeUtf16<'a> 
Entry			impl<'a, K: Ord, V> Entry<'a, K, V> 
Entry			pub enum Entry<'a, K: 'a, V: 'a> 
Eq for Arc			impl<T: ?Sized + Eq> Eq for Arc<T> {}
Eq for BTreeMap			impl<K: Eq, V: Eq> Eq for BTreeMap<K, V> {}
Eq for Bad			    impl Eq for Bad {}
Eq for Box			impl<T: ?Sized + Eq> Eq for Box<T> {}
Eq for Cow			impl<'a, B: ?Sized> Eq for Cow<'a, B> where B: Eq + ToOwned {}
Eq for Foo			    impl Eq for Foo {}
Eq for LinkedList			impl<T: Eq> Eq for LinkedList<T> {}
Eq for ParseError			impl Eq for ParseError {}
Eq for Rc			impl<T: ?Sized + Eq> Eq for Rc<T> {}
Eq for Vec			impl<T: Eq> Eq for Vec<T> {}
Eq for VecDeque			impl<A: Eq> Eq for VecDeque<A> {}
ExactSizeIterator for Box			impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> 
ExactSizeIterator for Drain			impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> 
ExactSizeIterator for Drain			impl<'a, T> ExactSizeIterator for Drain<'a, T> 
ExactSizeIterator for Drain			impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> 
ExactSizeIterator for IntoIter			impl<K, V> ExactSizeIterator for IntoIter<K, V> 
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> 
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> 
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> 
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> 
ExactSizeIterator for Iter			impl<'a, K: 'a, V: 'a> ExactSizeIterator for Iter<'a, K, V> 
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> 
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> {}
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> 
ExactSizeIterator for IterMut			impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> 
ExactSizeIterator for IterMut			impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}
ExactSizeIterator for IterMut			impl<'a, T> ExactSizeIterator for IterMut<'a, T> 
ExactSizeIterator for Keys			impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> 
ExactSizeIterator for Splice			impl<'a, I: Iterator> ExactSizeIterator for Splice<'a, I> {}
ExactSizeIterator for Values			impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> 
ExactSizeIterator for ValuesMut			impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> 
Excess			pub struct Excess(pub *mut u8, pub usize);
ExchangeHeapSingleton			pub struct ExchangeHeapSingleton 
Extend			impl<'a> Extend<Cow<'a, str>> for String 
Extend for BTreeMap			impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> 
Extend for BTreeMap			impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> 
Extend for BTreeSet			impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> 
Extend for BTreeSet			impl<T: Ord> Extend<T> for BTreeSet<T> 
Extend for BinaryHeap			impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> 
Extend for BinaryHeap			impl<T: Ord> Extend<T> for BinaryHeap<T> 
Extend for LinkedList			impl<'a, T: 'a + Copy> Extend<&'a T> for LinkedList<T> 
Extend for LinkedList			impl<T> Extend<T> for LinkedList<T> 
Extend for String			impl Extend<String> for String 
Extend for String			impl Extend<char> for String 
Extend for String			impl<'a> Extend<&'a char> for String 
Extend for String			impl<'a> Extend<&'a str> for String 
Extend for Vec			impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> 
Extend for Vec			impl<T> Extend<T> for Vec<T> 
Extend for VecDeque			impl<'a, T: 'a + Copy> Extend<&'a T> for VecDeque<T> 
Extend for VecDeque			impl<A> Extend<A> for VecDeque<A> 
ExtendDefault			struct ExtendDefault;
ExtendElement			struct ExtendElement<T>(T);
ExtendWith			trait ExtendWith<T> 
ExtendWith for ExtendDefault			impl<T: Default> ExtendWith<T> for ExtendDefault 
ExtendWith for ExtendElement			impl<T: Clone> ExtendWith<T> for ExtendElement<T> 
FnBox			pub trait FnBox<A> 
FnBox for F			impl<A, F> FnBox<A> for F
FnOnce for Box			impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> 
FnOnce for Box			impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + Send + 'a> 
Foo			    struct Foo 
Foo			    trait Foo 
Foo			    struct Foo(&'static str, i32);
Foo			struct Foo;
Foo			    struct Foo(usize);
Foo			    struct Foo;
Foo for Bar			    impl Foo for Bar 
ForceResult			pub enum ForceResult<Leaf, Internal> 
From			impl<T: Ord> From<Vec<T>> for BinaryHeap<T> 
From			impl<T> From<BinaryHeap<T>> for Vec<T> 
From			impl From<Box<str>> for Box<[u8]> 
From			impl From<Box<str>> for String 
From			impl<'a> From<Cow<'a, str>> for String 
From			impl<'a, T: Clone> From<Vec<T>> for Cow<'a, [T]> 
From			impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> 
From			impl<T> From<Box<[T]>> for Vec<T> 
From			impl<T> From<Vec<T>> for Box<[T]> 
From			impl<T> From<Vec<T>> for VecDeque<T> 
From			impl<T> From<VecDeque<T>> for Vec<T> 
From for Arc			impl<T> From<T> for Arc<T> 
From for Box			impl<'a, T: Copy> From<&'a [T]> for Box<[T]> 
From for Box			impl<'a> From<&'a str> for Box<str> 
From for Box			impl<T> From<T> for Box<T> 
From for Box			impl From<String> for Box<str> 
From for Cow			impl<'a> From<&'a str> for Cow<'a, str> 
From for Cow			impl<'a> From<String> for Cow<'a, str> 
From for Cow			impl<'a, T: Clone> From<&'a [T]> for Cow<'a, [T]> 
From for Rc			impl<T> From<T> for Rc<T> 
From for String			impl<'a> From<&'a str> for String 
From for Vec			impl From<String> for Vec<u8> 
From for Vec			impl<'a, T: Clone> From<&'a [T]> for Vec<T> 
From for Vec			impl<'a, T: Clone> From<&'a mut [T]> for Vec<T> 
From for Vec			impl<'a> From<&'a str> for Vec<u8> 
FromIterator			impl<'a> FromIterator<Cow<'a, str>> for String 
FromIterator for BTreeMap			impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> 
FromIterator for BTreeSet			impl<T: Ord> FromIterator<T> for BTreeSet<T> 
FromIterator for BinaryHeap			impl<T: Ord> FromIterator<T> for BinaryHeap<T> 
FromIterator for Cow			impl<'a, 'b> FromIterator<&'b str> for Cow<'a, str> 
FromIterator for Cow			impl<'a> FromIterator<String> for Cow<'a, str> 
FromIterator for Cow			impl<'a> FromIterator<char> for Cow<'a, str> 
FromIterator for Cow			impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone 
FromIterator for LinkedList			impl<T> FromIterator<T> for LinkedList<T> 
FromIterator for String			impl FromIterator<String> for String 
FromIterator for String			impl FromIterator<char> for String 
FromIterator for String			impl<'a> FromIterator<&'a char> for String 
FromIterator for String			impl<'a> FromIterator<&'a str> for String 
FromIterator for Vec			impl<T> FromIterator<T> for Vec<T> 
FromIterator for VecDeque			impl<A> FromIterator<A> for VecDeque<A> 
FromStr for String			impl FromStr for String 
FromUtf16Error			pub struct FromUtf16Error(());
FromUtf8Error			impl FromUtf8Error 
FromUtf8Error			pub struct FromUtf8Error 
FrontPlace			pub struct FrontPlace<'a, T: 'a> 
FusedIterator for Box			impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}
FusedIterator for Difference			impl<'a, T: Ord> FusedIterator for Difference<'a, T> {}
FusedIterator for Drain			impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}
FusedIterator for Drain			impl<'a> FusedIterator for Drain<'a> {}
FusedIterator for Drain			impl<'a, T> FusedIterator for Drain<'a, T> {}
FusedIterator for Drain			impl<'a, T: 'a> FusedIterator for Drain<'a, T> {}
FusedIterator for EncodeUtf16			impl<'a> FusedIterator for EncodeUtf16<'a> {}
FusedIterator for Intersection			impl<'a, T: Ord> FusedIterator for Intersection<'a, T> {}
FusedIterator for IntoIter			impl<T> FusedIterator for IntoIter<T> {}
FusedIterator for IntoIter			impl<K, V> FusedIterator for IntoIter<K, V> {}
FusedIterator for IntoIter			impl<T> FusedIterator for IntoIter<T> {}
FusedIterator for IntoIter			impl<T> FusedIterator for IntoIter<T> {}
FusedIterator for IntoIter			impl<T> FusedIterator for IntoIter<T> {}
FusedIterator for IntoIter			impl<T> FusedIterator for IntoIter<T> {}
FusedIterator for Iter			impl<'a, T> FusedIterator for Iter<'a, T> {}
FusedIterator for Iter			impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}
FusedIterator for Iter			impl<'a, T> FusedIterator for Iter<'a, T> {}
FusedIterator for Iter			impl<'a, T> FusedIterator for Iter<'a, T> {}
FusedIterator for Iter			impl<'a, T> FusedIterator for Iter<'a, T> {}
FusedIterator for IterMut			impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}
FusedIterator for IterMut			impl<'a, T> FusedIterator for IterMut<'a, T> {}
FusedIterator for IterMut			impl<'a, T> FusedIterator for IterMut<'a, T> {}
FusedIterator for Keys			impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}
FusedIterator for Range			impl<'a, K, V> FusedIterator for Range<'a, K, V> {}
FusedIterator for Range			impl<'a, T> FusedIterator for Range<'a, T> {}
FusedIterator for RangeMut			impl<'a, K, V> FusedIterator for RangeMut<'a, K, V> {}
FusedIterator for SymmetricDifference			impl<'a, T: Ord> FusedIterator for SymmetricDifference<'a, T> {}
FusedIterator for Union			impl<'a, T: Ord> FusedIterator for Union<'a, T> {}
FusedIterator for Values			impl<'a, K, V> FusedIterator for Values<'a, K, V> {}
FusedIterator for ValuesMut			impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}
Handle			impl<'a, K, V, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> 
Handle			impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV> 
Handle			impl<Node, Type> Handle<Node, Type> 
Handle			pub struct Handle<Node, Type> 
Hash for Arc			impl<T: ?Sized + Hash> Hash for Arc<T> 
Hash for BTreeMap			impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> 
Hash for Box			impl<T: ?Sized + Hash> Hash for Box<T> 
Hash for Cow			impl<'a, B: ?Sized> Hash for Cow<'a, B>
Hash for LinkedList			impl<T: Hash> Hash for LinkedList<T> 
Hash for Rc			impl<T: ?Sized + Hash> Hash for Rc<T> 
Hash for Vec			impl<T: Hash> Hash for Vec<T> 
Hash for VecDeque			impl<A: Hash> Hash for VecDeque<A> 
Heap			pub struct Heap;
Hole			impl<'a, T> Hole<'a, T> 
Hole			struct Hole<'a, T: 'a> 
Immut			    pub struct Immut<'a>(PhantomData<&'a ()>);
InPlace for BackPlace			impl<'a, T> InPlace<T> for BackPlace<'a, T> 
InPlace for BinaryHeapPlace			impl<'a, T> InPlace<T> for BinaryHeapPlace<'a, T>
InPlace for FrontPlace			impl<'a, T> InPlace<T> for FrontPlace<'a, T> 
InPlace for IntermediateBox			impl<T> InPlace<T> for IntermediateBox<T> 
InPlace for PlaceBack			impl<'a, T> InPlace<T> for PlaceBack<'a, T> 
InPlace for PlaceBack			impl<'a, T> InPlace<T> for PlaceBack<'a, T> 
InPlace for PlaceFront			impl<'a, T> InPlace<T> for PlaceFront<'a, T> 
Index for BTreeMap			impl<'a, K: Ord, Q: ?Sized, V> Index<&'a Q> for BTreeMap<K, V>
Index for Vec			impl<T> Index<usize> for Vec<T> 
Index for VecDeque			impl<A> Index<usize> for VecDeque<A> 
IndexMut for Vec			impl<T> IndexMut<usize> for Vec<T> 
IndexMut for VecDeque			impl<A> IndexMut<usize> for VecDeque<A> 
InsertResult			pub enum InsertResult<'a, K, V, Type> 
InsertionHole			    struct InsertionHole<T> 
IntermediateBox			pub struct IntermediateBox<T: ?Sized> 
Internal			    pub enum Internal { }
InternalNode			impl<K, V> InternalNode<K, V> 
InternalNode			struct InternalNode<K, V> 
Intersection			pub struct Intersection<'a, T: 'a> 
IntoCow			impl<'a> IntoCow<'a, str> for &'a str 
IntoCow			pub trait IntoCow<'a, B: ?Sized> where B: ToOwned 
IntoCow for String			impl<'a> IntoCow<'a, str> for String 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<K, V> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			impl<T> IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a BinaryHeap<T>
IntoIterator			impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> 
IntoIterator			impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> 
IntoIterator			impl<'a, T> IntoIterator for &'a BTreeSet<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a LinkedList<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut LinkedList<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a Vec<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut Vec<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a VecDeque<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut VecDeque<T> 
IntoIterator for BTreeMap			impl<K, V> IntoIterator for BTreeMap<K, V> 
IntoIterator for BTreeSet			impl<T> IntoIterator for BTreeSet<T> 
IntoIterator for BinaryHeap			impl<T: Ord> IntoIterator for BinaryHeap<T> 
IntoIterator for LinkedList			impl<T> IntoIterator for LinkedList<T> 
IntoIterator for Vec			impl<T> IntoIterator for Vec<T> 
IntoIterator for VecDeque			impl<T> IntoIterator for VecDeque<T> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			pub struct Iter<'a, K: 'a, V: 'a> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			pub struct Iter<'a, T: 'a> 
IterMut			pub struct IterMut<'a, K: 'a, V: 'a> 
IterMut			impl<'a, T> IterMut<'a, T> 
IterMut			pub struct IterMut<'a, T: 'a> 
IterMut			pub struct IterMut<'a, T: 'a> 
Iterator for Box			impl<I: Iterator + ?Sized> Iterator for Box<I> 
Iterator for Difference			impl<'a, T: Ord> Iterator for Difference<'a, T> 
Iterator for Drain			impl<'a, T: 'a> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a> Iterator for Drain<'a> 
Iterator for Drain			impl<'a, T> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a, T: 'a> Iterator for Drain<'a, T> 
Iterator for EncodeUtf16			impl<'a> Iterator for EncodeUtf16<'a> 
Iterator for Intersection			impl<'a, T: Ord> Iterator for Intersection<'a, T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<K, V> Iterator for IntoIter<K, V> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for IterMut			impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> 
Iterator for IterMut			impl<'a, T> Iterator for IterMut<'a, T> 
Iterator for IterMut			impl<'a, T> Iterator for IterMut<'a, T> 
Iterator for Keys			impl<'a, K, V> Iterator for Keys<'a, K, V> 
Iterator for Range			impl<'a, K, V> Iterator for Range<'a, K, V> 
Iterator for Range			impl<'a, T> Iterator for Range<'a, T> 
Iterator for RangeMut			impl<'a, K, V> Iterator for RangeMut<'a, K, V> 
Iterator for Splice			impl<'a, 'b> Iterator for Splice<'a, 'b> 
Iterator for Splice			impl<'a, I: Iterator> Iterator for Splice<'a, I> 
Iterator for SymmetricDifference			impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> 
Iterator for Union			impl<'a, T: Ord> Iterator for Union<'a, T> 
Iterator for Values			impl<'a, K, V> Iterator for Values<'a, K, V> 
Iterator for ValuesMut			impl<'a, K, V> Iterator for ValuesMut<'a, K, V> 
KV			    pub enum KV { }
Keys			pub struct Keys<'a, K: 'a, V: 'a> 
Layout			impl Layout 
Layout			pub struct Layout 
Leaf			    pub enum Leaf { }
LeafNode			impl<K, V> LeafNode<K, V> 
LeafNode			struct LeafNode<K, V> 
LeafOrInternal			    pub enum LeafOrInternal { }
LinkedList			impl<T> LinkedList<T> 
LinkedList			pub struct LinkedList<T> 
MergeHole			    struct MergeHole<T> 
MergeIter			struct MergeIter<K, V, I: Iterator<Item = (K, V)>> 
Mut			    pub struct Mut<'a>(PhantomData<&'a mut ()>);
Node			impl<T> Node<T> 
Node			struct Node<T> 
NodeRef			impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> 
NodeRef			impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> 
NodeRef			impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> 
NodeRef			impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> 
NodeRef			impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> 
NodeRef			impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> 
NodeRef			impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> 
NodeRef			impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> 
NodeRef			impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> 
NodeRef			impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> 
NodeRef			impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> 
NodeRef			pub struct NodeRef<BorrowType, K, V, Type> 
OccupiedEntry			impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> 
OccupiedEntry			pub struct OccupiedEntry<'a, K: 'a, V: 'a> 
Ord for Arc			impl<T: ?Sized + Ord> Ord for Arc<T> 
Ord for BTreeMap			impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> 
Ord for Bad			    impl Ord for Bad 
Ord for Box			impl<T: ?Sized + Ord> Ord for Box<T> 
Ord for Cow			impl<'a, B: ?Sized> Ord for Cow<'a, B>
Ord for Foo			    impl Ord for Foo 
Ord for LinkedList			impl<T: Ord> Ord for LinkedList<T> 
Ord for Rc			impl<T: ?Sized + Ord> Ord for Rc<T> 
Ord for Vec			impl<T: Ord> Ord for Vec<T> 
Ord for VecDeque			impl<A: Ord> Ord for VecDeque<A> 
Owned			    pub enum Owned { }
ParseError			pub enum ParseError {}
PartialEq			impl<'a, 'b, B: ?Sized, C: ?Sized> PartialEq<Cow<'b, C>> for Cow<'a, B>
PartialEq			impl<BorrowType, K, V, NodeType, HandleType> PartialEq
PartialEq			        impl<'a, 'b> PartialEq<
PartialEq			        impl<'a, 'b> PartialEq<
PartialEq			        impl<'a, 'b, A: 
PartialEq			        impl<'a, 'b, A: 
PartialEq for Arc			impl<T: ?Sized + PartialEq> PartialEq for Arc<T> 
PartialEq for BTreeMap			impl<K: PartialEq, V: PartialEq> PartialEq for BTreeMap<K, V> 
PartialEq for Bad			    impl PartialEq for Bad 
PartialEq for Box			impl<T: ?Sized + PartialEq> PartialEq for Box<T> 
PartialEq for Foo			    impl PartialEq for Foo 
PartialEq for LinkedList			impl<T: PartialEq> PartialEq for LinkedList<T> 
PartialEq for ParseError			impl PartialEq for ParseError 
PartialEq for Rc			impl<T: ?Sized + PartialEq> PartialEq for Rc<T> 
PartialEq for String			impl PartialEq for String 
PartialEq for VecDeque			impl<A: PartialEq> PartialEq for VecDeque<A> 
PartialOrd for Arc			impl<T: ?Sized + PartialOrd> PartialOrd for Arc<T> 
PartialOrd for BTreeMap			impl<K: PartialOrd, V: PartialOrd> PartialOrd for BTreeMap<K, V> 
PartialOrd for Bad			    impl PartialOrd for Bad 
PartialOrd for Box			impl<T: ?Sized + PartialOrd> PartialOrd for Box<T> 
PartialOrd for Cow			impl<'a, B: ?Sized> PartialOrd for Cow<'a, B>
PartialOrd for Foo			    impl PartialOrd for Foo 
PartialOrd for LinkedList			impl<T: PartialOrd> PartialOrd for LinkedList<T> 
PartialOrd for Rc			impl<T: ?Sized + PartialOrd> PartialOrd for Rc<T> 
PartialOrd for Vec			impl<T: PartialOrd> PartialOrd for Vec<T> 
PartialOrd for VecDeque			impl<A: PartialOrd> PartialOrd for VecDeque<A> 
Pattern			impl<'a, 'b> Pattern<'a> for &'b String 
PeekMut			impl<'a, T: Ord> PeekMut<'a, T> 
PeekMut			pub struct PeekMut<'a, T: 'a + Ord> 
Place for BackPlace			impl<'a, T> Place<T> for BackPlace<'a, T> 
Place for BinaryHeapPlace			impl<'a, T> Place<T> for BinaryHeapPlace<'a, T>
Place for FrontPlace			impl<'a, T> Place<T> for FrontPlace<'a, T> 
Place for IntermediateBox			impl<T> Place<T> for IntermediateBox<T> 
Place for PlaceBack			impl<'a, T> Place<T> for PlaceBack<'a, T> 
Place for PlaceBack			impl<'a, T> Place<T> for PlaceBack<'a, T> 
Place for PlaceFront			impl<'a, T> Place<T> for PlaceFront<'a, T> 
PlaceBack			pub struct PlaceBack<'a, T: 'a> 
PlaceBack			pub struct PlaceBack<'a, T: 'a> 
PlaceFront			pub struct PlaceFront<'a, T: 'a> 
Placer			impl<'a, T: 'a> Placer<T> for &'a mut BinaryHeap<T>
Placer for BackPlace			impl<'a, T> Placer<T> for BackPlace<'a, T> 
Placer for ExchangeHeapSingleton			impl<T> Placer<T> for ExchangeHeapSingleton 
Placer for FrontPlace			impl<'a, T> Placer<T> for FrontPlace<'a, T> 
Placer for PlaceBack			impl<'a, T> Placer<T> for PlaceBack<'a, T> 
Placer for PlaceBack			impl<'a, T> Placer<T> for PlaceBack<'a, T> 
Placer for PlaceFront			impl<'a, T> Placer<T> for PlaceFront<'a, T> 
Range			impl<'a, K, V> Range<'a, K, V> 
Range			pub struct Range<'a, K: 'a, V: 'a> 
Range			pub struct Range<'a, T: 'a> 
RangeArgument			impl<'a, T: ?Sized + 'a> RangeArgument<T> for (Bound<&'a T>, Bound<&'a T>) 
RangeArgument			impl<T> RangeArgument<T> for (Bound<T>, Bound<T>) 
RangeArgument			pub trait RangeArgument<T: ?Sized> 
RangeArgument for Range			impl<T> RangeArgument<T> for Range<T> 
RangeArgument for RangeFrom			impl<T> RangeArgument<T> for RangeFrom<T> 
RangeArgument for RangeFull			impl<T: ?Sized> RangeArgument<T> for RangeFull 
RangeArgument for RangeInclusive			impl<T> RangeArgument<T> for RangeInclusive<T> 
RangeArgument for RangeTo			impl<T> RangeArgument<T> for RangeTo<T> 
RangeArgument for RangeToInclusive			impl<T> RangeArgument<T> for RangeToInclusive<T> 
RangeMut			impl<'a, K, V> RangeMut<'a, K, V> 
RangeMut			pub struct RangeMut<'a, K: 'a, V: 'a> 
RawVec			impl<T, A: Alloc> RawVec<T, A> 
RawVec			impl<T> RawVec<T, Heap> 
RawVec			pub struct RawVec<T, A: Alloc = Heap> 
Rc			impl Rc<str> 
Rc			impl<T: ?Sized> Rc<T> 
Rc			impl<T: Clone> Rc<T> 
Rc			impl<T> Rc<T> 
Rc			impl<T> Rc<[T]> 
Rc			pub struct Rc<T: ?Sized> 
RcBox			struct RcBox<T: ?Sized> 
RcBoxPtr			trait RcBoxPtr<T: ?Sized> 
RcBoxPtr for Rc			impl<T: ?Sized> RcBoxPtr<T> for Rc<T> 
RcBoxPtr for Weak			impl<T: ?Sized> RcBoxPtr<T> for Weak<T> 
RecCy			struct RecCy 
Recover			trait Recover<Q: ?Sized> 
RingSlices			impl<'a, T> RingSlices for &'a [T] 
RingSlices			impl<'a, T> RingSlices for &'a mut [T] 
RingSlices			trait RingSlices: Sized 
Root			impl<K, V> Root<K, V> 
Root			pub struct Root<K, V> 
Run			    struct Run 
SearchResult			pub enum SearchResult<BorrowType, K, V, FoundType, GoDownType> 
Send			unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send
Send			unsafe impl<'a, K: Sync + 'a, V: Sync + 'a, Type> Send
Send			unsafe impl<K: Send, V: Send, Type> Send
Send for Arc			unsafe impl<T: ?Sized + Sync + Send> Send for Arc<T> {}
Send for ArcInner			unsafe impl<T: ?Sized + Sync + Send> Send for ArcInner<T> {}
Send for Drain			unsafe impl<'a> Send for Drain<'a> {}
Send for Drain			unsafe impl<'a, T: Send> Send for Drain<'a, T> {}
Send for Drain			unsafe impl<'a, T: Send> Send for Drain<'a, T> {}
Send for IntoIter			unsafe impl<T: Send> Send for IntoIter<T> {}
Send for Iter			unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}
Send for IterMut			unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}
Send for LinkedList			unsafe impl<T: Send> Send for LinkedList<T> {}
Send for Root			unsafe impl<K: Send, V: Send> Send for Root<K, V> { }
Send for Splice			unsafe impl<'a, 'b> Send for Splice<'a, 'b> {}
Send for Weak			unsafe impl<T: ?Sized + Sync + Send> Send for Weak<T> {}
SetLenOnDrop			impl<'a> SetLenOnDrop<'a> 
SetLenOnDrop			struct SetLenOnDrop<'a> 
SliceConcatExt			pub trait SliceConcatExt<T: ?Sized> 
SpecExtend			impl<T: Ord> SpecExtend<BinaryHeap<T>> for BinaryHeap<T> 
SpecExtend			trait SpecExtend<I: IntoIterator> 
SpecExtend			impl<T> SpecExtend<LinkedList<T>> for LinkedList<T> 
SpecExtend			impl<'a, T: 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T>
SpecExtend			impl<T> SpecExtend<T, IntoIter<T>> for Vec<T> 
SpecExtend			trait SpecExtend<T, I> 
SpecExtend for LinkedList			impl<I: IntoIterator> SpecExtend<I> for LinkedList<I::Item> 
SpecExtend for Vec			impl<'a, T: 'a, I> SpecExtend<&'a T, I> for Vec<T>
SpecExtend for Vec			impl<T, I> SpecExtend<T, I> for Vec<T>
SpecFromElem			        impl SpecFromElem for 
SpecFromElem			trait SpecFromElem: Sized 
SpecFromElem for T			impl<T: Clone> SpecFromElem for T 
SpecFromElem for u8			impl SpecFromElem for u8 
Splice			pub struct Splice<'a, 'b> 
Splice			pub struct Splice<'a, I: Iterator + 'a> 
String			impl String 
String			pub struct String 
Sub			impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>> for &'a BTreeSet<T> 
SymmetricDifference			pub struct SymmetricDifference<'a, T: 'a> 
Sync			unsafe impl<BorrowType, K: Sync, V: Sync, Type> Sync
Sync for Arc			unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> {}
Sync for ArcInner			unsafe impl<T: ?Sized + Sync + Send> Sync for ArcInner<T> {}
Sync for Drain			unsafe impl<'a> Sync for Drain<'a> {}
Sync for Drain			unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}
Sync for Drain			unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}
Sync for IntoIter			unsafe impl<T: Sync> Sync for IntoIter<T> {}
Sync for Iter			unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}
Sync for IterMut			unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}
Sync for LinkedList			unsafe impl<T: Sync> Sync for LinkedList<T> {}
Sync for Root			unsafe impl<K: Sync, V: Sync> Sync for Root<K, V> { }
Sync for Splice			unsafe impl<'a, 'b> Sync for Splice<'a, 'b> {}
Sync for Weak			unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> {}
Taggy			enum Taggy 
Taggypar			enum Taggypar<T> 
Test			struct Test;
ToOwned			pub trait ToOwned 
ToOwned			impl<T: Clone> ToOwned for [T] 
ToOwned for T			impl<T> ToOwned for T
ToOwned for str			impl ToOwned for str 
ToString			pub trait ToString 
ToString for Cow			impl<'a> ToString for Cow<'a, str> 
ToString for String			impl ToString for String 
ToString for T			impl<T: fmt::Display + ?Sized> ToString for T 
ToString for str			impl ToString for str 
TrustedLen for IntoIter			unsafe impl<T> TrustedLen for IntoIter<T> {}
TwoVec			    struct TwoVec<T> 
UnderflowResult			enum UnderflowResult<'a, K, V> 
Union			pub struct Union<'a, T: 'a> 
VacantEntry			impl<'a, K: Ord, V> VacantEntry<'a, K, V> 
VacantEntry			pub struct VacantEntry<'a, K: 'a, V: 'a> 
Values			pub struct Values<'a, K: 'a, V: 'a> 
ValuesMut			pub struct ValuesMut<'a, K: 'a, V: 'a> 
Vec			impl<T: Clone> Vec<T> 
Vec			impl<T: Default> Vec<T> 
Vec			impl<T: PartialEq> Vec<T> 
Vec			impl<T> Vec<T> 
Vec			pub struct Vec<T> 
VecDeque			impl<T: Clone> VecDeque<T> 
VecDeque			impl<T> VecDeque<T> 
VecDeque			pub struct VecDeque<T> 
Weak			impl<T: ?Sized> Weak<T> 
Weak			impl<T> Weak<T> 
Weak			pub struct Weak<T: ?Sized> 
Weak			impl<T: ?Sized> Weak<T> 
Weak			impl<T> Weak<T> 
Weak			pub struct Weak<T: ?Sized> 
__core			pub mod __core 
__from_array			    pub fn __from_array(value: Box<[T]>) -> Rc<[T]> 
__from_str			    pub fn __from_str(value: &str) -> Rc<str> 
__rust_alloc			    fn __rust_alloc(size: usize, align: usize, err: *mut u8) -> *mut u8;
__rust_alloc_excess			    fn __rust_alloc_excess(size: usize,
__rust_alloc_zeroed			    fn __rust_alloc_zeroed(size: usize, align: usize, err: *mut u8) -> *mut u8;
__rust_dealloc			    fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);
__rust_grow_in_place			    fn __rust_grow_in_place(ptr: *mut u8,
__rust_oom			    fn __rust_oom(err: *const u8) -> !;
__rust_realloc			    fn __rust_realloc(ptr: *mut u8,
__rust_realloc_excess			    fn __rust_realloc_excess(ptr: *mut u8,
__rust_shrink_in_place			    fn __rust_shrink_in_place(ptr: *mut u8,
__rust_usable_size			    fn __rust_usable_size(layout: *const u8,
a			    fn a<'a>(x: LinkedList<&'static str>) -> LinkedList<&'a str> 
a_million_letter_a			    fn a_million_letter_a() -> String 
a_million_letter_x			    fn a_million_letter_x() -> String 
add			    fn add(mut self, rhs: &'a str) -> Self::Output 
add			    fn add(mut self, rhs: Cow<'a, str>) -> Self::Output 
add			    fn add(mut self, other: &str) -> String 
add_assign			    fn add_assign(&mut self, rhs: &'a str) 
add_assign			    fn add_assign(&mut self, rhs: Cow<'a, str>) 
add_assign			    fn add_assign(&mut self, other: &str) 
align			    pub fn align(&self) -> usize { self.align }
align_to			    pub fn align_to(&self, align: usize) -> Self 
alloc			    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;
alloc			    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> 
alloc			            unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> 
alloc			    pub fn alloc(&self) -> &A 
alloc_array			    fn alloc_array<T>(&mut self, n: usize) -> Result<Unique<T>, AllocErr>
alloc_excess			    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> 
alloc_excess			    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> 
alloc_guard			fn alloc_guard(alloc_size: usize) 
alloc_mut			    pub fn alloc_mut(&mut self) -> &mut A 
alloc_one			    fn alloc_one<T>(&mut self) -> Result<Unique<T>, AllocErr>
alloc_owned_small			    fn alloc_owned_small(b: &mut Bencher) 
alloc_zeroed			    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> 
alloc_zeroed			    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> 
allocate_in			    fn allocate_in(cap: usize, zeroed: bool, mut a: A) -> Self 
allocate_zeroed			    fn allocate_zeroed() 
allocator			pub mod allocator;
allocator_param			    fn allocator_param() 
amortized_new_size			    fn amortized_new_size(&self, used_cap: usize, needed_extra_cap: usize) -> (usize, usize) 
any_move			fn any_move() 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
append_elements			    unsafe fn append_elements(&mut self, other: *const [T]) 
arc			pub mod arc;
array			    pub fn array<T>(n: usize) -> Option<Self> 
as_bytes			    pub fn as_bytes(&self) -> &[u8] 
as_bytes			    pub fn as_bytes(&self) -> &[u8] 
as_bytes_mut			    pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] 
as_internal			    fn as_internal(&self) -> &InternalNode<K, V> 
as_internal_mut			    fn as_internal_mut(&mut self) -> &mut InternalNode<K, V> 
as_leaf			    fn as_leaf(&self) -> &LeafNode<K, V> 
as_leaf_mut			    fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> 
as_mut			    fn as_mut(&mut self) -> &mut T 
as_mut			    pub fn as_mut(&mut self)
as_mut			    fn as_mut(&mut self) -> &mut Vec<T> 
as_mut			    fn as_mut(&mut self) -> &mut [T] 
as_mut_ptr			    pub fn as_mut_ptr(&mut self) -> *mut T 
as_mut_slice			    pub fn as_mut_slice(&mut self) -> &mut [T] 
as_mut_slices			    pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) 
as_mut_str			    pub fn as_mut_str(&mut self) -> &mut str 
as_mut_vec			    pub unsafe fn as_mut_vec(&mut self) -> &mut Vec<u8> 
as_ptr			    fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> 
as_ptr			    pub fn as_ptr(&self) -> *const T 
as_ptr			    pub fn as_ptr(&self) -> *const u8 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    pub fn as_ref(&self)
as_ref			    fn as_ref(&self) -> &T 
as_ref			    fn as_ref(&self) -> &[u8] 
as_ref			    fn as_ref(&self) -> &str 
as_ref			    fn as_ref(&self) -> &Vec<T> 
as_ref			    fn as_ref(&self) -> &[T] 
as_slice			    pub fn as_slice(&self) -> &[T] 
as_slices			    pub fn as_slices(&self) -> (&[T], &[T]) 
as_str			    pub fn as_str(&self) -> &str 
ascend			    pub fn ascend(self) -> Result<
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
b			    fn b<'i, 'a>(x: Iter<'i, &'static str>) -> Iter<'i, &'a str> 
back			    pub fn back(&self) -> Option<&T> 
back			    pub fn back(&self) -> Option<&T> 
back_mut			    pub fn back_mut(&mut self) -> Option<&mut T> 
back_mut			    pub fn back_mut(&mut self) -> Option<&mut T> 
back_place			    pub fn back_place(&mut self) -> BackPlace<T> 
bench_clone_0000			fn bench_clone_0000(b: &mut Bencher) 
bench_clone_0010			fn bench_clone_0010(b: &mut Bencher) 
bench_clone_0100			fn bench_clone_0100(b: &mut Bencher) 
bench_clone_1000			fn bench_clone_1000(b: &mut Bencher) 
bench_clone_from_01_0000_0000			fn bench_clone_from_01_0000_0000(b: &mut Bencher) 
bench_clone_from_01_0000_0010			fn bench_clone_from_01_0000_0010(b: &mut Bencher) 
bench_clone_from_01_0000_0100			fn bench_clone_from_01_0000_0100(b: &mut Bencher) 
bench_clone_from_01_0000_1000			fn bench_clone_from_01_0000_1000(b: &mut Bencher) 
bench_clone_from_01_0010_0000			fn bench_clone_from_01_0010_0000(b: &mut Bencher) 
bench_clone_from_01_0010_0010			fn bench_clone_from_01_0010_0010(b: &mut Bencher) 
bench_clone_from_01_0010_0100			fn bench_clone_from_01_0010_0100(b: &mut Bencher) 
bench_clone_from_01_0100_0010			fn bench_clone_from_01_0100_0010(b: &mut Bencher) 
bench_clone_from_01_0100_0100			fn bench_clone_from_01_0100_0100(b: &mut Bencher) 
bench_clone_from_01_0100_1000			fn bench_clone_from_01_0100_1000(b: &mut Bencher) 
bench_clone_from_01_1000_0100			fn bench_clone_from_01_1000_0100(b: &mut Bencher) 
bench_clone_from_01_1000_1000			fn bench_clone_from_01_1000_1000(b: &mut Bencher) 
bench_clone_from_10_0000_0000			fn bench_clone_from_10_0000_0000(b: &mut Bencher) 
bench_clone_from_10_0000_0010			fn bench_clone_from_10_0000_0010(b: &mut Bencher) 
bench_clone_from_10_0000_0100			fn bench_clone_from_10_0000_0100(b: &mut Bencher) 
bench_clone_from_10_0000_1000			fn bench_clone_from_10_0000_1000(b: &mut Bencher) 
bench_clone_from_10_0010_0000			fn bench_clone_from_10_0010_0000(b: &mut Bencher) 
bench_clone_from_10_0010_0010			fn bench_clone_from_10_0010_0010(b: &mut Bencher) 
bench_clone_from_10_0010_0100			fn bench_clone_from_10_0010_0100(b: &mut Bencher) 
bench_clone_from_10_0100_0010			fn bench_clone_from_10_0100_0010(b: &mut Bencher) 
bench_clone_from_10_0100_0100			fn bench_clone_from_10_0100_0100(b: &mut Bencher) 
bench_clone_from_10_0100_1000			fn bench_clone_from_10_0100_1000(b: &mut Bencher) 
bench_clone_from_10_1000_0100			fn bench_clone_from_10_1000_0100(b: &mut Bencher) 
bench_clone_from_10_1000_1000			fn bench_clone_from_10_1000_1000(b: &mut Bencher) 
bench_collect_into			fn bench_collect_into(b: &mut Bencher) 
bench_contains_bad_naive			fn bench_contains_bad_naive(b: &mut Bencher) 
bench_contains_equal			fn bench_contains_equal(b: &mut Bencher) 
bench_contains_short_long			fn bench_contains_short_long(b: &mut Bencher) 
bench_contains_short_short			fn bench_contains_short_short(b: &mut Bencher) 
bench_exact_size_shrink_to_fit			fn bench_exact_size_shrink_to_fit(b: &mut Bencher) 
bench_extend_0000_0000			fn bench_extend_0000_0000(b: &mut Bencher) 
bench_extend_0000_0010			fn bench_extend_0000_0010(b: &mut Bencher) 
bench_extend_0000_0100			fn bench_extend_0000_0100(b: &mut Bencher) 
bench_extend_0000_1000			fn bench_extend_0000_1000(b: &mut Bencher) 
bench_extend_0010_0010			fn bench_extend_0010_0010(b: &mut Bencher) 
bench_extend_0100_0100			fn bench_extend_0100_0100(b: &mut Bencher) 
bench_extend_1000_1000			fn bench_extend_1000_1000(b: &mut Bencher) 
bench_from			fn bench_from(b: &mut Bencher) 
bench_from_elem_0000			fn bench_from_elem_0000(b: &mut Bencher) 
bench_from_elem_0010			fn bench_from_elem_0010(b: &mut Bencher) 
bench_from_elem_0100			fn bench_from_elem_0100(b: &mut Bencher) 
bench_from_elem_1000			fn bench_from_elem_1000(b: &mut Bencher) 
bench_from_fn_0000			fn bench_from_fn_0000(b: &mut Bencher) 
bench_from_fn_0010			fn bench_from_fn_0010(b: &mut Bencher) 
bench_from_fn_0100			fn bench_from_fn_0100(b: &mut Bencher) 
bench_from_fn_1000			fn bench_from_fn_1000(b: &mut Bencher) 
bench_from_iter_0000			fn bench_from_iter_0000(b: &mut Bencher) 
bench_from_iter_0010			fn bench_from_iter_0010(b: &mut Bencher) 
bench_from_iter_0100			fn bench_from_iter_0100(b: &mut Bencher) 
bench_from_iter_1000			fn bench_from_iter_1000(b: &mut Bencher) 
bench_from_slice_0000			fn bench_from_slice_0000(b: &mut Bencher) 
bench_from_slice_0010			fn bench_from_slice_0010(b: &mut Bencher) 
bench_from_slice_0100			fn bench_from_slice_0100(b: &mut Bencher) 
bench_from_slice_1000			fn bench_from_slice_1000(b: &mut Bencher) 
bench_from_str			fn bench_from_str(b: &mut Bencher) 
bench_grow_1025			fn bench_grow_1025(b: &mut Bencher) 
bench_iter			fn bench_iter(b: &mut Bencher, size: i32) 
bench_iter			fn bench_iter(b: &mut Bencher) 
bench_iter_1000			fn bench_iter_1000(b: &mut Bencher) 
bench_iter_mut			fn bench_iter_mut(b: &mut Bencher) 
bench_iter_mut_rev			fn bench_iter_mut_rev(b: &mut Bencher) 
bench_iter_rev			fn bench_iter_rev(b: &mut Bencher) 
bench_join			fn bench_join(b: &mut Bencher) 
bench_mut_iter_1000			fn bench_mut_iter_1000(b: &mut Bencher) 
bench_new			fn bench_new(b: &mut Bencher) 
bench_new			fn bench_new(b: &mut Bencher) 
bench_pop_back_100			    fn bench_pop_back_100(b: &mut test::Bencher) 
bench_pop_front_100			    fn bench_pop_front_100(b: &mut test::Bencher) 
bench_push_all_0000_0000			fn bench_push_all_0000_0000(b: &mut Bencher) 
bench_push_all_0000_0010			fn bench_push_all_0000_0010(b: &mut Bencher) 
bench_push_all_0000_0100			fn bench_push_all_0000_0100(b: &mut Bencher) 
bench_push_all_0000_1000			fn bench_push_all_0000_1000(b: &mut Bencher) 
bench_push_all_0010_0010			fn bench_push_all_0010_0010(b: &mut Bencher) 
bench_push_all_0100_0100			fn bench_push_all_0100_0100(b: &mut Bencher) 
bench_push_all_1000_1000			fn bench_push_all_1000_1000(b: &mut Bencher) 
bench_push_all_move_0000_0000			fn bench_push_all_move_0000_0000(b: &mut Bencher) 
bench_push_all_move_0000_0010			fn bench_push_all_move_0000_0010(b: &mut Bencher) 
bench_push_all_move_0000_0100			fn bench_push_all_move_0000_0100(b: &mut Bencher) 
bench_push_all_move_0000_1000			fn bench_push_all_move_0000_1000(b: &mut Bencher) 
bench_push_all_move_0010_0010			fn bench_push_all_move_0010_0010(b: &mut Bencher) 
bench_push_all_move_0100_0100			fn bench_push_all_move_0100_0100(b: &mut Bencher) 
bench_push_all_move_1000_1000			fn bench_push_all_move_1000_1000(b: &mut Bencher) 
bench_push_back			fn bench_push_back(b: &mut Bencher) 
bench_push_back_100			    fn bench_push_back_100(b: &mut test::Bencher) 
bench_push_back_pop_back			fn bench_push_back_pop_back(b: &mut Bencher) 
bench_push_char_one_byte			fn bench_push_char_one_byte(b: &mut Bencher) 
bench_push_char_two_bytes			fn bench_push_char_two_bytes(b: &mut Bencher) 
bench_push_front			fn bench_push_front(b: &mut Bencher) 
bench_push_front_100			    fn bench_push_front_100(b: &mut test::Bencher) 
bench_push_front_pop_front			fn bench_push_front_pop_front(b: &mut Bencher) 
bench_push_str			fn bench_push_str(b: &mut Bencher) 
bench_push_str_one_byte			fn bench_push_str_one_byte(b: &mut Bencher) 
bench_to_string			fn bench_to_string(b: &mut Bencher) 
bench_with_capacity			fn bench_with_capacity(b: &mut Bencher) 
bench_with_capacity_0000			fn bench_with_capacity_0000(b: &mut Bencher) 
bench_with_capacity_0010			fn bench_with_capacity_0010(b: &mut Bencher) 
bench_with_capacity_0100			fn bench_with_capacity_0100(b: &mut Bencher) 
bench_with_capacity_1000			fn bench_with_capacity_1000(b: &mut Bencher) 
better_to_rebuild			        fn better_to_rebuild(len1: usize, len2: usize) -> bool 
binary_heap			pub mod binary_heap;
binary_heap			mod binary_heap;
binary_search			    pub fn binary_search(&self, x: &T) -> Result<usize, usize>
binary_search_by			    pub fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>
binary_search_by_key			    pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>
bitand			    fn bitand(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitor			    fn bitor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitxor			    fn bitxor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
borrow			    fn borrow(&self) -> &T 
borrow			    fn borrow(&self) -> &B 
borrow			    fn borrow(&self) -> &T 
borrow			pub mod borrow;
borrow			    fn borrow(&self) -> &T 
borrow			    fn borrow(&self) -> &[T] 
borrow			    fn borrow(&self) -> &str 
borrow::Borrow for Arc			impl<T: ?Sized> borrow::Borrow<T> for Arc<T> 
borrow::Borrow for Box			impl<T: ?Sized> borrow::Borrow<T> for Box<T> 
borrow::Borrow for Rc			impl<T: ?Sized> borrow::Borrow<T> for Rc<T> 
borrow::BorrowMut for Box			impl<T: ?Sized> borrow::BorrowMut<T> for Box<T> 
borrow_mut			    fn borrow_mut(&mut self) -> &mut T 
borrow_mut			    fn borrow_mut(&mut self) -> &mut [T] 
boxed			mod boxed 
boxed			pub mod boxed;
boxed_test			mod boxed_test;
btree			mod btree;
btree			mod btree;
btree			mod btree;
btree_map			pub mod btree_map 
btree_set			pub mod btree_set 
buffer_as_mut_slice			    unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] 
buffer_as_slice			    unsafe fn buffer_as_slice(&self) -> &[T] 
buffer_read			    unsafe fn buffer_read(&mut self, off: usize) -> T 
buffer_write			    unsafe fn buffer_write(&mut self, off: usize, value: T) 
bulk_steal_left			    pub fn bulk_steal_left(&mut self, count: usize) 
bulk_steal_right			    pub fn bulk_steal_right(&mut self, count: usize) 
bwd			                fn bwd() 
bytes			    pub fn bytes(&self) -> Bytes 
c			    fn c<'a>(x: IntoIter<&'static str>) -> IntoIter<&'a str> 
call_box			    fn call_box(self: Box<F>, args: A) -> F::Output 
call_box			    fn call_box(self: Box<Self>, args: A) -> Self::Output;
call_once			    extern "rust-call" fn call_once(self, args: A) -> R 
can_merge			    pub fn can_merge(&self) -> bool 
cap			    pub fn cap(&self) -> usize 
cap			    fn cap(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
case			    fn case(a: Vec<i32>, b: Vec<i32>) 
case_ignoreable_then_cased			        fn case_ignoreable_then_cased<I: Iterator<Item = char>>(iter: I) -> bool 
cast_unchecked			    unsafe fn cast_unchecked<NewType>(&mut self)
char_indices			    pub fn char_indices(&self) -> CharIndices 
char_indicesator			fn char_indicesator(b: &mut Bencher) 
char_indicesator_rev			fn char_indicesator_rev(b: &mut Bencher) 
char_iterator			fn char_iterator(b: &mut Bencher) 
char_iterator_ascii			fn char_iterator_ascii(b: &mut Bencher) 
char_iterator_for			fn char_iterator_for(b: &mut Bencher) 
char_iterator_rev			fn char_iterator_rev(b: &mut Bencher) 
char_iterator_rev_for			fn char_iterator_rev_for(b: &mut Bencher) 
chars			    pub fn chars(&self) -> Chars 
check			    fn check<'a, L, R>(lhs: L, rhs: R)
check			fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)
check_contains_all_substrings			fn check_contains_all_substrings(s: &str) 
check_cow_add_assign_cow			fn check_cow_add_assign_cow() 
check_cow_add_assign_str			fn check_cow_add_assign_str() 
check_cow_add_cow			fn check_cow_add_cow() 
check_cow_add_str			fn check_cow_add_str() 
check_cow_clone_from			fn check_cow_clone_from() 
check_difference			    fn check_difference(a: &[i32], b: &[i32], expected: &[i32]) 
check_intersection			    fn check_intersection(a: &[i32], b: &[i32], expected: &[i32]) 
check_links			    pub fn check_links<T>(list: &LinkedList<T>) 
check_symmetric_difference			    fn check_symmetric_difference(a: &[i32], b: &[i32], expected: &[i32]) 
check_to_vec			fn check_to_vec(mut data: Vec<i32>) 
check_union			    fn check_union(a: &[i32], b: &[i32], expected: &[i32]) 
chunks			    pub fn chunks(&self, size: usize) -> Chunks<T> 
chunks_mut			    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clone			    fn clone(&self) -> Arc<T> 
clone			    fn clone(&self) -> Weak<T> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Cow<'a, B> 
clone			    fn clone(&self) -> Box<T> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> BTreeMap<K, V> 
clone			    fn clone(&self) -> Iter<'a, K, V> 
clone			    fn clone(&self) -> Keys<'a, K, V> 
clone			    fn clone(&self) -> Range<'a, K, V> 
clone			    fn clone(&self) -> Values<'a, K, V> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Difference<'a, T> 
clone			    fn clone(&self) -> Intersection<'a, T> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> Range<'a, T> 
clone			    fn clone(&self) -> SymmetricDifference<'a, T> 
clone			    fn clone(&self) -> Union<'a, T> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Rc<T> 
clone			    fn clone(&self) -> Weak<T> 
clone			    fn clone(&self) -> ParseError 
clone			    fn clone(&self) -> Self 
clone			        fn clone(&self) -> Self 
clone			    fn clone(&self) -> IntoIter<T> 
clone			    fn clone(&self) -> Vec<T> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> VecDeque<T> 
clone_from			    fn clone_from(&mut self, source: &Self) 
clone_from			    fn clone_from(&mut self, source: &Cow<'a, B>) 
clone_from			    fn clone_from(&mut self, source: &Box<T>) 
clone_from			    fn clone_from(&mut self, source: &Self) 
clone_from			    fn clone_from(&mut self, other: &Vec<T>) 
clone_from_slice			    pub fn clone_from_slice(&mut self, src: &[T]) where T: Clone 
clone_into			    fn clone_into(&self, target: &mut Self::Owned) 
clone_into			    fn clone_into(&self, target: &mut T) 
clone_into			    fn clone_into(&self, target: &mut Vec<T>) 
clone_into			    fn clone_into(&self, target: &mut String) 
clone_subtree			        fn clone_subtree<K: Clone, V: Clone>(node: node::NodeRef<marker::Immut,
cmp			    fn cmp(&self, other: &Arc<T>) -> Ordering 
cmp			    fn cmp(&self, other: &Cow<'a, B>) -> Ordering 
cmp			    fn cmp(&self, other: &Box<T>) -> Ordering 
cmp			    fn cmp(&self, other: &BTreeMap<K, V>) -> Ordering 
cmp			    fn cmp(&self, other: &Self) -> Ordering 
cmp			    fn cmp(&self, other: &Rc<T>) -> Ordering 
cmp			        fn cmp(&self, _: &Self) -> Ordering 
cmp			        fn cmp(&self, other: &Self) -> Ordering 
cmp			    fn cmp(&self, other: &Vec<T>) -> Ordering 
cmp			    fn cmp(&self, other: &VecDeque<A>) -> Ordering 
cmp_opt			fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering) -> Ordering 
cmp_search_to_vec			    fn cmp_search_to_vec<'a, P: Pattern<'a>>(rev: bool, pat: P, haystack: &'a str,
collapse			    fn collapse(runs: &[Run]) -> Option<usize> 
concat			fn concat(b: &mut Bencher) 
concat			    fn concat(&self) -> Self::Output;
concat			    fn concat(&self) -> Vec<T> 
concat			    fn concat(&self) -> String 
connect			    fn connect(&self, sep: &T) -> Self::Output;
connect			    fn connect(&self, sep: &T) -> Vec<T> 
connect			    fn connect(&self, sep: &str) -> String 
contains			    pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool
contains			    pub fn contains(&self, x: &T) -> bool
contains			    pub fn contains(&self, x: &T) -> bool
contains			    pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool 
contains			    pub fn contains(&self, x: &T) -> bool
contains_key			    pub fn contains_key<Q: ?Sized>(&self, key: &Q) -> bool
contains_last_element			fn contains_last_element(b: &mut Bencher) 
contains_weird_cases			fn contains_weird_cases() 
copy			    unsafe fn copy(&self, dst: usize, src: usize, len: usize) 
copy_from_slice			    pub fn copy_from_slice(&mut self, src: &[T]) where T: Copy 
copy_nonoverlapping			    unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) 
correct_all_childrens_parent_links			    fn correct_all_childrens_parent_links(&mut self) 
correct_childrens_parent_links			    fn correct_childrens_parent_links(&mut self, first: usize, after_last: usize) 
correct_parent_link			    fn correct_parent_link(mut self) 
count			    fn count(self) -> usize 
count			fn count(tail: usize, head: usize, size: usize) -> usize 
cow_str			mod cow_str;
create_vec_and_test_convert			        fn create_vec_and_test_convert(cap: usize, offset: usize, len: usize) 
dealloc			    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout);
dealloc			    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) 
dealloc			            unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) 
dealloc_array			    unsafe fn dealloc_array<T>(&mut self, ptr: Unique<T>, n: usize) -> Result<(), AllocErr>
dealloc_buffer			    pub unsafe fn dealloc_buffer(&mut self) 
dealloc_one			    unsafe fn dealloc_one<T>(&mut self, ptr: Unique<T>)
deallocate_and_ascend			    pub unsafe fn deallocate_and_ascend(self) -> Option<
dec_strong			    fn dec_strong(&self) 
dec_weak			    fn dec_weak(&self) 
decrement_and_get			    unsafe fn decrement_and_get<T>(ptr: &mut *mut T) -> *mut T 
dedup			    pub fn dedup(&mut self) 
dedup_by			    pub fn dedup_by<F>(&mut self, mut same_bucket: F) where F: FnMut(&mut T, &mut T) -> bool 
dedup_by_key			    pub fn dedup_by_key<F, K>(&mut self, mut key: F) where F: FnMut(&mut T) -> K, K: PartialEq 
default			    fn default() -> Arc<T> 
default			    fn default() -> Weak<T> 
default			    fn default() -> BinaryHeap<T> 
default			    fn default() -> Cow<'a, B> 
default			    fn default() -> Box<T> 
default			    fn default() -> Box<[T]> 
default			    fn default() -> Box<str> 
default			    fn default() -> BTreeMap<K, V> 
default			    fn default() -> BTreeSet<T> 
default			    fn default() -> Self 
default			    fn default() -> Rc<T> 
default			    fn default() -> Weak<T> 
default			    fn default() -> String 
default			    fn default() -> Vec<T> 
default			    fn default() -> VecDeque<T> 
deref			    fn deref(&self) -> &T 
deref			    fn deref(&self) -> &T 
deref			    fn deref(&self) -> &B 
deref			    fn deref(&self) -> &T 
deref			fn deref() 
deref			    fn deref(&self) -> &T 
deref			    fn deref(&self) -> &str 
deref			    fn deref(&self) -> &[T] 
deref_mut			    fn deref_mut(&mut self) -> &mut T 
deref_mut			    fn deref_mut(&mut self) -> &mut T 
deref_mut			    fn deref_mut(&mut self) -> &mut str 
deref_mut			    fn deref_mut(&mut self) -> &mut [T] 
descend			    pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> 
description			    pub fn description(&self) -> &str 
dfs			        fn dfs<K, V>(node: NodeRef<marker::Immut, K, V, marker::LeafOrInternal>) -> usize 
diff			        fn diff(a: usize, b: usize) -> usize 
difference			    pub fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T> 
different_str_pattern_forwarding_lifetimes			fn different_str_pattern_forwarding_lifetimes() 
do_bench_clone			fn do_bench_clone(b: &mut Bencher, src_len: usize) 
do_bench_clone_from			fn do_bench_clone_from(b: &mut Bencher, times: usize, dst_len: usize, src_len: usize) 
do_bench_extend			fn do_bench_extend(b: &mut Bencher, dst_len: usize, src_len: usize) 
do_bench_from_elem			fn do_bench_from_elem(b: &mut Bencher, src_len: usize) 
do_bench_from_fn			fn do_bench_from_fn(b: &mut Bencher, src_len: usize) 
do_bench_from_iter			fn do_bench_from_iter(b: &mut Bencher, src_len: usize) 
do_bench_from_slice			fn do_bench_from_slice(b: &mut Bencher, src_len: usize) 
do_bench_push_all			fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) 
do_bench_push_all_move			fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) 
do_bench_with_capacity			fn do_bench_with_capacity(b: &mut Bencher, src_len: usize) 
double			    pub fn double(&mut self) 
double_in_place			    pub fn double_in_place(&mut self) -> bool 
downcast			    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> 
downcast			    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> 
downgrade			    pub fn downgrade(this: &Self) -> Weak<T> 
downgrade			    pub fn downgrade(this: &Self) -> Weak<T> 
drain			    pub fn drain(&mut self) -> Drain<T> 
drain			    pub fn drain<R>(&mut self, range: R) -> Drain
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    pub fn drain<R>(&mut self, range: R) -> Drain<T>
drain			    pub fn drain<R>(&mut self, range: R) -> Drain<T>
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			            fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			        fn drop(&mut self) 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop_arc			    fn drop_arc() 
drop_arc_weak			    fn drop_arc_weak() 
drop_slow			    unsafe fn drop_slow(&mut self) 
element			    fn element(&self) -> &T 
encode_utf16			    pub fn encode_utf16(&self) -> EncodeUtf16 
end			    fn end(&self) -> Bound<&T> 
end			    fn end(&self) -> Bound<&T>;
ends_with			    pub fn ends_with(&self, needle: &[T]) -> bool
ends_with			    pub fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool
ends_with_diff_one_element_at_beginning			fn ends_with_diff_one_element_at_beginning(b: &mut Bencher) 
ends_with_same_vector			fn ends_with_same_vector(b: &mut Bencher) 
ends_with_single_element			fn ends_with_single_element(b: &mut Bencher) 
entry			    pub fn entry(&mut self, key: K) -> Entry<K, V> 
eq			    fn eq(&self, other: &Arc<T>) -> bool 
eq			    fn eq(&self, other: &Cow<'b, C>) -> bool 
eq			    fn eq(&self, other: &Box<T>) -> bool 
eq			    fn eq(&self, other: &BTreeMap<K, V>) -> bool 
eq			    fn eq(&self, other: &Self) -> bool 
eq			    fn eq(&self, other: &Self) -> bool 
eq			    fn eq(&self, other: &Rc<T>) -> bool 
eq			            fn eq(&self, other: &
eq			            fn eq(&self, other: &
eq			    fn eq(&self, _: &ParseError) -> bool 
eq			    fn eq(&self, other: &String) -> bool 
eq			        fn eq(&self, _: &Self) -> bool 
eq			        fn eq(&self, other: &Self) -> bool 
eq			            fn eq(&self, other: &
eq			            fn eq(&self, other: &
eq			    fn eq(&self, other: &VecDeque<A>) -> bool 
escape_debug			    pub fn escape_debug(&self) -> String 
escape_default			    pub fn escape_default(&self) -> String 
escape_unicode			    pub fn escape_unicode(&self) -> String 
exchange_malloc			unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 
extend			    pub fn extend(&self, next: Self) -> Option<(Self, usize)> 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<Iter: IntoIterator<Item = T>>(&mut self, iter: Iter) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a char>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a str>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = Cow<'a, str>>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = String>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) 
extend_desugared			    fn extend_desugared<I: IntoIterator<Item = T>>(&mut self, iter: I) 
extend_desugared			    fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) 
extend_from_slice			    pub fn extend_from_slice(&mut self, other: &[T]) 
extend_packed			    pub fn extend_packed(&self, next: Self) -> Option<(Self, usize)> 
extend_with			    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, value: E) 
f64_slice			fn f64_slice() 
fill			    unsafe fn fill<I: Iterator<Item=T>>(&mut self, replace_with: &mut I) -> bool 
finalize			    unsafe fn finalize(self) -> &'a T 
finalize			    unsafe fn finalize(b: IntermediateBox<T>) -> Box<T> 
finalize			    unsafe fn finalize(self) -> Box<T> 
finalize			unsafe fn finalize<T>(b: IntermediateBox<T>) -> Box<T> 
finalize			    unsafe fn finalize(self) 
finalize			unsafe fn finalize<T>(node: IntermediateBox<Node<T>>) -> Box<Node<T>> 
finalize			    unsafe fn finalize(mut self) -> &'a mut T 
finalize			    unsafe fn finalize(mut self) -> &'a mut T 
find			    pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> 
first			    pub fn first(&self) -> Option<&T> 
first_edge			    pub fn first_edge(self) -> Handle<Self, marker::Edge> 
first_kv			    pub fn first_kv(self) -> Handle<Self, marker::KV> 
first_leaf_edge			fn first_leaf_edge<BorrowType, K, V>
first_mut			    pub fn first_mut(&mut self) -> Option<&mut T> 
fix_left_border			    fn fix_left_border(&mut self) 
fix_right_border			    fn fix_right_border(&mut self) 
fix_right_edge			    fn fix_right_edge(&mut self) 
fix_top			    fn fix_top(&mut self) 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			pub mod fmt;
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			mod fmt;
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Arc			impl<T: ?Sized + fmt::Debug> fmt::Debug for Arc<T> 
fmt::Debug for BackPlace			impl<'a, T: 'a + fmt::Debug> fmt::Debug for BackPlace<'a, T> 
fmt::Debug for BinaryHeap			impl<T: fmt::Debug + Ord> fmt::Debug for BinaryHeap<T> 
fmt::Debug for BinaryHeapPlace			impl<'a, T: Clone + Ord + fmt::Debug> fmt::Debug for BinaryHeapPlace<'a, T> 
fmt::Debug for Box			impl<T: fmt::Debug + ?Sized> fmt::Debug for Box<T> 
fmt::Debug for Cow			impl<'a, B: ?Sized> fmt::Debug for Cow<'a, B>
fmt::Debug for Difference			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> 
fmt::Debug for Drain			impl<'a> fmt::Debug for Drain<'a> 
fmt::Debug for Drain			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> 
fmt::Debug for Drain			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> 
fmt::Debug for EncodeUtf16			impl<'a> fmt::Debug for EncodeUtf16<'a> 
fmt::Debug for FrontPlace			impl<'a, T: 'a + fmt::Debug> fmt::Debug for FrontPlace<'a, T> 
fmt::Debug for Intersection			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> 
fmt::Debug for IntoIter			impl<T: fmt::Debug> fmt::Debug for IntoIter<T> 
fmt::Debug for IntoIter			impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> 
fmt::Debug for IntoIter			impl<T: fmt::Debug> fmt::Debug for IntoIter<T> 
fmt::Debug for IntoIter			impl<T: fmt::Debug> fmt::Debug for IntoIter<T> 
fmt::Debug for IntoIter			impl<T: fmt::Debug> fmt::Debug for IntoIter<T> 
fmt::Debug for Iter			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> 
fmt::Debug for Iter			impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> 
fmt::Debug for Iter			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> 
fmt::Debug for Iter			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> 
fmt::Debug for Iter			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> 
fmt::Debug for IterMut			impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> 
fmt::Debug for IterMut			impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> 
fmt::Debug for Keys			impl<'a, K: 'a + fmt::Debug, V: 'a> fmt::Debug for Keys<'a, K, V> 
fmt::Debug for LinkedList			impl<T: fmt::Debug> fmt::Debug for LinkedList<T> 
fmt::Debug for ParseError			impl fmt::Debug for ParseError 
fmt::Debug for PeekMut			impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> 
fmt::Debug for Range			impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V> 
fmt::Debug for RangeMut			impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K, V> 
fmt::Debug for Rc			impl<T: ?Sized + fmt::Debug> fmt::Debug for Rc<T> 
fmt::Debug for String			impl fmt::Debug for String 
fmt::Debug for SymmetricDifference			impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> 
fmt::Debug for Union			impl<'a, T: 'a + fmt::Debug> fmt::Debug for Union<'a, T> 
fmt::Debug for Values			impl<'a, K: 'a, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V> 
fmt::Debug for Vec			impl<T: fmt::Debug> fmt::Debug for Vec<T> 
fmt::Debug for VecDeque			impl<T: fmt::Debug> fmt::Debug for VecDeque<T> 
fmt::Debug for Weak			impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> 
fmt::Debug for Weak			impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> 
fmt::Display for AllocErr			impl fmt::Display for AllocErr 
fmt::Display for Arc			impl<T: ?Sized + fmt::Display> fmt::Display for Arc<T> 
fmt::Display for Box			impl<T: fmt::Display + ?Sized> fmt::Display for Box<T> 
fmt::Display for CannotReallocInPlace			impl fmt::Display for CannotReallocInPlace 
fmt::Display for Cow			impl<'a, B: ?Sized> fmt::Display for Cow<'a, B>
fmt::Display for FromUtf16Error			impl fmt::Display for FromUtf16Error 
fmt::Display for FromUtf8Error			impl fmt::Display for FromUtf8Error 
fmt::Display for ParseError			impl fmt::Display for ParseError 
fmt::Display for Rc			impl<T: ?Sized + fmt::Display> fmt::Display for Rc<T> 
fmt::Display for String			impl fmt::Display for String 
fmt::Pointer for Arc			impl<T: ?Sized> fmt::Pointer for Arc<T> 
fmt::Pointer for Box			impl<T: ?Sized> fmt::Pointer for Box<T> 
fmt::Pointer for Rc			impl<T: ?Sized> fmt::Pointer for Rc<T> 
fmt::Write for String			impl fmt::Write for String 
fold			    fn fold<Acc, F>(self, mut accum: Acc, mut f: F) -> Acc
foo			    fn foo<'a, P>(p: P) where for<'b> &'b P: Pattern<'a> 
for_value			    pub fn for_value<T: ?Sized>(t: &T) -> Self 
force			    pub fn force(self) -> ForceResult<
forget_type			    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> 
format			pub fn format(args: Arguments) -> string::String 
from			    fn from(t: T) -> Self 
from			    fn from(heap: BinaryHeap<T>) -> Vec<T> 
from			    fn from(vec: Vec<T>) -> BinaryHeap<T> 
from			    fn from(s: &'a str) -> Box<str> 
from			    fn from(s: Box<str>) -> Self 
from			    fn from(slice: &'a [T]) -> Box<[T]> 
from			    fn from(t: T) -> Self 
from			    fn from(t: T) -> Self 
from			    fn from(s: &'a str) -> Cow<'a, str> 
from			    fn from(s: &'a str) -> String 
from			    fn from(s: Box<str>) -> String 
from			    fn from(s: Cow<'a, str>) -> String 
from			    fn from(s: String) -> Box<str> 
from			    fn from(s: String) -> Cow<'a, str> 
from			    fn from(string: String) -> Vec<u8> 
from			    fn from(s: &'a [T]) -> Cow<'a, [T]> 
from			    fn from(s: &'a [T]) -> Vec<T> 
from			    fn from(s: &'a mut [T]) -> Vec<T> 
from			    fn from(s: &'a str) -> Vec<u8> 
from			    fn from(s: Box<[T]>) -> Vec<T> 
from			    fn from(s: Cow<'a, [T]>) -> Vec<T> 
from			    fn from(v: Vec<T>) -> Box<[T]> 
from			    fn from(v: Vec<T>) -> Cow<'a, [T]> 
from			    fn from(mut other: Vec<T>) -> Self 
from			    fn from(other: VecDeque<T>) -> Self 
from_box			    pub fn from_box(mut slice: Box<[T]>) -> Self 
from_boxed_utf8_unchecked			pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> 
from_elem			            fn from_elem(elem: 
from_elem			    fn from_elem(elem: Self, n: usize) -> Vec<Self>;
from_elem			    fn from_elem(elem: u8, n: usize) -> Vec<u8> 
from_elem			pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> 
from_internal			    fn from_internal(node: Box<InternalNode<K, V>>) -> Self 
from_into_inner			fn from_into_inner() 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BinaryHeap<T> 
from_iter			    fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> BTreeMap<K, V> 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BTreeSet<T> 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self 
from_iter			    fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = &'a str>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = &'b str>>(it: I) -> Cow<'a, str> 
from_iter			    fn from_iter<I: IntoIterator<Item = Cow<'a, str>>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = String>>(it: I) -> Cow<'a, str> 
from_iter			    fn from_iter<I: IntoIterator<Item = String>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = char>>(it: I) -> Cow<'a, str> 
from_iter			    fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String 
from_iter			    fn from_iter(iter: I) -> Self;
from_iter			    fn from_iter(iterator: IntoIter<T>) -> Self 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(it: I) -> Cow<'a, [T]> 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> 
from_iter			    fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> VecDeque<A> 
from_leaf			    fn from_leaf(node: Box<LeafNode<K, V>>) -> Self 
from_ptr			    unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self 
from_raw			    pub unsafe fn from_raw(ptr: *const T) -> Self 
from_raw			    pub unsafe fn from_raw(raw: *mut T) -> Self 
from_raw			    pub unsafe fn from_raw(ptr: *const T) -> Self 
from_raw_parts			    pub unsafe fn from_raw_parts(ptr: *mut T, cap: usize) -> Self 
from_raw_parts			    pub unsafe fn from_raw_parts(buf: *mut u8, length: usize, capacity: usize) -> String 
from_raw_parts			    pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Vec<T> 
from_raw_parts_in			    pub unsafe fn from_raw_parts_in(ptr: *mut T, cap: usize, a: A) -> Self 
from_size_align			    pub fn from_size_align(size: usize, align: usize) -> Option<Layout> 
from_size_align_unchecked			    pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Layout 
from_sorted_iter			    fn from_sorted_iter<I: Iterator<Item = (K, V)>>(&mut self, iter: I) 
from_str			    fn from_str(s: &str) -> Result<String, ParseError> 
from_str			    pub fn from_str(_: &str) -> String 
from_utf16			    pub fn from_utf16(v: &[u16]) -> Result<String, FromUtf16Error> 
from_utf16_lossy			    pub fn from_utf16_lossy(v: &[u16]) -> String 
from_utf8			    pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> 
from_utf8_error			fn from_utf8_error() 
from_utf8_lossy			    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> 
from_utf8_lossy_100_ascii			fn from_utf8_lossy_100_ascii(b: &mut Bencher) 
from_utf8_lossy_100_invalid			fn from_utf8_lossy_100_invalid(b: &mut Bencher) 
from_utf8_lossy_100_multibyte			fn from_utf8_lossy_100_multibyte(b: &mut Bencher) 
from_utf8_lossy_invalid			fn from_utf8_lossy_invalid(b: &mut Bencher) 
from_utf8_mostly_ascii			fn from_utf8_mostly_ascii() 
from_utf8_unchecked			    pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String 
front			    pub fn front(&self) -> Option<&T> 
front			    pub fn front(&self) -> Option<&T> 
front_mut			    pub fn front_mut(&mut self) -> Option<&mut T> 
front_mut			    pub fn front_mut(&mut self) -> Option<&mut T> 
front_place			    pub fn front_place(&mut self) -> FrontPlace<T> 
fuzz_test			    fn fuzz_test(sz: i32) 
fwd			                fn fwd() 
ge			    fn ge(&self, other: &Arc<T>) -> bool 
ge			    fn ge(&self, other: &Box<T>) -> bool 
ge			    fn ge(&self, other: &Rc<T>) -> bool 
gen_ascending			fn gen_ascending(len: usize) -> Vec<u64> 
gen_big_random			fn gen_big_random(len: usize) -> Vec<[u64; 16]> 
gen_descending			fn gen_descending(len: usize) -> Vec<u64> 
gen_mostly_ascending			fn gen_mostly_ascending(len: usize) -> Vec<u64> 
gen_mostly_descending			fn gen_mostly_descending(len: usize) -> Vec<u64> 
gen_random			fn gen_random(len: usize) -> Vec<u64> 
gen_random_bytes			fn gen_random_bytes(len: usize) -> Vec<u8> 
gen_strings			fn gen_strings(len: usize) -> Vec<String> 
generate_test			fn generate_test() -> LinkedList<i32> 
get			    unsafe fn get(&self, index: usize) -> &T 
get			        fn get(&self) -> u32 
get			        fn get(&self) -> u32;
get			    fn get(&self, key: &Q) -> Option<&K> 
get			    pub fn get(&self) -> &V 
get			    pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V>
get			    fn get(&self, key: &Q) -> Option<&Self::Key>;
get			    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>
get			    pub fn get<I>(&self, index: I) -> Option<&I::Output>
get			    pub fn get<I: SliceIndex<str>>(&self, i: I) -> Option<&I::Output> 
get			    pub fn get(&self, index: usize) -> Option<&T> 
get_and_increment			    unsafe fn get_and_increment<T>(ptr: &mut *mut T) -> *mut T 
get_mut			    pub fn get_mut(this: &mut Self) -> Option<&mut T> 
get_mut			    pub fn get_mut(&mut self) -> &mut V 
get_mut			    pub fn get_mut<Q: ?Sized>(&mut self, key: &Q) -> Option<&mut V>
get_mut			    fn get_mut() 
get_mut			    pub fn get_mut(this: &mut Self) -> Option<&mut T> 
get_mut			    pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>
get_mut			    pub fn get_mut<I: SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> 
get_mut			    pub fn get_mut(&mut self, index: usize) -> Option<&mut T> 
get_unchecked			    pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
get_unchecked			    pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output 
get_unchecked_mut			    pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output
get_unchecked_mut			    pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output 
grow_if_necessary			    fn grow_if_necessary(&mut self) 
grow_in_place			    unsafe fn grow_in_place(&mut self,
grow_in_place			    unsafe fn grow_in_place(&mut self,
gt			    fn gt(&self, other: &Arc<T>) -> bool 
gt			    fn gt(&self, other: &Box<T>) -> bool 
gt			    fn gt(&self, other: &Rc<T>) -> bool 
hack			mod hack 
half_a_million_letter_a			    fn half_a_million_letter_a() -> String 
half_a_million_letter_x			    fn half_a_million_letter_x() -> String 
handle_cap_increase			    unsafe fn handle_cap_increase(&mut self, old_cap: usize) 
handle_underfull_node			fn handle_underfull_node<'a, K, V>(node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>)
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, hasher: &mut H) 
hash			fn hash<T: Hash>(t: &T) -> u64 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash::Hash for String			impl hash::Hash for String 
heap			pub mod heap;
height			    pub fn height(&self) -> usize 
homura			    fn homura<T: Deref<Target = i32>>(_: T) {}
i64_slice			fn i64_slice() 
inc_strong			    fn inc_strong(&self) 
inc_weak			    fn inc_weak(&self) 
increment_len			    fn increment_len(&mut self, increment: usize) 
index			    fn index(&self, key: &Q) -> &V 
index			    fn index(&self, _index: ops::RangeFull) -> &str 
index			    fn index(&self, index: ops::Range<usize>) -> &str 
index			    fn index(&self, index: ops::RangeFrom<usize>) -> &str 
index			    fn index(&self, index: ops::RangeInclusive<usize>) -> &str 
index			    fn index(&self, index: ops::RangeTo<usize>) -> &str 
index			    fn index(&self, index: ops::RangeToInclusive<usize>) -> &str 
index			    fn index(&self, _index: ops::RangeFull) -> &[T] 
index			    fn index(&self, index: ops::Range<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeInclusive<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeTo<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] 
index			    fn index(&self, index: usize) -> &T 
index			    fn index(&self, index: usize) -> &A 
index_mut			    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: usize) -> &mut T 
index_mut			    fn index_mut(&mut self, index: usize) -> &mut A 
inner			    fn inner(&self) -> &ArcInner<T> 
inner			    fn inner(&self) -> &RcBox<T> 
inner			    fn inner(&self) -> &RcBox<T>;
insert			    pub fn insert(&mut self, key: K, value: V) -> Option<V> 
insert			    pub fn insert(&mut self, value: V) -> V 
insert			    pub fn insert(self, value: V) -> &'a mut V 
insert			    pub fn insert(mut self, key: K, val: V)
insert			    pub fn insert(mut self, key: K, val: V, edge: Root<K, V>)
insert			    pub fn insert(&mut self, value: T) -> bool 
insert			    pub fn insert(&mut self, idx: usize, ch: char) 
insert			fn insert() 
insert			    pub fn insert(&mut self, index: usize, element: T) 
insert			    pub fn insert(&mut self, index: usize, value: T) 
insert_bad1			fn insert_bad1() 
insert_bad2			fn insert_bad2() 
insert_bytes			    unsafe fn insert_bytes(&mut self, idx: usize, bytes: &[u8]) 
insert_fit			    fn insert_fit(&mut self, key: K, val: V) -> *mut V 
insert_fit			    fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) 
insert_head			fn insert_head<T, F>(v: &mut [T], is_less: &mut F)
insert_next			    pub fn insert_next(&mut self, element: T) 
insert_str			    pub fn insert_str(&mut self, idx: usize, string: &str) 
intersection			    pub fn intersection<'a>(&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T> 
into_box			            unsafe fn into_box(self) -> Box<[T]> 
into_box			    pub unsafe fn into_box(self) -> Box<[T]> 
into_boxed_bytes			    pub fn into_boxed_bytes(self: Box<str>) -> Box<[u8]> 
into_boxed_slice			    pub fn into_boxed_slice(mut self) -> Box<[T]> 
into_boxed_str			    pub fn into_boxed_str(self) -> Box<str> 
into_bytes			    pub fn into_bytes(self) -> Vec<u8> 
into_cow			    fn into_cow(self) -> Cow<'a, B>;
into_cow			    fn into_cow(self) -> Cow<'a, str> 
into_element			    fn into_element(self: Box<Self>) -> T 
into_from_raw			    fn into_from_raw() 
into_from_raw			    fn into_from_raw() 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<K, V> 
into_iter			    fn into_iter(self) -> Iter<'a, K, V> 
into_iter			    fn into_iter(self) -> IterMut<'a, K, V> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    fn into_iter(self) -> IterMut<'a, T> 
into_iter			    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> 
into_iter			    fn into_iter<'new>(i: IntoIter<&'static str>) -> IntoIter<&'new str> 
into_iter			    fn into_iter(mut self) -> IntoIter<T> 
into_iter			    fn into_iter(mut self) -> slice::IterMut<'a, T> 
into_iter			    fn into_iter(self) -> slice::Iter<'a, T> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter_key			    fn into_iter_key<'new>(v: IntoIter<&'static str, ()>) -> IntoIter<&'new str, ()> 
into_iter_val			    fn into_iter_val<'new>(v: IntoIter<(), &'static str>) -> IntoIter<(), &'new str> 
into_key			    pub fn into_key(self) -> K 
into_kv			    pub fn into_kv(self) -> (&'a K, &'a V) 
into_kv_mut			    pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) 
into_kv_pointers_mut			    fn into_kv_pointers_mut(mut self) -> (*mut K, *mut V) 
into_mut			    pub fn into_mut(self) -> &'a mut V 
into_node			    pub fn into_node(self) -> Node 
into_owned			    pub fn into_owned(self) -> <B as ToOwned>::Owned 
into_raw			    pub fn into_raw(this: Self) -> *const T 
into_raw			    pub fn into_raw(b: Box<T>) -> *mut T 
into_raw			    pub fn into_raw(this: Self) -> *const T 
into_ref			    pub fn into_ref(self)
into_root_mut			    pub fn into_root_mut(self) -> &'a mut Root<K, V> 
into_searcher			    fn into_searcher(self, haystack: &'a str) -> <&'b str as Pattern<'a>>::Searcher 
into_slices			    pub fn into_slices(self) -> (&'a [K], &'a [V]) 
into_slices_mut			    pub fn into_slices_mut(mut self) -> (&'a mut [K], &'a mut [V]) 
into_sorted_vec			    pub fn into_sorted_vec(mut self) -> Vec<T> 
into_string			    pub fn into_string(self: Box<str>) -> String 
into_vec			    pub fn into_vec(self) -> Vec<T> 
into_vec			    pub fn into_vec(self: Box<Self>) -> Vec<T> 
into_vec			    pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> 
invalid_input			    pub fn invalid_input(details: &'static str) -> Self 
is_char_boundary			    pub fn is_char_boundary(&self, index: usize) -> bool 
is_contained_in			    fn is_contained_in(self, haystack: &'a str) -> bool 
is_contiguous			    fn is_contiguous(&self) -> bool 
is_disjoint			    pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_full			    fn is_full(&self) -> bool 
is_memory_exhausted			    pub fn is_memory_exhausted(&self) -> bool 
is_odd			fn is_odd(n: &usize) -> bool 
is_prefix_of			    fn is_prefix_of(self, haystack: &'a str) -> bool 
is_request_unsupported			    pub fn is_request_unsupported(&self) -> bool 
is_subset			    pub fn is_subset(&self, other: &BTreeSet<T>) -> bool 
is_superset			    pub fn is_superset(&self, other: &BTreeSet<T>) -> bool 
is_unique			    fn is_unique(&mut self) -> bool 
is_unique			    fn is_unique() 
is_unique			    fn is_unique(this: &Self) -> bool 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<K, V> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> 
iter			    pub fn iter(&self) -> Iter<T> 
iter_1000			pub fn iter_1000(b: &mut Bencher) 
iter_100000			pub fn iter_100000(b: &mut Bencher) 
iter_20			pub fn iter_20(b: &mut Bencher) 
iter_equal			    fn iter_equal<I: Iterator<Item = i32>>(it: I, slice: &[i32]) 
iter_key			    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, ()>) -> Iter<'a, &'new str, ()> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<K, V> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_val			    fn iter_val<'a, 'new>(v: Iter<'a, (), &'static str>) -> Iter<'a, (), &'new str> 
iterator			fn iterator(b: &mut Bencher) 
join			fn join(b: &mut Bencher) 
join			    fn join(&self, sep: &T) -> Self::Output;
join			    fn join(&self, sep: &T) -> Vec<T> 
join			    fn join(&self, sep: &str) -> String 
key			    pub fn key(&self) -> &K 
keys			    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> 
keys			    pub fn keys(&self) -> &[K] 
keys			    fn keys<'a, 'new>(v: Keys<'a, &'static str, ()>) -> Keys<'a, &'new str, ()> 
keys_mut			    pub fn keys_mut(&mut self) -> &mut [K] 
kv_mut			    pub fn kv_mut(&mut self) -> (&mut K, &mut V) 
last			    pub fn last(&self) -> Option<&T> 
last			    fn last(self) -> T { Default::default() }
last			    fn last(self) -> T { self.0 }
last			    fn last(self) -> T;
last_edge			    pub fn last_edge(self) -> Handle<Self, marker::Edge> 
last_kv			    pub fn last_kv(self) -> Handle<Self, marker::KV> 
last_leaf_edge			fn last_leaf_edge<BorrowType, K, V>
last_mut			    pub fn last_mut(&mut self) -> Option<&mut T> 
le			    fn le(&self, other: &Arc<T>) -> bool 
le			    fn le(&self, other: &Box<T>) -> bool 
le			    fn le(&self, other: &Rc<T>) -> bool 
left_edge			    pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> 
left_kv			    pub fn left_kv(self)
len			    pub fn len(&self) -> usize 
len			    fn len(&self) -> usize 
len			    fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    fn len(&self) -> usize { self.iter.len() }
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
lines			    pub fn lines(&self) -> Lines 
lines_any			    pub fn lines_any(&self) -> LinesAny 
linked_list			mod linked_list;
linked_list			pub mod linked_list;
linked_list			mod linked_list;
list_from			    fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> 
list_from			fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> 
log2_fast			        fn log2_fast(x: usize) -> usize 
lt			    fn lt(&self, other: &Arc<T>) -> bool 
lt			    fn lt(&self, other: &Box<T>) -> bool 
lt			    fn lt(&self, other: &Rc<T>) -> bool 
macros			mod macros;
make_mut			    pub fn make_mut(this: &mut Self) -> &mut T 
make_mut			    pub fn make_mut(this: &mut Self) -> &mut T 
make_place			    fn make_place(self) -> Self::Place 
make_place			    fn make_place() -> IntermediateBox<T> 
make_place			    fn make_place(self) -> IntermediateBox<T> 
make_place			fn make_place<T>() -> IntermediateBox<T> 
make_place			    fn make_place(self) -> Self 
make_place			    fn make_place(self) -> Self 
make_place			    fn make_place(self) -> Self 
manually_share_arc			    fn manually_share_arc() 
map			mod map;
map			pub mod map;
map			mod map;
map_key			    fn map_key<'new>(v: BTreeMap<&'static str, ()>) -> BTreeMap<&'new str, ()> 
map_uppercase_sigma			        fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) 
map_val			    fn map_val<'new>(v: BTreeMap<(), &'static str>) -> BTreeMap<(), &'new str> 
marker			pub mod marker 
match_indices			    pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> 
matches			    pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> 
merge			    pub fn merge(mut self)
merge			unsafe fn merge<T, F>(v: &mut [T], mid: usize, buf: *mut T, is_less: &mut F)
merge_sort			fn merge_sort<T, F>(v: &mut [T], mut is_less: F)
mkpanic			    fn mkpanic() -> usize { panic!() }
mkpanic			    fn mkpanic() -> usize { panic!() }
move_edges			unsafe fn move_edges<K, V>(
move_kv			unsafe fn move_kv<K, V>(
move_suffix			    pub fn move_suffix(&mut self,
move_tail			    unsafe fn move_tail(&mut self, extra_capacity: usize) 
move_to			    unsafe fn move_to(&mut self, index: usize) 
mut_iterator			fn mut_iterator(b: &mut Bencher) 
ne			    fn ne(&self, other: &Arc<T>) -> bool 
ne			    fn ne(&self, other: &Box<T>) -> bool 
ne			    fn ne(&self, other: &Self) -> bool 
ne			    fn ne(&self, other: &Rc<T>) -> bool 
ne			            fn ne(&self, other: &
ne			            fn ne(&self, other: &
ne			    fn ne(&self, other: &String) -> bool 
ne			            fn ne(&self, other: &
new			    pub fn new<T>() -> Self 
new			    pub fn new() -> Weak<T> 
new			    pub fn new(data: T) -> Arc<T> 
new			    pub fn new() -> BinaryHeap<T> 
new			    unsafe fn new(data: &'a mut [T], pos: usize) -> Self 
new			    pub fn new(x: T) -> Box<T> 
new			    pub fn new() -> BTreeMap<K, V> 
new			    unsafe fn new() -> Self 
new			    pub fn new() -> BTreeSet<T> 
new			    fn new(element: T) -> Self 
new			    pub fn new() -> Self 
new			    pub fn new() -> Self 
new			    pub fn new() -> Weak<T> 
new			    pub fn new(value: T) -> Rc<T> 
new			    pub fn new() -> String 
new			    fn new() -> Self 
new			    fn new(len: &'a mut usize) -> Self 
new			    pub fn new() -> Vec<T> 
new			    pub fn new() -> VecDeque<T> 
new_edge			    pub fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self 
new_in			    pub fn new_in(a: A) -> Self 
new_kv			    pub fn new_kv(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self 
new_leaf			    pub fn new_leaf() -> Self 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<I::Item> 
next			    fn next(&mut self) -> Option<&'a K> 
next			    fn next(&mut self) -> Option<&'a V> 
next			    fn next(&mut self) -> Option<&'a mut V> 
next			    fn next(&mut self) -> Option<(&'a K, &'a V)> 
next			    fn next(&mut self) -> Option<(&'a K, &'a mut V)> 
next			    fn next(&mut self) -> Option<(K, V)> 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<&'a mut T> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<u16> 
next			    fn next(&mut self) -> Option<char> 
next			    fn next(&mut self) -> u32 
next			    fn next(&mut self) -> Option<Self::Item> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&self) -> T { Default::default() }
next			    fn next(&self) -> T { self.0.clone() }
next			    fn next(&self) -> T;
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<&'a mut T> 
next			    fn next(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<I::Item> 
next_back			    fn next_back(&mut self) -> Option<&'a K> 
next_back			    fn next_back(&mut self) -> Option<&'a V> 
next_back			    fn next_back(&mut self) -> Option<&'a mut V> 
next_back			    fn next_back(&mut self) -> Option<(&'a K, &'a V)> 
next_back			    fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> 
next_back			    fn next_back(&mut self) -> Option<(K, V)> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<&'a mut T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<char> 
next_back			    fn next_back(&mut self) -> Option<Self::Item> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<&'a mut T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back_unchecked			    unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) 
next_back_unchecked			    unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) 
next_unchecked			    unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) 
next_unchecked			    unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) 
node			mod node;
nth			    fn nth(&mut self, n: usize) -> Option<I::Item> 
oom			    fn oom(&mut self, _: AllocErr) -> ! 
oom			    fn oom(&mut self, err: AllocErr) -> ! 
ops			impl ops::Index<ops::Range<usize>> for String 
ops			impl ops::Index<ops::RangeFrom<usize>> for String 
ops			impl ops::Index<ops::RangeInclusive<usize>> for String 
ops			impl ops::Index<ops::RangeTo<usize>> for String 
ops			impl ops::Index<ops::RangeToInclusive<usize>> for String 
ops			impl ops::IndexMut<ops::Range<usize>> for String 
ops			impl ops::IndexMut<ops::RangeFrom<usize>> for String 
ops			impl ops::IndexMut<ops::RangeInclusive<usize>> for String 
ops			impl ops::IndexMut<ops::RangeTo<usize>> for String 
ops			impl ops::IndexMut<ops::RangeToInclusive<usize>> for String 
ops			impl<T> ops::Index<ops::Range<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for Vec<T> 
ops::Deref for String			impl ops::Deref for String 
ops::Deref for Vec			impl<T> ops::Deref for Vec<T> 
ops::DerefMut for String			impl ops::DerefMut for String 
ops::DerefMut for Vec			impl<T> ops::DerefMut for Vec<T> 
ops::Index for String			impl ops::Index<ops::RangeFull> for String 
ops::Index for Vec			impl<T> ops::Index<ops::RangeFull> for Vec<T> 
ops::IndexMut for String			impl ops::IndexMut<ops::RangeFull> for String 
ops::IndexMut for Vec			impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> 
or_insert			    pub fn or_insert(self, default: V) -> &'a mut V 
or_insert_with			    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V 
overaligned_allocations			fn overaligned_allocations() 
padding_needed_for			    pub fn padding_needed_for(&self, align: usize) -> usize 
parse			    pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> 
partial_cmp			    fn partial_cmp(&self, other: &Arc<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Cow<'a, B>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &BTreeMap<K, V>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Self) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Rc<T>) -> Option<Ordering> 
partial_cmp			        fn partial_cmp(&self, _: &Self) -> Option<Ordering> 
partial_cmp			        fn partial_cmp(&self, other: &Self) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Vec<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &VecDeque<A>) -> Option<Ordering> 
pattern			mod pattern 
peek			    pub fn peek(&self) -> Option<&T> 
peek_mut			    pub fn peek_mut(&mut self) -> Option<PeekMut<T>> 
peek_next			    pub fn peek_next(&mut self) -> Option<&mut T> 
place_back			    pub fn place_back(&mut self) -> PlaceBack<T> 
place_back			    pub fn place_back(&mut self) -> PlaceBack<T> 
place_front			    pub fn place_front(&mut self) -> PlaceFront<T> 
pointer			    fn pointer(&mut self) -> *mut T 
pointer			    fn pointer(&mut self) -> *mut T 
pointer			    fn pointer(&mut self) -> *mut T 
pointer			    fn pointer(&mut self) -> *mut T 
pointer			    fn pointer(&mut self) -> *mut T 
pop			    pub fn pop(&mut self) -> Option<T> 
pop			    pub fn pop(mut this: PeekMut<'a, T>) -> T 
pop			    pub fn pop(&mut self) -> (K, V, Option<Root<K, V>>) 
pop			    pub fn pop(&mut self) -> Option<char> 
pop			    pub fn pop(&mut self) -> Option<T> 
pop_back			    pub fn pop_back(&mut self) -> Option<T> 
pop_back			    pub fn pop_back(&mut self) -> Option<T> 
pop_back_node			    fn pop_back_node(&mut self) -> Option<Box<Node<T>>> 
pop_front			    pub fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) 
pop_front			    pub fn pop_front(&mut self) -> Option<T> 
pop_front			    pub fn pop_front(&mut self) -> Option<T> 
pop_front_node			    fn pop_front_node(&mut self) -> Option<Box<Node<T>>> 
pop_level			    pub fn pop_level(&mut self) 
pos			    fn pos(&self) -> usize 
pred			    fn pred(c: char) -> bool { c == ' ' }
ptr			    pub fn ptr(&self) -> *mut T 
ptr			    fn ptr(&self) -> *mut T 
ptr_eq			    pub fn ptr_eq(this: &Self, other: &Self) -> bool 
ptr_eq			    pub fn ptr_eq(this: &Self, other: &Self) -> bool 
push			fn push(b: &mut Bencher) 
push			    pub fn push(&mut self, item: T) 
push			    pub fn push(&mut self, key: K, val: V) 
push			    pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) 
push			    pub fn push(&mut self, ch: char) 
push			    pub fn push(&mut self, value: T) 
push_back			    pub fn push_back(&mut self, elt: T) 
push_back			    pub fn push_back(&mut self, value: T) 
push_back_node			    fn push_back_node(&mut self, mut node: Box<Node<T>>) 
push_front			    pub fn push_front(&mut self, key: K, val: V) 
push_front			    pub fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) 
push_front			    pub fn push_front(&mut self, elt: T) 
push_front			    pub fn push_front(&mut self, value: T) 
push_front_node			    fn push_front_node(&mut self, mut node: Box<Node<T>>) 
push_level			    pub fn push_level(&mut self)
push_str			    pub fn push_str(&mut self, string: &str) 
rand_data			fn rand_data(len: usize) -> Vec<(u32, u32)> 
rand_data			fn rand_data(len: usize) -> Vec<u32> 
random_inserts			fn random_inserts(b: &mut Bencher) 
random_removes			fn random_removes(b: &mut Bencher) 
range			    pub fn range<T: ?Sized, R>(&self, range: R) -> Range<K, V>
range			    pub fn range<K: ?Sized, R>(&self, range: R) -> Range<T>
range			pub mod range;
range			    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> 
range_key			    fn range_key<'a, 'new>(v: Range<'a, &'static str, ()>) -> Range<'a, &'new str, ()> 
range_mut			    pub fn range_mut<T: ?Sized, R>(&mut self, range: R) -> RangeMut<K, V>
range_search			fn range_search<BorrowType, K, V, Q: ?Sized, R: RangeArgument<Q>>(
range_val			    fn range_val<'a, 'new>(v: Range<'a, (), &'static str>) -> Range<'a, (), &'new str> 
raw_sized			fn raw_sized() 
raw_trait			fn raw_trait() 
raw_vec			pub mod raw_vec;
rc			pub mod rc;
realloc			    unsafe fn realloc(&mut self,
realloc			    unsafe fn realloc(&mut self,
realloc_array			    unsafe fn realloc_array<T>(&mut self,
realloc_excess			    unsafe fn realloc_excess(&mut self,
realloc_excess			    unsafe fn realloc_excess(&mut self,
reborrow			    fn reborrow<'a>(&'a self) -> NodeRef<marker::Immut<'a>, K, V, Type> 
reborrow			    pub fn reborrow(&self)
reborrow_mut			    pub unsafe fn reborrow_mut(&mut self)
reborrow_mut			    unsafe fn reborrow_mut(&mut self) -> NodeRef<marker::Mut, K, V, Type> 
rebuild			    fn rebuild(&mut self) 
recalc_length			    fn recalc_length(&mut self) 
remove			    pub fn remove(self) -> V 
remove			    pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>
remove			    pub fn remove(mut self)
remove			    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool
remove			    pub fn remove(&mut self, idx: usize) -> char 
remove			fn remove() 
remove			    pub fn remove(&mut self, index: usize) -> T 
remove			    pub fn remove(&mut self, index: usize) -> Option<T> 
remove_bad			fn remove_bad() 
remove_entry			    pub fn remove_entry(self) -> (K, V) 
remove_item			    pub fn remove_item(&mut self, item: &T) -> Option<T> 
remove_kv			    fn remove_kv(self) -> (K, V) 
repeat			    pub fn repeat(&self, n: usize) -> Option<(Self, usize)> 
repeat			    pub fn repeat(&self, n: usize) -> String 
repeat_packed			    pub fn repeat_packed(&self, n: usize) -> Option<Self> 
replace			    fn replace(&mut self, key: K) -> Option<K> 
replace			    fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;
replace			    pub fn replace(&mut self, value: T) -> Option<T> 
replace			    pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String 
replacen			    pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve_does_not_overallocate			    fn reserve_does_not_overallocate() 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_in_place			    pub fn reserve_in_place(&mut self, used_cap: usize, needed_extra_cap: usize) -> bool 
resize			    pub fn resize(&mut self, new_len: usize, value: T) 
resize			    pub fn resize(&mut self, new_len: usize, value: T) 
resize_default			    pub fn resize_default(&mut self, new_len: usize) 
retain			    pub fn retain<F>(&mut self, mut f: F)
retain			    pub fn retain<F>(&mut self, mut f: F)
reverse			    pub fn reverse(&mut self) 
rfind			    pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>
right_edge			    pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> 
right_kv			    pub fn right_kv(self)
ring_slices			    fn ring_slices(buf: Self, head: usize, tail: usize) -> (Self, Self) 
rmatch_indices			    pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>
rmatches			    pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>
rotate			    pub fn rotate(&mut self, mid: usize) 
rsplit			    pub fn rsplit<F>(&self, pred: F) -> RSplit<T, F>
rsplit			    pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>
rsplit_mut			    pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<T, F>
rsplit_terminator			    pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>
rsplitn			    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<T, F>
rsplitn			    pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>
rsplitn_mut			    pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<T, F>
s			fn s(x: &str) -> String { x.to_string() }
search			mod search;
search_linear			pub fn search_linear<BorrowType, K, V, Type, Q: ?Sized>(
search_node			pub fn search_node<BorrowType, K, V, Type, Q: ?Sized>(
search_tree			pub fn search_tree<BorrowType, K, V, Q: ?Sized>(
set			        fn set(&mut self, value: u32) 
set			        fn set(&mut self, value: u32);
set			pub mod set;
set			mod set;
set			    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> 
set_len			    pub unsafe fn set_len(&mut self, len: usize) 
show_arc			    fn show_arc() 
shrink_in_place			    unsafe fn shrink_in_place(&mut self,
shrink_in_place			    unsafe fn shrink_in_place(&mut self,
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self, amount: usize) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
sift_down			    fn sift_down(&mut self, pos: usize) 
sift_down_range			    fn sift_down_range(&mut self, pos: usize, end: usize) 
sift_down_to_bottom			    fn sift_down_to_bottom(&mut self, mut pos: usize) 
sift_up			    fn sift_up(&mut self, start: usize, pos: usize) -> usize 
size			    pub fn size(&self) -> usize { self.size }
size_align			fn size_align<T>() -> (usize, usize) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
slice			mod slice;
slice			pub mod slice;
slice			mod slice;
slice			    fn slice(self, from: usize, to: usize) -> Self 
slice			    fn slice(self, from: usize, to: usize) -> Self;
slice_insert			unsafe fn slice_insert<T>(slice: &mut [T], idx: usize, val: T) 
slice_mut_unchecked			    pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str 
slice_remove			unsafe fn slice_remove<T>(slice: &mut [T], idx: usize) -> T 
slice_unchecked			    pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str 
sort			    pub fn sort(&mut self)
sort_by			    pub fn sort_by<F>(&mut self, mut compare: F)
sort_by_key			    pub fn sort_by_key<B, F>(&mut self, mut f: F)
sort_unstable			    pub fn sort_unstable(&mut self)
sort_unstable_by			    pub fn sort_unstable_by<F>(&mut self, compare: F)
sort_unstable_by_key			    pub fn sort_unstable_by_key<B, F>(&mut self, f: F)
spec_extend			    fn spec_extend(&mut self, ref mut other: BinaryHeap<T>) 
spec_extend			    fn spec_extend(&mut self, iter: I);
spec_extend			    fn spec_extend(&mut self, ref mut other: LinkedList<T>) 
spec_extend			    fn spec_extend(&mut self, iter: I);
spec_extend			    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) 
spec_extend			    fn spec_extend(&mut self, mut iterator: IntoIter<T>) 
splice			    pub fn splice<'a, 'b, R>(&'a mut self, range: R, replace_with: &'b str) -> Splice<'a, 'b>
splice			    pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<I::IntoIter>
split			    pub fn split(mut self)
split			    pub fn split<F>(&self, pred: F) -> Split<T, F>
split			    pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> 
split_ascii			fn split_ascii(b: &mut Bencher) 
split_at			    pub fn split_at(&self, mid: usize) -> (&[T], &[T]) 
split_at			    pub fn split_at(&self, mid: usize) -> (&str, &str) 
split_at			    fn split_at(self, i: usize) -> (Self, Self) 
split_at			    fn split_at(self, i: usize) -> (Self, Self);
split_at_mut			    pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) 
split_at_mut			    pub fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) 
split_closure			fn split_closure(b: &mut Bencher) 
split_extern_fn			fn split_extern_fn(b: &mut Bencher) 
split_first			    pub fn split_first(&self) -> Option<(&T, &[T])> 
split_first_mut			    pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> 
split_last			    pub fn split_last(&self) -> Option<(&T, &[T])> 
split_last_mut			    pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> 
split_mut			    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F>
split_off			    pub fn split_off<Q: ?Sized + Ord>(&mut self, key: &Q) -> Self
split_off			    pub fn split_off<Q: ?Sized + Ord>(&mut self, key: &Q) -> Self where T: Borrow<Q> 
split_off			    pub fn split_off(&mut self, at: usize) -> LinkedList<T> 
split_off			    pub fn split_off(&mut self, at: usize) -> String 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_slice			fn split_slice(b: &mut Bencher) 
split_terminator			    pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> 
split_unicode_ascii			fn split_unicode_ascii(b: &mut Bencher) 
split_whitespace			    pub fn split_whitespace(&self) -> SplitWhitespace 
splitn			    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<T, F>
splitn			    pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> 
splitn_mut			    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>
square			fn square(n: usize) -> usize 
start			    fn start(&self) -> Bound<&T> 
start			    fn start(&self) -> Bound<&T>;
starts_short_long			fn starts_short_long() 
starts_with			    pub fn starts_with(&self, needle: &[T]) -> bool
starts_with			    pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool 
starts_with_diff_one_element_at_end			fn starts_with_diff_one_element_at_end(b: &mut Bencher) 
starts_with_in_unicode			fn starts_with_in_unicode() 
starts_with_same_vector			fn starts_with_same_vector(b: &mut Bencher) 
starts_with_single_element			fn starts_with_single_element(b: &mut Bencher) 
std			mod std 
steal_left			    pub fn steal_left(&mut self) 
steal_right			    pub fn steal_right(&mut self) 
str			mod str;
str			pub mod str;
str			impl str 
str			mod str;
str_slice			fn str_slice() 
string			mod string;
string			pub mod string;
string			mod string;
strong			    fn strong(&self) -> usize 
strong_count			    pub fn strong_count(this: &Self) -> usize 
strong_count			    pub fn strong_count(this: &Self) -> usize 
strslice_issue_16589			fn strslice_issue_16589() 
strslice_issue_16878			fn strslice_issue_16878() 
sub			    fn sub(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
sum_len			    fn sum_len(v: &[&str]) -> usize 
super::Recover for BTreeMap			impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>
swap			    pub fn swap(&mut self, a: usize, b: usize) 
swap			    pub fn swap(&mut self, i: usize, j: usize) 
swap_remove			    pub fn swap_remove(&mut self, index: usize) -> T 
swap_remove_back			    pub fn swap_remove_back(&mut self, index: usize) -> Option<T> 
swap_remove_front			    pub fn swap_remove_front(&mut self, index: usize) -> Option<T> 
symmetric_difference			    pub fn symmetric_difference<'a>(&'a self,
t			    fn t(s: &str, sep: &str, u: &[&str]) 
t			    fn t<S: Default + AsRef<str>>() 
take			    fn take(&mut self, key: &Q) -> Option<K> 
take			    fn take(&mut self, key: &Q) -> Option<Self::Key>;
take			    pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>
test			    fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) 
test			    fn test<T>(size: usize, mut iter: T)
test			        fn test(back: bool) 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
to_lowercase			    pub fn to_lowercase(&self) -> String 
to_lowercase			fn to_lowercase() 
to_mut			    pub fn to_mut(&mut self) -> &mut <B as ToOwned>::Owned 
to_owned			    fn to_owned(&self) -> Self::Owned;
to_owned			    fn to_owned(&self) -> T 
to_owned			    fn to_owned(&self) -> Vec<T> 
to_owned			    fn to_owned(&self) -> String 
to_string			    fn to_string(&self) -> String 
to_string			    fn to_string(&self) -> String;
to_uppercase			    pub fn to_uppercase(&self) -> String 
to_uppercase			fn to_uppercase() 
to_vec			    pub fn to_vec(&self) -> Vec<T>
to_vec			    pub fn to_vec<T>(s: &[T]) -> Vec<T>
trim			    pub fn trim(&self) -> &str 
trim_left			    pub fn trim_left(&self) -> &str 
trim_left_matches			    pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str 
trim_matches			    pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str
trim_right			    pub fn trim_right(&self) -> &str 
trim_right_matches			    pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str
trim_ws			fn trim_ws() 
truncate			    pub fn truncate(&mut self, new_len: usize) 
truncate			    pub fn truncate(&mut self, len: usize) 
truncate			    pub fn truncate(&mut self, len: usize) 
try_unwrap			    fn try_unwrap() 
try_unwrap			    pub fn try_unwrap(this: Self) -> Result<T, Self> 
try_unwrap			    fn try_unwrap() 
try_unwrap			    pub fn try_unwrap(this: Self) -> Result<T, Self> 
union			    pub fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> Union<'a, T> 
unwrap_unchecked			unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T 
upgrade			    pub fn upgrade(&self) -> Option<Arc<T>> 
upgrade			    pub fn upgrade(&self) -> Option<Rc<T>> 
usable_size			    fn usable_size(&self, layout: &Layout) -> (usize, usize) 
usable_size			    fn usable_size(&self, layout: &Layout) -> (usize, usize) 
utf8_error			    pub fn utf8_error(&self) -> Utf8Error 
vals			    pub fn vals(&self) -> &[V] 
vals			    fn vals<'a, 'new>(v: Values<'a, (), &'static str>) -> Values<'a, (), &'new str> 
vals_mut			    pub fn vals_mut(&mut self) -> &mut [V] 
values			    pub fn values<'a>(&'a self) -> Values<'a, K, V> 
values_mut			    pub fn values_mut(&mut self) -> ValuesMut<K, V> 
vec			mod vec;
vec			pub mod vec;
vec			mod vec;
vec_deque			mod vec_deque;
vec_deque			pub mod vec_deque;
vec_deque			mod vec_deque;
vec_str_conversions			fn vec_str_conversions() 
weak			    fn weak(&self) -> usize 
weak_count			    pub fn weak_count(this: &Self) -> usize 
weak_count			    pub fn weak_count(this: &Self) -> usize 
weak_self_cyclic			    fn weak_self_cyclic() 
weak_self_cyclic			    fn weak_self_cyclic() 
windows			    pub fn windows(&self, size: usize) -> Windows<T> 
with_capacity			    pub fn with_capacity(capacity: usize) -> BinaryHeap<T> 
with_capacity			    pub fn with_capacity(cap: usize) -> Self 
with_capacity			    pub fn with_capacity(capacity: usize) -> String 
with_capacity			    pub fn with_capacity(capacity: usize) -> Vec<T> 
with_capacity			    pub fn with_capacity(n: usize) -> VecDeque<T> 
with_capacity_in			    pub fn with_capacity_in(cap: usize, a: A) -> Self 
with_capacity_zeroed			    pub fn with_capacity_zeroed(cap: usize) -> Self 
with_capacity_zeroed_in			    pub fn with_capacity_zeroed_in(cap: usize, a: A) -> Self 
wrap_add			    fn wrap_add(&self, idx: usize, addend: usize) -> usize 
wrap_copy			    unsafe fn wrap_copy(&self, dst: usize, src: usize, len: usize) 
wrap_index			    fn wrap_index(&self, idx: usize) -> usize 
wrap_index			fn wrap_index(index: usize, size: usize) -> usize 
wrap_sub			    fn wrap_sub(&self, idx: usize, subtrahend: usize) -> usize 
write_char			    fn write_char(&mut self, c: char) -> fmt::Result 
write_str			    fn write_str(&mut self, s: &str) -> fmt::Result 
zero_1kb_from_elem			fn zero_1kb_from_elem(b: &mut Bencher) 
zero_1kb_loop_set			fn zero_1kb_loop_set(b: &mut Bencher) 
zero_1kb_mut_iter			fn zero_1kb_mut_iter(b: &mut Bencher) 
zero_1kb_set_memory			fn zero_1kb_set_memory(b: &mut Bencher) 
zero_sized_values			fn zero_sized_values() 
