Arc			impl<T: ?Sized> Arc<T> 
Arc			impl<T: Clone> Arc<T> 
Arc			impl<T> Arc<T> 
Arc			pub struct Arc<T: ?Sized> 
ArcInner			struct ArcInner<T: ?Sized> 
AsMut for Box			impl<T: ?Sized> AsMut<T> for Box<T> 
AsRef for Arc			impl<T: ?Sized> AsRef<T> for Arc<T> 
AsRef for Box			impl<T: ?Sized> AsRef<T> for Box<T> 
AsRef for Rc			impl<T: ?Sized> AsRef<T> for Rc<T> 
Bar			    struct Bar(u32);
Box			impl Box<Any + Send> 
Box			impl Box<Any> 
Box			impl<T: ?Sized> Box<T> 
Box			impl<T> Box<T> 
Box			pub struct Box<T: ?Sized>(Unique<T>);
BoxBuilder			        impl<T> BoxBuilder<T> 
BoxBuilder			        struct BoxBuilder<T> 
BoxPlace for IntermediateBox			impl<T> BoxPlace<T> for IntermediateBox<T> 
Boxed for Box			impl<T> Boxed for Box<T> 
Canary			    struct Canary(*mut atomic::AtomicUsize);
Clone for Arc			impl<T: ?Sized> Clone for Arc<T> 
Clone for Box			impl Clone for Box<str> 
Clone for Box			impl<T: Clone> Clone for Box<T> 
Clone for Box			impl<T: Clone> Clone for Box<[T]> 
Clone for Rc			impl<T: ?Sized> Clone for Rc<T> 
Clone for Weak			impl<T: ?Sized> Clone for Weak<T> 
Clone for Weak			impl<T: ?Sized> Clone for Weak<T> 
Cycle			        struct Cycle 
Cycle			        struct Cycle 
Default for Arc			impl<T: Default> Default for Arc<T> 
Default for Box			impl Default for Box<str> 
Default for Box			impl<T: Default> Default for Box<T> 
Default for Box			impl<T> Default for Box<[T]> 
Default for Rc			impl<T: Default> Default for Rc<T> 
Default for Weak			impl<T> Default for Weak<T> 
Default for Weak			impl<T> Default for Weak<T> 
Deref for Arc			impl<T: ?Sized> Deref for Arc<T> 
Deref for Box			impl<T: ?Sized> Deref for Box<T> 
Deref for Rc			impl<T: ?Sized> Deref for Rc<T> 
DerefMut for Box			impl<T: ?Sized> DerefMut for Box<T> 
DoubleEndedIterator for Box			impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> 
Drop for Arc			unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> 
Drop for Box			unsafe impl<#[may_dangle] T: ?Sized> Drop for Box<T> 
Drop for BoxBuilder			        impl<T> Drop for BoxBuilder<T> 
Drop for Canary			    impl Drop for Canary 
Drop for IntermediateBox			impl<T: ?Sized> Drop for IntermediateBox<T> 
Drop for RawVec			unsafe impl<#[may_dangle] T> Drop for RawVec<T> 
Drop for Rc			unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> 
Drop for Weak			impl<T: ?Sized> Drop for Weak<T> 
Drop for Weak			impl<T: ?Sized> Drop for Weak<T> 
Eq for Arc			impl<T: ?Sized + Eq> Eq for Arc<T> {}
Eq for Box			impl<T: ?Sized + Eq> Eq for Box<T> {}
Eq for Rc			impl<T: ?Sized + Eq> Eq for Rc<T> {}
ExactSizeIterator for Box			impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> 
ExchangeHeapSingleton			pub struct ExchangeHeapSingleton 
FnBox			pub trait FnBox<A> 
FnBox for F			impl<A, F> FnBox<A> for F
FnOnce for Box			impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> 
FnOnce for Box			impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + Send + 'a> 
Foo			    struct Foo 
Foo			    trait Foo 
Foo for Bar			    impl Foo for Bar 
From for Arc			impl<T> From<T> for Arc<T> 
From for Box			impl<'a, T: Copy> From<&'a [T]> for Box<[T]> 
From for Box			impl<'a> From<&'a str> for Box<str> 
From for Box			impl<T> From<T> for Box<T> 
From for Rc			impl<T> From<T> for Rc<T> 
FusedIterator for Box			impl<I: FusedIterator + ?Sized> FusedIterator for Box<I> {}
Hash for Arc			impl<T: ?Sized + Hash> Hash for Arc<T> 
Hash for Box			impl<T: ?Sized + Hash> Hash for Box<T> 
Hash for Rc			impl<T: ?Sized + Hash> Hash for Rc<T> 
InPlace for IntermediateBox			impl<T> InPlace<T> for IntermediateBox<T> 
IntermediateBox			pub struct IntermediateBox<T: ?Sized> 
Iterator for Box			impl<I: Iterator + ?Sized> Iterator for Box<I> 
Ord for Arc			impl<T: ?Sized + Ord> Ord for Arc<T> 
Ord for Box			impl<T: ?Sized + Ord> Ord for Box<T> 
Ord for Rc			impl<T: ?Sized + Ord> Ord for Rc<T> 
PartialEq for Arc			impl<T: ?Sized + PartialEq> PartialEq for Arc<T> 
PartialEq for Box			impl<T: ?Sized + PartialEq> PartialEq for Box<T> 
PartialEq for Rc			impl<T: ?Sized + PartialEq> PartialEq for Rc<T> 
PartialOrd for Arc			impl<T: ?Sized + PartialOrd> PartialOrd for Arc<T> 
PartialOrd for Box			impl<T: ?Sized + PartialOrd> PartialOrd for Box<T> 
PartialOrd for Rc			impl<T: ?Sized + PartialOrd> PartialOrd for Rc<T> 
Place for IntermediateBox			impl<T> Place<T> for IntermediateBox<T> 
Placer for ExchangeHeapSingleton			impl<T> Placer<T> for ExchangeHeapSingleton 
RawVec			impl<T> RawVec<T> 
RawVec			pub struct RawVec<T> 
Rc			impl Rc<str> 
Rc			impl<T: ?Sized> Rc<T> 
Rc			impl<T: Clone> Rc<T> 
Rc			impl<T> Rc<T> 
Rc			pub struct Rc<T: ?Sized> 
RcBox			struct RcBox<T: ?Sized> 
RcBoxPtr			trait RcBoxPtr<T: ?Sized> 
RcBoxPtr for Rc			impl<T: ?Sized> RcBoxPtr<T> for Rc<T> 
RcBoxPtr for Weak			impl<T: ?Sized> RcBoxPtr<T> for Weak<T> 
Send for Arc			unsafe impl<T: ?Sized + Sync + Send> Send for Arc<T> {}
Send for ArcInner			unsafe impl<T: ?Sized + Sync + Send> Send for ArcInner<T> {}
Send for Weak			unsafe impl<T: ?Sized + Sync + Send> Send for Weak<T> {}
Sync for Arc			unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> {}
Sync for ArcInner			unsafe impl<T: ?Sized + Sync + Send> Sync for ArcInner<T> {}
Sync for Weak			unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> {}
Test			struct Test;
Weak			impl<T: ?Sized> Weak<T> 
Weak			impl<T> Weak<T> 
Weak			pub struct Weak<T: ?Sized> 
Weak			impl<T: ?Sized> Weak<T> 
Weak			impl<T> Weak<T> 
Weak			pub struct Weak<T: ?Sized> 
__from_str			    pub fn __from_str(value: &str) -> Rc<str> 
__rust_allocate			    fn __rust_allocate(size: usize, align: usize) -> *mut u8;
__rust_deallocate			    fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize);
__rust_reallocate			    fn __rust_reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8;
__rust_reallocate_inplace			    fn __rust_reallocate_inplace(ptr: *mut u8,
__rust_usable_size			    fn __rust_usable_size(size: usize, align: usize) -> usize;
alloc_guard			fn alloc_guard(alloc_size: usize) 
alloc_owned_small			    fn alloc_owned_small(b: &mut Bencher) 
allocate			pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 
amortized_new_size			    fn amortized_new_size(&self, used_cap: usize, needed_extra_cap: usize) -> (usize, usize) 
any_move			fn any_move() 
arc			pub mod arc;
as_mut			    fn as_mut(&mut self) -> &mut T 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    fn as_ref(&self) -> &T 
basic_reallocate_inplace_noop			    fn basic_reallocate_inplace_noop() 
borrow			    fn borrow(&self) -> &T 
borrow			    fn borrow(&self) -> &T 
borrow			    fn borrow(&self) -> &T 
borrow::Borrow for Arc			impl<T: ?Sized> borrow::Borrow<T> for Arc<T> 
borrow::Borrow for Box			impl<T: ?Sized> borrow::Borrow<T> for Box<T> 
borrow::Borrow for Rc			impl<T: ?Sized> borrow::Borrow<T> for Rc<T> 
borrow::BorrowMut for Box			impl<T: ?Sized> borrow::BorrowMut<T> for Box<T> 
borrow_mut			    fn borrow_mut(&mut self) -> &mut T 
box_free			unsafe fn box_free<T: ?Sized>(ptr: *mut T) 
boxed			mod boxed 
boxed			pub mod boxed;
boxed_test			mod boxed_test;
call_box			    fn call_box(self: Box<F>, args: A) -> F::Output 
call_box			    fn call_box(self: Box<Self>, args: A) -> Self::Output;
call_once			    extern "rust-call" fn call_once(self, args: A) -> R 
cap			    pub fn cap(&self) -> usize 
check_size_and_alignment			fn check_size_and_alignment(size: usize, align: usize) 
clone			    fn clone(&self) -> Arc<T> 
clone			    fn clone(&self) -> Weak<T> 
clone			    fn clone(&self) -> Box<T> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Rc<T> 
clone			    fn clone(&self) -> Weak<T> 
clone_from			    fn clone_from(&mut self, source: &Box<T>) 
cmp			    fn cmp(&self, other: &Arc<T>) -> Ordering 
cmp			    fn cmp(&self, other: &Box<T>) -> Ordering 
cmp			    fn cmp(&self, other: &Rc<T>) -> Ordering 
deallocate			pub unsafe fn deallocate(ptr: *mut u8, old_size: usize, align: usize) 
dec_strong			    fn dec_strong(&self) 
dec_weak			    fn dec_weak(&self) 
default			    fn default() -> Arc<T> 
default			    fn default() -> Weak<T> 
default			    fn default() -> Box<T> 
default			    fn default() -> Box<[T]> 
default			    fn default() -> Box<str> 
default			    fn default() -> Rc<T> 
default			    fn default() -> Weak<T> 
default_oom_handler			fn default_oom_handler() -> ! 
deref			    fn deref(&self) -> &T 
deref			    fn deref(&self) -> &T 
deref			fn deref() 
deref			    fn deref(&self) -> &T 
deref_mut			    fn deref_mut(&mut self) -> &mut T 
double			    pub fn double(&mut self) 
double_in_place			    pub fn double_in_place(&mut self) -> bool 
downcast			    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> 
downcast			    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> 
downgrade			    pub fn downgrade(this: &Self) -> Weak<T> 
downgrade			    pub fn downgrade(this: &Self) -> Weak<T> 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			            fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop_arc			    fn drop_arc() 
drop_arc_weak			    fn drop_arc_weak() 
drop_slow			    unsafe fn drop_slow(&mut self) 
eq			    fn eq(&self, other: &Arc<T>) -> bool 
eq			    fn eq(&self, other: &Box<T>) -> bool 
eq			    fn eq(&self, other: &Rc<T>) -> bool 
exchange_malloc			unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 
f64_slice			fn f64_slice() 
finalize			    unsafe fn finalize(b: IntermediateBox<T>) -> Box<T> 
finalize			    unsafe fn finalize(self) -> Box<T> 
finalize			unsafe fn finalize<T>(b: IntermediateBox<T>) -> Box<T> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Arc			impl<T: ?Sized + fmt::Debug> fmt::Debug for Arc<T> 
fmt::Debug for Box			impl<T: fmt::Debug + ?Sized> fmt::Debug for Box<T> 
fmt::Debug for Rc			impl<T: ?Sized + fmt::Debug> fmt::Debug for Rc<T> 
fmt::Debug for Weak			impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> 
fmt::Debug for Weak			impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> 
fmt::Display for Arc			impl<T: ?Sized + fmt::Display> fmt::Display for Arc<T> 
fmt::Display for Box			impl<T: fmt::Display + ?Sized> fmt::Display for Box<T> 
fmt::Display for Rc			impl<T: ?Sized + fmt::Display> fmt::Display for Rc<T> 
fmt::Pointer for Arc			impl<T: ?Sized> fmt::Pointer for Arc<T> 
fmt::Pointer for Box			impl<T: ?Sized> fmt::Pointer for Box<T> 
fmt::Pointer for Rc			impl<T: ?Sized> fmt::Pointer for Rc<T> 
from			    fn from(t: T) -> Self 
from			    fn from(s: &'a str) -> Box<str> 
from			    fn from(slice: &'a [T]) -> Box<[T]> 
from			    fn from(t: T) -> Self 
from			    fn from(t: T) -> Self 
from_box			    pub fn from_box(mut slice: Box<[T]>) -> Self 
from_raw			    pub unsafe fn from_raw(ptr: *const T) -> Self 
from_raw			    pub unsafe fn from_raw(raw: *mut T) -> Self 
from_raw			    pub unsafe fn from_raw(ptr: *const T) -> Self 
from_raw_parts			    pub unsafe fn from_raw_parts(ptr: *mut T, cap: usize) -> Self 
ge			    fn ge(&self, other: &Arc<T>) -> bool 
ge			    fn ge(&self, other: &Box<T>) -> bool 
ge			    fn ge(&self, other: &Rc<T>) -> bool 
get			        fn get(&self) -> u32 
get			        fn get(&self) -> u32;
get_mut			    pub fn get_mut(this: &mut Self) -> Option<&mut T> 
get_mut			    fn get_mut() 
get_mut			    pub fn get_mut(this: &mut Self) -> Option<&mut T> 
gt			    fn gt(&self, other: &Arc<T>) -> bool 
gt			    fn gt(&self, other: &Box<T>) -> bool 
gt			    fn gt(&self, other: &Rc<T>) -> bool 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
heap			pub mod heap;
homura			    fn homura<T: Deref<Target = i32>>(_: T) {}
i64_slice			fn i64_slice() 
imp			mod imp 
inc_strong			    fn inc_strong(&self) 
inc_weak			    fn inc_weak(&self) 
inner			    fn inner(&self) -> &ArcInner<T> 
inner			    fn inner(&self) -> &RcBox<T> 
inner			    fn inner(&self) -> &RcBox<T>;
into_box			            unsafe fn into_box(self) -> Box<[T]> 
into_box			    pub unsafe fn into_box(self) -> Box<[T]> 
into_from_raw			    fn into_from_raw() 
into_from_raw			    fn into_from_raw() 
into_raw			    pub fn into_raw(this: Self) -> *const T 
into_raw			    pub fn into_raw(b: Box<T>) -> *mut T 
into_raw			    pub fn into_raw(this: Self) -> *const T 
is_empty			    fn is_empty(&self) -> bool 
is_unique			    fn is_unique(&mut self) -> bool 
is_unique			    fn is_unique() 
is_unique			    pub fn is_unique(this: &Self) -> bool 
le			    fn le(&self, other: &Arc<T>) -> bool 
le			    fn le(&self, other: &Box<T>) -> bool 
le			    fn le(&self, other: &Rc<T>) -> bool 
len			    fn len(&self) -> usize 
lt			    fn lt(&self, other: &Arc<T>) -> bool 
lt			    fn lt(&self, other: &Box<T>) -> bool 
lt			    fn lt(&self, other: &Rc<T>) -> bool 
macros			mod macros;
make_mut			    pub fn make_mut(this: &mut Self) -> &mut T 
make_mut			    pub fn make_mut(this: &mut Self) -> &mut T 
make_place			    fn make_place() -> IntermediateBox<T> 
make_place			    fn make_place(self) -> IntermediateBox<T> 
make_place			fn make_place<T>() -> IntermediateBox<T> 
manually_share_arc			    fn manually_share_arc() 
ne			    fn ne(&self, other: &Arc<T>) -> bool 
ne			    fn ne(&self, other: &Box<T>) -> bool 
ne			    fn ne(&self, other: &Rc<T>) -> bool 
new			    pub fn new() -> Weak<T> 
new			    pub fn new(data: T) -> Arc<T> 
new			    pub fn new(x: T) -> Box<T> 
new			    pub fn new() -> Self 
new			    pub fn new() -> Weak<T> 
new			    pub fn new(value: T) -> Rc<T> 
next			    fn next(&mut self) -> Option<I::Item> 
next_back			    fn next_back(&mut self) -> Option<I::Item> 
nth			    fn nth(&mut self, n: usize) -> Option<I::Item> 
oom			pub mod oom;
oom			    pub fn oom() -> ! 
oom			pub fn oom() -> ! 
partial_cmp			    fn partial_cmp(&self, other: &Arc<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Rc<T>) -> Option<Ordering> 
pointer			    fn pointer(&mut self) -> *mut T 
ptr			    pub fn ptr(&self) -> *mut T 
ptr_eq			    pub fn ptr_eq(this: &Self, other: &Self) -> bool 
ptr_eq			    pub fn ptr_eq(this: &Self, other: &Self) -> bool 
raw_sized			fn raw_sized() 
raw_trait			fn raw_trait() 
raw_vec			pub mod raw_vec;
rc			pub mod rc;
reallocate			pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 
reallocate_inplace			pub unsafe fn reallocate_inplace(ptr: *mut u8,
reserve			    pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) 
reserve_does_not_overallocate			    fn reserve_does_not_overallocate() 
reserve_exact			    pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) 
reserve_in_place			    pub fn reserve_in_place(&mut self, used_cap: usize, needed_extra_cap: usize) -> bool 
set			        fn set(&mut self, value: u32) 
set			        fn set(&mut self, value: u32);
set_oom_handler			    pub fn set_oom_handler(handler: fn() -> !) 
show_arc			    fn show_arc() 
shrink_to_fit			    pub fn shrink_to_fit(&mut self, amount: usize) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
str_slice			fn str_slice() 
strong			    fn strong(&self) -> usize 
strong_count			    pub fn strong_count(this: &Self) -> usize 
strong_count			    pub fn strong_count(this: &Self) -> usize 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
try_unwrap			    fn try_unwrap() 
try_unwrap			    pub fn try_unwrap(this: Self) -> Result<T, Self> 
try_unwrap			    fn try_unwrap() 
try_unwrap			    pub fn try_unwrap(this: Self) -> Result<T, Self> 
upgrade			    pub fn upgrade(&self) -> Option<Arc<T>> 
upgrade			    pub fn upgrade(&self) -> Option<Rc<T>> 
usable_size			pub fn usable_size(size: usize, align: usize) -> usize 
weak			    fn weak(&self) -> usize 
weak_count			    pub fn weak_count(this: &Self) -> usize 
weak_count			    pub fn weak_count(this: &Self) -> usize 
weak_self_cyclic			    fn weak_self_cyclic() 
weak_self_cyclic			    fn weak_self_cyclic() 
with_capacity			    pub fn with_capacity(cap: usize) -> Self 
would_unwrap			    pub fn would_unwrap(this: &Self) -> bool 
