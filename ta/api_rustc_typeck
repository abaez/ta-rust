A			trait A<T=Self> {}
Add for Foo			impl Add for Foo 
AdjustBorrowKind			impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> 
AdjustBorrowKind			struct AdjustBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
AdtField			struct AdtField<'tcx> 
AdtVariant			struct AdtVariant<'tcx> 
AllTraits			pub struct AllTraits<'a> 
AstConv			impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o 
AstConv			pub trait AstConv<'gcx, 'tcx> 
AstConv for FnCtxt			impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> 
AstConv for ItemCtxt			impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> 
Autoderef			impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> 
Autoderef			pub struct Autoderef<'a, 'gcx: 'tcx, 'tcx: 'a> 
AutoderefKind			enum AutoderefKind 
Bad			enum Bad 
Bad			struct Bad(String);
Bad			struct Bad(u16, u32, u32);
Bad			struct Bad;
Bad			struct Bad<T>(T, T, T);
Bar			enum Bar { A, B, C }
Bar			impl Bar for *mut Foo 
Bar			struct Bar { x: Foo }
Bar			struct Bar 
Bar			struct Bar;
Bar			struct Bar<S, T> { x: Foo<S, T> }
Bar			struct Bar<T: ?Sized> 
Bar			trait Bar : Foo 
Bar			trait Bar { }
Bar			trait Bar 
Bar			trait Bar {}
Bar			trait Bar: Foo { }
Bar			unsafe trait Bar { }
Bar for Baz			impl Bar for Baz { } \/\/ error, `Baz` implements `Bar` by definition
Bar for Foo			impl Bar for Foo { }
Bar for Foo			unsafe impl Bar for Foo { }
Bar for u32			impl Bar for u32 
Baz			struct Baz<'a> 
Baz			trait Baz 
Baz			trait Baz: Bar { }
Baz for Bar			impl Baz for Bar { } \/\/ Note: This is OK
Baz for Baz			impl Baz for Baz { } \/\/ error, `Baz` (trivially) implements `Baz`
Baz for Foo			impl Baz for Foo 
BinOpCategory			enum BinOpCategory 
BinOpCategory			impl BinOpCategory 
Bounds			impl<'a, 'gcx, 'tcx> Bounds<'tcx> 
Bounds			pub struct Bounds<'tcx> 
Bytes			impl Bytes { } \/\/ error, same as above
CallResolution			struct CallResolution<'gcx: 'tcx, 'tcx> 
CallStep			enum CallStep<'tcx> 
Candidate			impl<'tcx> Candidate<'tcx> 
Candidate			struct Candidate<'tcx> 
CandidateKind			enum CandidateKind<'tcx> 
CandidateSource			pub enum CandidateSource 
CandidateStep			struct CandidateStep<'tcx> 
CastCheck			impl<'a, 'gcx, 'tcx> CastCheck<'tcx> 
CastCheck			pub struct CastCheck<'tcx> 
CastError			enum CastError 
CheckItemTypesVisitor			struct CheckItemTypesVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }
CheckTypeWellFormedVisitor			impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> 
CheckTypeWellFormedVisitor			pub struct CheckTypeWellFormedVisitor<'a, 'tcx:'a> 
CheckVisitor			impl<'a, 'tcx> CheckVisitor<'a, 'tcx> 
CheckVisitor			struct CheckVisitor<'a, 'tcx: 'a> 
CheckWfFcxBuilder			impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> 
CheckWfFcxBuilder			struct CheckWfFcxBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Checker			impl<'a, 'tcx> Checker<'a, 'tcx> 
Checker			struct Checker<'a, 'tcx: 'a> 
Coerce			impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> 
Coerce			struct Coerce<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> 
CoerceUnsized			impl <T, U> CoerceUnsized<Foo<U>> for Foo<T>
CoerceUnsized			impl<T, U> CoerceUnsized<Bar<U>> for Bar<T>
CoerceUnsized			impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}
CoerceUnsized			impl<T, U> CoerceUnsized<Foo<U>> for Foo<T> where T: CoerceUnsized<U> {}
CoerceUnsized			impl<T, U> CoerceUnsized<Foo<U>> for Foo<T>
CoerceUnsized			impl<T, U> CoerceUnsized<MyType<U>> for MyType<T>
CoerceUnsized for Foo			impl<T, U> CoerceUnsized<U> for Foo<T> {}
CollectItemTypesVisitor			impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> 
CollectItemTypesVisitor			struct CollectItemTypesVisitor<'a, 'tcx: 'a> 
ConfirmContext			impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> 
ConfirmContext			struct ConfirmContext<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> 
Constraint			pub struct Constraint<'a> 
ConstraintContext			impl<'a, 'tcx> ConstraintContext<'a, 'tcx> 
ConstraintContext			pub struct ConstraintContext<'a, 'tcx: 'a> 
ConvertedBinding			struct ConvertedBinding<'tcx> 
Copy			impl Copy for &'static Bar { } \/\/ error
Copy for Foo			impl Copy for Foo { } \/\/ error
Copy for Foo			impl Copy for Foo { }
DeferredCallResolution			trait DeferredCallResolution<'gcx, 'tcx> 
DeferredCallResolution for CallResolution			impl<'gcx, 'tcx> DeferredCallResolution<'gcx, 'tcx> for CallResolution<'gcx, 'tcx> 
DependsOnPointerSize			enum DependsOnPointerSize 
Deref for Coerce			impl<'a, 'gcx, 'tcx> Deref for Coerce<'a, 'gcx, 'tcx> 
Deref for ConfirmContext			impl<'a, 'gcx, 'tcx> Deref for ConfirmContext<'a, 'gcx, 'tcx> 
Deref for FnCtxt			impl<'a, 'gcx, 'tcx> Deref for FnCtxt<'a, 'gcx, 'tcx> 
Deref for Inherited			impl<'a, 'gcx, 'tcx> Deref for Inherited<'a, 'gcx, 'tcx> 
Deref for ProbeContext			impl<'a, 'gcx, 'tcx> Deref for ProbeContext<'a, 'gcx, 'tcx> 
Deref for RegionCtxt			impl<'a, 'gcx, 'tcx> Deref for RegionCtxt<'a, 'gcx, 'tcx> 
Diverges			enum Diverges 
Diverges			impl Diverges 
Dog			struct Dog 
Drop for Bar			impl Drop for Bar 
Drop for Foo			impl Drop for Foo { \/\/ and you can implement the trait on it!
Drop for Foo			impl Drop for Foo 
Drop for Foo			impl Drop for Foo<u32> 
Drop for Foo			impl<#[may_dangle] X> Drop for Foo<X> 
Drop for MyStruct			impl<T: Foo> Drop for MyStruct<T> 
Drop for MyStructWrapper			impl <T: Foo> Drop for MyStructWrapper<T> 
Drop for MyTrait			impl Drop for MyTrait 
Drop for MyWrapper			impl <'a> Drop for MyWrapper<'a> 
Drop for MyWrapper			impl <T: MyTrait> Drop for MyWrapper<T> 
Drop for u32			impl Drop for u32 {}
DropckContext			struct DropckContext<'a, 'b: 'a, 'gcx: 'b+'tcx, 'tcx: 'b> 
DropckKind			enum DropckKind<'tcx> 
EnclosingLoops			impl<'gcx, 'tcx> EnclosingLoops<'gcx, 'tcx> 
EnclosingLoops			pub struct EnclosingLoops<'gcx, 'tcx> 
Enterprise			impl Enterprise for .. { }
Enterprise			trait Enterprise {}
Enum			enum Enum 
Eq for TraitInfo			impl Eq for TraitInfo {}
Error			enum Error<'tcx> 
Expectation			impl<'a, 'gcx, 'tcx> Expectation<'tcx> 
Expectation			pub enum Expectation<'tcx> 
ExplicitSelf			impl<'tcx> ExplicitSelf<'tcx> 
ExplicitSelf			pub enum ExplicitSelf<'tcx> 
F			trait F 
F for X			impl F for X { fn m(&self) { println!("I am F"); } }
Field			enum Field 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
FnCtxt			impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> 
Foo			enum Foo { B { i: u32 } }
Foo			enum Foo 
Foo			enum Foo<'a> 
Foo			enum Foo<T> 
Foo			impl Foo { }
Foo			impl Foo 
Foo			impl Foo<bool> 
Foo			impl Foo<u8> 
Foo			impl<T: Default> Foo 
Foo			pub struct Foo; \/\/ you define your type in your crate
Foo			pub trait Foo 
Foo			struct Foo { x: Box<Foo> } \/\/ error
Foo			struct Foo { x: Option<Box<Foo>> }
Foo			struct Foo { x: bool }
Foo			struct Foo 
Foo			struct Foo(u32);
Foo			struct Foo(u8);
Foo			struct Foo;
Foo			struct Foo<'a, 'b>(&'a str, &'b str);
Foo			struct Foo<'a, T: 'a> 
Foo			struct Foo<'a, T> 
Foo			struct Foo<'a> 
Foo			struct Foo<T: ?Sized, U: ?Sized> 
Foo			struct Foo<T: ?Sized> 
Foo			struct Foo<T> { x: T }
Foo			struct Foo<T> 
Foo			struct Foo<T>(T);
Foo			struct Foo<X>(X);
Foo			trait Foo { fn foo(&self) { } }
Foo			trait Foo 
Foo			trait Foo<T> 
Foo			trait Foo{}
Foo			unsafe impl Foo { }
Foo for Bar			impl Foo for Bar 
Foo for Bar			impl Foo for Bar {}
Foo for Baz			impl Foo for Baz { } \/\/ error, `Baz` implements `Bar` which implements `Foo`
Foo for MyStruct			impl Foo for MyStruct 
Foo for Wrapper			impl <T> Foo for Wrapper<T> where Wrapper<T>: Clone 
Foo for Wrapper			impl Foo for Wrapper<u32> where Wrapper<u32>: Clone 
Foo for i32			impl Foo for i32 
Foo for isize			impl Foo for isize 
FooMaker			struct FooMaker;
FooMaker			struct FooMaker<T> 
ForeignTrait for MyType			impl<T> ForeignTrait for MyType<T> { } \/\/ Ok
ForeignTrait for T0			impl<P1, ..., Pm> ForeignTrait<T1, ..., Tn> for T0 { ... }
ForeignTrait2			impl<T> ForeignTrait2<MyType<T>, T> for MyType2 { } \/\/ Ok
ForeignTrait2			impl<T> ForeignTrait2<T, MyType<T>> for MyType2 { } \/\/ error
From for Parameter			impl From<ty::EarlyBoundRegion> for Parameter 
From for Parameter			impl From<ty::ParamTy> for Parameter 
From for i32			impl From<Foo> for i32 { \/\/ or you use a type from your crate as
Fruit			enum Fruit 
G			trait G 
G for X			impl G for X { fn m(&self) { println!("I am G"); } }
GatherLocalsVisitor			impl<'a, 'gcx, 'tcx> GatherLocalsVisitor<'a, 'gcx, 'tcx> 
GatherLocalsVisitor			struct GatherLocalsVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Good			struct Good(u32);
Good			struct Good(u32, u32, u32);
ImplWfCheck			struct ImplWfCheck<'a, 'tcx: 'a> 
InferredIndex			pub struct InferredIndex(pub usize);
InferredInfo			pub struct InferredInfo<'a> 
InherentCollect			impl<'a, 'tcx> InherentCollect<'a, 'tcx> 
InherentCollect			struct InherentCollect<'a, 'tcx: 'a> 
InherentOverlapChecker			impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> 
InherentOverlapChecker			struct InherentOverlapChecker<'a, 'tcx: 'a> 
Inherited			impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> 
Inherited			pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
InheritedBuilder			impl<'a, 'gcx, 'tcx> InheritedBuilder<'a, 'gcx, 'tcx> 
InheritedBuilder			pub struct InheritedBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
IsAssign			enum IsAssign 
IsSuggestion			pub struct IsSuggestion(pub bool);
ItemCtxt			impl<'a, 'tcx> ItemCtxt<'a, 'tcx> 
ItemCtxt			impl<'a,'tcx> ItemCtxt<'a,'tcx> 
ItemCtxt			struct ItemCtxt<'a,'tcx:'a> 
ItemLikeVisitor for CheckItemTypesVisitor			impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> 
ItemLikeVisitor for CheckVisitor			impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> 
ItemLikeVisitor for ConstraintContext			impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> 
ItemLikeVisitor for ImplWfCheck			impl<'a, 'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'a, 'tcx> 
ItemLikeVisitor for InherentCollect			impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> 
ItemLikeVisitor for InherentOverlapChecker			impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentOverlapChecker<'a, 'tcx> 
ItemLikeVisitor for OrphanChecker			impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> 
ItemLikeVisitor for OverlapChecker			impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> 
ItemLikeVisitor for TermsContext			impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> 
ItemLikeVisitor for UnsafetyChecker			impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for UnsafetyChecker<'cx, 'tcx> 
Iterator for AllTraits			impl<'a> Iterator for AllTraits<'a> 
Iterator for Autoderef			impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> 
LiveLongAndProsper			impl LiveLongAndProsper for (u8, u8) 
LiveLongAndProsper			trait LiveLongAndProsper 
LookingFor			pub enum LookingFor<'tcx> 
LoopCtxt			pub struct LoopCtxt<'gcx, 'tcx> 
M			    fn M() {} \/\/ ok!
M			    fn M();
Maker			impl<T: Default> Maker<Foo<T>> for FooMaker 
Maker			trait Maker 
Maker			trait Maker<Item> 
Maker for FooMaker			impl<T: Default> Maker for FooMaker 
Maker for FooMaker			impl<T: Default> Maker for FooMaker<T> 
MethodError			pub enum MethodError<'tcx> 
Mode			pub enum Mode 
MyStruct			struct MyStruct;
MyStruct			struct MyStruct<T> 
MyStructWrapper			struct MyStructWrapper<T: Foo> 
MyTrait			trait MyTrait 
MyTrait			trait MyTrait {type X; }
MyTrait			trait MyTrait {}
MyTrait for Foo			impl MyTrait for Foo { \/\/ error: conflicting implementations of trait
MyTrait for MyStruct			impl MyTrait for MyStruct 
MyTrait for T			impl<T> MyTrait for T 
MyType			pub struct MyType;
MyType			pub struct MyType<T: ?Sized> 
MyType			struct MyType<T>(T);
MyType2			struct MyType2;
MyWrapper			struct MyWrapper<'a> { foo: &'a MyTrait }
MyWrapper			struct MyWrapper<T: MyTrait> { foo: T }
N			    fn N() {}
Namespace			        enum Namespace 
NightsWatch			enum NightsWatch 
NightsWatch			enum NightsWatch {} \/\/ error: unsupported representation for zero-variant enum
NightsWatch			enum NightsWatch {}
NoMatchData			impl<'tcx> NoMatchData<'tcx> 
NoMatchData			pub struct NoMatchData<'tcx> 
Ord for TraitInfo			impl Ord for TraitInfo 
OrphanChecker			struct OrphanChecker<'cx, 'tcx: 'cx> 
OverlapChecker			struct OverlapChecker<'cx, 'tcx: 'cx> 
Parameter			pub struct Parameter(pub u32);
ParameterCollector			struct ParameterCollector 
PartialEq for TraitInfo			impl PartialEq for TraitInfo 
PartialOrd for TraitInfo			impl PartialOrd for TraitInfo 
Pick			pub struct Pick<'tcx> 
PickKind			pub enum PickKind<'tcx> 
ProbeContext			impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> 
ProbeContext			struct ProbeContext<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> 
RangeArgument for T			impl<T> RangeArgument<T> for T { } \/\/ error
RegionCtxt			impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> 
RegionCtxt			pub struct RegionCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
RepeatingScope			pub struct RepeatingScope(ast::NodeId);
ResolveReason			enum ResolveReason 
ResolveReason			impl<'a, 'gcx, 'tcx> ResolveReason 
Resolver			impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> 
Resolver			struct Resolver<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> 
SeedBorrowKind			impl<'a, 'gcx, 'tcx> SeedBorrowKind<'a, 'gcx, 'tcx> 
SeedBorrowKind			struct SeedBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Send			unsafe impl Send for &'static Foo {}
Simba			struct Simba 
SizedByDefault			pub enum SizedByDefault { Yes, No, }
SolveContext			impl<'a, 'tcx> SolveContext<'a, 'tcx> 
SolveContext			struct SolveContext<'a, 'tcx: 'a> 
SomeStruct			struct SomeStruct 
SpaceLlama			trait SpaceLlama 
SpaceLlama for T			impl<T: Clone> SpaceLlama for T 
SpaceLlama for T			impl<T> SpaceLlama for T 
SpaceLlama for i32			impl SpaceLlama for i32 
Subject			pub struct Subject(ast::NodeId);
T1			trait T1 
T1			trait T1 {}
T2			trait T2 
T2			trait T2 {}
TermsContext			impl<'a, 'tcx> TermsContext<'a, 'tcx> 
TermsContext			pub struct TermsContext<'a, 'tcx: 'a> 
Test			impl Test 
Test			struct Test;
Thing			enum Thing 
Thing			struct Thing 
Trait			trait Trait 
Trait for Foo			impl Trait for Foo 
Trait1			trait Trait1 
Trait1 for Test			impl Trait1 for Test { fn foo() {} }
Trait2			trait Trait2 
Trait2 for Test			impl Trait2 for Test { fn foo() {} }
TraitInfo			impl TraitInfo 
TraitInfo			pub struct TraitInfo 
TraitWithThreeParams			trait TraitWithThreeParams<A,B,C> \/\/ ok!
TraitWithThreeParams			trait TraitWithThreeParams<A,B>
TupleArgumentsFlag			enum TupleArgumentsFlag 
TypeAndSubsts			pub struct TypeAndSubsts<'tcx> 
TypeContext			enum TypeContext 
TypeFolder for Resolver			impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Resolver<'cx, 'gcx, 'tcx> 
TypeVisitor for ParameterCollector			impl<'tcx> TypeVisitor<'tcx> for ParameterCollector 
TypeWrapper			impl TypeWrapper 
TypeWrapper			struct TypeWrapper((u8, u8));
UnsafetyChecker			impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> 
UnsafetyChecker			struct UnsafetyChecker<'cx, 'tcx: 'cx> 
UnsafetyState			impl UnsafetyState 
UnsafetyState			pub struct UnsafetyState 
Unsize for MyType			impl<T> Unsize<T> for MyType {}
UnsizeKind			enum UnsizeKind<'tcx> 
VarianceTerm			pub enum VarianceTerm<'a> 
Vec			impl Vec<u8> { } \/\/ error
Visitor			        struct Visitor<'a, 'tcx: 'a> 
Visitor for AdjustBorrowKind			impl<'a, 'gcx, 'tcx> Visitor<'gcx> for AdjustBorrowKind<'a, 'gcx, 'tcx> 
Visitor for CheckTypeWellFormedVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> 
Visitor for CollectItemTypesVisitor			impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> 
Visitor for GatherLocalsVisitor			impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> 
Visitor for RegionCtxt			impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> 
Visitor for SeedBorrowKind			impl<'a, 'gcx, 'tcx> Visitor<'gcx> for SeedBorrowKind<'a, 'gcx, 'tcx> 
Visitor for WritebackCx			impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> 
Wrapper			struct Wrapper<T> 
WritebackCx			impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> 
WritebackCx			struct WritebackCx<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> 
X			struct X;
Xform			pub trait Xform 
Xform for ty			impl Xform for ty::Variance 
_match			pub mod _match;
add			    fn add(self, rhs: Foo) -> Foo 
add_constraint			    fn add_constraint(&mut self,
add_constraints_from_crate			pub fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>)
add_constraints_from_mt			    fn add_constraints_from_mt(&mut self,
add_constraints_from_region			    fn add_constraints_from_region(&mut self,
add_constraints_from_sig			    fn add_constraints_from_sig(&mut self,
add_constraints_from_substs			    fn add_constraints_from_substs(&mut self,
add_constraints_from_trait_ref			    fn add_constraints_from_trait_ref(&mut self,
add_constraints_from_ty			    fn add_constraints_from_ty(&mut self,
add_inferred			    fn add_inferred(&mut self, item_id: ast::NodeId, index: usize, param_id: ast::NodeId) 
add_inferreds_for_item			    fn add_inferreds_for_item(&mut self,
add_obligations			    fn add_obligations(&mut self,
add_obligations_for_parameters			    pub fn add_obligations_for_parameters(&self,
add_wf_bounds			    pub fn add_wf_bounds(&self, substs: &Substs<'tcx>, expr: &hir::Expr)
adjust_closure_kind			    fn adjust_closure_kind(&mut self,
adjust_for_branches			    fn adjust_for_branches(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> Expectation<'tcx> 
adjust_self_ty			    fn adjust_self_ty(&mut self,
adjust_upvar_borrow_kind			    fn adjust_upvar_borrow_kind(&mut self,
adjust_upvar_borrow_kind_for_consume			    fn adjust_upvar_borrow_kind_for_consume(&mut self,
adjust_upvar_borrow_kind_for_mut			    fn adjust_upvar_borrow_kind_for_mut(&mut self, cmt: mc::cmt<'tcx>) 
adjust_upvar_borrow_kind_for_unique			    fn adjust_upvar_borrow_kind_for_unique(&mut self, cmt: mc::cmt<'tcx>) 
adt_def			fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
adt_destructor			fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
all_traits			pub fn all_traits<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> AllTraits<'a> 
always			    fn always(self) -> bool 
analyze_closure			    fn analyze_closure(&mut self,
apply_defaults_and_return_conflicts			    fn apply_defaults_and_return_conflicts<'b>(
assemble_closure_candidates			    fn assemble_closure_candidates(&mut self,
assemble_extension_candidates_for_all_traits			    fn assemble_extension_candidates_for_all_traits(&mut self) -> Result<(), MethodError<'tcx>> 
assemble_extension_candidates_for_trait			    fn assemble_extension_candidates_for_trait(&mut self,
assemble_extension_candidates_for_trait_impls			    fn assemble_extension_candidates_for_trait_impls(&mut self,
assemble_extension_candidates_for_traits_in_scope			    fn assemble_extension_candidates_for_traits_in_scope(&mut self,
assemble_inherent_candidates			    fn assemble_inherent_candidates(&mut self) 
assemble_inherent_candidates_from_object			    fn assemble_inherent_candidates_from_object(&mut self,
assemble_inherent_candidates_from_param			    fn assemble_inherent_candidates_from_param(&mut self,
assemble_inherent_impl_candidates_for_type			    fn assemble_inherent_impl_candidates_for_type(&mut self, def_id: DefId) 
assemble_inherent_impl_for_primitive			    fn assemble_inherent_impl_for_primitive(&mut self, lang_def_id: Option<DefId>) 
assemble_inherent_impl_probe			    fn assemble_inherent_impl_probe(&mut self, impl_def_id: DefId) 
assemble_probe			    fn assemble_probe(&mut self, self_ty: Ty<'tcx>) 
assemble_projection_candidates			    fn assemble_projection_candidates(&mut self,
assemble_where_clause_candidates			    fn assemble_where_clause_candidates(&mut self,
assign			    fn assign(&mut self, span: Span, nid: ast::NodeId, ty_opt: Option<Ty<'tcx>>) -> Ty<'tcx> 
assoc			mod assoc;
associated_item			    pub fn associated_item(&self, def_id: DefId, item_name: ast::Name)
associated_path_def_to_ty			    pub fn associated_path_def_to_ty(&self,
ast_path_substs_for_ty			    pub fn ast_path_substs_for_ty(&self,
ast_path_to_mono_trait_ref			    fn ast_path_to_mono_trait_ref(&self,
ast_path_to_ty			    fn ast_path_to_ty(&self,
ast_region_to_region			    pub fn ast_region_to_region(&self,
ast_ty_to_ty			    pub fn ast_ty_to_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> 
ast_ty_to_ty_cache			    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>>;
ast_ty_to_ty_cache			    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>> 
ast_ty_to_ty_cache			    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>> 
ast_type_binding_to_poly_projection_predicate			    fn ast_type_binding_to_poly_projection_predicate(
astconv			mod astconv;
atomic_fence			    fn atomic_fence(); \/\/ ok!
atomic_foo			    fn atomic_foo(); \/\/ error: unrecognized atomic operation
autoderef			    pub fn autoderef(&'a self, span: Span, base_ty: Ty<'tcx>) -> Autoderef<'a, 'gcx, 'tcx> 
autoderef			mod autoderef;
bar			    fn bar(&mut self) { }
bar			    fn bar(&self) -> bool { self.0 > 5 }
bar			    fn bar(&self) -> bool { self.0 }
bar			    fn bar(&self) { }
bar			    fn bar(&self) {} \/\/ ok!
bar			    fn bar(&self) {}
bar			    fn bar(&self);
bar			    fn bar() -> isize { 42 }
bar			    fn bar() -> isize;
bar			    fn bar() {} \/\/ error: duplicate associated function
bar			    fn bar() {} \/\/ ok!
bar			    fn bar();
bar			    fn bar<'a,'b:'a>(x: &'a str, y: &'b str);
bar			    fn bar<'a,'b>(x: &'a str, y: &'b str) 
bar			fn bar(foo: Foo) -> u32 
bar			fn bar<F, G>(t: F, u: G)
bar			fn bar<F>(t: F)
baz			    fn baz(&self) -> bool { self.0 > 5 }
baz			    fn baz(&self) -> bool { true }
baz			    fn baz(&self) -> bool;
baz			fn baz<I: Foo<A=Bar>>(x: &<I as Foo>::A) {} \/\/ ok!
baz			fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}
baz			fn baz<I>(x: &<I as Foo>::A) where I: Foo<A=Bar> {}
bitand			    fn bitand(self, other: Self) -> Self 
bitand_assign			    fn bitand_assign(&mut self, other: Self) 
bitor			    fn bitor(self, other: Self) -> Self 
bitor_assign			    fn bitor_assign(&mut self, other: Self) 
boo			    fn boo(&self) -> <Self as Foo>::A;
boo			    fn boo(&self) -> usize { 42 }
borrow			    fn borrow(&mut self,
build			    pub fn build(tcx: TyCtxt<'a, 'gcx, 'gcx>, id: ast::NodeId)
builtin			mod builtin;
callee			mod callee;
candidate_method_names			    fn candidate_method_names(&self) -> Vec<ast::Name> 
cast			mod cast;
cause			    pub fn cause(&self,
check			    pub fn check(mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) 
check			    fn check<F>(&self, trait_def_id: Option<DefId>, mut f: F) -> &Self
check			pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check			pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check			pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check			pub mod check;
check_abi			fn check_abi<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, abi: Abi) 
check_addr_ptr_cast			    fn check_addr_ptr_cast(&self,
check_argument_types			    fn check_argument_types(&self,
check_associated_item			    fn check_associated_item(&mut self,
check_auto_trait			    fn check_auto_trait(&mut self, trait_def_id: DefId, span: Span) 
check_binop			    pub fn check_binop(&self,
check_binop_assign			    pub fn check_binop_assign(&self,
check_block_no_value			    pub fn check_block_no_value(&self, blk: &'gcx hir::Block)  
check_block_with_expected			    fn check_block_with_expected(&self,
check_bounds_are_used			pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_call			    pub fn check_call(&self,
check_casts			    fn check_casts(&self) 
check_closure			    fn check_closure(&self,
check_closure			    fn check_closure(&mut self,
check_coherence			pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)
check_decl_initializer			    pub fn check_decl_initializer(&self,
check_decl_local			    pub fn check_decl_local(&self, local: &'gcx hir::Local)  
check_def_id			    fn check_def_id(&self, item: &hir::Item, def_id: DefId) 
check_default_impls			pub fn check_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_dereferencable			    pub fn check_dereferencable(&self, span: Span, expected: Ty<'tcx>, inner: &hir::Pat) -> bool 
check_drop_impl			pub fn check_drop_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_enum			pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_expr			    fn check_expr(&self, expr: &'gcx hir::Expr) -> Ty<'tcx> 
check_expr_closure			    pub fn check_expr_closure(&self,
check_expr_coercable_to_type			    fn check_expr_coercable_to_type(&self,
check_expr_eq_type			    fn check_expr_eq_type(&self,
check_expr_fn_block			    fn check_expr_fn_block(&mut self,
check_expr_has_type			    pub fn check_expr_has_type(&self,
check_expr_kind			    fn check_expr_kind(&self,
check_expr_struct			    fn check_expr_struct(&self,
check_expr_struct_fields			    fn check_expr_struct_fields(&self,
check_expr_with_expectation			    fn check_expr_with_expectation(&self,
check_expr_with_expectation_and_lvalue_pref			    fn check_expr_with_expectation_and_lvalue_pref(&self,
check_expr_with_hint			    fn check_expr_with_hint(&self, expr: &'gcx hir::Expr,
check_expr_with_lvalue_pref			    fn check_expr_with_lvalue_pref(&self, expr: &'gcx hir::Expr,
check_field			    fn check_field(&self,
check_fn			fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,
check_fn_or_method			    fn check_fn_or_method<'fcx, 'tcx>(&mut self,
check_for_common_items_in_impls			    fn check_for_common_items_in_impls(&self, impl1: DefId, impl2: DefId) 
check_for_entry_fn			fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_for_overlapping_inherent_impls			    fn check_for_overlapping_inherent_impls(&self, ty_def_id: DefId) 
check_fptr_ptr_cast			    fn check_fptr_ptr_cast(&self,
check_impl			    fn check_impl(&mut self,
check_impl			fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) 
check_impl			pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) 
check_impl_items_against_trait			fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_import			    fn check_import(&self, id: ast::NodeId, span: Span) 
check_intrinsic_type			pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_item_bodies			pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult 
check_item_bodies_task			    fn check_item_bodies_task<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, (): ()) 
check_item_fn			    fn check_item_fn(&mut self,
check_item_type			pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item) 
check_item_type			    fn check_item_type(&mut self,
check_item_types			pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult 
check_item_well_formed			    fn check_item_well_formed(&mut self, item: &hir::Item) 
check_legal_trait_for_method_call			pub fn check_legal_trait_for_method_call(tcx: TyCtxt, span: Span, trait_id: DefId) 
check_lit			    fn check_lit(&self,
check_main_fn_ty			fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_match			    pub fn check_match(&self,
check_method_argument_types			    fn check_method_argument_types(&self,
check_method_call			    fn check_method_call(&self,
check_method_receiver			    fn check_method_receiver<'fcx, 'tcx>(&mut self,
check_on_unimplemented			fn check_on_unimplemented<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_overloaded_binop			    fn check_overloaded_binop(&self,
check_pat			    pub fn check_pat(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>) 
check_pat_arg			    pub fn check_pat_arg(&self, pat: &'gcx hir::Pat, expected: Ty<'tcx>, is_arg: bool) 
check_pat_path			    fn check_pat_path(&self,
check_pat_struct			    fn check_pat_struct(&self,
check_pat_tuple_struct			    fn check_pat_tuple_struct(&self,
check_path_parameter_count			    fn check_path_parameter_count(&self,
check_platform_intrinsic_type			pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_primitive_impl			    fn check_primitive_impl(&self,
check_ptr_addr_cast			    fn check_ptr_addr_cast(&self,
check_ptr_ptr_cast			    fn check_ptr_ptr_cast(&self,
check_ref_cast			    fn check_ref_cast(&self,
check_region_bounds_on_impl_method			fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_representable			fn check_representable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_safety_of_destructor_if_necessary			pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(
check_safety_of_rvalue_destructor_if_necessary			    fn check_safety_of_rvalue_destructor_if_necessary(&mut self,
check_simd			pub fn check_simd<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: DefId) 
check_specialization_validity			fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_start_fn_ty			fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_stmt			    pub fn check_stmt(&self, stmt: &'gcx hir::Stmt) 
check_str_addition			    fn check_str_addition(&self,
check_struct			fn check_struct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_struct_fields_on_error			    fn check_struct_fields_on_error(&self,
check_struct_pat_fields			    fn check_struct_pat_fields(&self,
check_struct_path			    pub fn check_struct_path(&self,
check_then_else			    fn check_then_else(&self,
check_trait			    fn check_trait(&mut self, item: &hir::Item) 
check_trait			pub fn check_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trait_def_id: DefId) 
check_tup_field			    fn check_tup_field(&self,
check_type_argument_count			fn check_type_argument_count(tcx: TyCtxt, span: Span, supplied: usize,
check_type_defn			    fn check_type_defn<F>(&mut self, item: &hir::Item, all_sized: bool, mut lookup_fields: F)
check_union			fn check_union<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_unsafety_coherence			    fn check_unsafety_coherence(&mut self,
check_unused			pub mod check_unused;
check_user_unop			    pub fn check_user_unop(&self,
check_variances_for_type_defn			    fn check_variances_for_type_defn(&self,
check_wf_new			pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult 
check_where_clauses			    fn check_where_clauses<'fcx, 'tcx>(&mut self,
closure			mod closure;
closure_analyze			    pub fn closure_analyze(&self, body: &'gcx hir::Body) 
closure_kind			fn closure_kind<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
closure_type			fn closure_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
cmp			    fn cmp(&self, other: &TraitInfo) -> Ordering 
code_to_origin			    fn code_to_origin(&self,
coerce			    fn coerce<'a, E, I>(&self, exprs: &E, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx>
coerce_borrowed_pointer			    fn coerce_borrowed_pointer<'a, E, I>(&self,
coerce_closure_to_fn			    fn coerce_closure_to_fn(&self,
coerce_foo			fn coerce_foo<T: CoerceUnsized<U>, U>(t: T) -> Foo<U> 
coerce_from_fn_item			    fn coerce_from_fn_item(&self,
coerce_from_fn_pointer			    fn coerce_from_fn_pointer(&self,
coerce_from_safe_fn			    fn coerce_from_safe_fn(&self,
coerce_mutbls			fn coerce_mutbls<'tcx>(from_mutbl: hir::Mutability,
coerce_unsafe_ptr			    fn coerce_unsafe_ptr(&self,
coerce_unsized			    fn coerce_unsized(&self, source: Ty<'tcx>, target: Ty<'tcx>) -> CoerceResult<'tcx> 
coercion			pub mod coercion;
coherence			pub mod coherence;
coherent_inherent_impls			fn coherent_inherent_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, _: CrateNum) 
coherent_trait			fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
collapse_candidates_to_trait_pick			    fn collapse_candidates_to_trait_pick(&self, probes: &[&Candidate<'tcx>]) -> Option<Pick<'tcx>> 
collect			pub mod collect;
collect_item_types			pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
compare_const_impl			pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compare_impl_method			pub fn compare_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compare_method			mod compare_method;
compare_number_of_generics			fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compare_number_of_method_arguments			fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compare_predicate_entailment			fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compare_self_type			fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
components_must_outlive			    fn components_must_outlive(&self,
compute_bounds			pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,
compute_object_lifetime_bound			    fn compute_object_lifetime_bound(&self,
compute_type_of_foreign_fn_decl			fn compute_type_of_foreign_fn_decl<'a, 'tcx>(
confirm			    fn confirm(&mut self,
confirm			mod confirm;
confirm_builtin_call			    fn confirm_builtin_call(&self,
confirm_deferred_closure_call			    fn confirm_deferred_closure_call(&self,
confirm_method			    pub fn confirm_method(&self,
confirm_overloaded_call			    fn confirm_overloaded_call(&self,
consider_candidates			    fn consider_candidates(&self,
consider_probe			    fn consider_probe(&self,
constant_term			    fn constant_term(&self, v: ty::Variance) -> VarianceTermPtr<'a> 
constrain_autoderefs			    fn constrain_autoderefs(&mut self,
constrain_bindings_in_pat			    fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat) 
constrain_call			    fn constrain_call<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
constrain_callee			    fn constrain_callee(&mut self,
constrain_cast			    fn constrain_cast(&mut self,
constrain_index			    fn constrain_index(&mut self,
constrained_type_params			mod constrained_type_params;
constraints			mod constraints;
consume			    fn consume(&mut self,
consume_pat			    fn consume_pat(&mut self,
contravariant			    fn contravariant(&mut self, variance: VarianceTermPtr<'a>) -> VarianceTermPtr<'a> 
conv_object_ty_poly_trait_ref			    fn conv_object_ty_poly_trait_ref(&self,
convert_enum_variant_types			fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
convert_impl_item			fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_item_id: ast::NodeId) 
convert_item			fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) 
convert_lvalue_derefs_to_mutable			    fn convert_lvalue_derefs_to_mutable(&self) 
convert_parenthesized_parameters			    fn convert_parenthesized_parameters(&self,
convert_struct_variant			fn convert_struct_variant<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
convert_trait_item			fn convert_trait_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trait_item_id: ast::NodeId) 
convert_variant_ctor			fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
count_modifiers			        fn count_modifiers(ty: Ty) -> usize 
create_steps			    fn create_steps(&self,
create_substs_for_ast_path			    fn create_substs_for_ast_path(&self,
create_substs_for_ast_trait_ref			    fn create_substs_for_ast_trait_ref(&self,
decl_without_init			    fn decl_without_init(&mut self,
declaration			                          trait declaration",
declaration			trait declaration. Ensure lifetime declarations match exactly in both trait
declared_generic_bounds_from_env			    fn declared_generic_bounds_from_env(&self, generic: GenericKind<'tcx>)
declared_projection_bounds_from_trait			    fn declared_projection_bounds_from_trait(&self,
declared_variance			    fn declared_variance(&self,
deduce_expectations_from_expected_type			    fn deduce_expectations_from_expected_type
deduce_expectations_from_obligations			    fn deduce_expectations_from_obligations
deduce_sig_from_projection			    fn deduce_sig_from_projection(&self,
def_to_ty			    pub fn def_to_ty(&self,
default_type_parameters			    fn default_type_parameters(&self) 
defined			trait defined in another crate) where
demand			pub mod demand;
demand_coerce			    pub fn demand_coerce(&self, expr: &hir::Expr, checked_ty: Ty<'tcx>, expected: Ty<'tcx>) 
demand_eqtype			    pub fn demand_eqtype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) 
demand_eqtype_diag			    pub fn demand_eqtype_diag(&self,
demand_eqtype_with_origin			    pub fn demand_eqtype_with_origin(&self,
demand_suptype			    pub fn demand_suptype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) 
deref			    fn deref(&self) -> &Self::Target 
deref			    fn deref(&self) -> &Self::Target 
deref			    fn deref(&self) -> &Self::Target 
deref			    fn deref(&self) -> &Self::Target 
deref			    fn deref(&self) -> &Self::Target 
determine			    pub fn determine(untransformed_self_ty: Ty<'tcx>,
determine_parameters_to_be_inferred			pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
diagnostics			pub mod diagnostics;
display_suggested_methods			    fn display_suggested_methods(&self, methods: &[AssociatedItem]) -> Vec<String> 
do_check			    fn do_check(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> Result<CastKind, CastError> 
do_something			    fn do_something(&self) -> T;
do_something			    fn do_something() 
do_something_else			    fn do_something_else<T: Clone>(&self, bar: T);
drop			    fn drop(&mut self) { }
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) {}
dropck			pub mod dropck;
early_bound_lifetimes_from_generics			fn early_bound_lifetimes_from_generics<'a, 'tcx>(
elaborate_bounds			    fn elaborate_bounds<F>(&mut self, bounds: &[ty::PolyTraitRef<'tcx>], mut mk_cand: F)
enforce_builtin_binop_types			    fn enforce_builtin_binop_types(&self,
enforce_illegal_method_limitations			    fn enforce_illegal_method_limitations(&self, pick: &probe::Pick) 
enforce_impl_items_are_distinct			fn enforce_impl_items_are_distinct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
enforce_impl_params_are_constrained			fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
enforce_trait_manually_implementable			fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_def_id: DefId) 
ensure_drop_params_and_item_params_correspond			fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(
ensure_drop_predicates_are_implied_by_item_defn			fn ensure_drop_predicates_are_implied_by_item_defn<'a, 'tcx>(
ensure_no_ty_param_bounds			fn ensure_no_ty_param_bounds(tcx: TyCtxt,
enter			    fn enter<F, R>(&'tcx mut self, f: F) -> R
enum_variants			    fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> 
eq			    fn eq(&self, other: &TraitInfo) -> bool 
equate_intrinsic_type			fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
erase_late_bound_regions			    fn erase_late_bound_regions<T>(&self, value: &ty::Binder<T>) -> T
err_args			    fn err_args(&self, len: usize) -> Vec<Ty<'tcx>> 
err_count_since_creation			    pub fn err_count_since_creation(&self) -> usize 
error_192			fn error_192(tcx: TyCtxt, span: Span) 
error_194			fn error_194(tcx: TyCtxt, span: Span, trait_decl_span: Span, name: ast::Name) 
error_380			fn error_380(tcx: TyCtxt, span: Span) 
error_392			fn error_392<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, param_name: ast::Name)
euv::Delegate for AdjustBorrowKind			impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for AdjustBorrowKind<'a, 'gcx, 'tcx> 
evaluate			    fn evaluate(&self, term: VarianceTermPtr<'a>) -> ty::Variance 
evaluate_disr_expr			fn evaluate_disr_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
expected_inputs_for_expected_output			    fn expected_inputs_for_expected_output(&self,
extract_existential_trait_ref			    fn extract_existential_trait_ref<R, F>(&mut self, self_ty: Ty<'tcx>, mut closure: F) -> R
extract_spans_for_error_reporting			fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,
f			fn f() {}
f			fn f(a: u16, b: &str) {}
f			fn f<T>() {}
f64x2			struct f64x2(f64, f64);
field_ty			    pub fn field_ty(&self,
final_upvar_tys			    fn final_upvar_tys(&mut self, closure_id: ast::NodeId) -> Vec<Ty<'tcx>> 
finalize			    pub fn finalize<'b, I>(self, pref: LvaluePreference, exprs: I)
finalize_as_infer_ok			    pub fn finalize_as_infer_ok<'b, I>(self, pref: LvaluePreference, exprs: I)
find_binding_for_lifetime			    fn find_binding_for_lifetime(&self, param_id: ast::NodeId) -> ast::NodeId 
find_bound_for_assoc_item			    fn find_bound_for_assoc_item(&self,
find_loop			    fn find_loop(&mut self, id: hir::LoopIdResult) -> Option<&mut LoopCtxt<'gcx, 'tcx>> 
finish_resolving_struct_path			    fn finish_resolving_struct_path(&self,
fix_scalar_builtin_expr			    fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr) 
fly			    fn fly(&self) {} \/\/ And now that's ok!
fly			    fn fly(&self) {}
fly			    fn fly(&self);
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for VarianceTerm			impl<'a> fmt::Debug for VarianceTerm<'a> 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
foo			    fn foo (x: u8, ...);
foo			    fn foo(&self) -> bool { true }
foo			    fn foo(&self) {}
foo			    fn foo(&self);
foo			    fn foo(&self, x: u8) -> bool;
foo			    fn foo() {} \/\/ ok!
foo			    fn foo() {}
foo			    fn foo(); \/\/ error: unrecognized intrinsic function: `foo`
foo			    fn foo();
foo			    fn foo(x: bool) -> Self { Bar }
foo			    fn foo(x: i16) { }
foo			    fn foo(x: u16);
foo			    fn foo<T: Default>(x: T) -> Self;
foo			fn foo() -> _ { 5 } \/\/ error, explicitly write out the return type instead
foo			fn foo() -> u8 
foo			fn foo(x: u8, ...) {}
foo			fn foo<F: Fn()>(f: F) 
foo			fn foo<F: Fn<(i32,)>>(f: F) -> F::Output { f(3) }
foo			fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) }
foo			fn foo<T, U>() {}
foo			fn foo<T, U>(x: T) {}
foo			fn foo<T>() {}
for_id			    fn for_id<'tcx>(&self, id: ast::NodeId, span: Span)
for_item			    fn for_item<'tcx>(&self, item: &hir::Item)
format_method_suggestion			    fn format_method_suggestion(&self, method: &AssociatedItem) -> String 
fresh_receiver_substs			    fn fresh_receiver_substs(&mut self,
from			    fn from(op: hir::BinOp) -> BinOpCategory 
from			    fn from(param: ty::EarlyBoundRegion) -> Self { Parameter(param.index) }
from			    fn from(param: ty::ParamTy) -> Self { Parameter(param.idx) }
from			    fn from(i: Foo) -> i32 
from_infcx			    fn from_infcx(infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,
function			    pub fn function(unsafety: hir::Unsafety, def: ast::NodeId) -> UnsafetyState 
generics			fn generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
get			    fn get(&self) -> T 
get			    fn get(&self) -> usize { 0 }
get			    fn get(&self) -> usize { self.value }
get			    fn get(&self) -> usize;
get			    fn get<T: Default>(&self) -> T 
get_bar_bad			fn get_bar_bad<F: Foo>(t: F) -> f64 
get_bar_good			fn get_bar_good() -> f64 
get_best_match			    fn get_best_match(&self, methods: &[AssociatedItem]) -> Vec<String> 
get_free_substs			    fn get_free_substs(&self) -> Option<&Substs<'tcx>>;
get_free_substs			    fn get_free_substs(&self) -> Option<&Substs<'tcx>> 
get_free_substs			    fn get_free_substs(&self) -> Option<&Substs<'tcx>> 
get_state			    fn get_state(&self) -> String 
get_state			    fn get_state(&self) -> String;
get_type_parameter_bounds			    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)
get_type_parameter_bounds			    fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)
get_type_parameter_bounds			    fn get_type_parameter_bounds(&self,
get_value			    fn get_value<'a>(&'a self) -> &'a str { &self.value }
glb			pub fn glb(v1: ty::Variance, v2: ty::Variance) -> ty::Variance 
handle_external_def			        fn handle_external_def(tcx: TyCtxt,
has_applicable_self			    fn has_applicable_self(&self, item: &ty::AssociatedItem) -> bool 
has_dtor_of_interest			fn has_dtor_of_interest<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
has_no_input_arg			    fn has_no_input_arg(&self, method: &AssociatedItem) -> bool 
i16x8			struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);
i32x4			struct i32x4(i32, i32, i32, i32);
i64x2			struct i64x2(i64, i64);
i64x8			struct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);
i8x16			struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8,
identify_constrained_type_params			pub fn identify_constrained_type_params<'tcx>(predicates: &[ty::Predicate<'tcx>],
identity			fn identity<'tcx>() -> Adjust<'tcx> 
impl_can_possibly_match			    fn impl_can_possibly_match(&self, impl_def_id: DefId) -> bool 
impl_implied_bounds			    fn impl_implied_bounds(&self, impl_def_id: DefId, span: Span) -> Vec<Ty<'tcx>> 
impl_or_trait_item			    fn impl_or_trait_item(&self, def_id: DefId) -> Vec<ty::AssociatedItem> 
impl_self_ty			    pub fn impl_self_ty(&self,
impl_trait_ref			fn impl_trait_ref<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
impl_ty_and_substs			    fn impl_ty_and_substs(&self, impl_def_id: DefId) -> (Ty<'tcx>, &'tcx Substs<'tcx>) 
impl_wf_check			pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
impl_wf_check			mod impl_wf_check;
infer_variance			pub fn infer_variance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
inferred_index			    fn inferred_index(&self, param_id: ast::NodeId) -> InferredIndex 
inherent			mod inherent;
instantiate_anon_types			    fn instantiate_anon_types<T: TypeFoldable<'tcx>>(&self, value: &T) -> T 
instantiate_bounds			    fn instantiate_bounds(&self, span: Span, def_id: DefId, substs: &Substs<'tcx>)
instantiate_method_sig			    fn instantiate_method_sig(&mut self,
instantiate_method_substs			    fn instantiate_method_substs(&mut self,
instantiate_mono_trait_ref			    pub fn instantiate_mono_trait_ref(&self,
instantiate_poly_trait_ref			    pub fn instantiate_poly_trait_ref(&self,
instantiate_type_scheme			    fn instantiate_type_scheme<T>(&self,
instantiate_value_path			    pub fn instantiate_value_path(&self,
intrinsic			mod intrinsic;
invariant			    fn invariant(&mut self, variance: VarianceTermPtr<'a>) -> VarianceTermPtr<'a> 
is_builtin_binop			fn is_builtin_binop(lhs: Ty, rhs: Ty, op: hir::BinOp) -> bool 
is_fn_ty			    fn is_fn_ty(&self, ty: &Ty<'tcx>, span: Span) -> bool 
is_lifetime			fn is_lifetime(map: &hir_map::Map, param_id: ast::NodeId) -> bool 
is_local			        fn is_local(ty: Ty) -> bool 
is_param			fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_to_be_inferred			    fn is_to_be_inferred(&self, param_id: ast::NodeId) -> bool 
is_unsized			fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,
itemlikevisit::ItemLikeVisitor for Visitor			        impl<'v, 'a, 'tcx> itemlikevisit::ItemLikeVisitor<'v> for Visitor<'a, 'tcx> 
items			trait items like associated types or constants. Example:
iterate_over_potentially_unsafe_regions_in_type			fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(
lang_items			fn lang_items(tcx: TyCtxt) -> Vec<(ast::NodeId, Vec<ty::Variance>)> 
link_addr_of			    fn link_addr_of(&mut self, expr: &hir::Expr,
link_autoref			    fn link_autoref(&self,
link_by_ref			    fn link_by_ref(&self,
link_fn_args			    fn link_fn_args(&self, body_scope: CodeExtent, args: &[hir::Arg]) 
link_local			    fn link_local(&self, local: &hir::Local) 
link_match			    fn link_match(&self, discr: &hir::Expr, arms: &[hir::Arm]) 
link_pattern			    fn link_pattern<'t>(&self,
link_reborrowed_region			    fn link_reborrowed_region(&self,
link_region			    fn link_region(&self,
link_region_from_node_type			    fn link_region_from_node_type(&self,
local_ty			    pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> Ty<'tcx> 
lookup_indexing			    fn lookup_indexing(&self,
lookup_method			    pub fn lookup_method(&self,
lookup_method_in_trait			    pub fn lookup_method_in_trait(&self,
lookup_method_in_trait_adjusted			    pub fn lookup_method_in_trait_adjusted(&self,
lookup_op_method			    fn lookup_op_method(&self,
m			    fn m(&self);
main			fn main() -> i32 { 0 }
main			fn main() { }
main			fn main() 
main			fn main() {}
main			fn main();
main			fn main()
main			fn main<T>() { \/\/ error: main function is not allowed to have type parameters
make			    fn make(&mut self) -> Foo<T> 
make			    fn make(&mut self) -> Item;
make			    fn make(&mut self) -> Self::Item;
make_overloaded_lvalue_return_type			    fn make_overloaded_lvalue_return_type(&self,
match_intrinsic_type_to_type			fn match_intrinsic_type_to_type<'a, 'tcx>(
matched_pat			    fn matched_pat(&mut self,
matches_return_type			    pub fn matches_return_type(&self, method: &ty::AssociatedItem,
maybe_ambiguous_final_ty			    pub fn maybe_ambiguous_final_ty(&self) -> Ty<'tcx> 
method			pub mod method;
method			    fn method(&self) {}
method			    fn method<T>(&self, v: &[T]) -> usize 
method_exists			    pub fn method_exists(&self,
misc			    pub fn misc(&self, span: Span) -> ObligationCause<'tcx> 
mk_subregion_due_to_dereference			    pub fn mk_subregion_due_to_dereference(&mut self,
mutate			    fn mutate(&mut self,
my_start			fn my_start(argc: isize, argv: *const *const u8) -> isize 
name_and_trait_def_id			    fn name_and_trait_def_id(&self,
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
new			    pub fn new(fcx: &FnCtxt<'a, 'gcx, 'tcx>,
new			    fn new(fcx: &'f FnCtxt<'f, 'gcx, 'tcx>, cause: ObligationCause<'tcx>) -> Self 
new			    fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,
new			    pub fn new(static_candidates: Vec<CandidateSource>,
new			    fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,
new			    fn new(def_id: DefId) -> TraitInfo 
new			    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>) -> Self 
new			    pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,
new			    pub fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,
new			    fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>) -> SeedBorrowKind<'a, 'gcx, 'tcx> 
new			    fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,
new			    pub fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>)
new			    fn new(fcx: &'cx FnCtxt<'cx, 'gcx, 'tcx>) -> WritebackCx<'cx, 'gcx, 'tcx> 
new			    fn new(fcx: &'cx FnCtxt<'cx, 'gcx, 'tcx>,
new			    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)
new_select_all_obligations_and_apply_defaults			    fn new_select_all_obligations_and_apply_defaults(&self) 
next			    fn next(&mut self) -> Option<Self::Item> 
next			    fn next(&mut self) -> Option<TraitInfo> 
node_ty			    pub fn node_ty(&self, id: ast::NodeId) -> Ty<'tcx> 
nor			struct nor an enum. Erroneous code example:
normalize_associated_types_in			pub fn normalize_associated_types_in<'a, 'gcx, 'tcx, T>(
normalize_associated_types_in			    fn normalize_associated_types_in<T>(&self, span: Span, value: &T) -> T
normalize_associated_types_in			    fn normalize_associated_types_in<T>(&self,
normalize_ty			    fn normalize_ty(&self, span: Span, ty: Ty<'tcx>) -> Ty<'tcx>;
normalize_ty			    fn normalize_ty(&self, span: Span, ty: Ty<'tcx>) -> Ty<'tcx> 
normalize_ty			    fn normalize_ty(&self, _span: Span, ty: Ty<'tcx>) -> Ty<'tcx> 
num_inferred			    pub fn num_inferred(&self) -> usize 
old_select_all_obligations_and_apply_defaults			    fn old_select_all_obligations_and_apply_defaults(&self) 
one_bound_for_assoc_type			    fn one_bound_for_assoc_type<I>(&self,
only_has_type			    fn only_has_type(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> Option<Ty<'tcx>> 
op			mod op;
ops::BitAnd for Diverges			impl ops::BitAnd for Diverges 
ops::BitAndAssign for Diverges			impl ops::BitAndAssign for Diverges 
ops::BitOr for Diverges			impl ops::BitOr for Diverges 
ops::BitOrAssign for Diverges			impl ops::BitOrAssign for Diverges 
opt_node_ty_substs			    pub fn opt_node_ty_substs<F>(&self,
orphan			mod orphan;
overlap			mod overlap;
overloaded_deref_ty			    fn overloaded_deref_ty(&mut self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> 
param_bound			    fn param_bound(&self, param_ty: ty::ParamTy) -> VerifyBound<'tcx> 
param_ty_must_outlive			    fn param_ty_must_outlive(&self,
parameter_count_error			        fn parameter_count_error<'tcx>(sess: &Session, sp: Span, expected_count: usize,
parameters_for			pub fn parameters_for<'tcx, T>(t: &T,
parameters_for_impl			pub fn parameters_for_impl<'tcx>(impl_self_ty: Ty<'tcx>,
partial_cmp			    fn partial_cmp(&self, other: &TraitInfo) -> Option<Ordering> 
pick			    fn pick(mut self) -> PickResult<'tcx> 
pick_autorefd_method			    fn pick_autorefd_method(&mut self, step: &CandidateStep<'tcx>) -> Option<PickResult<'tcx>> 
pick_by_value_method			    fn pick_by_value_method(&mut self, step: &CandidateStep<'tcx>) -> Option<PickResult<'tcx>> 
pick_core			    fn pick_core(&mut self) -> Option<PickResult<'tcx>> 
pick_initial_variance			    fn pick_initial_variance(&self, item_id: ast::NodeId, index: usize) -> ty::Variance 
pick_method			    fn pick_method(&mut self, self_ty: Ty<'tcx>) -> Option<PickResult<'tcx>> 
pick_step			    fn pick_step(&mut self, step: &CandidateStep<'tcx>) -> Option<PickResult<'tcx>> 
predicates			    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, param_ty: Ty<'tcx>)
predicates			fn predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
predicates_from_bound			fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,
printf			    fn printf(_: *const c_char, ...) -> c_int;
probe			pub mod probe;
probe_for_name			    pub fn probe_for_name(&self,
probe_for_return_type			    pub fn probe_for_return_type(&self,
probe_op			    fn probe_op<OP,R>(&'a self,
prohibit_projection			    pub fn prohibit_projection(&self, span: Span) 
prohibit_type_params			    pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) 
projected_ty_from_poly_trait_ref			    fn projected_ty_from_poly_trait_ref(&self,
projected_ty_from_poly_trait_ref			    fn projected_ty_from_poly_trait_ref(&self,
projected_ty_from_poly_trait_ref			    fn projected_ty_from_poly_trait_ref(&self,
projection_bound			    fn projection_bound(&self,
projection_declared_bounds			    fn projection_declared_bounds(&self,
projection_must_outlive			    fn projection_must_outlive(&self,
provide			pub fn provide(providers: &mut Providers) 
provide			pub fn provide(providers: &mut Providers) 
provide			pub fn provide(providers: &mut Providers) 
provide			pub fn provide(providers: &mut Providers) 
qpath_to_ty			    fn qpath_to_ty(&self,
re_infer			    fn re_infer(&self, span: Span, _def: Option<&ty::RegionParameterDef>)
re_infer			    fn re_infer(&self, span: Span, def: Option<&ty::RegionParameterDef>)
re_infer			    fn re_infer(&self, _span: Span, _def: Option<&ty::RegionParameterDef>)
record_deferred_call_resolution			    fn record_deferred_call_resolution(&self,
record_static_candidate			    fn record_static_candidate(&mut self, source: CandidateSource) 
recurse			    pub fn recurse(&mut self, blk: &hir::Block) -> UnsafetyState 
recursive_type_bound			    fn recursive_type_bound(&self, span: Span, ty: Ty<'tcx>) -> VerifyBound<'tcx> 
regionck			pub mod regionck;
regionck_expr			    pub fn regionck_expr(&self, body: &'gcx hir::Body) 
regionck_fn			    pub fn regionck_fn(&self,
regionck_item			    pub fn regionck_item(&self,
register_bound			    pub fn register_bound(&self,
register_infer_ok_obligations			    pub fn register_infer_ok_obligations<T>(&self, infer_ok: InferOk<'tcx, T>) -> T 
register_old_wf_obligation			    pub fn register_old_wf_obligation(&self,
register_predicate			    pub fn register_predicate(&self,
register_predicates			    pub fn register_predicates(&self,
register_region_obligation			    pub fn register_region_obligation(&self,
register_wf_obligation			    pub fn register_wf_obligation(&self,
reject_shadowing_type_parameters			fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) 
relate_free_regions			    fn relate_free_regions(&mut self,
remove_deferred_call_resolutions			    fn remove_deferred_call_resolutions(&self,
replace_late_bound_regions_with_fresh_var			    fn replace_late_bound_regions_with_fresh_var<T>(&self, value: &ty::Binder<T>) -> T
report_ambiguous_associated_type			    fn report_ambiguous_associated_type(&self,
report_bivariance			    fn report_bivariance(&self,
report_cast_error			    fn report_cast_error(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>, e: CastError) 
report_cast_to_unsized_type			    fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) 
report_error			    fn report_error(&self, e: FixupError) 
report_forbidden_specialization			fn report_forbidden_specialization<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
report_lifetime_number_error			fn report_lifetime_number_error(tcx: TyCtxt, span: Span, number: usize, expected: usize) 
report_method_error			    pub fn report_method_error(&self,
report_unknown_field			    fn report_unknown_field(&self,
report_unused_parameter			fn report_unused_parameter(tcx: TyCtxt,
require_c_abi_if_variadic			fn require_c_abi_if_variadic(tcx: TyCtxt,
require_same_types			fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
require_type_is_sized			    pub fn require_type_is_sized(&self,
require_type_meets			    pub fn require_type_meets(&self,
reset			    fn reset(&mut self) 
resolve			    fn resolve<'a>(&mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) 
resolve			    fn resolve(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> Expectation<'tcx> 
resolve			    fn resolve<'a>(&mut self, fcx: &FnCtxt<'a, 'gcx, 'tcx>);
resolve			    fn resolve<T>(&self, x: &T, reason: ResolveReason) -> T::Lifted
resolve_expr_type_adjusted			    pub fn resolve_expr_type_adjusted(&mut self, expr: &hir::Expr) -> Ty<'tcx> 
resolve_node_type			    fn resolve_node_type(&self, id: ast::NodeId) -> Ty<'tcx> 
resolve_regions_and_report_errors			    fn resolve_regions_and_report_errors(&self) 
resolve_ty_and_def_ufcs			    pub fn resolve_ty_and_def_ufcs<'b>(&self,
resolve_type			    pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> 
resolve_type_vars_in_body			    pub fn resolve_type_vars_in_body(&self, body: &'gcx hir::Body)
resolve_type_vars_with_obligations			    fn resolve_type_vars_with_obligations(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> 
resolve_ufcs			    pub fn resolve_ufcs(&self,
return_bool			    fn return_bool(&self, &Self::Bar, &Self::Baz) -> bool;
revise_self_ty			fn revise_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
rvalue_hint			    fn rvalue_hint(fcx: &FnCtxt<'a, 'gcx, 'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> 
select_all_obligations_and_apply_defaults			    fn select_all_obligations_and_apply_defaults(&self) 
select_all_obligations_or_error			    fn select_all_obligations_or_error(&self) 
select_obligations_where_possible			    fn select_obligations_where_possible(&self) 
self_type_matches_expected_vid			    fn self_type_matches_expected_vid(&self,
sess			    pub fn sess(&self) -> &Session 
set_body_id			    fn set_body_id(&mut self, body_id: ast::NodeId) -> ast::NodeId 
set_call_site_scope			    fn set_call_site_scope(&mut self, call_site_scope: Option<CodeExtent>) -> Option<CodeExtent> 
set_repeating_scope			    fn set_repeating_scope(&mut self, scope: ast::NodeId) -> ast::NodeId 
set_tainted_by_errors			    fn set_tainted_by_errors(&self);
set_tainted_by_errors			    fn set_tainted_by_errors(&self) 
set_tainted_by_errors			    fn set_tainted_by_errors(&self) 
setup_constraining_predicates			pub fn setup_constraining_predicates<'tcx>(predicates: &mut [ty::Predicate<'tcx>],
simd_shuffle			    fn simd_shuffle<A,B>(a: A, b: A, c: [u32; 8]) -> B;
simd_shuffle8			    fn simd_shuffle8<A,B>(a: A, b: A, c: [u32; 8]) -> B;
size_of			    fn size_of<T, U>() -> usize; \/\/ error: intrinsic has wrong number
size_of			    fn size_of<T>() -> usize; \/\/ ok!
size_of			    fn size_of<T>(); \/\/ error: intrinsic has wrong type
solve			mod solve;
solve			    fn solve(&mut self) 
solve_constraints			pub fn solve_constraints(constraints_cx: ConstraintContext) 
some_fn			fn some_fn() -> u32 
some_func			fn some_func(i: &mut i32) 
some_func			fn some_func(x: &mut i32) 
some_function			fn some_function() 
some_other_func			fn some_other_func() {}
span			    fn span(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Span 
split_auto_traits			fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
struct_variant			    fn struct_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> 
structurally_resolve_type_or_else			    fn structurally_resolve_type_or_else<F>(&self, sp: Span, ty: Ty<'tcx>, f: F)
structurally_resolved_type			    pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> 
substs_wf_in_scope			    fn substs_wf_in_scope(&mut self,
success			fn success<'tcx>(kind: Adjust<'tcx>,
suggest			mod suggest;
suggest_field_name			    fn suggest_field_name(variant: &'tcx ty::VariantDef,
suggest_traits_to_import			    fn suggest_traits_to_import(&self,
super_predicates			fn super_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
t			    fn t<'a,'b:'a>(x: &'a str, y: &'b str) { \/\/ ok!
t			    fn t<'a,'b:'a>(x: &'a str, y: &'b str);
tag			    pub fn tag(&self) -> String 
tcx			    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }
tcx			    fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> 
tcx			    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx> 
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> { self.tcx }
tcx			    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> 
terms			mod terms;
to_option			    fn to_option(self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> Option<Ty<'tcx>> 
to_source			    fn to_source(&self) -> CandidateSource 
to_ty			    pub fn to_ty(&self, ast_t: &hir::Ty) -> Ty<'tcx> 
to_ty			    fn to_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> 
to_unadjusted_pick			    fn to_unadjusted_pick(&self) -> Pick<'tcx> 
together_we_will_rule_the_galaxy			fn together_we_will_rule_the_galaxy(son: &A) {}
together_we_will_rule_the_galaxy			fn together_we_will_rule_the_galaxy(son: &A<i32>) {} \/\/ Ok!
trait			        impl trait, self type, or predicates",
trait_def			fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
trait_def_id			    fn trait_def_id(&self, trait_ref: &hir::TraitRef) -> DefId 
trait_defines_associated_type_named			    fn trait_defines_associated_type_named(&self,
trait_ref_to_existential			    fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)
trivial_cast_lint			    fn trivial_cast_lint(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) 
try_adjust_upvar_deref			    fn try_adjust_upvar_deref(&mut self,
try_coerce			    pub fn try_coerce(&self,
try_coercion_cast			    fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'gcx, 'tcx>) -> bool 
try_find_coercion_lub			    pub fn try_find_coercion_lub<'b, E, I>(&self,
try_index_step			    fn try_index_step(&self,
try_overloaded_call_step			    fn try_overloaded_call_step(&self,
try_overloaded_call_traits			    fn try_overloaded_call_traits(&self,
try_overloaded_deref			    pub fn try_overloaded_deref(&self,
ty			fn ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
ty_infer			    fn ty_infer(&self, span: Span) -> Ty<'tcx>;
ty_infer			    fn ty_infer(&self, span: Span) -> Ty<'tcx> 
ty_infer			    fn ty_infer(&self, span: Span) -> Ty<'tcx> 
ty_infer_for_def			    fn ty_infer_for_def(&self,
ty_infer_for_def			    fn ty_infer_for_def(&self,
ty_of_arg			    pub fn ty_of_arg(&self,
ty_of_closure			    pub fn ty_of_closure(&self,
ty_of_fn			    pub fn ty_of_fn(&self,
type_bound			    fn type_bound(&self, span: Span, ty: Ty<'tcx>) -> VerifyBound<'tcx> 
type_derefs_to_local			    fn type_derefs_to_local(&self,
type_is_known_to_be_sized			    fn type_is_known_to_be_sized(&self, ty: Ty<'tcx>, span: Span) -> bool 
type_must_outlive			    pub fn type_must_outlive(&self,
type_of_node_must_outlive			    fn type_of_node_must_outlive(&mut self,
type_param_predicates			fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
type_parameter_bounds_in_generics			    fn type_parameter_bounds_in_generics(&self,
typeck_tables			fn typeck_tables<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
unambiguous_final_ty			    pub fn unambiguous_final_ty(&self) -> Ty<'tcx> 
unify			    fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> 
unify_and			    fn unify_and(&self, a: Ty<'tcx>, b: Ty<'tcx>, kind: Adjust<'tcx>)
unify_receivers			    fn unify_receivers(&mut self, self_ty: Ty<'tcx>, method_self_ty: Ty<'tcx>) 
unsafety			mod unsafety;
unsize_kind			    fn unsize_kind(&self, t: Ty<'tcx>) -> Option<UnsizeKind<'tcx>> 
upcast			    fn upcast(&mut self,
upvar			mod upvar;
values			enum values because there are no zero-variant enum values. There is no way to
variance			pub mod variance;
variant			enum variant, one of the fields was not provided. Erroneous code example:
variant			enum variant, one of the fields was specified more than once. Erroneous code
visit_adjustments			    fn visit_adjustments(&mut self, reason: ResolveReason, id: ast::NodeId) 
visit_anon_types			    fn visit_anon_types(&mut self) 
visit_arm			    fn visit_arm(&mut self, arm: &'gcx hir::Arm) 
visit_block			    fn visit_block(&mut self, b: &'gcx hir::Block) 
visit_cast_types			    fn visit_cast_types(&mut self) 
visit_closures			    fn visit_closures(&mut self) 
visit_expr			    fn visit_expr(&mut self, expr: &'gcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'gcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &'gcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'tcx hir::Expr) 
visit_fn			    fn visit_fn(&mut self, _: intravisit::FnKind<'gcx>, _: &'gcx hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, _fk: intravisit::FnKind<'gcx>, _: &'gcx hir::FnDecl,
visit_fn			    fn visit_fn(&mut self,
visit_fn_body			    fn visit_fn_body(&mut self,
visit_free_region_map			    fn visit_free_region_map(&mut self) 
visit_fru_field_types			    fn visit_fru_field_types(&mut self) 
visit_generics			    fn visit_generics(&mut self, generics: &'tcx hir::Generics) 
visit_impl_item			            fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'v hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_implementation_of_coerce_unsized			fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
visit_implementation_of_copy			fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
visit_implementation_of_drop			fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
visit_item			            fn visit_item(&mut self, i: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, i: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, i: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_liberated_fn_sigs			    fn visit_liberated_fn_sigs(&mut self) 
visit_lints			    fn visit_lints(&mut self) 
visit_local			    fn visit_local(&mut self, local: &'gcx hir::Local) 
visit_local			    fn visit_local(&mut self, l: &'gcx hir::Local) 
visit_local			    fn visit_local(&mut self, l: &'gcx hir::Local) 
visit_method_map_entry			    fn visit_method_map_entry(&mut self,
visit_node_id			    fn visit_node_id(&mut self, reason: ResolveReason, id: ast::NodeId) 
visit_pat			    fn visit_pat(&mut self, p: &'gcx hir::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'gcx hir::Pat) 
visit_region			    fn visit_region(&mut self, r: &'tcx ty::Region) -> bool 
visit_region_obligations			    fn visit_region_obligations(&mut self, node_id: ast::NodeId)
visit_stmt			    fn visit_stmt(&mut self, s: &'gcx hir::Stmt) 
visit_trait_item			            fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem) { }
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) 
visit_ty			    fn visit_ty(&mut self, ty: &'tcx hir::Ty) 
visit_ty			    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool 
visit_type_nodes			    fn visit_type_nodes(&self) 
visit_upvar_borrow_map			    fn visit_upvar_borrow_map(&mut self) 
walk_cast			    fn walk_cast(&mut self,
warn_if_unreachable			    fn warn_if_unreachable(&self, id: ast::NodeId, span: Span, kind: &str) 
wfcheck			mod wfcheck;
with_collect_item_sig			    fn with_collect_item_sig(&self, id: ast::NodeId, op: fn(TyCtxt<'a, 'tcx, 'tcx>, ast::NodeId)) 
with_fcx			    fn with_fcx<F>(&'tcx mut self, f: F) where
with_loop_ctxt			    fn with_loop_ctxt<F: FnOnce()>(&self, id: ast::NodeId, ctxt: LoopCtxt<'gcx, 'tcx>, f: F)
without_lifetime			    fn without_lifetime(&self) -> &str { &self.value }
write			    fn write(&self) 
write_adjustment			    pub fn write_adjustment(&self,
write_autoderef_adjustment			    pub fn write_autoderef_adjustment(&self,
write_error			    pub fn write_error(&self, node_id: ast::NodeId) 
write_nil			    pub fn write_nil(&self, node_id: ast::NodeId) 
write_overloaded_call_method_map			    fn write_overloaded_call_method_map(&self,
write_substs			    pub fn write_substs(&self, node_id: ast::NodeId, substs: ty::ItemSubsts<'tcx>) 
write_ty			    pub fn write_ty(&self, node_id: ast::NodeId, ty: Ty<'tcx>) 
write_ty_to_tables			    fn write_ty_to_tables(&mut self, node_id: ast::NodeId, ty: Ty<'gcx>) 
writeback			pub mod writeback;
x			    fn x(self: Box<Foo>) {} \/\/ ok!
x			    fn x(self: Rc<Foo>) {}
x86_mm_adds_ep16			    fn x86_mm_adds_ep16(x: i16x8, y: i16x8) -> i16x8;
x86_mm_adds_epi16			    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i16x8; \/\/ ok!
x86_mm_adds_epi16			    fn x86_mm_adds_epi16(x: i16x8, y: i16x8) -> i64x8;
x86_mm_adds_epi16			    fn x86_mm_adds_epi16(x: i8x16, y: i32x4) -> i64x2;
x86_mm_movemask_pd			    fn x86_mm_movemask_pd(x: f64x2) -> i32; \/\/ ok!
x86_mm_movemask_pd			    fn x86_mm_movemask_pd(x: f64x2) -> i32;
x86_mm_movemask_pd			    fn x86_mm_movemask_pd(x: f64x2, y: f64x2, z: f64x2) -> i32;
x86_mm_movemask_pd			    fn x86_mm_movemask_pd<T>(x: f64x2) -> i32;
xform			    fn xform(&mut self, v1: VarianceTermPtr<'a>, v2: VarianceTermPtr<'a>) -> VarianceTermPtr<'a> 
xform			mod xform;
xform			    fn xform(self, v: Self) -> Self;
xform			    fn xform(self, v: ty::Variance) -> ty::Variance 
xform_method_self_ty			    fn xform_method_self_ty(&self,
xform_self_ty			    fn xform_self_ty(&self,
