A			impl A 
A			struct A{}
AtBindingPatternVisitor			struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> 
BindingMode			pub enum BindingMode<'tcx> 
ConstEvalErr			impl ConstEvalErr 
ConstEvalErr			pub struct ConstEvalErr 
ConstEvalErrDescription			impl<'a> ConstEvalErrDescription<'a> 
ConstEvalErrDescription			pub enum ConstEvalErrDescription<'a> 
Constructor			impl Constructor 
Constructor			pub enum Constructor 
Delegate for MutationChecker			impl<'a, 'gcx, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'gcx> 
Empty			enum Empty {}
Enum			enum Enum 
ErrKind			pub enum ErrKind 
EvalHint			impl<'tcx> EvalHint<'tcx> 
EvalHint			pub enum EvalHint<'tcx> 
FieldPattern			pub struct FieldPattern<'tcx> 
From for ErrKind			impl From<ConstMathErr> for ErrKind 
FromIterator			impl<'a, 'tcx> FromIterator<Vec<&'a Pattern<'tcx>>> for Matrix<'a, 'tcx> 
Irrefutable			struct Irrefutable(i32);
LiteralExpander			struct LiteralExpander;
MatchCheckCtxt			impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> 
MatchCheckCtxt			pub struct MatchCheckCtxt<'a, 'tcx: 'a> 
MatchVisitor			impl<'a, 'tcx> MatchVisitor<'a, 'tcx> 
MatchVisitor			struct MatchVisitor<'a, 'tcx: 'a> 
Matrix			impl<'a, 'tcx> Matrix<'a, 'tcx> 
Matrix			pub struct Matrix<'a, 'tcx: 'a>(Vec<Vec<&'a Pattern<'tcx>>>);
Method			enum Method { GET, POST }
Method			enum Method 
MutationChecker			struct MutationChecker<'a, 'gcx: 'a> 
OuterVisitor			struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }
Pattern			impl<'tcx> Pattern<'tcx> 
Pattern			impl<'a, 'gcx, 'tcx> Pattern<'tcx> 
Pattern			pub struct Pattern<'tcx> 
PatternContext			struct PatternContext<'tcx> 
PatternContext			impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> 
PatternContext			pub struct PatternContext<'a, 'gcx: 'tcx, 'tcx: 'a> 
PatternError			pub enum PatternError 
PatternFoldable			            impl<'tcx> PatternFoldable<'tcx> for 
PatternFoldable			            impl<'tcx> PatternFoldable<'tcx> for 
PatternFoldable			pub trait PatternFoldable<'tcx> : Sized 
PatternFoldable for FieldPattern			impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> 
PatternFoldable for Pattern			impl<'tcx> PatternFoldable<'tcx> for Pattern<'tcx> 
PatternFoldable for PatternKind			impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> 
PatternFolder			pub trait PatternFolder<'tcx> : Sized 
PatternFolder for LiteralExpander			impl<'tcx> PatternFolder<'tcx> for LiteralExpander 
PatternKind			pub enum PatternKind<'tcx> 
Terminator			enum Terminator 
Usefulness			pub enum Usefulness 
Visitor for AtBindingPatternVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> 
Visitor for MatchVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for MatchVisitor<'a, 'tcx> 
Visitor for OuterVisitor			impl<'a, 'v, 'tcx> Visitor<'v> for OuterVisitor<'a, 'tcx> 
Witness			impl Witness 
Witness			pub struct Witness(Vec<P<Pat>>);
WitnessPreference			pub enum WitnessPreference 
X			struct X { x: (), }
_match			mod _match;
all_constructors			fn all_constructors(_cx: &mut MatchCheckCtxt, pcx: PatternContext) -> Vec<Constructor> 
apply_constructor			    fn apply_constructor<'a, 'tcx>(
borrow			    fn borrow(&mut self,
cast_const			fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstVal, ty: ty::Ty) -> CastResult 
cast_const_float			fn cast_const_float<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
cast_const_int			fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstInt, ty: ty::Ty) -> CastResult 
check_arms			fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_exhaustive			fn check_exhaustive<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
check_for_bindings_named_the_same_as_variants			fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) 
check_for_mutation_in_guard			fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) 
check_irrefutable			    fn check_irrefutable(&self, pat: &Pat, is_fn_arg: bool) 
check_legality_of_bindings_in_at_patterns			fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor, pat: &Pat) 
check_legality_of_move_bindings			fn check_legality_of_move_bindings(cx: &MatchVisitor,
check_match			    fn check_match(
check_match			pub mod check_match;
check_patterns			    fn check_patterns(&self, has_guard: bool, pats: &[P<Pat>]) 
checked_or			    fn checked_or(&self, ty: Ty<'tcx>) -> EvalHint<'tcx> 
compare_const_vals			pub fn compare_const_vals(tcx: TyCtxt, span: Span, a: &ConstVal, b: &ConstVal)
compare_lit_exprs			pub fn compare_lit_exprs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
const_expr_to_pat			pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
const_val_to_expr			fn const_val_to_expr(value: &ConstVal) -> P<hir::Expr> 
constructor_arity			fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize 
consume			    fn consume(&mut self, _: ast::NodeId, _: Span, _: cmt, _: ConsumeMode) {}
consume			    fn consume(self) -> usize 
consume_pat			    fn consume_pat(&mut self, _: &Pat, _: cmt, _: ConsumeMode) {}
create_and_enter			    pub fn create_and_enter<F, R>(
create_e0004			fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> 
decl_without_init			    fn decl_without_init(&mut self, _: ast::NodeId, _: Span) {}
description			    pub fn description(&self) -> ConstEvalErrDescription 
diagnostics			pub mod diagnostics;
empty			    pub fn empty() -> Self 
erase_hint			    fn erase_hint(&self) -> EvalHint<'tcx> 
eval			mod eval;
eval_const_expr			pub fn eval_const_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
eval_const_expr_checked			pub fn eval_const_expr_checked<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
eval_const_expr_partial			pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
eval_length			pub fn eval_length<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
expand_pattern			pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pattern<'tcx>)
fatal_const_eval_err			pub fn fatal_const_eval_err<'a, 'tcx>(
flatten_nested_slice_patterns			    fn flatten_nested_slice_patterns(
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Matrix			impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> 
fold_pattern			    fn fold_pattern(&mut self, pat: &Pattern<'tcx>) -> Pattern<'tcx> 
fold_pattern			    fn fold_pattern(&mut self, pattern: &Pattern<'tcx>) -> Pattern<'tcx> 
fold_pattern_kind			    fn fold_pattern_kind(&mut self, kind: &PatternKind<'tcx>) -> PatternKind<'tcx> 
fold_with			    fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self 
foo			fn foo(x: Empty) 
foo			fn foo(x: Option<String>) 
from			    fn from(err: ConstMathErr) -> ErrKind 
from_hir			    pub fn from_hir(tcx: TyCtxt<'a, 'gcx, 'tcx>, pat: &hir::Pat) -> Self 
from_iter			    fn from_iter<T: IntoIterator<Item=Vec<&'a Pattern<'tcx>>>>(iter: T) -> Self
infer			fn infer<'a, 'tcx>(i: ConstInt,
inline_const_fn_from_external_crate			fn inline_const_fn_from_external_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
into_oneline			    pub fn into_oneline(self) -> Cow<'a, str> 
is_useful			pub fn is_useful<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
is_useful_specialized			fn is_useful_specialized<'a, 'tcx>(
is_wildcard			    fn is_wildcard(&self) -> bool 
lit_to_const			fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,
lookup_const_by_id			pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
lookup_const_fn_by_id			pub fn lookup_const_fn_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)
lookup_variant_by_id			fn lookup_variant_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
lower_byte_str_pattern			    fn lower_byte_str_pattern(&mut self, pat: &'a Pattern<'tcx>) -> Vec<&'a Pattern<'tcx>> 
lower_opt_pattern			    fn lower_opt_pattern(&mut self, pat: &Option<P<hir::Pat>>) -> Option<Pattern<'tcx>>
lower_pattern			    pub fn lower_pattern(&mut self, pat: &hir::Pat) -> Pattern<'tcx> 
lower_patterns			    fn lower_patterns(&mut self, pats: &[P<hir::Pat>]) -> Vec<Pattern<'tcx>> 
lower_variant_or_leaf			    fn lower_variant_or_leaf(
main			fn main() 
matched_pat			    fn matched_pat(&mut self, _: &Pat, _: cmt, _: euv::MatchMode) {}
missing_constructors			fn missing_constructors(cx: &mut MatchCheckCtxt,
mutate			    fn mutate(&mut self, _: ast::NodeId, span: Span, _: cmt, mode: MutateMode) 
new			    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self 
note_const_eval_err			pub fn note_const_eval_err<'a, 'tcx>(
parse_float			fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>)
pat_constructors			fn pat_constructors(_cx: &mut MatchCheckCtxt,
pat_is_catchall			fn pat_is_catchall(dm: &DefMap, pat: &Pat) -> bool 
pattern			pub mod pattern;
patterns_for_variant			fn patterns_for_variant<'a, 'tcx>(
push			    pub fn push(&mut self, row: Vec<&'a Pattern<'tcx>>) 
push_wild_constructor			    fn push_wild_constructor<'a, 'tcx>(
range_covered_by_constructor			fn range_covered_by_constructor(tcx: TyCtxt, span: Span,
report_const_eval_err			pub fn report_const_eval_err<'a, 'tcx>(
report_inlining_errors			    fn report_inlining_errors(&self, patcx: PatternContext, pat_span: Span) 
resolve_trait_associated_const			fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
single_pattern			    pub fn single_pattern(&self) -> &Pat 
slice_or_array_pattern			    fn slice_or_array_pattern(
slice_pat_covered_by_constructor			fn slice_pat_covered_by_constructor(_tcx: TyCtxt, _span: Span,
specialize			fn specialize<'a, 'tcx>(
super_fold_with			                fn super_fold_with<F: PatternFolder<'tcx>>(&self, _: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self;
super_fold_with			    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self
variant_expr			    fn variant_expr<'a>(variants: &'a [hir::Variant], id: ast::NodeId)
variant_for_adt			    fn variant_for_adt<'tcx, 'container, 'a>(&self,
visit_expr			    fn visit_expr(&mut self, _expr: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &hir::Expr) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,
visit_impl_item			    fn visit_impl_item(&mut self, item: &hir::ImplItem) 
visit_local			    fn visit_local(&mut self, loc: &hir::Local) 
visit_pat			    fn visit_pat(&mut self, pat: &Pat) 
visit_trait_item			    fn visit_trait_item(&mut self, item: &hir::TraitItem) 
