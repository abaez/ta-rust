A			impl A 
A			struct A{}
AtBindingPatternVisitor			struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> 
BindingMode			pub enum BindingMode<'tcx> 
ConstContext			impl<'a, 'tcx> ConstContext<'a, 'tcx> 
ConstContext			pub struct ConstContext<'a, 'tcx: 'a> 
Constructor			impl<'tcx> Constructor<'tcx> 
Constructor			pub enum Constructor<'tcx> 
Delegate for MutationChecker			impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> 
Empty			enum Empty {}
FieldPattern			pub struct FieldPattern<'tcx> 
FromIterator			impl<'a, 'tcx> FromIterator<Vec<&'a Pattern<'tcx>>> for Matrix<'a, 'tcx> 
Irrefutable			struct Irrefutable(i32);
LiteralExpander			struct LiteralExpander;
MatchCheckCtxt			impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> 
MatchCheckCtxt			pub struct MatchCheckCtxt<'a, 'tcx: 'a> 
MatchVisitor			impl<'a, 'tcx> MatchVisitor<'a, 'tcx> 
MatchVisitor			struct MatchVisitor<'a, 'tcx: 'a> 
Matrix			impl<'a, 'tcx> Matrix<'a, 'tcx> 
Matrix			pub struct Matrix<'a, 'tcx: 'a>(Vec<Vec<&'a Pattern<'tcx>>>);
Method			enum Method { GET, POST }
Method			enum Method 
Method			pub enum Method { GET, POST }
MutationChecker			struct MutationChecker<'a, 'tcx: 'a> 
OuterVisitor			struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }
Pattern			impl<'tcx> Pattern<'tcx> 
Pattern			impl<'a, 'gcx, 'tcx> Pattern<'tcx> 
Pattern			pub struct Pattern<'tcx> 
PatternContext			struct PatternContext<'tcx> 
PatternContext			impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> 
PatternContext			impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> 
PatternContext			pub struct PatternContext<'a, 'gcx: 'tcx, 'tcx: 'a> 
PatternError			pub enum PatternError<'tcx> 
PatternFoldable			            impl<
PatternFoldable			pub trait PatternFoldable<'tcx> : Sized 
PatternFoldable for FieldPattern			impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> 
PatternFoldable for Pattern			impl<'tcx> PatternFoldable<'tcx> for Pattern<'tcx> 
PatternFoldable for PatternKind			impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> 
PatternFolder			pub trait PatternFolder<'tcx> : Sized 
PatternFolder for LiteralExpander			impl<'tcx> PatternFolder<'tcx> for LiteralExpander 
PatternKind			pub enum PatternKind<'tcx> 
Terminator			enum Terminator 
Usefulness			impl<'tcx> Usefulness<'tcx> 
Usefulness			pub enum Usefulness<'tcx> 
Visitor for AtBindingPatternVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> 
Visitor for MatchVisitor			impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> 
Visitor for OuterVisitor			impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> 
Witness			impl<'tcx> Witness<'tcx> 
Witness			pub struct Witness<'tcx>(Vec<Pattern<'tcx>>);
WitnessPreference			pub enum WitnessPreference 
X			struct X { x: (), }
_match			mod _match;
all_constructors			fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
apply_constructor			    fn apply_constructor<'a>(
borrow			    fn borrow(&mut self,
cast_const			fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
cast_const_float			fn cast_const_float<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
cast_const_int			fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_arms			fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_exhaustive			fn check_exhaustive<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
check_for_bindings_named_the_same_as_variants			fn check_for_bindings_named_the_same_as_variants(cx: &MatchVisitor, pat: &Pat) 
check_for_mutation_in_guard			fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) 
check_irrefutable			    fn check_irrefutable(&self, pat: &Pat, origin: &str) 
check_legality_of_bindings_in_at_patterns			fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor, pat: &Pat) 
check_legality_of_move_bindings			fn check_legality_of_move_bindings(cx: &MatchVisitor,
check_match			    fn check_match(
check_match			pub mod check_match;
check_patterns			    fn check_patterns(&self, has_guard: bool, pats: &[P<Pat>]) 
compare_const_vals			pub fn compare_const_vals(tcx: TyCtxt, span: Span, a: &ConstVal, b: &ConstVal)
compare_lit_exprs			    pub fn compare_lit_exprs(&self,
conservative_is_uninhabited			    fn conservative_is_uninhabited(&self, scrutinee_ty: Ty<'tcx>) -> bool 
const_eval			fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
constructor_arity			fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize 
constructor_covered_by_range			fn constructor_covered_by_range(tcx: TyCtxt, span: Span,
constructor_sub_pattern_tys			fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,
consume			    fn consume(&mut self, _: ast::NodeId, _: Span, _: cmt, _: ConsumeMode) {}
consume			    fn consume(self) -> usize 
consume_pat			    fn consume_pat(&mut self, _: &Pat, _: cmt, _: ConsumeMode) {}
create_and_enter			    pub fn create_and_enter<F, R>(
create_e0004			fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> 
decl_without_init			    fn decl_without_init(&mut self, _: ast::NodeId, _: Span) {}
diagnostics			pub mod diagnostics;
empty			    pub fn empty() -> Self 
eval			    pub fn eval(&self, e: &Expr) -> EvalResult<'tcx> 
eval			mod eval;
eval_const_expr_partial			fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,
expand_pattern			pub fn expand_pattern<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>, pat: Pattern<'tcx>)
flatten_nested_slice_patterns			    fn flatten_nested_slice_patterns(
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Matrix			impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> 
fmt::Display for Pattern			impl<'tcx> fmt::Display for Pattern<'tcx> 
fold_pattern			    fn fold_pattern(&mut self, pat: &Pattern<'tcx>) -> Pattern<'tcx> 
fold_pattern			    fn fold_pattern(&mut self, pattern: &Pattern<'tcx>) -> Pattern<'tcx> 
fold_pattern_kind			    fn fold_pattern_kind(&mut self, kind: &PatternKind<'tcx>) -> PatternKind<'tcx> 
fold_with			    fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self 
foo			fn foo(x: Empty) 
foo			fn foo(x: Option<String>) 
from_hir			    pub fn from_hir(tcx: TyCtxt<'a, 'gcx, 'tcx>,
from_iter			    fn from_iter<T: IntoIterator<Item=Vec<&'a Pattern<'tcx>>>>(iter: T) -> Self
is_uninhabited			    fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool 
is_useful			    fn is_useful(&self) -> bool 
is_useful			pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,
is_useful_specialized			fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(
is_variant_uninhabited			    fn is_variant_uninhabited(&self,
is_wildcard			    fn is_wildcard(&self) -> bool 
lit_to_const			fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,
lookup_const_by_id			pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
lower_byte_str_pattern			    fn lower_byte_str_pattern<'p>(&mut self, pat: &'p Pattern<'tcx>) -> Vec<&'p Pattern<'tcx>>
lower_const_expr			    fn lower_const_expr(&mut self,
lower_lit			    fn lower_lit(&mut self, expr: &hir::Expr) -> PatternKind<'tcx> 
lower_opt_pattern			    fn lower_opt_pattern(&mut self, pat: &Option<P<hir::Pat>>) -> Option<Pattern<'tcx>>
lower_path			    fn lower_path(&mut self,
lower_pattern			    pub fn lower_pattern(&mut self, pat: &hir::Pat) -> Pattern<'tcx> 
lower_patterns			    fn lower_patterns(&mut self, pats: &[P<hir::Pat>]) -> Vec<Pattern<'tcx>> 
lower_variant_or_leaf			    fn lower_variant_or_leaf(
main			fn main() 
matched_pat			    fn matched_pat(&mut self, _: &Pat, _: cmt, _: euv::MatchMode) {}
max_slice_length			fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(
mutate			    fn mutate(&mut self, _: ast::NodeId, span: Span, _: cmt, mode: MutateMode) 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> 
new			    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>, tables: &'a ty::TypeckTables<'gcx>) -> Self 
parse_float			fn parse_float<'tcx>(num: &str, fty: ast::FloatTy)
pat_constructors			fn pat_constructors<'tcx>(_cx: &mut MatchCheckCtxt,
pat_is_catchall			fn pat_is_catchall(pat: &Pat) -> bool 
pattern			pub mod pattern;
patterns_for_variant			fn patterns_for_variant<'p, 'a: 'p, 'tcx: 'a>(
print_const_val			fn print_const_val(value: &ConstVal, f: &mut fmt::Formatter) -> fmt::Result 
provide			pub fn provide(providers: &mut Providers) 
push			    pub fn push(&mut self, row: Vec<&'a Pattern<'tcx>>) 
push_wild_constructor			    fn push_wild_constructor<'a>(
report_inlining_errors			    fn report_inlining_errors(&self, pat_span: Span) 
resolve_trait_associated_const			fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
single_pattern			    pub fn single_pattern(&self) -> &Pattern<'tcx> 
slice_or_array_pattern			    fn slice_or_array_pattern(
slice_pat_covered_by_constructor			fn slice_pat_covered_by_constructor(_tcx: TyCtxt, _span: Span,
specialize			fn specialize<'p, 'a: 'p, 'tcx: 'a>(
super_fold_with			                fn super_fold_with<F: PatternFolder<
super_fold_with			    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self;
super_fold_with			    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self
variant_index_for_adt			    fn variant_index_for_adt(&self, adt: &'tcx ty::AdtDef) -> usize 
visit_body			    fn visit_body(&mut self, body: &'tcx hir::Body) 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx hir::Expr) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,
visit_local			    fn visit_local(&mut self, loc: &'tcx hir::Local) 
visit_pat			    fn visit_pat(&mut self, pat: &Pat) 
with_tables			    pub fn with_tables(tcx: TyCtxt<'a, 'tcx, 'tcx>, tables: &'a ty::TypeckTables<'tcx>) -> Self 
