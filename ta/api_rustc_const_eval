A			impl A 
A			struct A{}
AtBindingPatternVisitor			struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> 
ConstEvalErr			impl ConstEvalErr 
ConstEvalErr			pub struct ConstEvalErr 
ConstEvalErrDescription			impl<'a> ConstEvalErrDescription<'a> 
ConstEvalErrDescription			pub enum ConstEvalErrDescription<'a> 
Constructor			impl Constructor 
Constructor			pub enum Constructor 
Delegate for MutationChecker			impl<'a, 'gcx, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'gcx> 
Empty			enum Empty {}
Enum			enum Enum 
ErrKind			pub enum ErrKind 
EvalHint			impl<'tcx> EvalHint<'tcx> 
EvalHint			pub enum EvalHint<'tcx> 
From for ErrKind			impl From<ConstMathErr> for ErrKind 
FromIterator			impl<'a, 'tcx> FromIterator<Vec<(&'a Pat, Option<Ty<'tcx>>)>> for Matrix<'a, 'tcx> 
Irrefutable			struct Irrefutable(i32);
MatchCheckCtxt			pub struct MatchCheckCtxt<'a, 'tcx: 'a> 
Matrix			struct Matrix<'a, 'tcx>(Vec<Vec<(&'a Pat, Option<Ty<'tcx>>)>>);
Method			enum Method { GET, POST }
Method			enum Method 
MutationChecker			struct MutationChecker<'a, 'gcx: 'a> 
StaticInliner			impl<'a, 'tcx> StaticInliner<'a, 'tcx> 
StaticInliner			struct StaticInliner<'a, 'tcx: 'a> 
Terminator			enum Terminator 
Usefulness			enum Usefulness 
Visitor for AtBindingPatternVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> 
Visitor for MatchCheckCtxt			impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> 
WitnessPreference			enum WitnessPreference 
X			struct X { x: (), }
all_constructors			fn all_constructors(_cx: &MatchCheckCtxt, left_ty: Ty,
borrow			    fn borrow(&mut self,
cast_const			fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstVal, ty: ty::Ty) -> CastResult 
cast_const_float			fn cast_const_float<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
cast_const_int			fn cast_const_int<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstInt, ty: ty::Ty) -> CastResult 
check_arms			fn check_arms(cx: &MatchCheckCtxt,
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_exhaustive			fn check_exhaustive<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,
check_expr			fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) 
check_fn			fn check_fn(cx: &mut MatchCheckCtxt,
check_for_bindings_named_the_same_as_variants			fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat) 
check_for_mutation_in_guard			fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,
check_for_static_nan			fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) 
check_irrefutable			fn check_irrefutable(cx: &MatchCheckCtxt, pat: &Pat, is_fn_arg: bool) 
check_legality_of_bindings_in_at_patterns			fn check_legality_of_bindings_in_at_patterns(cx: &MatchCheckCtxt, pat: &Pat) 
check_legality_of_move_bindings			fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,
check_local			fn check_local(cx: &mut MatchCheckCtxt, loc: &hir::Local) 
check_match			pub mod check_match;
checked_or			    fn checked_or(&self, ty: Ty<'tcx>) -> EvalHint<'tcx> 
compare_const_vals			pub fn compare_const_vals(tcx: TyCtxt, span: Span, a: &ConstVal, b: &ConstVal)
compare_lit_exprs			pub fn compare_lit_exprs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
const_expr_to_pat			pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
const_val_to_expr			fn const_val_to_expr(value: &ConstVal) -> P<hir::Expr> 
construct_witness			fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,
constructor_arity			pub fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize 
consume			    fn consume(&mut self, _: NodeId, _: Span, _: cmt, _: ConsumeMode) {}
consume			    fn consume(self) -> usize 
consume_pat			    fn consume_pat(&mut self, _: &Pat, _: cmt, _: ConsumeMode) {}
decl_without_init			    fn decl_without_init(&mut self, _: NodeId, _: Span) {}
description			    pub fn description(&self) -> ConstEvalErrDescription 
diagnostics			pub mod diagnostics;
erase_hint			    fn erase_hint(&self) -> EvalHint<'tcx> 
eval			mod eval;
eval_const_expr			pub fn eval_const_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
eval_const_expr_partial			pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
eval_length			pub fn eval_length<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
fatal_const_eval_err			pub fn fatal_const_eval_err<'a, 'tcx>(
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Matrix			impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> 
fold_pat			    fn fold_pat(&mut self, pat: P<Pat>) -> P<Pat> 
foo			fn foo(x: Empty) 
foo			fn foo(x: Option<String>) 
from			    fn from(err: ConstMathErr) -> ErrKind 
from_iter			    fn from_iter<T: IntoIterator<Item=Vec<(&'a Pat, Option<Ty<'tcx>>)>>>(iter: T)
infer			fn infer<'a, 'tcx>(i: ConstInt,
inline_const_fn_from_external_crate			fn inline_const_fn_from_external_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
into_oneline			    pub fn into_oneline(self) -> Cow<'a, str> 
is_refutable			fn is_refutable<A, F>(cx: &MatchCheckCtxt, pat: &Pat, refutable: F) -> Option<A> where
is_useful			fn is_useful<'a, 'tcx>(cx: &MatchCheckCtxt<'a, 'tcx>,
is_useful_specialized			fn is_useful_specialized<'a, 'tcx>(
lit_to_const			fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,
lookup_const_by_id			pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
lookup_const_fn_by_id			pub fn lookup_const_fn_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)
lookup_variant_by_id			fn lookup_variant_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
main			fn main() 
matched_pat			    fn matched_pat(&mut self, _: &Pat, _: cmt, _: euv::MatchMode) {}
missing_constructors			fn missing_constructors(cx: &MatchCheckCtxt, &Matrix(ref rows): &Matrix,
mutate			    fn mutate(&mut self, _: NodeId, span: Span, _: cmt, mode: MutateMode) 
new			    pub fn new<'b>(tcx: TyCtxt<'b, 'tcx, 'tcx>) -> StaticInliner<'b, 'tcx> 
note_const_eval_err			pub fn note_const_eval_err<'a, 'tcx>(
parse_float			fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>)
pat_constructors			fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,
pat_is_catchall			fn pat_is_catchall(dm: &DefMap, p: &Pat) -> bool 
range_covered_by_constructor			fn range_covered_by_constructor(tcx: TyCtxt, span: Span,
raw_pat			fn raw_pat(p: &Pat) -> &Pat 
report_const_eval_err			pub fn report_const_eval_err<'a, 'tcx>(
resolve_trait_associated_const			fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
specialize			pub fn specialize<'a, 'b, 'tcx>(
variant_expr			    fn variant_expr<'a>(variants: &'a [hir::Variant], id: ast::NodeId)
variant_for_adt			    fn variant_for_adt<'tcx, 'container, 'a>(&self,
visit_expr			    fn visit_expr(&mut self, ex: &hir::Expr) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,
visit_local			    fn visit_local(&mut self, l: &hir::Local) 
visit_pat			    fn visit_pat(&mut self, pat: &Pat) 
wrap_pat			fn wrap_pat<'a, 'b, 'tcx>(cx: &MatchCheckCtxt<'b, 'tcx>,
