Alphabetic			    pub fn Alphabetic(c: char) -> bool 
CaseMappingIter			enum CaseMappingIter 
CaseMappingIter			impl CaseMappingIter 
Case_Ignorable			    pub fn Case_Ignorable(c: char) -> bool 
Cased			    pub fn Cased(c: char) -> bool 
Cc			    pub fn Cc(c: char) -> bool 
DecodeUtf16			pub struct DecodeUtf16<I>
DoubleEndedIterator for SplitWhitespace			impl<'a> DoubleEndedIterator for SplitWhitespace<'a> 
Iterator for CaseMappingIter			impl Iterator for CaseMappingIter 
Iterator for SplitWhitespace			impl<'a> Iterator for SplitWhitespace<'a> 
Iterator for ToLowercase			impl Iterator for ToLowercase 
Iterator for ToUppercase			impl Iterator for ToUppercase 
Iterator for Utf16Encoder			impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> 
Lowercase			    pub fn Lowercase(c: char) -> bool 
N			    pub fn N(c: char) -> bool 
SplitWhitespace			pub struct SplitWhitespace<'a> 
ToLowercase			pub struct ToLowercase(CaseMappingIter);
ToUppercase			pub struct ToUppercase(CaseMappingIter);
UnicodeStr			pub trait UnicodeStr 
UnicodeStr for str			impl UnicodeStr for str 
Uppercase			    pub fn Uppercase(c: char) -> bool 
Utf16Encoder			impl<I> Utf16Encoder<I> 
Utf16Encoder			pub struct Utf16Encoder<I> 
White_Space			    pub fn White_Space(c: char) -> bool 
XID_Continue			    pub fn XID_Continue(c: char) -> bool 
XID_Start			    pub fn XID_Start(c: char) -> bool 
bsearch_case_table			    fn bsearch_case_table(c: char, table: &'static [(char, [char; 3])]) -> Option<usize> 
bsearch_range_table			fn bsearch_range_table(c: char, r: &'static [(char, char)]) -> bool 
char			impl char 
char			pub mod char;
conversions			pub mod conversions 
decode_utf16			pub fn decode_utf16<I: IntoIterator<Item = u16>>(iterable: I) -> DecodeUtf16<I::IntoIter> 
derived_property			pub mod derived_property 
derived_property			pub mod derived_property 
encode_utf16			    pub fn encode_utf16(self, dst: &mut [u16]) -> Option<usize> 
encode_utf8			    pub fn encode_utf8(self, dst: &mut [u8]) -> Option<usize> 
escape_default			    pub fn escape_default(self) -> EscapeDefault 
escape_unicode			    pub fn escape_unicode(self) -> EscapeUnicode 
general_category			pub mod general_category 
is_alphabetic			    pub fn is_alphabetic(self) -> bool 
is_alphanumeric			    pub fn is_alphanumeric(self) -> bool 
is_alphanumeric			    fn is_alphanumeric(&self) -> bool 
is_alphanumeric			    fn is_alphanumeric(&self) -> bool;
is_control			    pub fn is_control(self) -> bool 
is_digit			    pub fn is_digit(self, radix: u32) -> bool 
is_lowercase			    pub fn is_lowercase(self) -> bool 
is_not_empty			        fn is_not_empty(s: &&str) -> bool 
is_numeric			    pub fn is_numeric(self) -> bool 
is_uppercase			    pub fn is_uppercase(self) -> bool 
is_utf16			pub fn is_utf16(v: &[u16]) -> bool 
is_whitespace			    pub fn is_whitespace(self) -> bool 
is_whitespace			        fn is_whitespace(c: char) -> bool 
is_whitespace			    fn is_whitespace(&self) -> bool 
is_whitespace			    fn is_whitespace(&self) -> bool;
is_xid_continue			    pub fn is_xid_continue(self) -> bool 
is_xid_start			    pub fn is_xid_start(self) -> bool 
len_utf16			    pub fn len_utf16(self) -> usize 
len_utf8			    pub fn len_utf8(self) -> usize 
new			    fn new(chars: [char; 3]) -> CaseMappingIter 
new			    pub fn new(chars: I) -> Utf16Encoder<I>
next			    fn next(&mut self) -> Option<Result<char, u16>> 
next			    fn next(&mut self) -> Option<char> 
next			    fn next(&mut self) -> Option<&'a str> 
next			    fn next(&mut self) -> Option<u16> 
next_back			    fn next_back(&mut self) -> Option<&'a str> 
property			pub mod property 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
split_whitespace			    fn split_whitespace(&self) -> SplitWhitespace 
split_whitespace			    fn split_whitespace<'a>(&'a self) -> SplitWhitespace<'a>;
str			pub mod str 
tables			mod tables;
to_digit			    pub fn to_digit(self, radix: u32) -> Option<u32> 
to_lower			    pub fn to_lower(c: char) -> [char; 3] 
to_lowercase			    pub fn to_lowercase(self) -> ToLowercase 
to_upper			    pub fn to_upper(c: char) -> [char; 3] 
to_uppercase			    pub fn to_uppercase(self) -> ToUppercase 
trim			    fn trim(&self) -> &str 
trim			    fn trim(&self) -> &str;
trim_left			    fn trim_left(&self) -> &str 
trim_left			    fn trim_left(&self) -> &str;
trim_right			    fn trim_right(&self) -> &str 
trim_right			    fn trim_right(&self) -> &str;
u_str			mod u_str;
utf8_char_width			pub fn utf8_char_width(b: u8) -> usize 
