Decoder			    impl<'doc> Decoder<'doc> 
Decoder			    pub struct Decoder<'a> 
Decoder			impl<'a> Decoder<'a> 
Decoder			pub struct Decoder<'a> 
Doc			impl<'doc> Doc<'doc> 
Doc			pub struct Doc<'a> 
DocsIterator			    pub struct DocsIterator<'a> 
EbmlEncoderTag			pub enum EbmlEncoderTag 
Encoder			    impl<'a> Encoder<'a> 
Encoder			    pub struct Encoder<'a> 
Encoder			impl<'a> Encoder<'a> 
Encoder			pub struct Encoder<'a> 
Enum			    enum Enum 
Error			pub enum Error 
Iterator for DocsIterator			    impl<'a> Iterator for DocsIterator<'a> 
Iterator for TaggedDocsIterator			    impl<'a> Iterator for TaggedDocsIterator<'a> 
Res			    pub struct Res 
Struct			    struct Struct 
TaggedDoc			pub struct TaggedDoc<'a> 
TaggedDocsIterator			    pub struct TaggedDocsIterator<'a> 
_emit_tagged_sub			        fn _emit_tagged_sub(&mut self, v: usize) -> EncodeResult 
_next_int			        fn _next_int(&mut self,
_next_sub			        fn _next_sub(&mut self) -> DecodeResult<usize> 
advance			        pub fn advance(&mut self, bytes: usize) 
advance			    pub fn advance(&mut self, bytes: usize) 
as_str			    pub fn as_str(&self) -> String 
as_str_slice			    pub fn as_str_slice<'a>(&'a self) -> &'a str 
bench			mod bench 
check_round_trip			    fn check_round_trip<T: Encodable + Decodable + PartialEq + Debug>(values: Vec<T>) 
doc_as_i16			    pub fn doc_as_i16(d: Doc) -> i16 
doc_as_i32			    pub fn doc_as_i32(d: Doc) -> i32 
doc_as_i64			    pub fn doc_as_i64(d: Doc) -> i64 
doc_as_i8			    pub fn doc_as_i8(d: Doc) -> i8 
doc_as_u16			    pub fn doc_as_u16(d: Doc) -> u16 
doc_as_u32			    pub fn doc_as_u32(d: Doc) -> u32 
doc_as_u64			    pub fn doc_as_u64(d: Doc) -> u64 
doc_as_u8			    pub fn doc_as_u8(d: Doc) -> u8 
doc_at			    pub fn doc_at<'a>(data: &'a [u8], start: usize) -> DecodeResult<TaggedDoc<'a>> 
docs			    pub fn docs<'a>(d: Doc<'a>) -> DocsIterator<'a> 
emit_bool			        fn emit_bool(&mut self, v: bool) -> EncodeResult 
emit_bool			    fn emit_bool(&mut self, v: bool) -> EncodeResult 
emit_char			        fn emit_char(&mut self, v: char) -> EncodeResult 
emit_char			    fn emit_char(&mut self, v: char) -> EncodeResult 
emit_enum			        fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult
emit_enum			    fn emit_enum<F>(&mut self, _name: &str, f: F) -> EncodeResult
emit_enum_struct_variant			        fn emit_enum_struct_variant<F>(&mut self,
emit_enum_struct_variant			    fn emit_enum_struct_variant<F>(&mut self,
emit_enum_struct_variant_field			        fn emit_enum_struct_variant_field<F>(&mut self, _: &str, idx: usize, f: F) -> EncodeResult
emit_enum_struct_variant_field			    fn emit_enum_struct_variant_field<F>(&mut self, _: &str, idx: usize, f: F) -> EncodeResult
emit_enum_variant			        fn emit_enum_variant<F>(&mut self, _: &str, v_id: usize, _: usize, f: F) -> EncodeResult
emit_enum_variant			    fn emit_enum_variant<F>(&mut self,
emit_enum_variant_arg			        fn emit_enum_variant_arg<F>(&mut self, _: usize, f: F) -> EncodeResult
emit_enum_variant_arg			    fn emit_enum_variant_arg<F>(&mut self, _: usize, f: F) -> EncodeResult
emit_f32			        fn emit_f32(&mut self, v: f32) -> EncodeResult 
emit_f32			    fn emit_f32(&mut self, v: f32) -> EncodeResult 
emit_f64			        fn emit_f64(&mut self, v: f64) -> EncodeResult 
emit_f64			    fn emit_f64(&mut self, v: f64) -> EncodeResult 
emit_i16			        fn emit_i16(&mut self, v: i16) -> EncodeResult 
emit_i16			    fn emit_i16(&mut self, v: i16) -> EncodeResult 
emit_i32			        fn emit_i32(&mut self, v: i32) -> EncodeResult 
emit_i32			    fn emit_i32(&mut self, v: i32) -> EncodeResult 
emit_i64			        fn emit_i64(&mut self, v: i64) -> EncodeResult 
emit_i64			    fn emit_i64(&mut self, v: i64) -> EncodeResult 
emit_i8			        fn emit_i8(&mut self, v: i8) -> EncodeResult 
emit_i8			    fn emit_i8(&mut self, v: i8) -> EncodeResult 
emit_int			        fn emit_int(&mut self, v: isize) -> EncodeResult 
emit_int			    fn emit_int(&mut self, v: isize) -> EncodeResult 
emit_map			        fn emit_map<F>(&mut self, len: usize, f: F) -> EncodeResult
emit_map			    fn emit_map<F>(&mut self, len: usize, f: F) -> EncodeResult
emit_map_elt_key			        fn emit_map_elt_key<F>(&mut self, _idx: usize, f: F) -> EncodeResult
emit_map_elt_key			    fn emit_map_elt_key<F>(&mut self, _idx: usize, f: F) -> EncodeResult
emit_map_elt_val			        fn emit_map_elt_val<F>(&mut self, _idx: usize, f: F) -> EncodeResult
emit_map_elt_val			    fn emit_map_elt_val<F>(&mut self, _idx: usize, f: F) -> EncodeResult
emit_nil			        fn emit_nil(&mut self) -> EncodeResult 
emit_nil			    fn emit_nil(&mut self) -> EncodeResult 
emit_opaque			        pub fn emit_opaque<F>(&mut self, f: F) -> EncodeResult
emit_option			        fn emit_option<F>(&mut self, f: F) -> EncodeResult
emit_option			    fn emit_option<F>(&mut self, f: F) -> EncodeResult
emit_option_none			        fn emit_option_none(&mut self) -> EncodeResult 
emit_option_none			    fn emit_option_none(&mut self) -> EncodeResult 
emit_option_some			        fn emit_option_some<F>(&mut self, f: F) -> EncodeResult
emit_option_some			    fn emit_option_some<F>(&mut self, f: F) -> EncodeResult
emit_seq			        fn emit_seq<F>(&mut self, len: usize, f: F) -> EncodeResult
emit_seq			    fn emit_seq<F>(&mut self, len: usize, f: F) -> EncodeResult
emit_seq_elt			        fn emit_seq_elt<F>(&mut self, _idx: usize, f: F) -> EncodeResult
emit_seq_elt			    fn emit_seq_elt<F>(&mut self, _idx: usize, f: F) -> EncodeResult
emit_str			        fn emit_str(&mut self, v: &str) -> EncodeResult 
emit_str			    fn emit_str(&mut self, v: &str) -> EncodeResult 
emit_struct			        fn emit_struct<F>(&mut self, _: &str, _len: usize, f: F) -> EncodeResult
emit_struct			    fn emit_struct<F>(&mut self, _: &str, _len: usize, f: F) -> EncodeResult
emit_struct_field			        fn emit_struct_field<F>(&mut self, _name: &str, _: usize, f: F) -> EncodeResult
emit_struct_field			    fn emit_struct_field<F>(&mut self, _name: &str, _: usize, f: F) -> EncodeResult
emit_tuple			        fn emit_tuple<F>(&mut self, len: usize, f: F) -> EncodeResult
emit_tuple			    fn emit_tuple<F>(&mut self, len: usize, f: F) -> EncodeResult
emit_tuple_arg			        fn emit_tuple_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult
emit_tuple_arg			    fn emit_tuple_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult
emit_tuple_struct			        fn emit_tuple_struct<F>(&mut self, _: &str, len: usize, f: F) -> EncodeResult
emit_tuple_struct			    fn emit_tuple_struct<F>(&mut self, _: &str, len: usize, f: F) -> EncodeResult
emit_tuple_struct_arg			        fn emit_tuple_struct_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult
emit_tuple_struct_arg			    fn emit_tuple_struct_arg<F>(&mut self, idx: usize, f: F) -> EncodeResult
emit_u16			        fn emit_u16(&mut self, v: u16) -> EncodeResult 
emit_u16			    fn emit_u16(&mut self, v: u16) -> EncodeResult 
emit_u32			        fn emit_u32(&mut self, v: u32) -> EncodeResult 
emit_u32			    fn emit_u32(&mut self, v: u32) -> EncodeResult 
emit_u64			        fn emit_u64(&mut self, v: u64) -> EncodeResult 
emit_u64			    fn emit_u64(&mut self, v: u64) -> EncodeResult 
emit_u8			        fn emit_u8(&mut self, v: u8) -> EncodeResult 
emit_u8			    fn emit_u8(&mut self, v: u8) -> EncodeResult 
emit_uint			        fn emit_uint(&mut self, v: usize) -> EncodeResult 
emit_uint			    fn emit_uint(&mut self, v: usize) -> EncodeResult 
end_tag			        pub fn end_tag(&mut self) -> EncodeResult 
error			        fn error(&mut self, err: &str) -> Error 
error			    fn error(&mut self, err: &str) -> Self::Error 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for Error			impl fmt::Display for Error 
from_rbml			    pub fn from_rbml<'b: 'c, 'c>(rbml: &'c mut ::writer::Encoder<'b>) -> Encoder<'c> 
get			    pub fn get<'a>(&'a self, tag: usize) -> Doc<'a> 
get_doc			    pub fn get_doc<'a>(d: Doc<'a>, tg: usize) -> Doc<'a> 
is_empty			    pub fn is_empty(&self) -> bool 
leb128			pub mod leb128;
mark_stable_position			        pub fn mark_stable_position(&mut self) -> u64 
maybe_get_doc			    pub fn maybe_get_doc<'a>(d: Doc<'a>, tg: usize) -> Option<Doc<'a>> 
new			        pub fn new(d: Doc<'doc>) -> Decoder<'doc> 
new			        pub fn new(w: &'a mut Cursor<Vec<u8>>) -> Encoder<'a> 
new			    pub fn new(data: &'doc [u8]) -> Doc<'doc> 
new			    pub fn new(cursor: &'a mut io::Cursor<Vec<u8>>) -> Encoder<'a> 
new			    pub fn new(data: &'a [u8], position: usize) -> Decoder<'a> 
next			        fn next(&mut self) -> Option<(usize, Doc<'a>)> 
next			        fn next(&mut self) -> Option<Doc<'a>> 
next_doc			        fn next_doc(&mut self, exp_tag: EbmlEncoderTag) -> DecodeResult<Doc<'doc>> 
opaque			pub mod opaque;
position			        pub fn position(&self) -> usize 
position			    pub fn position(&self) -> usize 
push_doc			        fn push_doc<T, F>(&mut self, exp_tag: EbmlEncoderTag, f: F) -> DecodeResult<T>
read_bool			        fn read_bool(&mut self) -> DecodeResult<bool> 
read_bool			    fn read_bool(&mut self) -> Result<bool, Self::Error> 
read_char			        fn read_char(&mut self) -> DecodeResult<char> 
read_char			    fn read_char(&mut self) -> Result<char, Self::Error> 
read_enum			        fn read_enum<T, F>(&mut self, name: &str, f: F) -> DecodeResult<T>
read_enum			    fn read_enum<T, F>(&mut self, _name: &str, f: F) -> Result<T, Self::Error>
read_enum_struct_variant			        fn read_enum_struct_variant<T, F>(&mut self, _: &[&str], mut f: F) -> DecodeResult<T>
read_enum_struct_variant			    fn read_enum_struct_variant<T, F>(&mut self, _: &[&str], mut f: F) -> Result<T, Self::Error>
read_enum_struct_variant_field			        fn read_enum_struct_variant_field<T, F>(&mut self,
read_enum_struct_variant_field			    fn read_enum_struct_variant_field<T, F>(&mut self,
read_enum_variant			        fn read_enum_variant<T, F>(&mut self, _: &[&str], mut f: F) -> DecodeResult<T>
read_enum_variant			    fn read_enum_variant<T, F>(&mut self, _: &[&str], mut f: F) -> Result<T, Self::Error>
read_enum_variant_arg			        fn read_enum_variant_arg<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T>
read_enum_variant_arg			    fn read_enum_variant_arg<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>
read_f32			        fn read_f32(&mut self) -> DecodeResult<f32> 
read_f32			    fn read_f32(&mut self) -> Result<f32, Self::Error> 
read_f64			        fn read_f64(&mut self) -> DecodeResult<f64> 
read_f64			    fn read_f64(&mut self) -> Result<f64, Self::Error> 
read_i16			        fn read_i16(&mut self) -> DecodeResult<i16> 
read_i16			    fn read_i16(&mut self) -> Result<i16, Self::Error> 
read_i32			        fn read_i32(&mut self) -> DecodeResult<i32> 
read_i32			    fn read_i32(&mut self) -> Result<i32, Self::Error> 
read_i64			        fn read_i64(&mut self) -> DecodeResult<i64> 
read_i64			    fn read_i64(&mut self) -> Result<i64, Self::Error> 
read_i8			        fn read_i8(&mut self) -> DecodeResult<i8> 
read_i8			    fn read_i8(&mut self) -> Result<i8, Self::Error> 
read_int			        fn read_int(&mut self) -> DecodeResult<isize> 
read_int			    fn read_int(&mut self) -> Result<isize, Self::Error> 
read_map			        fn read_map<T, F>(&mut self, f: F) -> DecodeResult<T>
read_map			    fn read_map<T, F>(&mut self, f: F) -> Result<T, Self::Error>
read_map_elt_key			        fn read_map_elt_key<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T>
read_map_elt_key			    fn read_map_elt_key<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>
read_map_elt_val			        fn read_map_elt_val<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T>
read_map_elt_val			    fn read_map_elt_val<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>
read_nil			        fn read_nil(&mut self) -> DecodeResult<()> 
read_nil			    fn read_nil(&mut self) -> Result<(), Self::Error> 
read_opaque			        pub fn read_opaque<R, F>(&mut self, op: F) -> DecodeResult<R>
read_option			        fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T>
read_option			    fn read_option<T, F>(&mut self, mut f: F) -> Result<T, Self::Error>
read_seq			        fn read_seq<T, F>(&mut self, f: F) -> DecodeResult<T>
read_seq			    fn read_seq<T, F>(&mut self, f: F) -> Result<T, Self::Error>
read_seq_elt			        fn read_seq_elt<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T>
read_seq_elt			    fn read_seq_elt<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>
read_signed_leb128			pub fn read_signed_leb128(data: &[u8], start_position: usize) -> (i64, usize) 
read_str			        fn read_str(&mut self) -> DecodeResult<String> 
read_str			    fn read_str(&mut self) -> Result<String, Self::Error> 
read_struct			        fn read_struct<T, F>(&mut self, name: &str, _: usize, f: F) -> DecodeResult<T>
read_struct			    fn read_struct<T, F>(&mut self, _name: &str, _: usize, f: F) -> Result<T, Self::Error>
read_struct_field			        fn read_struct_field<T, F>(&mut self, name: &str, idx: usize, f: F) -> DecodeResult<T>
read_struct_field			    fn read_struct_field<T, F>(&mut self, _name: &str, _idx: usize, f: F) -> Result<T, Self::Error>
read_tuple			        fn read_tuple<T, F>(&mut self, tuple_len: usize, f: F) -> DecodeResult<T>
read_tuple			    fn read_tuple<T, F>(&mut self, tuple_len: usize, f: F) -> Result<T, Self::Error>
read_tuple_arg			        fn read_tuple_arg<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T>
read_tuple_arg			    fn read_tuple_arg<T, F>(&mut self, idx: usize, f: F) -> Result<T, Self::Error>
read_tuple_struct			        fn read_tuple_struct<T, F>(&mut self, name: &str, len: usize, f: F) -> DecodeResult<T>
read_tuple_struct			    fn read_tuple_struct<T, F>(&mut self, _name: &str, len: usize, f: F) -> Result<T, Self::Error>
read_tuple_struct_arg			        fn read_tuple_struct_arg<T, F>(&mut self, idx: usize, f: F) -> DecodeResult<T>
read_tuple_struct_arg			    fn read_tuple_struct_arg<T, F>(&mut self, idx: usize, f: F) -> Result<T, Self::Error>
read_u16			        fn read_u16(&mut self) -> DecodeResult<u16> 
read_u16			    fn read_u16(&mut self) -> Result<u16, Self::Error> 
read_u32			        fn read_u32(&mut self) -> DecodeResult<u32> 
read_u32			    fn read_u32(&mut self) -> Result<u32, Self::Error> 
read_u64			        fn read_u64(&mut self) -> DecodeResult<u64> 
read_u64			    fn read_u64(&mut self) -> Result<u64, Self::Error> 
read_u8			        fn read_u8(&mut self) -> DecodeResult<u8> 
read_u8			    fn read_u8(&mut self) -> Result<u8, Self::Error> 
read_uint			        fn read_uint(&mut self) -> DecodeResult<usize> 
read_uint			    fn read_uint(&mut self) -> Result<usize, Self::Error> 
read_unsigned_leb128			pub fn read_unsigned_leb128(data: &[u8], start_position: usize) -> (u64, usize) 
reader			pub mod reader 
serialize::Decoder for Decoder			    impl<'doc> serialize::Decoder for Decoder<'doc> 
serialize::Decoder for Decoder			impl<'a> serialize::Decoder for Decoder<'a> 
serialize::Encoder for Encoder			    impl<'a> serialize::Encoder for Encoder<'a> 
serialize::Encoder for Encoder			impl<'a> serialize::Encoder for Encoder<'a> 
start_tag			        pub fn start_tag(&mut self, tag_id: usize) -> EncodeResult 
tag_at			    pub fn tag_at(data: &[u8], start: usize) -> DecodeResult<Res> 
tag_len_at			    pub fn tag_len_at(data: &[u8], tag: Res) -> DecodeResult<Res> 
tagged_docs			    pub fn tagged_docs<'a>(d: Doc<'a>, tag: usize) -> TaggedDocsIterator<'a> 
tests			mod tests 
tests			mod tests 
vuint_at			    pub fn vuint_at(data: &[u8], start: usize) -> DecodeResult<Res> 
vuint_at_A_aligned			    pub fn vuint_at_A_aligned(b: &mut Bencher) 
vuint_at_A_unaligned			    pub fn vuint_at_A_unaligned(b: &mut Bencher) 
vuint_at_D_aligned			    pub fn vuint_at_D_aligned(b: &mut Bencher) 
vuint_at_D_unaligned			    pub fn vuint_at_D_unaligned(b: &mut Bencher) 
vuint_at_slow			    fn vuint_at_slow(data: &[u8], start: usize) -> DecodeResult<Res> 
with_doc_data			    pub fn with_doc_data<T, F>(d: Doc, f: F) -> T
wr_bytes			        pub fn wr_bytes(&mut self, b: &[u8]) -> EncodeResult 
wr_str			        pub fn wr_str(&mut self, s: &str) -> EncodeResult 
wr_tag			        pub fn wr_tag<F>(&mut self, tag_id: usize, blk: F) -> EncodeResult
wr_tagged_bytes			        pub fn wr_tagged_bytes(&mut self, tag_id: usize, b: &[u8]) -> EncodeResult 
wr_tagged_i16			        pub fn wr_tagged_i16(&mut self, tag_id: usize, v: i16) -> EncodeResult 
wr_tagged_i32			        pub fn wr_tagged_i32(&mut self, tag_id: usize, v: i32) -> EncodeResult 
wr_tagged_i64			        pub fn wr_tagged_i64(&mut self, tag_id: usize, v: i64) -> EncodeResult 
wr_tagged_i8			        pub fn wr_tagged_i8(&mut self, tag_id: usize, v: i8) -> EncodeResult 
wr_tagged_raw_bytes			        fn wr_tagged_raw_bytes(&mut self, tag_id: usize, b: &[u8]) -> EncodeResult 
wr_tagged_raw_i16			        fn wr_tagged_raw_i16(&mut self, tag_id: usize, v: i16) -> EncodeResult 
wr_tagged_raw_i32			        fn wr_tagged_raw_i32(&mut self, tag_id: usize, v: i32) -> EncodeResult 
wr_tagged_raw_i64			        fn wr_tagged_raw_i64(&mut self, tag_id: usize, v: i64) -> EncodeResult 
wr_tagged_raw_i8			        fn wr_tagged_raw_i8(&mut self, tag_id: usize, v: i8) -> EncodeResult 
wr_tagged_raw_u16			        fn wr_tagged_raw_u16(&mut self, tag_id: usize, v: u16) -> EncodeResult 
wr_tagged_raw_u32			        fn wr_tagged_raw_u32(&mut self, tag_id: usize, v: u32) -> EncodeResult 
wr_tagged_raw_u64			        fn wr_tagged_raw_u64(&mut self, tag_id: usize, v: u64) -> EncodeResult 
wr_tagged_raw_u8			        fn wr_tagged_raw_u8(&mut self, tag_id: usize, v: u8) -> EncodeResult 
wr_tagged_str			        pub fn wr_tagged_str(&mut self, tag_id: usize, v: &str) -> EncodeResult 
wr_tagged_u16			        pub fn wr_tagged_u16(&mut self, tag_id: usize, v: u16) -> EncodeResult 
wr_tagged_u32			        pub fn wr_tagged_u32(&mut self, tag_id: usize, v: u32) -> EncodeResult 
wr_tagged_u64			        pub fn wr_tagged_u64(&mut self, tag_id: usize, v: u64) -> EncodeResult 
wr_tagged_u8			        pub fn wr_tagged_u8(&mut self, tag_id: usize, v: u8) -> EncodeResult 
write_signed_leb128			pub fn write_signed_leb128(out: &mut Vec<u8>, start_position: usize, mut value: i64) -> usize 
write_sized_vuint			    fn write_sized_vuint<W: Write>(w: &mut W, n: usize, size: usize) -> EncodeResult 
write_tag			    fn write_tag<W: Write>(w: &mut W, n: usize) -> EncodeResult 
write_to_vec			pub fn write_to_vec(vec: &mut Vec<u8>, position: &mut usize, byte: u8) 
write_unsigned_leb128			pub fn write_unsigned_leb128(out: &mut Vec<u8>, start_position: usize, mut value: u64) -> usize 
write_vuint			    pub fn write_vuint<W: Write>(w: &mut W, n: usize) -> EncodeResult 
writer			pub mod writer 
