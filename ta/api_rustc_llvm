ArchiveChild_opaque			pub enum ArchiveChild_opaque {}
ArchiveIterator_opaque			pub enum ArchiveIterator_opaque {}
ArchiveKind			pub enum ArchiveKind 
ArchiveRO			impl ArchiveRO 
ArchiveRO			pub struct ArchiveRO { ptr: ArchiveRef }
Archive_opaque			pub enum Archive_opaque {}
AsmDialect			pub enum AsmDialect 
AtomicBinOp			pub enum AtomicBinOp 
AtomicOrdering			pub enum AtomicOrdering 
AttributeSet			pub enum AttributeSet 
Attributes			impl Attributes 
Attributes			pub struct Attributes 
BasicBlock_opaque			pub enum BasicBlock_opaque {}
Builder_opaque			pub enum Builder_opaque {}
CallConv			pub enum CallConv 
Child			impl<'a> Child<'a> 
Child			pub struct Child<'a> 
CodeGenModel			pub enum CodeGenModel 
CodeGenOptLevel			pub enum CodeGenOptLevel 
ConstFCmp			pub fn ConstFCmp(pred: RealPredicate, v1: ValueRef, v2: ValueRef) -> ValueRef 
ConstICmp			pub fn ConstICmp(pred: IntPredicate, v1: ValueRef, v2: ValueRef) -> ValueRef 
Context_opaque			pub enum Context_opaque {}
DIBuilder_opaque			    pub enum DIBuilder_opaque {}
DIDescriptorFlags			    pub enum DIDescriptorFlags 
DLLStorageClassTypes			pub enum DLLStorageClassTypes 
DebugLoc_opaque			pub enum DebugLoc_opaque {}
Diagnostic			impl Diagnostic 
Diagnostic			pub enum Diagnostic 
DiagnosticInfo_opaque			pub enum DiagnosticInfo_opaque {}
DiagnosticKind			pub enum DiagnosticKind 
DiagnosticSeverity			pub enum DiagnosticSeverity 
Drop for ArchiveRO			impl Drop for ArchiveRO 
Drop for Child			impl<'a> Drop for Child<'a> 
Drop for Iter			impl<'a> Drop for Iter<'a> 
Drop for ObjectFile			impl Drop for ObjectFile 
Drop for OperandBundleDef			impl Drop for OperandBundleDef 
Drop for SectionIter			impl Drop for SectionIter 
Drop for TargetData			impl Drop for TargetData 
ExecutionEngine_opaque			pub enum ExecutionEngine_opaque {}
FileType			pub enum FileType 
InlineAsmDiagnostic			impl InlineAsmDiagnostic 
InlineAsmDiagnostic			pub struct InlineAsmDiagnostic 
IntPredicate			pub enum IntPredicate 
Iter			pub struct Iter<'a> 
Iterator for Iter			impl<'a> Iterator for Iter<'a> 
LLVMABIAlignmentOfType			    pub fn LLVMABIAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMABISizeOfType			    pub fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;
LLVMAddAggressiveDCEPass			    pub fn LLVMAddAggressiveDCEPass(PM: PassManagerRef);
LLVMAddAlias			    pub fn LLVMAddAlias(M: ModuleRef,
LLVMAddArgumentPromotionPass			    pub fn LLVMAddArgumentPromotionPass(PM: PassManagerRef);
LLVMAddAttribute			    pub fn LLVMAddAttribute(Arg: ValueRef, PA: c_uint);
LLVMAddBasicAliasAnalysisPass			    pub fn LLVMAddBasicAliasAnalysisPass(PM: PassManagerRef);
LLVMAddCFGSimplificationPass			    pub fn LLVMAddCFGSimplificationPass(PM: PassManagerRef);
LLVMAddCallSiteAttribute			    pub fn LLVMAddCallSiteAttribute(Instr: ValueRef,
LLVMAddCase			    pub fn LLVMAddCase(Switch: ValueRef,
LLVMAddClause			    pub fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);
LLVMAddConstantMergePass			    pub fn LLVMAddConstantMergePass(PM: PassManagerRef);
LLVMAddConstantPropagationPass			    pub fn LLVMAddConstantPropagationPass(PM: PassManagerRef);
LLVMAddCorrelatedValuePropagationPass			    pub fn LLVMAddCorrelatedValuePropagationPass(PM: PassManagerRef);
LLVMAddDeadArgEliminationPass			    pub fn LLVMAddDeadArgEliminationPass(PM: PassManagerRef);
LLVMAddDeadStoreEliminationPass			    pub fn LLVMAddDeadStoreEliminationPass(PM: PassManagerRef);
LLVMAddDereferenceableAttr			    pub fn LLVMAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: uint64_t);
LLVMAddDereferenceableCallSiteAttr			    pub fn LLVMAddDereferenceableCallSiteAttr(Instr: ValueRef,
LLVMAddDestination			    pub fn LLVMAddDestination(IndirectBr: ValueRef, Dest: BasicBlockRef);
LLVMAddEarlyCSEPass			    pub fn LLVMAddEarlyCSEPass(PM: PassManagerRef);
LLVMAddFunction			    pub fn LLVMAddFunction(M: ModuleRef,
LLVMAddFunctionAttrString			    pub fn LLVMAddFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);
LLVMAddFunctionAttrStringValue			    pub fn LLVMAddFunctionAttrStringValue(Fn: ValueRef, index: c_uint,
LLVMAddFunctionAttribute			    pub fn LLVMAddFunctionAttribute(Fn: ValueRef, index: c_uint, PA: uint64_t);
LLVMAddFunctionAttrsPass			    pub fn LLVMAddFunctionAttrsPass(PM: PassManagerRef);
LLVMAddFunctionInliningPass			    pub fn LLVMAddFunctionInliningPass(PM: PassManagerRef);
LLVMAddGVNPass			    pub fn LLVMAddGVNPass(PM: PassManagerRef);
LLVMAddGlobal			    pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *const c_char)
LLVMAddGlobalDCEPass			    pub fn LLVMAddGlobalDCEPass(PM: PassManagerRef);
LLVMAddGlobalInAddressSpace			    pub fn LLVMAddGlobalInAddressSpace(M: ModuleRef,
LLVMAddGlobalOptimizerPass			    pub fn LLVMAddGlobalOptimizerPass(PM: PassManagerRef);
LLVMAddIPSCCPPass			    pub fn LLVMAddIPSCCPPass(PM: PassManagerRef);
LLVMAddIncoming			    pub fn LLVMAddIncoming(PhiNode: ValueRef,
LLVMAddIndVarSimplifyPass			    pub fn LLVMAddIndVarSimplifyPass(PM: PassManagerRef);
LLVMAddInstrAttribute			    pub fn LLVMAddInstrAttribute(Instr: ValueRef,
LLVMAddInstructionCombiningPass			    pub fn LLVMAddInstructionCombiningPass(PM: PassManagerRef);
LLVMAddJumpThreadingPass			    pub fn LLVMAddJumpThreadingPass(PM: PassManagerRef);
LLVMAddLICMPass			    pub fn LLVMAddLICMPass(PM: PassManagerRef);
LLVMAddLoopDeletionPass			    pub fn LLVMAddLoopDeletionPass(PM: PassManagerRef);
LLVMAddLoopIdiomPass			    pub fn LLVMAddLoopIdiomPass(PM: PassManagerRef);
LLVMAddLoopRotatePass			    pub fn LLVMAddLoopRotatePass(PM: PassManagerRef);
LLVMAddLoopUnrollPass			    pub fn LLVMAddLoopUnrollPass(PM: PassManagerRef);
LLVMAddLoopUnswitchPass			    pub fn LLVMAddLoopUnswitchPass(PM: PassManagerRef);
LLVMAddMemCpyOptPass			    pub fn LLVMAddMemCpyOptPass(PM: PassManagerRef);
LLVMAddNamedMetadataOperand			    pub fn LLVMAddNamedMetadataOperand(M: ModuleRef,
LLVMAddPruneEHPass			    pub fn LLVMAddPruneEHPass(PM: PassManagerRef);
LLVMAddReassociatePass			    pub fn LLVMAddReassociatePass(PM: PassManagerRef);
LLVMAddSCCPPass			    pub fn LLVMAddSCCPPass(PM: PassManagerRef);
LLVMAddScalarReplAggregatesPass			    pub fn LLVMAddScalarReplAggregatesPass(PM: PassManagerRef);
LLVMAddScalarReplAggregatesPassSSA			    pub fn LLVMAddScalarReplAggregatesPassSSA(PM: PassManagerRef);
LLVMAddSimplifyLibCallsPass			    pub fn LLVMAddSimplifyLibCallsPass(PM: PassManagerRef);
LLVMAddStripDeadPrototypesPass			    pub fn LLVMAddStripDeadPrototypesPass(PM: PassManagerRef);
LLVMAddTailCallEliminationPass			    pub fn LLVMAddTailCallEliminationPass(PM: PassManagerRef);
LLVMAddTargetData			    pub fn LLVMAddTargetData(TD: TargetDataRef, PM: PassManagerRef);
LLVMAddTypeBasedAliasAnalysisPass			    pub fn LLVMAddTypeBasedAliasAnalysisPass(PM: PassManagerRef);
LLVMAddVerifierPass			    pub fn LLVMAddVerifierPass(PM: PassManagerRef);
LLVMAlignOf			    pub fn LLVMAlignOf(Ty: TypeRef) -> ValueRef;
LLVMAppendBasicBlockInContext			    pub fn LLVMAppendBasicBlockInContext(C: ContextRef,
LLVMBasicBlockAsValue			    pub fn LLVMBasicBlockAsValue(BB: BasicBlockRef) -> ValueRef;
LLVMBlockAddress			    pub fn LLVMBlockAddress(F: ValueRef, BB: BasicBlockRef) -> ValueRef;
LLVMBuildAShr			    pub fn LLVMBuildAShr(B: BuilderRef,
LLVMBuildAdd			    pub fn LLVMBuildAdd(B: BuilderRef,
LLVMBuildAggregateRet			    pub fn LLVMBuildAggregateRet(B: BuilderRef,
LLVMBuildAlloca			    pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *const c_char)
LLVMBuildAnd			    pub fn LLVMBuildAnd(B: BuilderRef,
LLVMBuildAtomicCmpXchg			    pub fn LLVMBuildAtomicCmpXchg(B: BuilderRef,
LLVMBuildAtomicFence			    pub fn LLVMBuildAtomicFence(B: BuilderRef,
LLVMBuildAtomicLoad			    pub fn LLVMBuildAtomicLoad(B: BuilderRef,
LLVMBuildAtomicRMW			    pub fn LLVMBuildAtomicRMW(B: BuilderRef,
LLVMBuildAtomicStore			    pub fn LLVMBuildAtomicStore(B: BuilderRef,
LLVMBuildBinOp			    pub fn LLVMBuildBinOp(B: BuilderRef,
LLVMBuildBitCast			    pub fn LLVMBuildBitCast(B: BuilderRef,
LLVMBuildBr			    pub fn LLVMBuildBr(B: BuilderRef, Dest: BasicBlockRef) -> ValueRef;
LLVMBuildCast			    pub fn LLVMBuildCast(B: BuilderRef,
LLVMBuildCondBr			    pub fn LLVMBuildCondBr(B: BuilderRef,
LLVMBuildExactSDiv			    pub fn LLVMBuildExactSDiv(B: BuilderRef,
LLVMBuildExecutionEngine			    pub fn LLVMBuildExecutionEngine(Mod: ModuleRef) -> ExecutionEngineRef;
LLVMBuildExtractElement			    pub fn LLVMBuildExtractElement(B: BuilderRef,
LLVMBuildExtractValue			    pub fn LLVMBuildExtractValue(B: BuilderRef,
LLVMBuildFAdd			    pub fn LLVMBuildFAdd(B: BuilderRef,
LLVMBuildFCmp			    pub fn LLVMBuildFCmp(B: BuilderRef,
LLVMBuildFDiv			    pub fn LLVMBuildFDiv(B: BuilderRef,
LLVMBuildFMul			    pub fn LLVMBuildFMul(B: BuilderRef,
LLVMBuildFNeg			    pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)
LLVMBuildFPCast			    pub fn LLVMBuildFPCast(B: BuilderRef,
LLVMBuildFPExt			    pub fn LLVMBuildFPExt(B: BuilderRef,
LLVMBuildFPToSI			    pub fn LLVMBuildFPToSI(B: BuilderRef,
LLVMBuildFPToUI			    pub fn LLVMBuildFPToUI(B: BuilderRef,
LLVMBuildFPTrunc			    pub fn LLVMBuildFPTrunc(B: BuilderRef,
LLVMBuildFRem			    pub fn LLVMBuildFRem(B: BuilderRef,
LLVMBuildFSub			    pub fn LLVMBuildFSub(B: BuilderRef,
LLVMBuildFree			    pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;
LLVMBuildGEP			    pub fn LLVMBuildGEP(B: BuilderRef,
LLVMBuildGlobalString			    pub fn LLVMBuildGlobalString(B: BuilderRef,
LLVMBuildGlobalStringPtr			    pub fn LLVMBuildGlobalStringPtr(B: BuilderRef,
LLVMBuildICmp			    pub fn LLVMBuildICmp(B: BuilderRef,
LLVMBuildInBoundsGEP			    pub fn LLVMBuildInBoundsGEP(B: BuilderRef,
LLVMBuildIndirectBr			    pub fn LLVMBuildIndirectBr(B: BuilderRef,
LLVMBuildInsertElement			    pub fn LLVMBuildInsertElement(B: BuilderRef,
LLVMBuildInsertValue			    pub fn LLVMBuildInsertValue(B: BuilderRef,
LLVMBuildIntCast			    pub fn LLVMBuildIntCast(B: BuilderRef,
LLVMBuildIntToPtr			    pub fn LLVMBuildIntToPtr(B: BuilderRef,
LLVMBuildIsNotNull			    pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *const c_char)
LLVMBuildIsNull			    pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *const c_char)
LLVMBuildLShr			    pub fn LLVMBuildLShr(B: BuilderRef,
LLVMBuildLoad			    pub fn LLVMBuildLoad(B: BuilderRef,
LLVMBuildMul			    pub fn LLVMBuildMul(B: BuilderRef,
LLVMBuildNSWAdd			    pub fn LLVMBuildNSWAdd(B: BuilderRef,
LLVMBuildNSWMul			    pub fn LLVMBuildNSWMul(B: BuilderRef,
LLVMBuildNSWNeg			    pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)
LLVMBuildNSWSub			    pub fn LLVMBuildNSWSub(B: BuilderRef,
LLVMBuildNUWAdd			    pub fn LLVMBuildNUWAdd(B: BuilderRef,
LLVMBuildNUWMul			    pub fn LLVMBuildNUWMul(B: BuilderRef,
LLVMBuildNUWNeg			    pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)
LLVMBuildNUWSub			    pub fn LLVMBuildNUWSub(B: BuilderRef,
LLVMBuildNeg			    pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)
LLVMBuildNot			    pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *const c_char)
LLVMBuildOr			    pub fn LLVMBuildOr(B: BuilderRef,
LLVMBuildPhi			    pub fn LLVMBuildPhi(B: BuilderRef, Ty: TypeRef, Name: *const c_char)
LLVMBuildPointerCast			    pub fn LLVMBuildPointerCast(B: BuilderRef,
LLVMBuildPtrDiff			    pub fn LLVMBuildPtrDiff(B: BuilderRef,
LLVMBuildPtrToInt			    pub fn LLVMBuildPtrToInt(B: BuilderRef,
LLVMBuildResume			    pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;
LLVMBuildRet			    pub fn LLVMBuildRet(B: BuilderRef, V: ValueRef) -> ValueRef;
LLVMBuildRetVoid			    pub fn LLVMBuildRetVoid(B: BuilderRef) -> ValueRef;
LLVMBuildSDiv			    pub fn LLVMBuildSDiv(B: BuilderRef,
LLVMBuildSExt			    pub fn LLVMBuildSExt(B: BuilderRef,
LLVMBuildSExtOrBitCast			    pub fn LLVMBuildSExtOrBitCast(B: BuilderRef,
LLVMBuildSIToFP			    pub fn LLVMBuildSIToFP(B: BuilderRef,
LLVMBuildSRem			    pub fn LLVMBuildSRem(B: BuilderRef,
LLVMBuildSelect			    pub fn LLVMBuildSelect(B: BuilderRef,
LLVMBuildShl			    pub fn LLVMBuildShl(B: BuilderRef,
LLVMBuildShuffleVector			    pub fn LLVMBuildShuffleVector(B: BuilderRef,
LLVMBuildStore			    pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef)
LLVMBuildStructGEP			    pub fn LLVMBuildStructGEP(B: BuilderRef,
LLVMBuildSub			    pub fn LLVMBuildSub(B: BuilderRef,
LLVMBuildSwitch			    pub fn LLVMBuildSwitch(B: BuilderRef,
LLVMBuildTrunc			    pub fn LLVMBuildTrunc(B: BuilderRef,
LLVMBuildTruncOrBitCast			    pub fn LLVMBuildTruncOrBitCast(B: BuilderRef,
LLVMBuildUDiv			    pub fn LLVMBuildUDiv(B: BuilderRef,
LLVMBuildUIToFP			    pub fn LLVMBuildUIToFP(B: BuilderRef,
LLVMBuildURem			    pub fn LLVMBuildURem(B: BuilderRef,
LLVMBuildUnreachable			    pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;
LLVMBuildVAArg			    pub fn LLVMBuildVAArg(B: BuilderRef,
LLVMBuildXor			    pub fn LLVMBuildXor(B: BuilderRef,
LLVMBuildZExt			    pub fn LLVMBuildZExt(B: BuilderRef,
LLVMBuildZExtOrBitCast			    pub fn LLVMBuildZExtOrBitCast(B: BuilderRef,
LLVMCallFrameAlignmentOfType			    pub fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMClearInsertionPosition			    pub fn LLVMClearInsertionPosition(Builder: BuilderRef);
LLVMCloneModule			    pub fn LLVMCloneModule(M: ModuleRef) -> ModuleRef;
LLVMConstAShr			    pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstAdd			    pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstAllOnes			    pub fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;
LLVMConstAnd			    pub fn LLVMConstAnd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstArray			    pub fn LLVMConstArray(ElementTy: TypeRef,
LLVMConstBitCast			    pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstExactSDiv			    pub fn LLVMConstExactSDiv(LHSConstant: ValueRef,
LLVMConstExtractElement			    pub fn LLVMConstExtractElement(VectorConstant: ValueRef,
LLVMConstExtractValue			    pub fn LLVMConstExtractValue(AggConstant: ValueRef,
LLVMConstFAdd			    pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFCmp			    pub fn LLVMConstFCmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef)
LLVMConstFDiv			    pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFMul			    pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFNeg			    pub fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstFPCast			    pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPExt			    pub fn LLVMConstFPExt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPToSI			    pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPToUI			    pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPTrunc			    pub fn LLVMConstFPTrunc(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFRem			    pub fn LLVMConstFRem(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFSub			    pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstGEP			    pub fn LLVMConstGEP(ConstantVal: ValueRef,
LLVMConstICmp			    pub fn LLVMConstICmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef)
LLVMConstInBoundsGEP			    pub fn LLVMConstInBoundsGEP(ConstantVal: ValueRef,
LLVMConstInlineAsm			    pub fn LLVMConstInlineAsm(Ty: TypeRef,
LLVMConstInsertElement			    pub fn LLVMConstInsertElement(VectorConstant: ValueRef,
LLVMConstInsertValue			    pub fn LLVMConstInsertValue(AggConstant: ValueRef,
LLVMConstInt			    pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool)
LLVMConstIntCast			    pub fn LLVMConstIntCast(ConstantVal: ValueRef,
LLVMConstIntGetSExtValue			    pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;
LLVMConstIntGetZExtValue			    pub fn LLVMConstIntGetZExtValue(ConstantVal: ValueRef) -> c_ulonglong;
LLVMConstIntOfString			    pub fn LLVMConstIntOfString(IntTy: TypeRef, Text: *const c_char, Radix: u8)
LLVMConstIntOfStringAndSize			    pub fn LLVMConstIntOfStringAndSize(IntTy: TypeRef,
LLVMConstIntToPtr			    pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstLShr			    pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstMul			    pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNSWAdd			    pub fn LLVMConstNSWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNSWMul			    pub fn LLVMConstNSWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNSWNeg			    pub fn LLVMConstNSWNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNSWSub			    pub fn LLVMConstNSWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNUWAdd			    pub fn LLVMConstNUWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNUWMul			    pub fn LLVMConstNUWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNUWNeg			    pub fn LLVMConstNUWNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNUWSub			    pub fn LLVMConstNUWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNamedStruct			    pub fn LLVMConstNamedStruct(S: TypeRef,
LLVMConstNeg			    pub fn LLVMConstNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNot			    pub fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNull			    pub fn LLVMConstNull(Ty: TypeRef) -> ValueRef;
LLVMConstOr			    pub fn LLVMConstOr(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstPointerCast			    pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstPointerNull			    pub fn LLVMConstPointerNull(Ty: TypeRef) -> ValueRef;
LLVMConstPtrToInt			    pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstReal			    pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;
LLVMConstRealOfString			    pub fn LLVMConstRealOfString(RealTy: TypeRef, Text: *const c_char)
LLVMConstRealOfStringAndSize			    pub fn LLVMConstRealOfStringAndSize(RealTy: TypeRef,
LLVMConstSDiv			    pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstSExt			    pub fn LLVMConstSExt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstSExtOrBitCast			    pub fn LLVMConstSExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstSIToFP			    pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstSRem			    pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstSelect			    pub fn LLVMConstSelect(ConstantCondition: ValueRef,
LLVMConstShl			    pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstShuffleVector			    pub fn LLVMConstShuffleVector(VectorAConstant: ValueRef,
LLVMConstStringInContext			    pub fn LLVMConstStringInContext(C: ContextRef,
LLVMConstStructInContext			    pub fn LLVMConstStructInContext(C: ContextRef,
LLVMConstSub			    pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstTrunc			    pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstTruncOrBitCast			    pub fn LLVMConstTruncOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstUDiv			    pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstUIToFP			    pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstURem			    pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstVector			    pub fn LLVMConstVector(ScalarConstantVals: *const ValueRef, Size: c_uint)
LLVMConstXor			    pub fn LLVMConstXor(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstZExt			    pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstZExtOrBitCast			    pub fn LLVMConstZExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMContextCreate			    pub fn LLVMContextCreate() -> ContextRef;
LLVMContextDispose			    pub fn LLVMContextDispose(C: ContextRef);
LLVMContextSetDiagnosticHandler			    pub fn LLVMContextSetDiagnosticHandler(C: ContextRef,
LLVMCountBasicBlocks			    pub fn LLVMCountBasicBlocks(Fn: ValueRef) -> c_uint;
LLVMCountIncoming			    pub fn LLVMCountIncoming(PhiNode: ValueRef) -> c_uint;
LLVMCountParamTypes			    pub fn LLVMCountParamTypes(FunctionTy: TypeRef) -> c_uint;
LLVMCountParams			    pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;
LLVMCountStructElementTypes			    pub fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;
LLVMCreateBuilderInContext			    pub fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;
LLVMCreateFunctionPassManagerForModule			    pub fn LLVMCreateFunctionPassManagerForModule(M: ModuleRef)
LLVMCreateMemoryBufferWithMemoryRange			    pub fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *const c_char,
LLVMCreateMemoryBufferWithMemoryRangeCopy			    pub fn LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: *const c_char,
LLVMCreateObjectFile			    pub fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;
LLVMCreatePassManager			    pub fn LLVMCreatePassManager() -> PassManagerRef;
LLVMCreateTargetData			    pub fn LLVMCreateTargetData(StringRep: *const c_char) -> TargetDataRef;
LLVMDIBuilderCreate			    pub fn LLVMDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;
LLVMDIBuilderCreateArrayType			    pub fn LLVMDIBuilderCreateArrayType(Builder: DIBuilderRef,
LLVMDIBuilderCreateBasicType			    pub fn LLVMDIBuilderCreateBasicType(Builder: DIBuilderRef,
LLVMDIBuilderCreateCompileUnit			    pub fn LLVMDIBuilderCreateCompileUnit(Builder: DIBuilderRef,
LLVMDIBuilderCreateDebugLocation			    pub fn LLVMDIBuilderCreateDebugLocation(Context: ContextRef,
LLVMDIBuilderCreateEnumerationType			    pub fn LLVMDIBuilderCreateEnumerationType(Builder: DIBuilderRef,
LLVMDIBuilderCreateEnumerator			    pub fn LLVMDIBuilderCreateEnumerator(Builder: DIBuilderRef,
LLVMDIBuilderCreateFile			    pub fn LLVMDIBuilderCreateFile(Builder: DIBuilderRef,
LLVMDIBuilderCreateFunction			    pub fn LLVMDIBuilderCreateFunction(Builder: DIBuilderRef,
LLVMDIBuilderCreateLexicalBlock			    pub fn LLVMDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,
LLVMDIBuilderCreateMemberType			    pub fn LLVMDIBuilderCreateMemberType(Builder: DIBuilderRef,
LLVMDIBuilderCreateNameSpace			    pub fn LLVMDIBuilderCreateNameSpace(Builder: DIBuilderRef,
LLVMDIBuilderCreateOpDeref			    pub fn LLVMDIBuilderCreateOpDeref() -> i64;
LLVMDIBuilderCreateOpPlus			    pub fn LLVMDIBuilderCreateOpPlus() -> i64;
LLVMDIBuilderCreatePointerType			    pub fn LLVMDIBuilderCreatePointerType(Builder: DIBuilderRef,
LLVMDIBuilderCreateStaticVariable			    pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,
LLVMDIBuilderCreateStructType			    pub fn LLVMDIBuilderCreateStructType(Builder: DIBuilderRef,
LLVMDIBuilderCreateSubroutineType			    pub fn LLVMDIBuilderCreateSubroutineType(Builder: DIBuilderRef,
LLVMDIBuilderCreateTemplateTypeParameter			    pub fn LLVMDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,
LLVMDIBuilderCreateUnionType			    pub fn LLVMDIBuilderCreateUnionType(Builder: DIBuilderRef,
LLVMDIBuilderCreateVariable			    pub fn LLVMDIBuilderCreateVariable(Builder: DIBuilderRef,
LLVMDIBuilderCreateVectorType			    pub fn LLVMDIBuilderCreateVectorType(Builder: DIBuilderRef,
LLVMDIBuilderDispose			    pub fn LLVMDIBuilderDispose(Builder: DIBuilderRef);
LLVMDIBuilderFinalize			    pub fn LLVMDIBuilderFinalize(Builder: DIBuilderRef);
LLVMDIBuilderGetOrCreateArray			    pub fn LLVMDIBuilderGetOrCreateArray(Builder: DIBuilderRef,
LLVMDIBuilderGetOrCreateSubrange			    pub fn LLVMDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,
LLVMDIBuilderInsertDeclareAtEnd			    pub fn LLVMDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,
LLVMDIBuilderInsertDeclareBefore			    pub fn LLVMDIBuilderInsertDeclareBefore(Builder: DIBuilderRef,
LLVMDICompositeTypeSetTypeArray			    pub fn LLVMDICompositeTypeSetTypeArray(Builder: DIBuilderRef,
LLVMDeleteBasicBlock			    pub fn LLVMDeleteBasicBlock(BB: BasicBlockRef);
LLVMDeleteFunction			    pub fn LLVMDeleteFunction(Fn: ValueRef);
LLVMDeleteGlobal			    pub fn LLVMDeleteGlobal(GlobalVar: ValueRef);
LLVMDisposeBuilder			    pub fn LLVMDisposeBuilder(Builder: BuilderRef);
LLVMDisposeExecutionEngine			    pub fn LLVMDisposeExecutionEngine(EE: ExecutionEngineRef);
LLVMDisposeMemoryBuffer			    pub fn LLVMDisposeMemoryBuffer(MemBuf: MemoryBufferRef);
LLVMDisposeModule			    pub fn LLVMDisposeModule(M: ModuleRef);
LLVMDisposeObjectFile			    pub fn LLVMDisposeObjectFile(ObjFile: ObjectFileRef);
LLVMDisposePassManager			    pub fn LLVMDisposePassManager(PM: PassManagerRef);
LLVMDisposeSectionIterator			    pub fn LLVMDisposeSectionIterator(SI: SectionIteratorRef);
LLVMDisposeTargetData			    pub fn LLVMDisposeTargetData(TD: TargetDataRef);
LLVMDoubleTypeInContext			    pub fn LLVMDoubleTypeInContext(C: ContextRef) -> TypeRef;
LLVMDumpModule			    pub fn LLVMDumpModule(M: ModuleRef);
LLVMDumpValue			    pub fn LLVMDumpValue(Val: ValueRef);
LLVMExecutionEngineAddModule			    pub fn LLVMExecutionEngineAddModule(EE: ExecutionEngineRef, M: ModuleRef);
LLVMExecutionEngineFinalizeObject			    pub fn LLVMExecutionEngineFinalizeObject(EE: ExecutionEngineRef);
LLVMExecutionEngineRemoveModule			    pub fn LLVMExecutionEngineRemoveModule(EE: ExecutionEngineRef, M: ModuleRef)
LLVMFP128TypeInContext			    pub fn LLVMFP128TypeInContext(C: ContextRef) -> TypeRef;
LLVMFinalizeFunctionPassManager			    pub fn LLVMFinalizeFunctionPassManager(FPM: PassManagerRef) -> Bool;
LLVMFloatTypeInContext			    pub fn LLVMFloatTypeInContext(C: ContextRef) -> TypeRef;
LLVMFunctionType			    pub fn LLVMFunctionType(ReturnType: TypeRef,
LLVMGetAlignment			    pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;
LLVMGetArrayLength			    pub fn LLVMGetArrayLength(ArrayTy: TypeRef) -> c_uint;
LLVMGetAttribute			    pub fn LLVMGetAttribute(Arg: ValueRef) -> c_uint;
LLVMGetBasicBlockParent			    pub fn LLVMGetBasicBlockParent(BB: BasicBlockRef) -> ValueRef;
LLVMGetBasicBlocks			    pub fn LLVMGetBasicBlocks(Fn: ValueRef, BasicBlocks: *const ValueRef);
LLVMGetCurrentDebugLocation			    pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;
LLVMGetDataLayout			    pub fn LLVMGetDataLayout(M: ModuleRef) -> *const c_char;
LLVMGetDiagInfoKind			    pub fn LLVMGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;
LLVMGetDiagInfoSeverity			    pub fn LLVMGetDiagInfoSeverity(DI: DiagnosticInfoRef) -> DiagnosticSeverity;
LLVMGetElementType			    pub fn LLVMGetElementType(Ty: TypeRef) -> TypeRef;
LLVMGetEntryBasicBlock			    pub fn LLVMGetEntryBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetFirstBasicBlock			    pub fn LLVMGetFirstBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetFirstFunction			    pub fn LLVMGetFirstFunction(M: ModuleRef) -> ValueRef;
LLVMGetFirstGlobal			    pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;
LLVMGetFirstInstruction			    pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;
LLVMGetFirstParam			    pub fn LLVMGetFirstParam(Fn: ValueRef) -> ValueRef;
LLVMGetFirstUse			    pub fn LLVMGetFirstUse(Val: ValueRef) -> UseRef;
LLVMGetFunctionAttr			    pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_uint;
LLVMGetFunctionCallConv			    pub fn LLVMGetFunctionCallConv(Fn: ValueRef) -> c_uint;
LLVMGetGC			    pub fn LLVMGetGC(Fn: ValueRef) -> *const c_char;
LLVMGetGlobalParent			    pub fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;
LLVMGetIncomingBlock			    pub fn LLVMGetIncomingBlock(PhiNode: ValueRef, Index: c_uint)
LLVMGetIncomingValue			    pub fn LLVMGetIncomingValue(PhiNode: ValueRef, Index: c_uint)
LLVMGetInitializer			    pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;
LLVMGetInsertBlock			    pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;
LLVMGetInstructionCallConv			    pub fn LLVMGetInstructionCallConv(Instr: ValueRef) -> c_uint;
LLVMGetInstructionParent			    pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;
LLVMGetIntTypeWidth			    pub fn LLVMGetIntTypeWidth(IntegerTy: TypeRef) -> c_uint;
LLVMGetIntrinsicID			    pub fn LLVMGetIntrinsicID(Fn: ValueRef) -> c_uint;
LLVMGetLastBasicBlock			    pub fn LLVMGetLastBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetLastFunction			    pub fn LLVMGetLastFunction(M: ModuleRef) -> ValueRef;
LLVMGetLastGlobal			    pub fn LLVMGetLastGlobal(M: ModuleRef) -> ValueRef;
LLVMGetLastInstruction			    pub fn LLVMGetLastInstruction(BB: BasicBlockRef) -> ValueRef;
LLVMGetLastParam			    pub fn LLVMGetLastParam(Fn: ValueRef) -> ValueRef;
LLVMGetLinkage			    pub fn LLVMGetLinkage(Global: ValueRef) -> c_uint;
LLVMGetMDKindIDInContext			    pub fn LLVMGetMDKindIDInContext(C: ContextRef,
LLVMGetMetadata			    pub fn LLVMGetMetadata(Val: ValueRef, KindID: c_uint) -> ValueRef;
LLVMGetModuleContext			    pub fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;
LLVMGetNamedFunction			    pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *const c_char) -> ValueRef;
LLVMGetNamedGlobal			    pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *const c_char) -> ValueRef;
LLVMGetNamedValue			    pub fn LLVMGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;
LLVMGetNextBasicBlock			    pub fn LLVMGetNextBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;
LLVMGetNextFunction			    pub fn LLVMGetNextFunction(Fn: ValueRef) -> ValueRef;
LLVMGetNextGlobal			    pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;
LLVMGetNextInstruction			    pub fn LLVMGetNextInstruction(Inst: ValueRef) -> ValueRef;
LLVMGetNextParam			    pub fn LLVMGetNextParam(Arg: ValueRef) -> ValueRef;
LLVMGetNextUse			    pub fn LLVMGetNextUse(U: UseRef) -> UseRef;
LLVMGetNumOperands			    pub fn LLVMGetNumOperands(Val: ValueRef) -> c_int;
LLVMGetOperand			    pub fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;
LLVMGetOrInsertFunction			    pub fn LLVMGetOrInsertFunction(M: ModuleRef,
LLVMGetOrInsertGlobal			    pub fn LLVMGetOrInsertGlobal(M: ModuleRef, Name: *const c_char, T: TypeRef) -> ValueRef;
LLVMGetParam			    pub fn LLVMGetParam(Fn: ValueRef, Index: c_uint) -> ValueRef;
LLVMGetParamParent			    pub fn LLVMGetParamParent(Inst: ValueRef) -> ValueRef;
LLVMGetParamTypes			    pub fn LLVMGetParamTypes(FunctionTy: TypeRef, Dest: *mut TypeRef);
LLVMGetParams			    pub fn LLVMGetParams(Fn: ValueRef, Params: *const ValueRef);
LLVMGetPointerAddressSpace			    pub fn LLVMGetPointerAddressSpace(PointerTy: TypeRef) -> c_uint;
LLVMGetPointerToGlobal			    pub fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef, V: ValueRef)
LLVMGetPreviousBasicBlock			    pub fn LLVMGetPreviousBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;
LLVMGetPreviousFunction			    pub fn LLVMGetPreviousFunction(Fn: ValueRef) -> ValueRef;
LLVMGetPreviousGlobal			    pub fn LLVMGetPreviousGlobal(GlobalVar: ValueRef) -> ValueRef;
LLVMGetPreviousInstruction			    pub fn LLVMGetPreviousInstruction(Inst: ValueRef) -> ValueRef;
LLVMGetPreviousParam			    pub fn LLVMGetPreviousParam(Arg: ValueRef) -> ValueRef;
LLVMGetReturnType			    pub fn LLVMGetReturnType(FunctionTy: TypeRef) -> TypeRef;
LLVMGetSection			    pub fn LLVMGetSection(Global: ValueRef) -> *const c_char;
LLVMGetSectionContents			    pub fn LLVMGetSectionContents(SI: SectionIteratorRef) -> *const c_char;
LLVMGetSectionSize			    pub fn LLVMGetSectionSize(SI: SectionIteratorRef) -> c_ulonglong;
LLVMGetSections			    pub fn LLVMGetSections(ObjFile: ObjectFileRef) -> SectionIteratorRef;
LLVMGetStructElementTypes			    pub fn LLVMGetStructElementTypes(StructTy: TypeRef,
LLVMGetTarget			    pub fn LLVMGetTarget(M: ModuleRef) -> *const c_char;
LLVMGetTypeContext			    pub fn LLVMGetTypeContext(Ty: TypeRef) -> ContextRef;
LLVMGetTypeKind			    pub fn LLVMGetTypeKind(Ty: TypeRef) -> TypeKind;
LLVMGetUndef			    pub fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;
LLVMGetUsedValue			    pub fn LLVMGetUsedValue(U: UseRef) -> ValueRef;
LLVMGetUser			    pub fn LLVMGetUser(U: UseRef) -> ValueRef;
LLVMGetValueName			    pub fn LLVMGetValueName(Val: ValueRef) -> *const c_char;
LLVMGetVectorSize			    pub fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;
LLVMGetVisibility			    pub fn LLVMGetVisibility(Global: ValueRef) -> c_uint;
LLVMGetVolatile			    pub fn LLVMGetVolatile(MemoryAccessInst: ValueRef) -> Bool;
LLVMHasMetadata			    pub fn LLVMHasMetadata(Val: ValueRef) -> c_int;
LLVMInitializeFunctionPassManager			    pub fn LLVMInitializeFunctionPassManager(FPM: PassManagerRef) -> Bool;
LLVMInitializePasses			    pub fn LLVMInitializePasses();
LLVMInlineAsm			    pub fn LLVMInlineAsm(Ty: TypeRef,
LLVMInsertBasicBlockInContext			    pub fn LLVMInsertBasicBlockInContext(C: ContextRef,
LLVMInsertIntoBuilder			    pub fn LLVMInsertIntoBuilder(Builder: BuilderRef, Instr: ValueRef);
LLVMInsertIntoBuilderWithName			    pub fn LLVMInsertIntoBuilderWithName(Builder: BuilderRef,
LLVMInstructionEraseFromParent			    pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);
LLVMInt16TypeInContext			    pub fn LLVMInt16TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt1TypeInContext			    pub fn LLVMInt1TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt32TypeInContext			    pub fn LLVMInt32TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt64TypeInContext			    pub fn LLVMInt64TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt8TypeInContext			    pub fn LLVMInt8TypeInContext(C: ContextRef) -> TypeRef;
LLVMIntTypeInContext			    pub fn LLVMIntTypeInContext(C: ContextRef, NumBits: c_uint)
LLVMIsAAllocaInst			    pub fn LLVMIsAAllocaInst(value_ref: ValueRef) -> ValueRef;
LLVMIsAArgument			    pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;
LLVMIsAConstantInt			    pub fn LLVMIsAConstantInt(value_ref: ValueRef) -> ValueRef;
LLVMIsAGlobalVariable			    pub fn LLVMIsAGlobalVariable(GlobalVar: ValueRef) -> ValueRef;
LLVMIsAStoreInst			    pub fn LLVMIsAStoreInst(Inst: ValueRef) -> ValueRef;
LLVMIsATerminatorInst			    pub fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;
LLVMIsConstant			    pub fn LLVMIsConstant(Val: ValueRef) -> Bool;
LLVMIsDeclaration			    pub fn LLVMIsDeclaration(Global: ValueRef) -> Bool;
LLVMIsFunctionVarArg			    pub fn LLVMIsFunctionVarArg(FunctionTy: TypeRef) -> Bool;
LLVMIsGlobalConstant			    pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;
LLVMIsMultithreaded			    pub fn LLVMIsMultithreaded() -> Bool;
LLVMIsNull			    pub fn LLVMIsNull(Val: ValueRef) -> Bool;
LLVMIsPackedStruct			    pub fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;
LLVMIsSectionIteratorAtEnd			    pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef,
LLVMIsTailCall			    pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;
LLVMIsThreadLocal			    pub fn LLVMIsThreadLocal(GlobalVar: ValueRef) -> Bool;
LLVMIsUndef			    pub fn LLVMIsUndef(Val: ValueRef) -> Bool;
LLVMLabelTypeInContext			    pub fn LLVMLabelTypeInContext(C: ContextRef) -> TypeRef;
LLVMMDNodeInContext			    pub fn LLVMMDNodeInContext(C: ContextRef,
LLVMMDStringInContext			    pub fn LLVMMDStringInContext(C: ContextRef,
LLVMMetadataTypeInContext			    pub fn LLVMMetadataTypeInContext(C: ContextRef) -> TypeRef;
LLVMModuleCreateWithNameInContext			    pub fn LLVMModuleCreateWithNameInContext(ModuleID: *const c_char,
LLVMMoveBasicBlockAfter			    pub fn LLVMMoveBasicBlockAfter(BB: BasicBlockRef,
LLVMMoveBasicBlockBefore			    pub fn LLVMMoveBasicBlockBefore(BB: BasicBlockRef,
LLVMMoveToNextSection			    pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);
LLVMOffsetOfElement			    pub fn LLVMOffsetOfElement(TD: TargetDataRef,
LLVMPPCFP128TypeInContext			    pub fn LLVMPPCFP128TypeInContext(C: ContextRef) -> TypeRef;
LLVMPassManagerBuilderCreate			    pub fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;
LLVMPassManagerBuilderDispose			    pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);
LLVMPassManagerBuilderPopulateFunctionPassManager			    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(
LLVMPassManagerBuilderPopulateLTOPassManager			    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(
LLVMPassManagerBuilderPopulateModulePassManager			    pub fn LLVMPassManagerBuilderPopulateModulePassManager(
LLVMPassManagerBuilderSetDisableSimplifyLibCalls			    pub fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(
LLVMPassManagerBuilderSetDisableUnitAtATime			    pub fn LLVMPassManagerBuilderSetDisableUnitAtATime(
LLVMPassManagerBuilderSetDisableUnrollLoops			    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(
LLVMPassManagerBuilderSetOptLevel			    pub fn LLVMPassManagerBuilderSetOptLevel(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderSetSizeLevel			    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderUseInlinerWithThreshold			    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(
LLVMPointerType			    pub fn LLVMPointerType(ElementType: TypeRef, AddressSpace: c_uint)
LLVMPositionBuilder			    pub fn LLVMPositionBuilder(Builder: BuilderRef,
LLVMPositionBuilderAtEnd			    pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef,
LLVMPositionBuilderBefore			    pub fn LLVMPositionBuilderBefore(Builder: BuilderRef,
LLVMPreferredAlignmentOfType			    pub fn LLVMPreferredAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMRemoveAttribute			    pub fn LLVMRemoveAttribute(Arg: ValueRef, PA: c_uint);
LLVMRemoveFunctionAttr			    pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_uint);
LLVMRemoveFunctionAttrString			    pub fn LLVMRemoveFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);
LLVMRemoveFunctionAttributes			    pub fn LLVMRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: uint64_t);
LLVMRemoveInstrAttribute			    pub fn LLVMRemoveInstrAttribute(Instr: ValueRef,
LLVMReplaceAllUsesWith			    pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);
LLVMRunFunctionPassManager			    pub fn LLVMRunFunctionPassManager(FPM: PassManagerRef, F: ValueRef)
LLVMRunPassManager			    pub fn LLVMRunPassManager(PM: PassManagerRef, M: ModuleRef) -> Bool;
LLVMRustAddAlwaysInlinePass			    pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef,
LLVMRustAddAnalysisPasses			    pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef,
LLVMRustAddBuilderLibraryInfo			    pub fn LLVMRustAddBuilderLibraryInfo(PMB: PassManagerBuilderRef,
LLVMRustAddHandler			    pub fn LLVMRustAddHandler(CatchSwitch: ValueRef,
LLVMRustAddLibraryInfo			    pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef, M: ModuleRef,
LLVMRustAddModuleFlag			    pub fn LLVMRustAddModuleFlag(M: ModuleRef,
LLVMRustAddPass			    pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: PassRef);
LLVMRustArchiveChildData			    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef,
LLVMRustArchiveChildFree			    pub fn LLVMRustArchiveChildFree(ACR: ArchiveChildRef);
LLVMRustArchiveChildName			    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef,
LLVMRustArchiveIteratorFree			    pub fn LLVMRustArchiveIteratorFree(AIR: ArchiveIteratorRef);
LLVMRustArchiveIteratorNew			    pub fn LLVMRustArchiveIteratorNew(AR: ArchiveRef) -> ArchiveIteratorRef;
LLVMRustArchiveIteratorNext			    pub fn LLVMRustArchiveIteratorNext(AIR: ArchiveIteratorRef) -> ArchiveChildRef;
LLVMRustArchiveMemberFree			    pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);
LLVMRustArchiveMemberNew			    pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,
LLVMRustArrayType			    pub fn LLVMRustArrayType(ElementType: TypeRef, ElementCount: u64) -> TypeRef;
LLVMRustBuildCall			    pub fn LLVMRustBuildCall(B: BuilderRef,
LLVMRustBuildCatchPad			    pub fn LLVMRustBuildCatchPad(B: BuilderRef,
LLVMRustBuildCatchRet			    pub fn LLVMRustBuildCatchRet(B: BuilderRef,
LLVMRustBuildCatchSwitch			    pub fn LLVMRustBuildCatchSwitch(Builder: BuilderRef,
LLVMRustBuildCleanupPad			    pub fn LLVMRustBuildCleanupPad(B: BuilderRef,
LLVMRustBuildCleanupRet			    pub fn LLVMRustBuildCleanupRet(B: BuilderRef,
LLVMRustBuildInvoke			    pub fn LLVMRustBuildInvoke(B: BuilderRef,
LLVMRustBuildLandingPad			    pub fn LLVMRustBuildLandingPad(B: BuilderRef,
LLVMRustBuildOperandBundleDef			    pub fn LLVMRustBuildOperandBundleDef(Name: *const c_char,
LLVMRustConfigurePassManagerBuilder			    pub fn LLVMRustConfigurePassManagerBuilder(PMB: PassManagerBuilderRef,
LLVMRustCreateMemoryBufferWithContentsOfFile			    pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *const c_char)
LLVMRustCreateTargetMachine			    pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,
LLVMRustDebugMetadataVersion			    pub fn LLVMRustDebugMetadataVersion() -> u32;
LLVMRustDestroyArchive			    pub fn LLVMRustDestroyArchive(AR: ArchiveRef);
LLVMRustDisposeTargetMachine			    pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);
LLVMRustFindAndCreatePass			    pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> PassRef;
LLVMRustFreeOperandBundleDef			    pub fn LLVMRustFreeOperandBundleDef(Bundle: OperandBundleDefRef);
LLVMRustGetLastError			    pub fn LLVMRustGetLastError() -> *const c_char;
LLVMRustGetModuleDataLayout			    pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;
LLVMRustGetSectionName			    pub fn LLVMRustGetSectionName(SI: SectionIteratorRef,
LLVMRustLinkInExternalBitcode			    pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef,
LLVMRustLoadDynamicLibrary			    pub fn LLVMRustLoadDynamicLibrary(path: *const c_char) -> Bool;
LLVMRustMarkAllFunctionsNounwind			    pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);
LLVMRustOpenArchive			    pub fn LLVMRustOpenArchive(path: *const c_char) -> ArchiveRef;
LLVMRustPassKind			    pub fn LLVMRustPassKind(Pass: PassRef) -> SupportedPassKind;
LLVMRustPositionBuilderAtStart			    pub fn LLVMRustPositionBuilderAtStart(B: BuilderRef, BB: BasicBlockRef);
LLVMRustPrintModule			    pub fn LLVMRustPrintModule(PM: PassManagerRef,
LLVMRustPrintPassTimings			    pub fn LLVMRustPrintPassTimings();
LLVMRustPrintPasses			    pub fn LLVMRustPrintPasses();
LLVMRustRunFunctionPassManager			    pub fn LLVMRustRunFunctionPassManager(PM: PassManagerRef, M: ModuleRef);
LLVMRustRunRestrictionPass			    pub fn LLVMRustRunRestrictionPass(M: ModuleRef,
LLVMRustSetComdat			    pub fn LLVMRustSetComdat(M: ModuleRef, V: ValueRef, Name: *const c_char);
LLVMRustSetDLLStorageClass			    pub fn LLVMRustSetDLLStorageClass(V: ValueRef,
LLVMRustSetDataLayoutFromTargetMachine			    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef,
LLVMRustSetHasUnsafeAlgebra			    pub fn LLVMRustSetHasUnsafeAlgebra(Instr: ValueRef);
LLVMRustSetLLVMOptions			    pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);
LLVMRustSetNormalizedTarget			    pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *const c_char);
LLVMRustSetPersonalityFn			    pub fn LLVMRustSetPersonalityFn(B: BuilderRef, Pers: ValueRef);
LLVMRustUnsetComdat			    pub fn LLVMRustUnsetComdat(V: ValueRef);
LLVMRustWriteArchive			    pub fn LLVMRustWriteArchive(Dst: *const c_char,
LLVMRustWriteOutputFile			    pub fn LLVMRustWriteOutputFile(T: TargetMachineRef,
LLVMSetAlignment			    pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);
LLVMSetCleanup			    pub fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);
LLVMSetCurrentDebugLocation			    pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);
LLVMSetDataLayout			    pub fn LLVMSetDataLayout(M: ModuleRef, Triple: *const c_char);
LLVMSetDebug			    pub fn LLVMSetDebug(Enabled: c_int);
LLVMSetFunctionCallConv			    pub fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: c_uint);
LLVMSetGC			    pub fn LLVMSetGC(Fn: ValueRef, Name: *const c_char);
LLVMSetGlobalConstant			    pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);
LLVMSetInitializer			    pub fn LLVMSetInitializer(GlobalVar: ValueRef,
LLVMSetInlineAsmDiagnosticHandler			    pub fn LLVMSetInlineAsmDiagnosticHandler(C: ContextRef,
LLVMSetInstDebugLocation			    pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);
LLVMSetInstrParamAlignment			    pub fn LLVMSetInstrParamAlignment(Instr: ValueRef,
LLVMSetInstructionCallConv			    pub fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: c_uint);
LLVMSetLinkage			    pub fn LLVMSetLinkage(Global: ValueRef, Link: c_uint);
LLVMSetMetadata			    pub fn LLVMSetMetadata(Val: ValueRef, KindID: c_uint, Node: ValueRef);
LLVMSetModuleInlineAsm			    pub fn LLVMSetModuleInlineAsm(M: ModuleRef, Asm: *const c_char);
LLVMSetOperand			    pub fn LLVMSetOperand(Val: ValueRef, Index: c_uint, Op: ValueRef);
LLVMSetParamAlignment			    pub fn LLVMSetParamAlignment(Arg: ValueRef, align: c_uint);
LLVMSetSection			    pub fn LLVMSetSection(Global: ValueRef, Section: *const c_char);
LLVMSetTailCall			    pub fn LLVMSetTailCall(CallInst: ValueRef, IsTailCall: Bool);
LLVMSetTarget			    pub fn LLVMSetTarget(M: ModuleRef, Triple: *const c_char);
LLVMSetThreadLocal			    pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);
LLVMSetUnnamedAddr			    pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);
LLVMSetValueName			    pub fn LLVMSetValueName(Val: ValueRef, Name: *const c_char);
LLVMSetVisibility			    pub fn LLVMSetVisibility(Global: ValueRef, Viz: c_uint);
LLVMSetVolatile			    pub fn LLVMSetVolatile(MemoryAccessInst: ValueRef, volatile: Bool);
LLVMSizeOf			    pub fn LLVMSizeOf(Ty: TypeRef) -> ValueRef;
LLVMSizeOfTypeInBits			    pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef)
LLVMStartMultithreaded			    pub fn LLVMStartMultithreaded() -> Bool;
LLVMStoreSizeOfType			    pub fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMStructCreateNamed			    pub fn LLVMStructCreateNamed(C: ContextRef, Name: *const c_char) -> TypeRef;
LLVMStructSetBody			    pub fn LLVMStructSetBody(StructTy: TypeRef,
LLVMStructTypeInContext			    pub fn LLVMStructTypeInContext(C: ContextRef,
LLVMTypeOf			    pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;
LLVMUnpackInlineAsmDiagnostic			    pub fn LLVMUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,
LLVMUnpackOptimizationDiagnostic			    pub fn LLVMUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,
LLVMValueAsBasicBlock			    pub fn LLVMValueAsBasicBlock(Val: ValueRef) -> BasicBlockRef;
LLVMValueIsBasicBlock			    pub fn LLVMValueIsBasicBlock(Val: ValueRef) -> Bool;
LLVMVectorType			    pub fn LLVMVectorType(ElementType: TypeRef, ElementCount: c_uint)
LLVMVersionMajor			    pub fn LLVMVersionMajor() -> u32;
LLVMVersionMinor			    pub fn LLVMVersionMinor() -> u32;
LLVMVoidTypeInContext			    pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;
LLVMWriteBitcodeToFile			    pub fn LLVMWriteBitcodeToFile(M: ModuleRef, Path: *const c_char) -> c_int;
LLVMWriteDebugLocToString			    pub fn LLVMWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);
LLVMWriteDiagnosticInfoToString			    pub fn LLVMWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);
LLVMWriteSMDiagnosticToString			    pub fn LLVMWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);
LLVMWriteTwineToString			    pub fn LLVMWriteTwineToString(T: TwineRef, s: RustStringRef);
LLVMWriteTypeToString			    pub fn LLVMWriteTypeToString(Type: TypeRef, s: RustStringRef);
LLVMWriteValueToString			    pub fn LLVMWriteValueToString(value_ref: ValueRef, s: RustStringRef);
LLVMX86FP80TypeInContext			    pub fn LLVMX86FP80TypeInContext(C: ContextRef) -> TypeRef;
Linkage			pub enum Linkage 
MemoryBuffer_opaque			pub enum MemoryBuffer_opaque {}
MetadataType			pub enum MetadataType 
Metadata_opaque			pub enum Metadata_opaque {}
Module_opaque			pub enum Module_opaque {}
ObjectFile			impl ObjectFile 
ObjectFile			pub struct ObjectFile 
ObjectFile_opaque			pub enum ObjectFile_opaque {}
OperandBundleDef			impl OperandBundleDef 
OperandBundleDef			pub struct OperandBundleDef 
OperandBundleDef_opaque			pub enum OperandBundleDef_opaque {}
OptimizationDiagnostic			impl OptimizationDiagnostic 
OptimizationDiagnostic			pub struct OptimizationDiagnostic 
OptimizationDiagnosticKind			impl OptimizationDiagnosticKind 
OptimizationDiagnosticKind			pub enum OptimizationDiagnosticKind 
PassManagerBuilder_opaque			pub enum PassManagerBuilder_opaque {}
PassManager_opaque			pub enum PassManager_opaque {}
Pass_opaque			pub enum Pass_opaque {}
RealPredicate			pub enum RealPredicate 
RelocMode			pub enum RelocMode 
RemoveFunctionAttributes			pub fn RemoveFunctionAttributes(fn_: ValueRef, attr: Attribute) 
RustArchiveMember_opaque			pub enum RustArchiveMember_opaque {}
RustString_opaque			pub enum RustString_opaque {}
SMDiagnostic_opaque			pub enum SMDiagnostic_opaque {}
SectionIter			pub struct SectionIter 
SectionIterator_opaque			pub enum SectionIterator_opaque {}
SetDLLStorageClass			pub fn SetDLLStorageClass(global: ValueRef, class: DLLStorageClassTypes) 
SetFunctionAttribute			pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) 
SetFunctionCallConv			pub fn SetFunctionCallConv(fn_: ValueRef, cc: CallConv) 
SetInstructionCallConv			pub fn SetInstructionCallConv(instr: ValueRef, cc: CallConv) 
SetLinkage			pub fn SetLinkage(global: ValueRef, link: Linkage) 
SetUniqueComdat			pub fn SetUniqueComdat(llmod: ModuleRef, val: ValueRef) 
SetUnnamedAddr			pub fn SetUnnamedAddr(global: ValueRef, unnamed: bool) 
SupportedPassKind			pub enum SupportedPassKind 
SynchronizationScope			pub enum SynchronizationScope 
TargetData			pub struct TargetData 
TargetData_opaque			pub enum TargetData_opaque {}
TargetMachine_opaque			pub enum TargetMachine_opaque {}
Twine_opaque			pub enum Twine_opaque {}
TypeKind			pub enum TypeKind 
Type_opaque			pub enum Type_opaque {}
UnsetComdat			pub fn UnsetComdat(val: ValueRef) 
Use_opaque			pub enum Use_opaque {}
Value_opaque			pub enum Value_opaque {}
Visibility			pub enum Visibility 
apply_callsite			    pub fn apply_callsite(&self, idx: usize, callsite: ValueRef) 
apply_llfn			    pub fn apply_llfn(&self, idx: usize, llfn: ValueRef) 
archive_ro			pub mod archive_ro;
build_string			pub fn build_string<F>(f: F) -> Option<String> where F: FnOnce(RustStringRef)
data			    pub fn data(&self) -> &'a [u8] 
debug_loc_to_string			pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String 
debuginfo			pub mod debuginfo 
describe			    pub fn describe(self) -> &'static str 
diagnostic			pub mod diagnostic;
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
get_param			pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef 
get_params			pub fn get_params(llfn: ValueRef) -> Vec<ValueRef> 
init			            fn init() { }
init			            fn init() 
initialize_available_targets			pub fn initialize_available_targets() 
iter			    pub fn iter(&self) -> Iter 
last_error			pub fn last_error() -> Option<String> 
llvmdeps			mod llvmdeps 
main			fn main() 
mk_section_iter			pub fn mk_section_iter(llof: ObjectFileRef) -> SectionIter 
mk_target_data			pub fn mk_target_data(string_rep: &str) -> TargetData 
name			    pub fn name(&self) -> Option<&'a str> 
new			    pub fn new(llmb: MemoryBufferRef) -> Option<ObjectFile> 
new			    pub fn new(name: &str, vals: &[ValueRef]) -> OperandBundleDef 
next			    fn next(&mut self) -> Option<Result<Child<'a>, String>> 
open			    pub fn open(dst: &Path) -> Option<ArchiveRO> 
path2cstr			        fn path2cstr(p: &Path) -> CString 
raw			    pub fn raw(&self) -> ::ArchiveChildRef { self.ptr }
raw			    pub fn raw(&self) -> ArchiveRef { self.ptr }
raw			    pub fn raw(&self) -> OperandBundleDefRef 
set			    pub fn set(&mut self, attr: Attribute) -> &mut Self 
set_dereferenceable			    pub fn set_dereferenceable(&mut self, bytes: u64) -> &mut Self 
set_thread_local			pub fn set_thread_local(global: ValueRef, is_thread_local: bool) 
twine_to_string			pub unsafe fn twine_to_string(tr: TwineRef) -> String 
unpack			    pub unsafe fn unpack(di: DiagnosticInfoRef) -> Diagnostic 
unpack			    unsafe fn unpack(di: DiagnosticInfoRef)
unpack			    unsafe fn unpack(kind: OptimizationDiagnosticKind, di: DiagnosticInfoRef)
unset			    pub fn unset(&mut self, attr: Attribute) -> &mut Self 
unset_dereferenceable			    pub fn unset_dereferenceable(&mut self) -> &mut Self 
