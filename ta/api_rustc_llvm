AddFunctionAttrStringValue			pub fn AddFunctionAttrStringValue(llfn: ValueRef,
ArchiveChild_opaque			pub enum ArchiveChild_opaque {}
ArchiveIterator_opaque			pub enum ArchiveIterator_opaque {}
ArchiveKind			pub enum ArchiveKind 
ArchiveRO			impl ArchiveRO 
ArchiveRO			pub struct ArchiveRO 
Archive_opaque			pub enum Archive_opaque {}
AsmDialect			pub enum AsmDialect 
AtomicOrdering			pub enum AtomicOrdering 
AtomicRmwBinOp			pub enum AtomicRmwBinOp 
Attribute			pub enum Attribute 
Attribute			impl Attribute 
AttributePlace			impl AttributePlace 
AttributePlace			pub enum AttributePlace 
BasicBlock_opaque			pub enum BasicBlock_opaque {}
Builder_opaque			pub enum Builder_opaque {}
CallConv			pub enum CallConv 
Child			impl<'a> Child<'a> 
Child			pub struct Child<'a> 
CodeGenOptLevel			pub enum CodeGenOptLevel 
CodeGenOptSize			pub enum CodeGenOptSize 
CodeModel			pub enum CodeModel 
Context_opaque			pub enum Context_opaque {}
DIBuilder_opaque			    pub enum DIBuilder_opaque {}
DLLStorageClass			pub enum DLLStorageClass 
DebugLoc_opaque			pub enum DebugLoc_opaque {}
Diagnostic			impl Diagnostic 
Diagnostic			pub enum Diagnostic 
DiagnosticInfo_opaque			pub enum DiagnosticInfo_opaque {}
DiagnosticKind			pub enum DiagnosticKind 
DiagnosticSeverity			pub enum DiagnosticSeverity 
Drop for ArchiveRO			impl Drop for ArchiveRO 
Drop for Child			impl<'a> Drop for Child<'a> 
Drop for Iter			impl<'a> Drop for Iter<'a> 
Drop for ObjectFile			impl Drop for ObjectFile 
Drop for OperandBundleDef			impl Drop for OperandBundleDef 
Drop for SectionIter			impl Drop for SectionIter 
Drop for TargetData			impl Drop for TargetData 
ExecutionEngine_opaque			pub enum ExecutionEngine_opaque {}
FileType			pub enum FileType 
FromStr for ArchiveKind			impl FromStr for ArchiveKind 
InlineAsmDiagnostic			impl InlineAsmDiagnostic 
InlineAsmDiagnostic			pub struct InlineAsmDiagnostic 
IntPredicate			pub enum IntPredicate 
Iter			pub struct Iter<'a> 
Iterator for Iter			impl<'a> Iterator for Iter<'a> 
LLVMABIAlignmentOfType			    pub fn LLVMABIAlignmentOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;
LLVMABISizeOfType			    pub fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;
LLVMAddCase			    pub fn LLVMAddCase(Switch: ValueRef, OnVal: ValueRef, Dest: BasicBlockRef);
LLVMAddClause			    pub fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);
LLVMAddFunction			    pub fn LLVMAddFunction(M: ModuleRef, Name: *const c_char, FunctionTy: TypeRef) -> ValueRef;
LLVMAddGlobal			    pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;
LLVMAddIncoming			    pub fn LLVMAddIncoming(PhiNode: ValueRef,
LLVMAppendBasicBlockInContext			    pub fn LLVMAppendBasicBlockInContext(C: ContextRef,
LLVMBasicBlockAsValue			    pub fn LLVMBasicBlockAsValue(BB: BasicBlockRef) -> ValueRef;
LLVMBuildAShr			    pub fn LLVMBuildAShr(B: BuilderRef,
LLVMBuildAdd			    pub fn LLVMBuildAdd(B: BuilderRef,
LLVMBuildAggregateRet			    pub fn LLVMBuildAggregateRet(B: BuilderRef, RetVals: *const ValueRef, N: c_uint) -> ValueRef;
LLVMBuildAlloca			    pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;
LLVMBuildAnd			    pub fn LLVMBuildAnd(B: BuilderRef,
LLVMBuildAtomicRMW			    pub fn LLVMBuildAtomicRMW(B: BuilderRef,
LLVMBuildBinOp			    pub fn LLVMBuildBinOp(B: BuilderRef,
LLVMBuildBitCast			    pub fn LLVMBuildBitCast(B: BuilderRef,
LLVMBuildBr			    pub fn LLVMBuildBr(B: BuilderRef, Dest: BasicBlockRef) -> ValueRef;
LLVMBuildCast			    pub fn LLVMBuildCast(B: BuilderRef,
LLVMBuildCondBr			    pub fn LLVMBuildCondBr(B: BuilderRef,
LLVMBuildExactSDiv			    pub fn LLVMBuildExactSDiv(B: BuilderRef,
LLVMBuildExtractElement			    pub fn LLVMBuildExtractElement(B: BuilderRef,
LLVMBuildExtractValue			    pub fn LLVMBuildExtractValue(B: BuilderRef,
LLVMBuildFAdd			    pub fn LLVMBuildFAdd(B: BuilderRef,
LLVMBuildFCmp			    pub fn LLVMBuildFCmp(B: BuilderRef,
LLVMBuildFDiv			    pub fn LLVMBuildFDiv(B: BuilderRef,
LLVMBuildFMul			    pub fn LLVMBuildFMul(B: BuilderRef,
LLVMBuildFNeg			    pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildFPCast			    pub fn LLVMBuildFPCast(B: BuilderRef,
LLVMBuildFPExt			    pub fn LLVMBuildFPExt(B: BuilderRef,
LLVMBuildFPToSI			    pub fn LLVMBuildFPToSI(B: BuilderRef,
LLVMBuildFPToUI			    pub fn LLVMBuildFPToUI(B: BuilderRef,
LLVMBuildFPTrunc			    pub fn LLVMBuildFPTrunc(B: BuilderRef,
LLVMBuildFRem			    pub fn LLVMBuildFRem(B: BuilderRef,
LLVMBuildFSub			    pub fn LLVMBuildFSub(B: BuilderRef,
LLVMBuildFree			    pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;
LLVMBuildGEP			    pub fn LLVMBuildGEP(B: BuilderRef,
LLVMBuildGlobalString			    pub fn LLVMBuildGlobalString(B: BuilderRef,
LLVMBuildGlobalStringPtr			    pub fn LLVMBuildGlobalStringPtr(B: BuilderRef,
LLVMBuildICmp			    pub fn LLVMBuildICmp(B: BuilderRef,
LLVMBuildInBoundsGEP			    pub fn LLVMBuildInBoundsGEP(B: BuilderRef,
LLVMBuildIndirectBr			    pub fn LLVMBuildIndirectBr(B: BuilderRef, Addr: ValueRef, NumDests: c_uint) -> ValueRef;
LLVMBuildInsertElement			    pub fn LLVMBuildInsertElement(B: BuilderRef,
LLVMBuildInsertValue			    pub fn LLVMBuildInsertValue(B: BuilderRef,
LLVMBuildIntToPtr			    pub fn LLVMBuildIntToPtr(B: BuilderRef,
LLVMBuildIsNotNull			    pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildIsNull			    pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildLShr			    pub fn LLVMBuildLShr(B: BuilderRef,
LLVMBuildLoad			    pub fn LLVMBuildLoad(B: BuilderRef, PointerVal: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildMul			    pub fn LLVMBuildMul(B: BuilderRef,
LLVMBuildNSWAdd			    pub fn LLVMBuildNSWAdd(B: BuilderRef,
LLVMBuildNSWMul			    pub fn LLVMBuildNSWMul(B: BuilderRef,
LLVMBuildNSWNeg			    pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildNSWSub			    pub fn LLVMBuildNSWSub(B: BuilderRef,
LLVMBuildNUWAdd			    pub fn LLVMBuildNUWAdd(B: BuilderRef,
LLVMBuildNUWMul			    pub fn LLVMBuildNUWMul(B: BuilderRef,
LLVMBuildNUWNeg			    pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildNUWSub			    pub fn LLVMBuildNUWSub(B: BuilderRef,
LLVMBuildNeg			    pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildNot			    pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;
LLVMBuildOr			    pub fn LLVMBuildOr(B: BuilderRef,
LLVMBuildPhi			    pub fn LLVMBuildPhi(B: BuilderRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;
LLVMBuildPointerCast			    pub fn LLVMBuildPointerCast(B: BuilderRef,
LLVMBuildPtrDiff			    pub fn LLVMBuildPtrDiff(B: BuilderRef,
LLVMBuildPtrToInt			    pub fn LLVMBuildPtrToInt(B: BuilderRef,
LLVMBuildResume			    pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;
LLVMBuildRet			    pub fn LLVMBuildRet(B: BuilderRef, V: ValueRef) -> ValueRef;
LLVMBuildRetVoid			    pub fn LLVMBuildRetVoid(B: BuilderRef) -> ValueRef;
LLVMBuildSDiv			    pub fn LLVMBuildSDiv(B: BuilderRef,
LLVMBuildSExt			    pub fn LLVMBuildSExt(B: BuilderRef,
LLVMBuildSExtOrBitCast			    pub fn LLVMBuildSExtOrBitCast(B: BuilderRef,
LLVMBuildSIToFP			    pub fn LLVMBuildSIToFP(B: BuilderRef,
LLVMBuildSRem			    pub fn LLVMBuildSRem(B: BuilderRef,
LLVMBuildSelect			    pub fn LLVMBuildSelect(B: BuilderRef,
LLVMBuildShl			    pub fn LLVMBuildShl(B: BuilderRef,
LLVMBuildShuffleVector			    pub fn LLVMBuildShuffleVector(B: BuilderRef,
LLVMBuildStore			    pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef) -> ValueRef;
LLVMBuildStructGEP			    pub fn LLVMBuildStructGEP(B: BuilderRef,
LLVMBuildSub			    pub fn LLVMBuildSub(B: BuilderRef,
LLVMBuildSwitch			    pub fn LLVMBuildSwitch(B: BuilderRef,
LLVMBuildTrunc			    pub fn LLVMBuildTrunc(B: BuilderRef,
LLVMBuildTruncOrBitCast			    pub fn LLVMBuildTruncOrBitCast(B: BuilderRef,
LLVMBuildUDiv			    pub fn LLVMBuildUDiv(B: BuilderRef,
LLVMBuildUIToFP			    pub fn LLVMBuildUIToFP(B: BuilderRef,
LLVMBuildURem			    pub fn LLVMBuildURem(B: BuilderRef,
LLVMBuildUnreachable			    pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;
LLVMBuildVAArg			    pub fn LLVMBuildVAArg(B: BuilderRef,
LLVMBuildXor			    pub fn LLVMBuildXor(B: BuilderRef,
LLVMBuildZExt			    pub fn LLVMBuildZExt(B: BuilderRef,
LLVMBuildZExtOrBitCast			    pub fn LLVMBuildZExtOrBitCast(B: BuilderRef,
LLVMCloneModule			    pub fn LLVMCloneModule(M: ModuleRef) -> ModuleRef;
LLVMConstAShr			    pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstAdd			    pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstAnd			    pub fn LLVMConstAnd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstArray			    pub fn LLVMConstArray(ElementTy: TypeRef,
LLVMConstBitCast			    pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstExtractValue			    pub fn LLVMConstExtractValue(AggConstant: ValueRef,
LLVMConstFAdd			    pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstFCmp			    pub fn LLVMConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;
LLVMConstFDiv			    pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstFMul			    pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstFNeg			    pub fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstFPCast			    pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstFPToSI			    pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstFPToUI			    pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstFRem			    pub fn LLVMConstFRem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstFSub			    pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstICmp			    pub fn LLVMConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;
LLVMConstInlineAsm			    pub fn LLVMConstInlineAsm(Ty: TypeRef,
LLVMConstInt			    pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) -> ValueRef;
LLVMConstIntCast			    pub fn LLVMConstIntCast(ConstantVal: ValueRef, ToType: TypeRef, isSigned: Bool) -> ValueRef;
LLVMConstIntGetSExtValue			    pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;
LLVMConstIntGetZExtValue			    pub fn LLVMConstIntGetZExtValue(ConstantVal: ValueRef) -> c_ulonglong;
LLVMConstIntOfArbitraryPrecision			    pub fn LLVMConstIntOfArbitraryPrecision(IntTy: TypeRef, Wn: c_uint, Ws: *const u64) -> ValueRef;
LLVMConstIntToPtr			    pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstLShr			    pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstMul			    pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstNamedStruct			    pub fn LLVMConstNamedStruct(S: TypeRef,
LLVMConstNeg			    pub fn LLVMConstNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNot			    pub fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNull			    pub fn LLVMConstNull(Ty: TypeRef) -> ValueRef;
LLVMConstOr			    pub fn LLVMConstOr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstPointerCast			    pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstPtrToInt			    pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstReal			    pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;
LLVMConstSDiv			    pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstSIToFP			    pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstSRem			    pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstShl			    pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstStringInContext			    pub fn LLVMConstStringInContext(C: ContextRef,
LLVMConstStructInContext			    pub fn LLVMConstStructInContext(C: ContextRef,
LLVMConstSub			    pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstTrunc			    pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstUDiv			    pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstUIToFP			    pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMConstURem			    pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstVector			    pub fn LLVMConstVector(ScalarConstantVals: *const ValueRef, Size: c_uint) -> ValueRef;
LLVMConstXor			    pub fn LLVMConstXor(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;
LLVMConstZExt			    pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;
LLVMContextCreate			    pub fn LLVMContextCreate() -> ContextRef;
LLVMContextDispose			    pub fn LLVMContextDispose(C: ContextRef);
LLVMContextSetDiagnosticHandler			    pub fn LLVMContextSetDiagnosticHandler(C: ContextRef,
LLVMCountParamTypes			    pub fn LLVMCountParamTypes(FunctionTy: TypeRef) -> c_uint;
LLVMCountParams			    pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;
LLVMCountStructElementTypes			    pub fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;
LLVMCreateBuilderInContext			    pub fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;
LLVMCreateFunctionPassManagerForModule			    pub fn LLVMCreateFunctionPassManagerForModule(M: ModuleRef) -> PassManagerRef;
LLVMCreateObjectFile			    pub fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;
LLVMCreatePassManager			    pub fn LLVMCreatePassManager() -> PassManagerRef;
LLVMCreateTargetData			    pub fn LLVMCreateTargetData(StringRep: *const c_char) -> TargetDataRef;
LLVMDeleteBasicBlock			    pub fn LLVMDeleteBasicBlock(BB: BasicBlockRef);
LLVMDeleteGlobal			    pub fn LLVMDeleteGlobal(GlobalVar: ValueRef);
LLVMDisposeBuilder			    pub fn LLVMDisposeBuilder(Builder: BuilderRef);
LLVMDisposeModule			    pub fn LLVMDisposeModule(M: ModuleRef);
LLVMDisposeObjectFile			    pub fn LLVMDisposeObjectFile(ObjFile: ObjectFileRef);
LLVMDisposePassManager			    pub fn LLVMDisposePassManager(PM: PassManagerRef);
LLVMDisposeSectionIterator			    pub fn LLVMDisposeSectionIterator(SI: SectionIteratorRef);
LLVMDisposeTargetData			    pub fn LLVMDisposeTargetData(TD: TargetDataRef);
LLVMDoubleTypeInContext			    pub fn LLVMDoubleTypeInContext(C: ContextRef) -> TypeRef;
LLVMDumpModule			    pub fn LLVMDumpModule(M: ModuleRef);
LLVMFloatTypeInContext			    pub fn LLVMFloatTypeInContext(C: ContextRef) -> TypeRef;
LLVMFunctionType			    pub fn LLVMFunctionType(ReturnType: TypeRef,
LLVMGetAlignment			    pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;
LLVMGetArrayLength			    pub fn LLVMGetArrayLength(ArrayTy: TypeRef) -> c_uint;
LLVMGetBasicBlockParent			    pub fn LLVMGetBasicBlockParent(BB: BasicBlockRef) -> ValueRef;
LLVMGetCurrentDebugLocation			    pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;
LLVMGetDataLayout			    pub fn LLVMGetDataLayout(M: ModuleRef) -> *const c_char;
LLVMGetElementType			    pub fn LLVMGetElementType(Ty: TypeRef) -> TypeRef;
LLVMGetFirstBasicBlock			    pub fn LLVMGetFirstBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetFirstFunction			    pub fn LLVMGetFirstFunction(M: ModuleRef) -> ValueRef;
LLVMGetFirstGlobal			    pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;
LLVMGetFirstInstruction			    pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;
LLVMGetFirstUse			    pub fn LLVMGetFirstUse(Val: ValueRef) -> UseRef;
LLVMGetGlobalParent			    pub fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;
LLVMGetInitializer			    pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;
LLVMGetInsertBlock			    pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;
LLVMGetInstructionParent			    pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;
LLVMGetIntTypeWidth			    pub fn LLVMGetIntTypeWidth(IntegerTy: TypeRef) -> c_uint;
LLVMGetMDKindIDInContext			    pub fn LLVMGetMDKindIDInContext(C: ContextRef, Name: *const c_char, SLen: c_uint) -> c_uint;
LLVMGetModuleContext			    pub fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;
LLVMGetNamedFunction			    pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *const c_char) -> ValueRef;
LLVMGetNamedGlobal			    pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *const c_char) -> ValueRef;
LLVMGetNextFunction			    pub fn LLVMGetNextFunction(Fn: ValueRef) -> ValueRef;
LLVMGetNextGlobal			    pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;
LLVMGetNextUse			    pub fn LLVMGetNextUse(U: UseRef) -> UseRef;
LLVMGetOperand			    pub fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;
LLVMGetParam			    pub fn LLVMGetParam(Fn: ValueRef, Index: c_uint) -> ValueRef;
LLVMGetParamTypes			    pub fn LLVMGetParamTypes(FunctionTy: TypeRef, Dest: *mut TypeRef);
LLVMGetReturnType			    pub fn LLVMGetReturnType(FunctionTy: TypeRef) -> TypeRef;
LLVMGetSection			    pub fn LLVMGetSection(Global: ValueRef) -> *const c_char;
LLVMGetSectionContents			    pub fn LLVMGetSectionContents(SI: SectionIteratorRef) -> *const c_char;
LLVMGetSectionSize			    pub fn LLVMGetSectionSize(SI: SectionIteratorRef) -> c_ulonglong;
LLVMGetSections			    pub fn LLVMGetSections(ObjFile: ObjectFileRef) -> SectionIteratorRef;
LLVMGetStructElementTypes			    pub fn LLVMGetStructElementTypes(StructTy: TypeRef, Dest: *mut TypeRef);
LLVMGetUndef			    pub fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;
LLVMGetUser			    pub fn LLVMGetUser(U: UseRef) -> ValueRef;
LLVMGetValueName			    pub fn LLVMGetValueName(Val: ValueRef) -> *const c_char;
LLVMGetVectorSize			    pub fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;
LLVMInitializePasses			    pub fn LLVMInitializePasses();
LLVMInstructionEraseFromParent			    pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);
LLVMInt16TypeInContext			    pub fn LLVMInt16TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt1TypeInContext			    pub fn LLVMInt1TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt32TypeInContext			    pub fn LLVMInt32TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt64TypeInContext			    pub fn LLVMInt64TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt8TypeInContext			    pub fn LLVMInt8TypeInContext(C: ContextRef) -> TypeRef;
LLVMIntTypeInContext			    pub fn LLVMIntTypeInContext(C: ContextRef, NumBits: c_uint) -> TypeRef;
LLVMIsAConstantInt			    pub fn LLVMIsAConstantInt(value_ref: ValueRef) -> ValueRef;
LLVMIsAGlobalVariable			    pub fn LLVMIsAGlobalVariable(GlobalVar: ValueRef) -> ValueRef;
LLVMIsAStoreInst			    pub fn LLVMIsAStoreInst(Inst: ValueRef) -> ValueRef;
LLVMIsATerminatorInst			    pub fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;
LLVMIsDeclaration			    pub fn LLVMIsDeclaration(Global: ValueRef) -> Bool;
LLVMIsGlobalConstant			    pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;
LLVMIsNull			    pub fn LLVMIsNull(Val: ValueRef) -> Bool;
LLVMIsPackedStruct			    pub fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;
LLVMIsSectionIteratorAtEnd			    pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef, SI: SectionIteratorRef) -> Bool;
LLVMIsUndef			    pub fn LLVMIsUndef(Val: ValueRef) -> Bool;
LLVMMDNodeInContext			    pub fn LLVMMDNodeInContext(C: ContextRef, Vals: *const ValueRef, Count: c_uint) -> ValueRef;
LLVMModuleCreateWithNameInContext			    pub fn LLVMModuleCreateWithNameInContext(ModuleID: *const c_char, C: ContextRef) -> ModuleRef;
LLVMMoveToNextSection			    pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);
LLVMOffsetOfElement			    pub fn LLVMOffsetOfElement(TD: TargetDataRef,
LLVMPassManagerBuilderCreate			    pub fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;
LLVMPassManagerBuilderDispose			    pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);
LLVMPassManagerBuilderPopulateFunctionPassManager			    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderPopulateLTOPassManager			    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderPopulateModulePassManager			    pub fn LLVMPassManagerBuilderPopulateModulePassManager(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderSetDisableUnrollLoops			    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: PassManagerBuilderRef, Value: Bool);
LLVMPassManagerBuilderSetSizeLevel			    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef, Value: Bool);
LLVMPassManagerBuilderUseInlinerWithThreshold			    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB: PassManagerBuilderRef,
LLVMPointerType			    pub fn LLVMPointerType(ElementType: TypeRef, AddressSpace: c_uint) -> TypeRef;
LLVMPositionBuilder			    pub fn LLVMPositionBuilder(Builder: BuilderRef, Block: BasicBlockRef, Instr: ValueRef);
LLVMPositionBuilderAtEnd			    pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef, Block: BasicBlockRef);
LLVMPositionBuilderBefore			    pub fn LLVMPositionBuilderBefore(Builder: BuilderRef, Instr: ValueRef);
LLVMPreferredAlignmentOfType			    pub fn LLVMPreferredAlignmentOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;
LLVMReplaceAllUsesWith			    pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);
LLVMRunPassManager			    pub fn LLVMRunPassManager(PM: PassManagerRef, M: ModuleRef) -> Bool;
LLVMRustAddAlwaysInlinePass			    pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef, AddLifetimes: bool);
LLVMRustAddAnalysisPasses			    pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef, PM: PassManagerRef, M: ModuleRef);
LLVMRustAddBuilderLibraryInfo			    pub fn LLVMRustAddBuilderLibraryInfo(PMB: PassManagerBuilderRef,
LLVMRustAddCallSiteAttribute			    pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef, index: c_uint, attr: Attribute);
LLVMRustAddDereferenceableAttr			    pub fn LLVMRustAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: u64);
LLVMRustAddDereferenceableCallSiteAttr			    pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: ValueRef, index: c_uint, bytes: u64);
LLVMRustAddFunctionAttrStringValue			    pub fn LLVMRustAddFunctionAttrStringValue(Fn: ValueRef,
LLVMRustAddFunctionAttribute			    pub fn LLVMRustAddFunctionAttribute(Fn: ValueRef, index: c_uint, attr: Attribute);
LLVMRustAddHandler			    pub fn LLVMRustAddHandler(CatchSwitch: ValueRef, Handler: BasicBlockRef);
LLVMRustAddLibraryInfo			    pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef,
LLVMRustAddModuleFlag			    pub fn LLVMRustAddModuleFlag(M: ModuleRef, name: *const c_char, value: u32);
LLVMRustAddPass			    pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: PassRef);
LLVMRustAppendModuleInlineAsm			    pub fn LLVMRustAppendModuleInlineAsm(M: ModuleRef, Asm: *const c_char);
LLVMRustArchiveChildData			    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef, size: *mut size_t) -> *const c_char;
LLVMRustArchiveChildFree			    pub fn LLVMRustArchiveChildFree(ACR: ArchiveChildRef);
LLVMRustArchiveChildName			    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef, size: *mut size_t) -> *const c_char;
LLVMRustArchiveIteratorFree			    pub fn LLVMRustArchiveIteratorFree(AIR: ArchiveIteratorRef);
LLVMRustArchiveIteratorNew			    pub fn LLVMRustArchiveIteratorNew(AR: ArchiveRef) -> ArchiveIteratorRef;
LLVMRustArchiveIteratorNext			    pub fn LLVMRustArchiveIteratorNext(AIR: ArchiveIteratorRef) -> ArchiveChildRef;
LLVMRustArchiveMemberFree			    pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);
LLVMRustArchiveMemberNew			    pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,
LLVMRustArrayType			    pub fn LLVMRustArrayType(ElementType: TypeRef, ElementCount: u64) -> TypeRef;
LLVMRustBuildAtomicCmpXchg			    pub fn LLVMRustBuildAtomicCmpXchg(B: BuilderRef,
LLVMRustBuildAtomicFence			    pub fn LLVMRustBuildAtomicFence(B: BuilderRef,
LLVMRustBuildAtomicLoad			    pub fn LLVMRustBuildAtomicLoad(B: BuilderRef,
LLVMRustBuildAtomicStore			    pub fn LLVMRustBuildAtomicStore(B: BuilderRef,
LLVMRustBuildCall			    pub fn LLVMRustBuildCall(B: BuilderRef,
LLVMRustBuildCatchPad			    pub fn LLVMRustBuildCatchPad(B: BuilderRef,
LLVMRustBuildCatchRet			    pub fn LLVMRustBuildCatchRet(B: BuilderRef, Pad: ValueRef, BB: BasicBlockRef) -> ValueRef;
LLVMRustBuildCatchSwitch			    pub fn LLVMRustBuildCatchSwitch(Builder: BuilderRef,
LLVMRustBuildCleanupPad			    pub fn LLVMRustBuildCleanupPad(B: BuilderRef,
LLVMRustBuildCleanupRet			    pub fn LLVMRustBuildCleanupRet(B: BuilderRef,
LLVMRustBuildIntCast			    pub fn LLVMRustBuildIntCast(B: BuilderRef,
LLVMRustBuildInvoke			    pub fn LLVMRustBuildInvoke(B: BuilderRef,
LLVMRustBuildLandingPad			    pub fn LLVMRustBuildLandingPad(B: BuilderRef,
LLVMRustBuildOperandBundleDef			    pub fn LLVMRustBuildOperandBundleDef(Name: *const c_char,
LLVMRustConfigurePassManagerBuilder			    pub fn LLVMRustConfigurePassManagerBuilder(PMB: PassManagerBuilderRef,
LLVMRustConstInt128Get			    pub fn LLVMRustConstInt128Get(ConstantVal: ValueRef, SExt: bool,
LLVMRustCreateMemoryBufferWithContentsOfFile			    pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *const c_char) -> MemoryBufferRef;
LLVMRustCreateTargetMachine			    pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,
LLVMRustDIBuilderCreate			    pub fn LLVMRustDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;
LLVMRustDIBuilderCreateArrayType			    pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateBasicType			    pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateCompileUnit			    pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateDebugLocation			    pub fn LLVMRustDIBuilderCreateDebugLocation(Context: ContextRef,
LLVMRustDIBuilderCreateEnumerationType			    pub fn LLVMRustDIBuilderCreateEnumerationType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateEnumerator			    pub fn LLVMRustDIBuilderCreateEnumerator(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateFile			    pub fn LLVMRustDIBuilderCreateFile(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateFunction			    pub fn LLVMRustDIBuilderCreateFunction(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateLexicalBlock			    pub fn LLVMRustDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateLexicalBlockFile			    pub fn LLVMRustDIBuilderCreateLexicalBlockFile(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateMemberType			    pub fn LLVMRustDIBuilderCreateMemberType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateNameSpace			    pub fn LLVMRustDIBuilderCreateNameSpace(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateOpDeref			    pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;
LLVMRustDIBuilderCreateOpPlus			    pub fn LLVMRustDIBuilderCreateOpPlus() -> i64;
LLVMRustDIBuilderCreatePointerType			    pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateStaticVariable			    pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateStructType			    pub fn LLVMRustDIBuilderCreateStructType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateSubroutineType			    pub fn LLVMRustDIBuilderCreateSubroutineType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateTemplateTypeParameter			    pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateUnionType			    pub fn LLVMRustDIBuilderCreateUnionType(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateVariable			    pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,
LLVMRustDIBuilderCreateVectorType			    pub fn LLVMRustDIBuilderCreateVectorType(Builder: DIBuilderRef,
LLVMRustDIBuilderDispose			    pub fn LLVMRustDIBuilderDispose(Builder: DIBuilderRef);
LLVMRustDIBuilderFinalize			    pub fn LLVMRustDIBuilderFinalize(Builder: DIBuilderRef);
LLVMRustDIBuilderGetOrCreateArray			    pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: DIBuilderRef,
LLVMRustDIBuilderGetOrCreateSubrange			    pub fn LLVMRustDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,
LLVMRustDIBuilderInsertDeclareAtEnd			    pub fn LLVMRustDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,
LLVMRustDICompositeTypeSetTypeArray			    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: DIBuilderRef,
LLVMRustDebugMetadataVersion			    pub fn LLVMRustDebugMetadataVersion() -> u32;
LLVMRustDestroyArchive			    pub fn LLVMRustDestroyArchive(AR: ArchiveRef);
LLVMRustDisposeTargetMachine			    pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);
LLVMRustFindAndCreatePass			    pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> PassRef;
LLVMRustFreeOperandBundleDef			    pub fn LLVMRustFreeOperandBundleDef(Bundle: OperandBundleDefRef);
LLVMRustGetDiagInfoKind			    pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;
LLVMRustGetLastError			    pub fn LLVMRustGetLastError() -> *const c_char;
LLVMRustGetLinkage			    pub fn LLVMRustGetLinkage(Global: ValueRef) -> Linkage;
LLVMRustGetModuleDataLayout			    pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;
LLVMRustGetNamedValue			    pub fn LLVMRustGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;
LLVMRustGetOrInsertFunction			    pub fn LLVMRustGetOrInsertFunction(M: ModuleRef,
LLVMRustGetOrInsertGlobal			    pub fn LLVMRustGetOrInsertGlobal(M: ModuleRef, Name: *const c_char, T: TypeRef) -> ValueRef;
LLVMRustGetSectionName			    pub fn LLVMRustGetSectionName(SI: SectionIteratorRef, data: *mut *const c_char) -> size_t;
LLVMRustGetTypeKind			    pub fn LLVMRustGetTypeKind(Ty: TypeRef) -> TypeKind;
LLVMRustGetValueContext			    pub fn LLVMRustGetValueContext(V: ValueRef) -> ContextRef;
LLVMRustGetVisibility			    pub fn LLVMRustGetVisibility(Global: ValueRef) -> Visibility;
LLVMRustHasFeature			    pub fn LLVMRustHasFeature(T: TargetMachineRef, s: *const c_char) -> bool;
LLVMRustInlineAsm			    pub fn LLVMRustInlineAsm(Ty: TypeRef,
LLVMRustLinkInExternalBitcode			    pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef, bc: *const c_char, len: size_t) -> bool;
LLVMRustMarkAllFunctionsNounwind			    pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);
LLVMRustMetadataTypeInContext			    pub fn LLVMRustMetadataTypeInContext(C: ContextRef) -> TypeRef;
LLVMRustOpenArchive			    pub fn LLVMRustOpenArchive(path: *const c_char) -> ArchiveRef;
LLVMRustPassKind			    pub fn LLVMRustPassKind(Pass: PassRef) -> PassKind;
LLVMRustPositionBuilderAtStart			    pub fn LLVMRustPositionBuilderAtStart(B: BuilderRef, BB: BasicBlockRef);
LLVMRustPrintModule			    pub fn LLVMRustPrintModule(PM: PassManagerRef, M: ModuleRef, Output: *const c_char);
LLVMRustPrintPassTimings			    pub fn LLVMRustPrintPassTimings();
LLVMRustPrintPasses			    pub fn LLVMRustPrintPasses();
LLVMRustPrintTargetCPUs			    pub fn LLVMRustPrintTargetCPUs(T: TargetMachineRef);
LLVMRustPrintTargetFeatures			    pub fn LLVMRustPrintTargetFeatures(T: TargetMachineRef);
LLVMRustRemoveFunctionAttributes			    pub fn LLVMRustRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: Attribute);
LLVMRustResult			pub enum LLVMRustResult 
LLVMRustResult			impl LLVMRustResult 
LLVMRustRunFunctionPassManager			    pub fn LLVMRustRunFunctionPassManager(PM: PassManagerRef, M: ModuleRef);
LLVMRustRunRestrictionPass			    pub fn LLVMRustRunRestrictionPass(M: ModuleRef, syms: *const *const c_char, len: size_t);
LLVMRustSetComdat			    pub fn LLVMRustSetComdat(M: ModuleRef, V: ValueRef, Name: *const c_char);
LLVMRustSetDataLayoutFromTargetMachine			    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef, TM: TargetMachineRef);
LLVMRustSetDebug			    pub fn LLVMRustSetDebug(Enabled: c_int);
LLVMRustSetHasUnsafeAlgebra			    pub fn LLVMRustSetHasUnsafeAlgebra(Instr: ValueRef);
LLVMRustSetInlineAsmDiagnosticHandler			    pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: ContextRef,
LLVMRustSetLLVMOptions			    pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);
LLVMRustSetLinkage			    pub fn LLVMRustSetLinkage(Global: ValueRef, RustLinkage: Linkage);
LLVMRustSetModulePIELevel			    pub fn LLVMRustSetModulePIELevel(M: ModuleRef);
LLVMRustSetNormalizedTarget			    pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *const c_char);
LLVMRustSetVisibility			    pub fn LLVMRustSetVisibility(Global: ValueRef, Viz: Visibility);
LLVMRustUnpackInlineAsmDiagnostic			    pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,
LLVMRustUnpackOptimizationDiagnostic			    pub fn LLVMRustUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,
LLVMRustUnsetComdat			    pub fn LLVMRustUnsetComdat(V: ValueRef);
LLVMRustVersionMajor			    pub fn LLVMRustVersionMajor() -> u32;
LLVMRustVersionMinor			    pub fn LLVMRustVersionMinor() -> u32;
LLVMRustWriteArchive			    pub fn LLVMRustWriteArchive(Dst: *const c_char,
LLVMRustWriteDebugLocToString			    pub fn LLVMRustWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);
LLVMRustWriteDiagnosticInfoToString			    pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);
LLVMRustWriteOutputFile			    pub fn LLVMRustWriteOutputFile(T: TargetMachineRef,
LLVMRustWriteSMDiagnosticToString			    pub fn LLVMRustWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);
LLVMRustWriteTwineToString			    pub fn LLVMRustWriteTwineToString(T: TwineRef, s: RustStringRef);
LLVMRustWriteTypeToString			    pub fn LLVMRustWriteTypeToString(Type: TypeRef, s: RustStringRef);
LLVMRustWriteValueToString			    pub fn LLVMRustWriteValueToString(value_ref: ValueRef, s: RustStringRef);
LLVMSetAlignment			    pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);
LLVMSetCleanup			    pub fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);
LLVMSetCurrentDebugLocation			    pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);
LLVMSetDLLStorageClass			    pub fn LLVMSetDLLStorageClass(V: ValueRef, C: DLLStorageClass);
LLVMSetDataLayout			    pub fn LLVMSetDataLayout(M: ModuleRef, Triple: *const c_char);
LLVMSetFunctionCallConv			    pub fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: c_uint);
LLVMSetGlobalConstant			    pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);
LLVMSetInitializer			    pub fn LLVMSetInitializer(GlobalVar: ValueRef, ConstantVal: ValueRef);
LLVMSetInstDebugLocation			    pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);
LLVMSetInstructionCallConv			    pub fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: c_uint);
LLVMSetMetadata			    pub fn LLVMSetMetadata(Val: ValueRef, KindID: c_uint, Node: ValueRef);
LLVMSetModuleInlineAsm			    pub fn LLVMSetModuleInlineAsm(M: ModuleRef, Asm: *const c_char);
LLVMSetPersonalityFn			    pub fn LLVMSetPersonalityFn(Func: ValueRef, Pers: ValueRef);
LLVMSetSection			    pub fn LLVMSetSection(Global: ValueRef, Section: *const c_char);
LLVMSetThreadLocal			    pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);
LLVMSetUnnamedAddr			    pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);
LLVMSetValueName			    pub fn LLVMSetValueName(Val: ValueRef, Name: *const c_char);
LLVMSetVolatile			    pub fn LLVMSetVolatile(MemoryAccessInst: ValueRef, volatile: Bool);
LLVMSizeOf			    pub fn LLVMSizeOf(Ty: TypeRef) -> ValueRef;
LLVMSizeOfTypeInBits			    pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;
LLVMStartMultithreaded			    pub fn LLVMStartMultithreaded() -> Bool;
LLVMStructCreateNamed			    pub fn LLVMStructCreateNamed(C: ContextRef, Name: *const c_char) -> TypeRef;
LLVMStructSetBody			    pub fn LLVMStructSetBody(StructTy: TypeRef,
LLVMStructTypeInContext			    pub fn LLVMStructTypeInContext(C: ContextRef,
LLVMTypeOf			    pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;
LLVMVectorType			    pub fn LLVMVectorType(ElementType: TypeRef, ElementCount: c_uint) -> TypeRef;
LLVMVoidTypeInContext			    pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;
LLVMWriteBitcodeToFile			    pub fn LLVMWriteBitcodeToFile(M: ModuleRef, Path: *const c_char) -> c_int;
Linkage			pub enum Linkage 
MemoryBuffer_opaque			pub enum MemoryBuffer_opaque {}
MetadataType			pub enum MetadataType 
Metadata_opaque			pub enum Metadata_opaque {}
Module_opaque			pub enum Module_opaque {}
ObjectFile			impl ObjectFile 
ObjectFile			pub struct ObjectFile 
ObjectFile_opaque			pub enum ObjectFile_opaque {}
OperandBundleDef			impl OperandBundleDef 
OperandBundleDef			pub struct OperandBundleDef 
OperandBundleDef_opaque			pub enum OperandBundleDef_opaque {}
OptimizationDiagnostic			impl OptimizationDiagnostic 
OptimizationDiagnostic			pub struct OptimizationDiagnostic 
OptimizationDiagnosticKind			impl OptimizationDiagnosticKind 
OptimizationDiagnosticKind			pub enum OptimizationDiagnosticKind 
PassKind			pub enum PassKind 
PassManagerBuilder_opaque			pub enum PassManagerBuilder_opaque {}
PassManager_opaque			pub enum PassManager_opaque {}
Pass_opaque			pub enum Pass_opaque {}
RealPredicate			pub enum RealPredicate 
RelocMode			pub enum RelocMode 
ReturnValue			    pub fn ReturnValue() -> Self 
RustArchiveMember_opaque			pub enum RustArchiveMember_opaque {}
RustString_opaque			pub enum RustString_opaque {}
SMDiagnostic_opaque			pub enum SMDiagnostic_opaque {}
SectionIter			pub struct SectionIter 
SectionIterator_opaque			pub enum SectionIterator_opaque {}
SetFunctionCallConv			pub fn SetFunctionCallConv(fn_: ValueRef, cc: CallConv) 
SetInstructionCallConv			pub fn SetInstructionCallConv(instr: ValueRef, cc: CallConv) 
SetUniqueComdat			pub fn SetUniqueComdat(llmod: ModuleRef, val: ValueRef) 
SetUnnamedAddr			pub fn SetUnnamedAddr(global: ValueRef, unnamed: bool) 
SynchronizationScope			pub enum SynchronizationScope 
TargetData			pub struct TargetData 
TargetData_opaque			pub enum TargetData_opaque {}
TargetMachine_opaque			pub enum TargetMachine_opaque {}
Twine_opaque			pub enum Twine_opaque {}
TypeKind			pub enum TypeKind 
Type_opaque			pub enum Type_opaque {}
UnsetComdat			pub fn UnsetComdat(val: ValueRef) 
Use_opaque			pub enum Use_opaque {}
Value_opaque			pub enum Value_opaque {}
Visibility			pub enum Visibility 
apply_callsite			    pub fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef) 
apply_llfn			    pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) 
archive_ro			pub mod archive_ro;
as_uint			    pub fn as_uint(self) -> c_uint 
build_string			pub fn build_string<F>(f: F) -> Option<String>
data			    pub fn data(&self) -> &'a [u8] 
debug_loc_to_string			pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String 
debuginfo			pub mod debuginfo 
describe			    pub fn describe(self) -> &'static str 
detect_llvm_link			fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>) 
diagnostic			pub mod diagnostic;
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
ffi			pub mod ffi;
from_str			    fn from_str(s: &str) -> Result<Self, Self::Err> 
get_param			pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef 
get_params			pub fn get_params(llfn: ValueRef) -> Vec<ValueRef> 
init			            fn init() { }
init			            fn init() 
initialize_available_targets			pub fn initialize_available_targets() 
into_result			    pub fn into_result(self) -> Result<(), ()> 
iter			    pub fn iter(&self) -> Iter 
last_error			pub fn last_error() -> Option<String> 
main			fn main() 
mk_section_iter			pub fn mk_section_iter(llof: ObjectFileRef) -> SectionIter 
mk_target_data			pub fn mk_target_data(string_rep: &str) -> TargetData 
name			    pub fn name(&self) -> Option<&'a str> 
new			    pub fn new(llmb: MemoryBufferRef) -> Option<ObjectFile> 
new			    pub fn new(name: &str, vals: &[ValueRef]) -> OperandBundleDef 
next			    fn next(&mut self) -> Option<Result<Child<'a>, String>> 
open			    pub fn open(dst: &Path) -> Option<ArchiveRO> 
path2cstr			        fn path2cstr(p: &Path) -> CString 
raw			    pub fn raw(&self) -> ::ArchiveChildRef 
raw			    pub fn raw(&self) -> ArchiveRef 
raw			    pub fn raw(&self) -> OperandBundleDefRef 
set_thread_local			pub fn set_thread_local(global: ValueRef, is_thread_local: bool) 
toggle_llfn			    pub fn toggle_llfn(&self, idx: AttributePlace, llfn: ValueRef, set: bool) 
twine_to_string			pub unsafe fn twine_to_string(tr: TwineRef) -> String 
unapply_llfn			    pub fn unapply_llfn(&self, idx: AttributePlace, llfn: ValueRef) 
unpack			    pub unsafe fn unpack(di: DiagnosticInfoRef) -> Diagnostic 
unpack			    unsafe fn unpack(di: DiagnosticInfoRef) -> InlineAsmDiagnostic 
unpack			    unsafe fn unpack(kind: OptimizationDiagnosticKind,
