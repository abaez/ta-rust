Addition			enum Addition 
Alignment			impl Alignment 
Alignment			pub enum Alignment 
Arch			pub enum Arch 
ArchiveBuilder			impl<'a> ArchiveBuilder<'a> 
ArchiveBuilder			pub struct ArchiveBuilder<'a> 
ArchiveConfig			pub struct ArchiveConfig<'a> 
ArgAttribute			impl ArgAttribute 
ArgAttributes			impl ArgAttributes 
ArgAttributes			pub struct ArgAttributes 
ArgKind			enum ArgKind 
ArgType			impl<'a, 'tcx> ArgType<'tcx> 
ArgType			pub struct ArgType<'tcx> 
AsI64			pub trait AsI64 { fn as_i64(self) -> i64; }
AsI64 for i32			impl AsI64 for i32 { fn as_i64(self) -> i64 { self as i64 }}
AsI64 for i64			impl AsI64 for i64 { fn as_i64(self) -> i64 { self as i64 }}
AsI64 for isize			impl AsI64 for isize { fn as_i64(self) -> i64 { self as i64 }}
AsU64			pub trait AsU64 { fn as_u64(self) -> u64; }
AsU64 for u32			impl AsU64 for u32  { fn as_u64(self) -> u64 { self as u64 }}
AsU64 for u64			impl AsU64 for u64  { fn as_u64(self) -> u64 { self as u64 }}
AsU64 for usize			impl AsU64 for usize { fn as_u64(self) -> u64 { self as u64 }}
AssertModuleSource			impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> 
AssertModuleSource			struct AssertModuleSource<'a, 'tcx: 'a> 
Base			enum Base 
Builder			impl<'a, 'tcx> Builder<'a, 'tcx> 
Builder			pub struct Builder<'a, 'tcx: 'a> 
C_array			pub fn C_array(ty: Type, elts: &[ValueRef]) -> ValueRef 
C_big_integral			pub fn C_big_integral(t: Type, u: u128) -> ValueRef 
C_bool			pub fn C_bool(ccx: &CrateContext, val: bool) -> ValueRef 
C_bytes			pub fn C_bytes(cx: &CrateContext, bytes: &[u8]) -> ValueRef 
C_bytes_in_context			pub fn C_bytes_in_context(llcx: ContextRef, bytes: &[u8]) -> ValueRef 
C_cstr			pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> ValueRef 
C_floating_f64			pub fn C_floating_f64(f: f64, t: Type) -> ValueRef 
C_i32			pub fn C_i32(ccx: &CrateContext, i: i32) -> ValueRef 
C_integral			pub fn C_integral(t: Type, u: u64, sign_extend: bool) -> ValueRef 
C_named_struct			pub fn C_named_struct(t: Type, elts: &[ValueRef]) -> ValueRef 
C_nil			pub fn C_nil(ccx: &CrateContext) -> ValueRef 
C_null			pub fn C_null(t: Type) -> ValueRef 
C_str_slice			pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef 
C_struct			pub fn C_struct(cx: &CrateContext, elts: &[ValueRef], packed: bool) -> ValueRef 
C_struct_in_context			pub fn C_struct_in_context(llcx: ContextRef, elts: &[ValueRef], packed: bool) -> ValueRef 
C_u32			pub fn C_u32(ccx: &CrateContext, i: u32) -> ValueRef 
C_u64			pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef 
C_u8			pub fn C_u8(ccx: &CrateContext, i: u8) -> ValueRef 
C_uint			pub fn C_uint<I: AsU64>(ccx: &CrateContext, i: I) -> ValueRef 
C_undef			pub fn C_undef(t: Type) -> ValueRef 
C_vector			pub fn C_vector(elts: &[ValueRef]) -> ValueRef 
CastTarget			impl CastTarget 
CastTarget			pub enum CastTarget 
Class			enum Class 
CleanupKind			pub enum CleanupKind 
Clone for Funclet			impl Clone for Funclet 
CodegenContext			impl<'a> CodegenContext<'a> 
CodegenContext			struct CodegenContext<'a> 
CodegenUnit			impl<'tcx> CodegenUnit<'tcx> 
CodegenUnit			pub struct CodegenUnit<'tcx> 
Const			impl<'tcx> Const<'tcx> 
Const			pub struct Const<'tcx> 
ConstLvalue			impl<'tcx> ConstLvalue<'tcx> 
ConstLvalue			struct ConstLvalue<'tcx> 
CrateContext			impl<'a, 'tcx> CrateContext<'a, 'tcx> 
CrateContext			impl<'b, 'tcx> CrateContext<'b, 'tcx> 
CrateContext			pub struct CrateContext<'a, 'tcx: 'a> 
CrateContext			impl<'a, 'tcx> CrateContext<'a, 'tcx> 
CrateDebugContext			impl<'tcx> CrateDebugContext<'tcx> 
CrateDebugContext			pub struct CrateDebugContext<'tcx> 
CrateTranslation			pub struct CrateTranslation 
DIB			pub fn DIB(cx: &CrateContext) -> DIBuilderRef 
DefPathBasedNames			impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> 
DefPathBasedNames			pub struct DefPathBasedNames<'a, 'tcx: 'a> 
DepGraphSafe for CrateContext			impl<'a, 'tcx> DepGraphSafe for CrateContext<'a, 'tcx> 
Diagnostic			struct Diagnostic 
Disposition			enum Disposition { Reused, Translated }
Drop for Builder			impl<'a, 'tcx> Drop for Builder<'a, 'tcx> 
Drop for OwnedKey			impl Drop for OwnedKey 
Drop for StatRecorder			impl<'a, 'tcx> Drop for StatRecorder<'a, 'tcx> 
Drop for TypeOfDepthLock			impl<'a, 'tcx> Drop for TypeOfDepthLock<'a, 'tcx> 
EmLinker			pub struct EmLinker<'a> 
Emitter for SharedEmitter			impl Emitter for SharedEmitter 
EnumDiscriminantInfo			enum EnumDiscriminantInfo 
EnumMemberDescriptionFactory			impl<'tcx> EnumMemberDescriptionFactory<'tcx> 
EnumMemberDescriptionFactory			struct EnumMemberDescriptionFactory<'tcx> 
ExportedSymbols			impl ExportedSymbols 
ExportedSymbols			pub struct ExportedSymbols 
Fields			        enum Fields<'a> 
Flavor			pub enum Flavor 
FnType			impl<'a, 'tcx> FnType<'tcx> 
FnType			pub struct FnType<'tcx> 
From for CastTarget			impl From<Reg> for CastTarget 
From for CastTarget			impl From<Uniform> for CastTarget 
From for Uniform			impl From<Reg> for Uniform 
Funclet			impl Funclet 
Funclet			pub struct Funclet 
FunctionDebugContext			impl FunctionDebugContext 
FunctionDebugContext			pub enum FunctionDebugContext 
FunctionDebugContextData			pub struct FunctionDebugContextData 
GccLinker			impl<'a> GccLinker<'a> 
GccLinker			pub struct GccLinker<'a> 
GetNativeSystemInfo			    fn GetNativeSystemInfo(lpSystemInfo: *mut SYSTEM_INFO);
HandlerFreeVars			struct HandlerFreeVars<'a> 
InliningMap			impl<'tcx> InliningMap<'tcx> 
InliningMap			pub struct InliningMap<'tcx> 
InstantiationMode			pub enum InstantiationMode 
InternalDebugLocation			impl InternalDebugLocation 
InternalDebugLocation			pub enum InternalDebugLocation 
ItemLikeVisitor for RootCollector			impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> 
ItemPathBuffer for SymbolPathBuffer			impl ItemPathBuffer for SymbolPathBuffer 
Iterator for ValueIter			impl Iterator for ValueIter 
LayoutExt			pub trait LayoutExt<'tcx> 
LayoutExt for TyLayout			impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> 
LayoutTyper			impl<'a, 'tcx> LayoutTyper<'tcx> for &'a CrateContext<'a, 'tcx> 
LayoutTyper			impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> 
Lifetime			impl Lifetime 
Lifetime			pub enum Lifetime { Start, End }
Linker			pub trait Linker 
Linker for EmLinker			impl<'a> Linker for EmLinker<'a> 
Linker for GccLinker			impl<'a> Linker for GccLinker<'a> 
Linker for MsvcLinker			impl<'a> Linker for MsvcLinker<'a> 
LinkerInfo			impl<'a, 'tcx> LinkerInfo 
LinkerInfo			pub struct LinkerInfo 
LocalAnalyzer			impl<'mir, 'a, 'tcx> LocalAnalyzer<'mir, 'a, 'tcx> 
LocalAnalyzer			struct LocalAnalyzer<'mir, 'a: 'mir, 'tcx: 'a> 
LocalCrateContext			impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> 
LocalCrateContext			pub struct LocalCrateContext<'a, 'tcx: 'a> 
LocalRef			enum LocalRef<'tcx> 
LocalRef			impl<'tcx> LocalRef<'tcx> 
LvalueRef			impl<'a, 'tcx> LvalueRef<'tcx> 
LvalueRef			pub struct LvalueRef<'tcx> 
MemberDescription			struct MemberDescription 
MemberDescriptionFactory			enum MemberDescriptionFactory<'tcx> 
MemberDescriptionFactory			impl<'tcx> MemberDescriptionFactory<'tcx> 
MemberOffset			enum MemberOffset 
Memory			struct Memory;
MetadataCreationResult			impl MetadataCreationResult 
MetadataCreationResult			struct MetadataCreationResult 
MetadataKind			    enum MetadataKind 
MirConstContext			impl<'a, 'tcx> MirConstContext<'a, 'tcx> 
MirConstContext			struct MirConstContext<'a, 'tcx: 'a> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirContext			pub struct MirContext<'a, 'tcx:'a> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirContext			impl<'a, 'tcx> MirContext<'a, 'tcx> 
MirDebugScope			impl MirDebugScope 
MirDebugScope			pub struct MirDebugScope 
MirNeighborCollector			struct MirNeighborCollector<'a, 'tcx: 'a> 
MirVisitor for MirNeighborCollector			impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> 
ModuleConfig			impl ModuleConfig 
ModuleConfig			pub struct ModuleConfig 
ModuleLlvm			pub struct ModuleLlvm 
ModuleSource			pub enum ModuleSource 
ModuleTranslation			pub struct ModuleTranslation 
MsvcLinker			pub struct MsvcLinker<'a> 
OperandRef			impl<'a, 'tcx> OperandRef<'tcx> 
OperandRef			pub struct OperandRef<'tcx> 
OperandValue			pub enum OperandValue 
OverflowOp			enum OverflowOp 
OwnedKey			struct OwnedKey(HKEY);
PartitioningStrategy			pub enum PartitioningStrategy 
PostInliningPartitioning			struct PostInliningPartitioning<'tcx>(Vec<CodegenUnit<'tcx>>);
PreInliningPartitioning			struct PreInliningPartitioning<'tcx> 
RPathConfig			pub struct RPathConfig<'a> 
RecursiveTypeDescription			enum RecursiveTypeDescription<'tcx> 
RecursiveTypeDescription			impl<'tcx> RecursiveTypeDescription<'tcx> 
Reg			impl Reg 
Reg			pub struct Reg 
RegCloseKey			    fn RegCloseKey(hKey: HKEY) -> LONG;
RegKind			pub enum RegKind 
RegOpenKeyExW			    fn RegOpenKeyExW(hKey: HKEY,
RegQueryValueExW			    fn RegQueryValueExW(hKey: HKEY,
RegistryKey			impl RegistryKey 
RegistryKey			pub struct RegistryKey(Repr);
Repr			enum Repr 
ReturnDest			enum ReturnDest 
RootCollector			struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> 
SYSTEM_INFO			struct SYSTEM_INFO 
Send for ModuleConfig			unsafe impl Send for ModuleConfig { }
Send for ModuleTranslation			unsafe impl Send for ModuleTranslation { }
Send for RegistryKey			unsafe impl Send for RegistryKey {}
SharedCrateContext			impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> 
SharedCrateContext			pub struct SharedCrateContext<'a, 'tcx: 'a> 
SharedEmitter			impl SharedEmitter 
SharedEmitter			struct SharedEmitter 
StatRecorder			impl<'a, 'tcx> StatRecorder<'a, 'tcx> 
StatRecorder			pub struct StatRecorder<'a, 'tcx: 'a> 
Stats			impl Stats 
Stats			pub struct Stats 
StructMemberDescriptionFactory			impl<'tcx> StructMemberDescriptionFactory<'tcx> 
StructMemberDescriptionFactory			struct StructMemberDescriptionFactory<'tcx> 
Style			        enum Style { Float, Int(\/* is signed? *\/ bool), Unsupported }
SymbolCache			impl<'a, 'tcx> SymbolCache<'a, 'tcx> 
SymbolCache			pub struct SymbolCache<'a, 'tcx: 'a> 
SymbolExportLevel			pub enum SymbolExportLevel 
SymbolMap			impl<'tcx> SymbolMap<'tcx> 
SymbolMap			pub struct SymbolMap<'tcx> 
SymbolNamesTest			impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> 
SymbolNamesTest			struct SymbolNamesTest<'a, 'tcx:'a> 
SymbolPathBuffer			impl SymbolPathBuffer 
SymbolPathBuffer			struct SymbolPathBuffer 
Sync for ModuleTranslation			unsafe impl Sync for ModuleTranslation { }
Sync for RegistryKey			unsafe impl Sync for RegistryKey {}
TransItem			impl<'a, 'tcx> TransItem<'tcx> 
TransItem			pub enum TransItem<'tcx> 
TransItemCollectionMode			pub enum TransItemCollectionMode 
TupleMemberDescriptionFactory			impl<'tcx> TupleMemberDescriptionFactory<'tcx> 
TupleMemberDescriptionFactory			struct TupleMemberDescriptionFactory<'tcx> 
Type			impl Type 
Type			pub struct Type 
TypeMap			impl<'tcx> TypeMap<'tcx> 
TypeMap			pub struct TypeMap<'tcx> 
TypeOfDepthLock			pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'a, 'tcx>);
Uniform			impl Uniform 
Uniform			pub struct Uniform 
UnionMemberDescriptionFactory			impl<'tcx> UnionMemberDescriptionFactory<'tcx> 
UnionMemberDescriptionFactory			struct UnionMemberDescriptionFactory<'tcx> 
UniqueTypeId			pub struct UniqueTypeId(ast::Name);
Value			pub struct Value(pub llvm::ValueRef);
ValueIter			struct ValueIter 
VariableAccess			pub enum VariableAccess<'a> 
VariableKind			pub enum VariableKind 
VariantMemberDescriptionFactory			impl<'tcx> VariantMemberDescriptionFactory<'tcx> 
VariantMemberDescriptionFactory			struct VariantMemberDescriptionFactory<'tcx> 
VirtualIndex			impl<'a, 'tcx> VirtualIndex 
VirtualIndex			pub struct VirtualIndex(usize);
Visitor for LocalAnalyzer			impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> 
Visitor for SymbolNamesTest			impl<'a, 'tcx> Visitor<'tcx> for SymbolNamesTest<'a, 'tcx> 
WorkItem			struct WorkItem 
__HKEY__			pub enum __HKEY__ {}
abi			mod abi;
add			    pub fn add(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
add_archive			    fn add_archive<F>(&mut self, archive: &Path, skip: F)
add_case			    pub fn add_case(&self, s: ValueRef, on_val: ValueRef, dest: BasicBlockRef) 
add_clause			    pub fn add_clause(&self, landing_pad: ValueRef, clause: ValueRef) 
add_comment			    pub fn add_comment(&self, text: &str) 
add_dynamic_crate			    fn add_dynamic_crate(cmd: &mut Linker, sess: &Session, cratepath: &Path) 
add_file			    pub fn add_file(&mut self, file: &Path) 
add_handler			    pub fn add_handler(&self, catch_switch: ValueRef, handler: BasicBlockRef) 
add_incoming_to_phi			    pub fn add_incoming_to_phi(&self, phi: ValueRef, val: ValueRef, bb: BasicBlockRef) 
add_lib			    fn add_lib(cmd: &mut Command, lib: &Path) 
add_local_native_libraries			fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) 
add_native_library			    pub fn add_native_library(&mut self, name: &str) 
add_object			    fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }
add_object			    fn add_object(&mut self, path: &Path) 
add_object			    fn add_object(&mut self, path: &Path);
add_rlib			    pub fn add_rlib(&mut self,
add_span_comment			    pub fn add_span_comment(&self, sp: Span, text: &str) 
add_static_crate			    fn add_static_crate(cmd: &mut Linker,
add_upstream_native_libraries			fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session, crate_type: config::CrateType) 
add_upstream_rust_crates			fn add_upstream_rust_crates(cmd: &mut Linker,
addr_of			pub fn addr_of(ccx: &CrateContext,
addr_of_mut			pub fn addr_of_mut(ccx: &CrateContext,
adjust_for_abi			    fn adjust_for_abi(&mut self,
adt			mod adt;
aggregate_ret			    pub fn aggregate_ret(&self, ret_vals: &[ValueRef]) 
align_of			    pub fn align_of(&self, ty: Ty<'tcx>) -> machine::llalign 
align_up_to			pub fn align_up_to(off: u64, a: u64) -> u64 
alloca			    pub fn alloca(&self, ty: Type, name: &str, align: Option<u32>) -> ValueRef 
alloca			    pub fn alloca(bcx: &Builder<'a, 'tcx>, ty: Ty<'tcx>, name: &str) -> LvalueRef<'tcx> 
analyze			mod analyze;
and			    pub fn and(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
apply_attrs_callsite			    pub fn apply_attrs_callsite(&self, callsite: ValueRef) 
apply_attrs_llfn			    pub fn apply_attrs_llfn(&self, llfn: ValueRef) 
apply_callsite			    pub fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef) 
apply_llfn			    pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) 
arch			mod arch;
archive			    pub mod archive;
archive_config			fn archive_config<'a>(sess: &'a Session,
archive_search_paths			fn archive_search_paths(sess: &Session) -> Vec<PathBuf> 
arg_local_refs			fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
args			    fn args(&mut self, args: &[String]) { self.cmd.args(args); }
args			    fn args(&mut self, args: &[String]) 
args			    fn args(&mut self, args: &[String]);
array			    pub fn array(ty: &Type, len: u64) -> Type 
array_length			    pub fn array_length(&self) -> usize 
as_lvalue			    fn as_lvalue(&self) -> ConstLvalue<'tcx> 
ashr			    pub fn ashr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
asm			mod asm;
assert_discr_in_range			pub fn assert_discr_in_range<D: PartialOrd>(min: D, max: D, discr: D) 
assert_module_sources			pub fn assert_module_sources<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
assert_module_sources			mod assert_module_sources;
atomic_cmpxchg			    pub fn atomic_cmpxchg(&self, dst: ValueRef,
atomic_fence			    pub fn atomic_fence(&self, order: AtomicOrdering, scope: SynchronizationScope) 
atomic_load			    pub fn atomic_load(&self, ptr: ValueRef, order: AtomicOrdering) -> ValueRef 
atomic_rmw			    pub fn atomic_rmw(&self, op: AtomicRmwBinOp,
atomic_store			    pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
attr_impl			mod attr_impl 
attributes			mod attributes;
back			pub mod back 
base			mod base;
basic_type_metadata			fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
bin_op_to_fcmp_predicate			pub fn bin_op_to_fcmp_predicate(op: hir::BinOp_) -> llvm::RealPredicate 
bin_op_to_icmp_predicate			pub fn bin_op_to_icmp_predicate(op: hir::BinOp_,
bin_subdir			    fn bin_subdir(arch: &str) -> Vec<(&'static str, &'static str)> 
binop			    pub fn binop(&self, op: Opcode, lhs: ValueRef, rhs: ValueRef)
bitcast			    pub fn bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
bitor			    fn bitor(self, rhs: Self) -> Self 
block			mod block;
bool			    pub fn bool(ccx: &CrateContext) -> Type 
br			    pub fn br(&self, dest: BasicBlockRef) 
build			    pub fn build(&mut self) 
build			    pub fn build<'a, I>(scx: &SharedCrateContext<'a, 'tcx>,
build_const_struct			fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
build_const_union			fn build_const_union<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
build_dylib			    fn build_dylib(&mut self, _out_filename: &Path) 
build_dylib			    fn build_dylib(&mut self, out_filename: &Path) 
build_dylib			    fn build_dylib(&mut self, out_filename: &Path);
build_link_meta			pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMeta 
build_sibling_block			    pub fn build_sibling_block<'b>(&self, name: &'b str) -> Builder<'a, 'tcx> 
build_unchecked_lshift			pub fn build_unchecked_lshift<'a, 'tcx>(
build_unchecked_rshift		hift<'a, 'tcx>(
build_with_llvm			    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> 
build_work_item			fn build_work_item(sess: &Session,
builder			mod builder;
bundle			    pub fn bundle(&self) -> &OperandBundleDef 
bytes_to_bits			pub fn bytes_to_bits<T>(bytes: T) -> T
cabi_aarch64			mod cabi_aarch64;
cabi_arm			mod cabi_arm;
cabi_asmjs			mod cabi_asmjs;
cabi_mips			mod cabi_mips;
cabi_mips64			mod cabi_mips64;
cabi_msp430			mod cabi_msp430;
cabi_nvptx			mod cabi_nvptx;
cabi_nvptx64			mod cabi_nvptx64;
cabi_powerpc			mod cabi_powerpc;
cabi_powerpc64			mod cabi_powerpc64;
cabi_s390x			mod cabi_s390x;
cabi_sparc			mod cabi_sparc;
cabi_sparc64			mod cabi_sparc64;
cabi_x86			mod cabi_x86;
cabi_x86_64			mod cabi_x86_64;
cabi_x86_win64			mod cabi_x86_win64;
call			    pub fn call(self, b: &Builder, ptr: ValueRef) 
call			    pub fn call(&self, llfn: ValueRef, args: &[ValueRef],
call_assume			pub fn call_assume<'a, 'tcx>(b: &Builder<'a, 'tcx>, val: ValueRef) 
call_memcpy			pub fn call_memcpy<'a, 'tcx>(b: &Builder<'a, 'tcx>,
call_memset			pub fn call_memset<'a, 'tcx>(b: &Builder<'a, 'tcx>,
callee			mod callee;
cast			    pub fn cast(&self, op: Opcode, val: ValueRef, dest_ty: Type) -> ValueRef 
cast_shift_const_rhs			pub fn cast_shift_const_rhs(op: hir::BinOp_, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
cast_shift_expr_rhs			pub fn cast_shift_expr_rhs(
cast_shift_rhs			fn cast_shift_rhs<F, G>(op: hir::BinOp_,
cast_target			fn cast_target(cls: &[Class], size: u64) -> CastTarget 
cast_to			    pub fn cast_to<T: Into<CastTarget>>(&mut self, ccx: &CrateContext, target: T) 
catch_pad			    pub fn catch_pad(&self,
catch_ret			    pub fn catch_ret(&self, pad: ValueRef, unwind: BasicBlockRef) -> ValueRef 
catch_switch			    pub fn catch_switch(&self,
char			    pub fn char(ccx: &CrateContext) -> Type 
characteristic_def_id_of_trans_item			fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
check_attr			    fn check_attr(&self, attr: &ast::Attribute) 
check_call			    fn check_call<'b>(&self,
check_config			    fn check_config(&self, attr: &ast::Attribute) -> bool 
check_file_is_writeable			fn check_file_is_writeable(file: &Path, sess: &Session) 
check_overflow			    pub fn check_overflow(&self) -> bool 
check_recursion_limit			fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_store			    fn check_store<'b>(&self,
check_type_length_limit			fn check_type_length_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
classify			    fn classify<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
classify_arg			fn classify_arg<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &ArgType<'tcx>)
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut u64) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut u64) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut u64) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut u64) 
classify_arg_ty			fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
classify_ret_ty			fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) 
cleanup_kinds			pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> 
cleanup_llvm			pub fn cleanup_llvm(trans: &CrateTranslation) 
cleanup_pad			    pub fn cleanup_pad(&self,
cleanup_ret			    pub fn cleanup_ret(&self, cleanup: ValueRef,
cleanuppad			    pub fn cleanuppad(&self) -> ValueRef 
clone			    fn clone(&self) -> Funclet 
closure_bare_wrapper_cache			    pub fn closure_bare_wrapper_cache<'a>(&'a self) -> &'a RefCell<FxHashMap<ValueRef, ValueRef>> 
closure_vals			    pub fn closure_vals<'a>(&'a self) -> &'a RefCell<FxHashMap<Instance<'tcx>, ValueRef>> 
codegen_unit			    pub fn codegen_unit(&self) -> &CodegenUnit<'tcx> 
coerce_unsized_into			pub fn coerce_unsized_into<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
collect_and_partition_translation_items			fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>)
collect_crate_translation_items			pub fn collect_crate_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
collect_items_rec			fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,
collect_neighbours			fn collect_neighbours<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
collect_roots			fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
collector			mod collector;
command_path			fn command_path(sess: &Session, extra: Option<PathBuf>) -> OsString 
common			mod common;
compare_simd_types			pub fn compare_simd_types<'a, 'tcx>(
compile_unit_metadata			pub fn compile_unit_metadata(scc: &SharedCrateContext,
composite_type_metadata			fn composite_type_metadata(cx: &CrateContext,
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_abi_info			pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fty: &mut FnType<'tcx>) 
compute_codegen_unit_name			fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compute_debuginfo_type_name			pub fn compute_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
compute_fields			pub fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,
compute_from			    pub fn compute_from<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
compute_symbol_name			    pub fn compute_symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String 
compute_symbol_name_hash			    pub fn compute_symbol_name_hash<'a>(&self,
cond_br			    pub fn cond_br(&self, cond: ValueRef, then_llbb: BasicBlockRef, else_llbb: BasicBlockRef) 
const_array			    fn const_array(&self, array_ty: Ty<'tcx>, fields: &[ValueRef])
const_cstr_cache			    pub fn const_cstr_cache<'a>(&'a self) -> &'a RefCell<FxHashMap<InternedString, ValueRef>> 
const_get_elt			pub fn const_get_elt(v: ValueRef, us: &[c_uint])
const_get_field			pub fn const_get_field<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,
const_globals			    pub fn const_globals<'a>(&'a self) -> &'a RefCell<FxHashMap<ValueRef, ValueRef>> 
const_lvalue			    fn const_lvalue(&self, lvalue: &mir::Lvalue<'tcx>, span: Span)
const_operand			    fn const_operand(&self, operand: &mir::Operand<'tcx>, span: Span)
const_rvalue			    fn const_rvalue(&self, rvalue: &mir::Rvalue<'tcx>,
const_scalar_binop			pub fn const_scalar_binop(op: mir::BinOp,
const_scalar_checked_binop			pub fn const_scalar_checked_binop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
const_struct_field			fn const_struct_field(val: ValueRef, ix: usize) -> ValueRef 
const_to_opt_u128			pub fn const_to_opt_u128(v: ValueRef, sign_ext: bool) -> Option<u128> 
const_to_uint			pub fn const_to_uint(v: ValueRef) -> u64 
const_unsized			    pub fn const_unsized<'a>(&'a self) -> &'a RefCell<FxHashMap<ValueRef, ValueRef>> 
const_values			    pub fn const_values<'a>(&'a self) -> &'a RefCell<FxHashMap<(ast::NodeId, &'tcx Substs<'tcx>),
constant			mod constant;
consts			mod consts;
contains_item			    pub fn contains_item(&self, item: &TransItem<'tcx>) -> bool 
contains_null			fn contains_null(s: &str) -> bool 
context			mod context;
copy_intrinsic			fn copy_intrinsic<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
count_insn			    fn count_insn(&self, category: &str) 
crate_export_threshold			pub fn crate_export_threshold(crate_type: config::CrateType)
crate_type_allows_lto			pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool 
crates_export_threshold			pub fn crates_export_threshold(crate_types: &[config::CrateType])
create_DIArray			pub fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray 
create_and_register_recursive_type_forward_declaration			fn create_and_register_recursive_type_forward_declaration<'a, 'tcx>(
create_context_and_module			pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextRef, ModuleRef) 
create_entry_fn			    fn create_entry_fn(ccx: &CrateContext,
create_fn_trans_item			fn create_fn_trans_item<'a, 'tcx>(instance: Instance<'tcx>) -> TransItem<'tcx> 
create_function_debug_context			pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
create_global_var_metadata			pub fn create_global_var_metadata(cx: &CrateContext,
create_imps			fn create_imps(sess: &Session,
create_member_descriptions			    fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)
create_mir_scopes			pub fn create_mir_scopes(ccx: &CrateContext, mir: &Mir, debug_context: &FunctionDebugContext)
create_scope_map			mod create_scope_map;
create_struct_stub			fn create_struct_stub(cx: &CrateContext,
create_target_machine			pub fn create_target_machine(sess: &Session) -> TargetMachineRef 
create_trans_items_for_default_impls			fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
create_trans_items_for_vtable_methods			fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
create_union_stub			fn create_union_stub(cx: &CrateContext,
cstr			fn cstr(s: &'static str) -> &CStr 
custom_coerce_unsize_info			pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx>,
data_layout			    fn data_layout(&self) -> &ty::layout::TargetDataLayout 
dbg_cx			    pub fn dbg_cx<'a>(&'a self) -> &'a Option<debuginfo::CrateDebugContext<'tcx>> 
debug_context			pub fn debug_context<'a, 'tcx>(cx: &'a CrateContext<'a, 'tcx>)
debug_dump			fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
debug_loc			    pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> (DIScope, Span) 
debuginfo			    fn debuginfo(&mut self) 
debuginfo			    fn debuginfo(&mut self);
debuginfo			mod debuginfo;
debuginfo_disabled_message			    fn debuginfo_disabled_message() -> &'static str 
declare			mod declare;
declare_cfn			pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type) -> ValueRef 
declare_fn			pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,
declare_global			pub fn declare_global(ccx: &CrateContext, name: &str, ty: Type) -> llvm::ValueRef 
declare_intrinsic			fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> 
declare_local			pub fn declare_local<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
declare_raw_fn			fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty: Type) -> ValueRef 
def_id_to_string			fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
def_ty			pub fn def_ty<'a, 'tcx>(shared: &SharedCrateContext<'a, 'tcx>,
default_output_for_target			pub fn default_output_for_target(sess: &Session) -> config::CrateType 
define			    pub fn define(&self, ccx: &CrateContext<'a, 'tcx>) 
define_fn			pub fn define_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
define_global			pub fn define_global(ccx: &CrateContext, name: &str, ty: Type) -> Option<ValueRef> 
define_internal_fn			pub fn define_internal_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
dep_graph			    pub fn dep_graph<'a>(&'a self) -> &'a DepGraph 
deref			    pub fn deref(self) -> LvalueRef<'tcx> 
describe_enum_variant			fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
diagnostics			pub mod diagnostics;
discover_masters			    fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,
disposition			    fn disposition(&self, mtrans: &ModuleTranslation) -> Disposition 
doc			mod doc;
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
dummy_ccx			    fn dummy_ccx(shared: &'a SharedCrateContext<'a, 'tcx>,
dump			    fn dump(&mut self, handler: &Handler) 
dump_incremental_data			fn dump_incremental_data(trans: &CrateTranslation) 
dynamic_alloca			    pub fn dynamic_alloca(&self, ty: Type, name: &str, align: Option<u32>) -> ValueRef 
each_linked_rlib			pub fn each_linked_rlib(sess: &Session,
eh_personality			    pub fn eh_personality(&self) -> ValueRef 
eh_unwind_resume			    pub fn eh_unwind_resume(&self) -> ValueRef 
element_type			    pub fn element_type(&self) -> Type 
emit			    fn emit(&mut self, db: &DiagnosticBuilder) 
emit_metadata			fn emit_metadata<'a>(sess: &'a Session, trans: &CrateTranslation, out_filename: &Path) 
emit_uwtable			pub fn emit_uwtable(val: ValueRef, emit: bool) 
empty			    pub fn empty() -> ExportedSymbols 
empty			    pub fn empty(name: InternedString) -> Self 
empty_phi			    pub fn empty_phi(&self, ty: Type) -> ValueRef 
empty_struct			    pub fn empty_struct(ccx: &CrateContext) -> Type 
empty_substs_for_def_id			    pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> 
enter_type_of			    pub fn enter_type_of(&self, ty: Ty<'tcx>) -> TypeOfDepthLock<'b, 'tcx> 
escape_string			            fn escape_string(s: &[u8]) -> String 
exactsdiv			    pub fn exactsdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
execute_work_item			fn execute_work_item(cgcx: &CodegenContext,
explicit_linkage			    pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<llvm::Linkage> 
export_level			        fn export_level(scx: &SharedCrateContext,
export_symbols			    fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) 
export_symbols			    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) 
export_symbols			    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);
export_symbols			    fn export_symbols(&mut self,
exported_name_from_type_and_prefix			pub fn exported_name_from_type_and_prefix<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
exported_symbols			fn exported_symbols(scx: &SharedCrateContext,
exported_symbols			    pub fn exported_symbols(&self,
exported_symbols			    pub fn exported_symbols<'a>(&'a self) -> &'a NodeSet 
extend			    pub fn extend(&mut self, stats: Stats) 
extend_integer_width_to			    pub fn extend_integer_width_to(&mut self, bits: u64) 
extend_scope_to_file			pub fn extend_scope_to_file(ccx: &CrateContext,
extern_const_values			    pub fn extern_const_values<'a>(&'a self) -> &'a RefCell<DefIdMap<ValueRef>> 
extract_bytecode_format_version			fn extract_bytecode_format_version(bc: &[u8]) -> u32 
extract_compressed_bytecode_size_v1			fn extract_compressed_bytecode_size_v1(bc: &[u8]) -> u64 
extract_element			    pub fn extract_element(&self, vec: ValueRef, idx: ValueRef) -> ValueRef 
extract_value			    pub fn extract_value(&self, agg_val: ValueRef, idx: usize) -> ValueRef 
f32			    pub fn f32(ccx: &CrateContext) -> Type 
f64			    pub fn f64(ccx: &CrateContext) -> Type 
fadd			    pub fn fadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fadd_fast			    pub fn fadd_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fallback_path			    fn fallback_path(scc: &SharedCrateContext) -> CString 
fat_ptr_base_ty			pub fn fat_ptr_base_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
fcmp			    pub fn fcmp(&self, op: RealPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fdiv			    pub fn fdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fdiv_fast			    pub fn fdiv_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
field			    fn field(&self, attr: &ast::Attribute, name: &str) -> ast::Name 
field_ty			pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
field_types			    pub fn field_types(&self) -> Vec<Type> 
file_metadata			pub fn file_metadata(cx: &CrateContext, path: &str, full_path: &Option<String>) -> DIFile 
file_metadata_			fn file_metadata_(cx: &CrateContext, key: &str, file_name: &str, work_dir: &str) -> DIFile 
filename_for_input			pub fn filename_for_input(sess: &Session,
filename_for_metadata			fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilenames) -> PathBuf 
fill_nested			    fn fill_nested(ccx: &CrateContext, def_id: DefId, extra: &str, output: &mut String) 
finalize			    fn finalize(&mut self) -> Command 
finalize			    fn finalize(&mut self) -> Command;
finalize			    fn finalize<'a>(&self, cx: &CrateContext<'a, 'tcx>) -> MetadataCreationResult 
finalize			pub fn finalize(cx: &CrateContext) 
find_crate_name			pub fn find_crate_name(sess: Option<&Session>,
find_exported_symbols			pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet 
find_library			pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)
find_metadata_for_type			    fn find_metadata_for_type(&self, type_: Ty<'tcx>) -> Option<DIType> 
find_metadata_for_unique_id			    fn find_metadata_for_unique_id(&self, unique_type_id: UniqueTypeId) -> Option<DIType> 
find_msvc_11			    fn find_msvc_11(arch: &str) -> Option<(Command, PathBuf)> 
find_msvc_12			    fn find_msvc_12(arch: &str) -> Option<(Command, PathBuf)> 
find_msvc_latest			    fn find_msvc_latest(arch: &str, ver: &str) -> Option<(Command, PathBuf)> 
find_vtable_types_for_unsizing			fn find_vtable_types_for_unsizing<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
finish			    fn finish(mut self, hash: &str) -> String 
finish_type_of			pub fn finish_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
fixed_vec_metadata			fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
float_from_ty			    pub fn float_from_ty(ccx: &CrateContext, t: ast::FloatTy) -> Type 
float_type_width			fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>)
float_width			    pub fn float_width(&self) -> usize 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Const			impl<'tcx> fmt::Debug for Const<'tcx> 
fmt::Debug for OperandRef			impl<'tcx> fmt::Debug for OperandRef<'tcx> 
fmt::Debug for Type			impl fmt::Debug for Type 
fmt::Debug for Value			impl fmt::Debug for Value 
fmul			    pub fn fmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fmul_fast			    pub fn fmul_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fn_once_adapter_instance			fn fn_once_adapter_instance<'a, 'tcx>(
fneg			    pub fn fneg(&self, v: ValueRef) -> ValueRef 
follow_inlining			    fn follow_inlining<'tcx>(trans_item: TransItem<'tcx>,
for_each_exported_symbol			    pub fn for_each_exported_symbol<F>(&self,
for_each_kind			    fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) 
fpcast			    pub fn fpcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fpext			    pub fn fpext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptosi			    pub fn fptosi(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptoui			    pub fn fptoui(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptrunc			    pub fn fptrunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
framework_path			    fn framework_path(&mut self, _path: &Path) 
framework_path			    fn framework_path(&mut self, path: &Path) { self.cmd.arg("-F").arg(path); }
framework_path			    fn framework_path(&mut self, path: &Path);
free			    pub fn free(&self, ptr: ValueRef) 
frem			    pub fn frem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
frem_fast			    pub fn frem_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
from			    fn from(uniform: Uniform) -> CastTarget 
from			    fn from(unit: Reg) -> CastTarget 
from			    fn from(unit: Reg) -> Uniform 
from_constint			    pub fn from_constint<'a>(ccx: &CrateContext<'a, 'tcx>, ci: &ConstInt)
from_constval			    pub fn from_constval<'a>(ccx: &CrateContext<'a, 'tcx>,
from_fn_attrs			pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) 
from_immediate			pub fn from_immediate(bcx: &Builder, val: ValueRef) -> ValueRef 
from_index			    pub fn from_index(index: usize) -> Self 
from_integer			    pub fn from_integer(cx: &CrateContext, i: layout::Integer) -> Type 
from_packed			    pub fn from_packed(packed: bool) -> Self 
from_primitive			    pub fn from_primitive(ccx: &CrateContext, p: layout::Primitive) -> Type 
from_ref			    pub fn from_ref(r: TypeRef) -> Type 
fsub			    pub fn fsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fsub_fast			    pub fn fsub_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
func			    pub fn func(args: &[Type], ret: &Type) -> Type 
func_params			    pub fn func_params(&self) -> Vec<Type> 
gather_type_sizes			fn gather_type_sizes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
gc_sections			    fn gc_sections(&mut self, _keep_metadata: bool) 
gc_sections			    fn gc_sections(&mut self, keep_metadata: bool) 
gc_sections			    fn gc_sections(&mut self, keep_metadata: bool);
gdb			pub mod gdb;
gen_fn			fn gen_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
generate_local_symbol_name			    pub fn generate_local_symbol_name(&self, prefix: &str) -> String 
generic_simd_intrinsic			fn generic_simd_intrinsic<'a, 'tcx>(
generic_type_of			fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
gep			    pub fn gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
gepi			    pub fn gepi(&self, base: ValueRef, ixs: &[usize]) -> ValueRef 
get			    pub fn get(&self, trans_item: TransItem<'tcx>) -> InternedString 
get			    pub fn get(&self, trans_item: TransItem<'tcx>) -> Option<&str> 
get_ar_prog			pub fn get_ar_prog(sess: &Session) -> String 
get_builder			    pub fn get_builder(&self, bb: mir::BasicBlock) -> Builder<'a, 'tcx> 
get_containing_scope			    fn get_containing_scope<'ccx, 'tcx>(cx: &CrateContext<'ccx, 'tcx>,
get_dataptr			pub fn get_dataptr(bcx: &Builder, fat_ptr: ValueRef) -> ValueRef 
get_declared_value			pub fn get_declared_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_defined_value			pub fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_enum_discriminant_name			    fn get_enum_discriminant_name(cx: &CrateContext,
get_fat_ptr			    fn get_fat_ptr(&self) -> (ValueRef, ValueRef) 
get_fn			pub fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_fn			    pub fn get_fn(self, bcx: &Builder<'a, 'tcx>, llvtable: ValueRef) -> ValueRef 
get_function_signature			    fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_install_prefix_rpath			fn get_install_prefix_rpath(config: &mut RPathConfig) -> String 
get_intrinsic			    pub fn get_intrinsic(&self, key: &str) -> ValueRef 
get_linker			pub fn get_linker(sess: &Session) -> (String, Command, Option<PathBuf>) 
get_linker			    fn get_linker(path: &Path, arch: &str) -> Option<(Command, PathBuf)> 
get_llvm_opt_level			fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel 
get_llvm_opt_size			fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize 
get_meta			pub fn get_meta(bcx: &Builder, fat_ptr: ValueRef) -> ValueRef 
get_namespace_and_span_for_item			pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)
get_or_compute			    pub fn get_or_compute<'map, 'scx>(&'map self,
get_or_insert_gdb_debug_scripts_section_global			pub fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)
get_overflow_intrinsic			fn get_overflow_intrinsic(oop: OverflowOp, bcx: &Builder, ty: Ty) -> ValueRef 
get_pair			    fn get_pair(&self) -> (ValueRef, ValueRef) 
get_personality_slot			    fn get_personality_slot(&mut self, bcx: &Builder<'a, 'tcx>) -> ValueRef 
get_ref			    fn get_ref<'a>(&'a self, span: Span) -> &'a FunctionDebugContextData 
get_reloc_model			pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode 
get_rpath_flags			pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> 
get_rpath_relative_to_output			fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String 
get_rpaths			fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> 
get_rpaths_relative_to_output			fn get_rpaths_relative_to_output(config: &mut RPathConfig,
get_rust_try_fn			fn get_rust_try_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_sdk10_dir			    fn get_sdk10_dir() -> Option<PathBuf> 
get_sdk81_dir			    fn get_sdk81_dir() -> Option<PathBuf> 
get_sdk8_dir			    fn get_sdk8_dir() -> Option<PathBuf> 
get_simple_intrinsic			fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_span			        fn get_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
get_static			pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef 
get_symbol_hash			fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
get_template_parameters			    fn get_template_parameters<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_type_parameter_names			    fn get_type_parameter_names(cx: &CrateContext, generics: &ty::Generics) -> Vec<ast::Name> 
get_ucrt_dir			    fn get_ucrt_dir() -> Option<PathBuf> 
get_unique_type_id_as_string			    fn get_unique_type_id_as_string(&self, unique_type_id: UniqueTypeId) -> &str 
get_unique_type_id_of_enum_variant			    fn get_unique_type_id_of_enum_variant<'a>(&mut self,
get_unique_type_id_of_type			    fn get_unique_type_id_of_type<'a>(&mut self, cx: &CrateContext<'a, 'tcx>,
get_usize			    pub fn get_usize(self, bcx: &Builder<'a, 'tcx>, llvtable: ValueRef) -> ValueRef 
get_vc_dir			    fn get_vc_dir(ver: &str) -> Option<PathBuf> 
get_vtable			pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
global_string			    pub fn global_string(&self, _str: *const c_char) -> ValueRef 
global_string_ptr			    pub fn global_string_ptr(&self, _str: *const c_char) -> ValueRef 
glue			mod glue;
has_extra			    pub fn has_extra(&self) -> bool 
hi_lo_to_u128			fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 
hint_dynamic			    fn hint_dynamic(&mut self) 
hint_static			    fn hint_static(&mut self) 
homogenous_aggregate			    fn homogenous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg> 
homogenous_aggregate			    fn homogenous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg>;
host_arch			pub fn host_arch() -> Option<Arch> 
i1			    pub fn i1(ccx: &CrateContext) -> Type 
i128			    pub fn i128(ccx: &CrateContext) -> Type 
i16			    pub fn i16(ccx: &CrateContext) -> Type 
i32			    pub fn i32(ccx: &CrateContext) -> Type 
i32x1			struct i32x1(i32);
i64			    pub fn i64(ccx: &CrateContext) -> Type 
i8			    pub fn i8(ccx: &CrateContext) -> Type 
i8_llcx			    pub fn i8_llcx(llcx: ContextRef) -> Type 
i8p			    pub fn i8p(ccx: &CrateContext) -> Type 
i8p_llcx			    pub fn i8p_llcx(llcx: ContextRef) -> Type 
icmp			    pub fn icmp(&self, op: IntPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ignore			    pub fn ignore(&mut self) 
immediate			    pub fn immediate(self) -> ValueRef 
immediate_type_of			pub fn immediate_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
impl_method_cache			    pub fn impl_method_cache<'a>(&'a self)
in_memory_type_of			pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
inbounds_gep			    pub fn inbounds_gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
include_path			    fn include_path(&mut self, path: &Path) { self.cmd.arg("-L").arg(path); }
include_path			    fn include_path(&mut self, path: &Path) 
include_path			    fn include_path(&mut self, path: &Path);
incomplete_type_of			pub fn incomplete_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
indirect_br			    pub fn indirect_br(&self, addr: ValueRef, num_dests: usize) 
inline			pub fn inline(val: ValueRef, inline: InlineAttr) 
inline_asm_call			    pub fn inline_asm_call(&self, asm: *const c_char, cons: *const c_char,
insert_element			    pub fn insert_element(&self, vec: ValueRef, elt: ValueRef, idx: ValueRef) -> ValueRef 
insert_reference_to_gdb_debug_scripts_section_global			pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext, builder: &Builder) 
insert_value			    pub fn insert_value(&self, agg_val: ValueRef, elt: ValueRef,
instance_ty			pub fn instance_ty<'a, 'tcx>(shared: &SharedCrateContext<'a, 'tcx>,
instances			    pub fn instances<'a>(&'a self) -> &'a RefCell<FxHashMap<Instance<'tcx>, ValueRef>> 
instantiation_mode			    pub fn instantiation_mode(&self,
int			    pub fn int(ccx: &CrateContext) -> Type 
int_from_ty			    pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type 
int_type			    pub fn int_type(&self) -> Type 
int_type_width_signed			fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)
int_width			    pub fn int_width(&self) -> u64 
intcast			    pub fn intcast(&self, val: ValueRef, dest_ty: Type, is_signed: bool) -> ValueRef 
internalize_symbols			fn internalize_symbols<'a, 'tcx>(sess: &Session,
into_stats			    pub fn into_stats(self) -> Stats 
intrinsic			mod intrinsic;
intrinsics			    fn intrinsics<'a>(&'a self) -> &'a RefCell<FxHashMap<&'static str, ValueRef>> 
inttoptr			    pub fn inttoptr(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
invalid_output_for_target			pub fn invalid_output_for_target(sess: &Session,
invoke			    pub fn invoke(&self,
is_aggregate			    fn is_aggregate(&self) -> bool 
is_aggregate			    fn is_aggregate(&self) -> bool;
is_aggregate			    pub fn is_aggregate(&self) -> bool 
is_any_library			fn is_any_library(sess: &Session) -> bool 
is_below_threshold			pub fn is_below_threshold(level: SymbolExportLevel,
is_const_integral			fn is_const_integral(v: ValueRef) -> bool 
is_discr_signed			pub fn is_discr_signed<'tcx>(l: &layout::Layout) -> bool 
is_generic_fn			    pub fn is_generic_fn(&self) -> bool 
is_homogenous_aggregate			fn is_homogenous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)
is_homogenous_aggregate			fn is_homogenous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)
is_homogenous_aggregate			fn is_homogenous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)
is_ignore			    pub fn is_ignore(&self) -> bool 
is_indirect			    pub fn is_indirect(&self) -> bool 
is_inline_instance			pub fn is_inline_instance<'a, 'tcx>(
is_node_local_to_unit			pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool
is_not_null			    pub fn is_not_null(&self, val: ValueRef) -> ValueRef 
is_null			    pub fn is_null(&self, val: ValueRef) -> ValueRef 
is_null			pub fn is_null(val: ValueRef) -> bool 
is_packed			    pub fn is_packed(&self) -> bool 
is_pie_binary			pub fn is_pie_binary(sess: &Session) -> bool 
is_relevant_child			fn is_relevant_child(c: &Child) -> bool 
is_single_fp_element			fn is_single_fp_element<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
is_undef			pub fn is_undef(val: ValueRef) -> bool 
is_valid			    pub fn is_valid(&self) -> bool 
is_versioned_bytecode_format			fn is_versioned_bytecode_format(bc: &[u8]) -> bool 
is_writeable			fn is_writeable(p: &Path) -> bool 
item_namespace			pub fn item_namespace(ccx: &CrateContext, def_id: DefId) -> DIScope 
items			    pub fn items(&self) -> &FxHashMap<TransItem<'tcx>, llvm::Linkage> 
items_in_deterministic_order			    pub fn items_in_deterministic_order<'a>(&self,
iter_functions			fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter 
iter_globals			fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter 
ix			    pub fn ix(ccx: &CrateContext, num_bits: u64) -> Type 
kind			    pub fn kind(&self) -> TypeKind 
landing_pad			    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,
landing_pad_to			    fn landing_pad_to(&mut self, target_bb: mir::BasicBlock) -> BasicBlockRef 
landing_pad_uncached			    fn landing_pad_uncached(&mut self, target_bb: BasicBlockRef) -> BasicBlockRef 
langcall			pub fn langcall(tcx: TyCtxt,
layout_of			    fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout 
len			    pub fn len<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef 
len			    pub fn len(&self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef 
lib_subdir			    fn lib_subdir(arch: &str) -> Option<&'static str> 
link			    pub mod link;
link_args			fn link_args(cmd: &mut Linker,
link_binary			pub fn link_binary(sess: &Session,
link_binary_output			fn link_binary_output(sess: &Session,
link_dylib			    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg("-l").arg(lib); }
link_dylib			    fn link_dylib(&mut self, lib: &str) 
link_dylib			    fn link_dylib(&mut self, lib: &str);
link_exe_cmd			    pub fn link_exe_cmd(_sess: &Session) -> (Command, Option<PathBuf>) 
link_exe_cmd			    pub fn link_exe_cmd(sess: &Session) -> (Command, Option<PathBuf>) 
link_framework			    fn link_framework(&mut self, _framework: &str) 
link_framework			    fn link_framework(&mut self, framework: &str) 
link_framework			    fn link_framework(&mut self, framework: &str);
link_natively			fn link_natively(sess: &Session,
link_rlib			fn link_rlib<'a>(sess: &'a Session,
link_rlib			    fn link_rlib(&mut self, lib: &Path) { self.cmd.arg(lib); }
link_rlib			    fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }
link_rlib			    fn link_rlib(&mut self, lib: &Path) 
link_rlib			    fn link_rlib(&mut self, lib: &Path);
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) 
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, path: &Path) 
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, path: &Path);
link_sanitizer_runtime			    fn link_sanitizer_runtime(cmd: &mut Linker,
link_staticlib			fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,
link_staticlib			    fn link_staticlib(&mut self, lib: &str) { self.hint_static(); self.cmd.arg("-l").arg(lib); }
link_staticlib			    fn link_staticlib(&mut self, lib: &str) 
link_staticlib			    fn link_staticlib(&mut self, lib: &str);
link_whole_rlib			    fn link_whole_rlib(&mut self, lib: &Path) 
link_whole_rlib			    fn link_whole_rlib(&mut self, lib: &Path);
link_whole_rlib			    fn link_whole_rlib(&mut self, path: &Path) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]);
linker			    pub mod linker;
linker_arg			    fn linker_arg<S>(&mut self, arg: S) -> &mut Self
llalign_of_min			pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> llalign 
llalign_of_pref			pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign 
llbb			    pub fn llbb(&self) -> BasicBlockRef 
llbitsize_of_real			pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> llbits 
llcx			    pub fn llcx(&self) -> ContextRef 
llelement_offset			pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: usize) -> u64 
llfn			    pub fn llfn(&self) -> ValueRef 
llmod			    pub fn llmod(&self) -> ModuleRef 
llsize_of			pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef 
llsize_of_alloc			pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize 
llsizingtypes			    pub fn llsizingtypes<'a>(&'a self) -> &'a RefCell<FxHashMap<Ty<'tcx>, Type>> 
lltypes			    pub fn lltypes<'a>(&'a self) -> &'a RefCell<FxHashMap<Ty<'tcx>, Type>> 
llvm_archive_kind			    fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> 
llvm_err			pub fn llvm_err(handler: &errors::Handler, msg: String) -> ! 
llvm_linkage_by_name			pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> 
llvm_type			    fn llvm_type(&self, ccx: &CrateContext) -> Type 
llvm_type			    pub fn llvm_type(&self, ccx: &CrateContext<'a, 'tcx>) -> Type 
llvm_type_name			fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> String 
load			    pub fn load(&self, ptr: ValueRef, align: Option<u32>) -> ValueRef 
load_discr			fn load_discr(bcx: &Builder, ity: layout::Integer, ptr: ValueRef,
load_fat_ptr			pub fn load_fat_ptr<'a, 'tcx>(
load_nonnull			    pub fn load_nonnull(&self, ptr: ValueRef, align: Option<u32>) -> ValueRef 
load_range_assert			    pub fn load_range_assert(&self, ptr: ValueRef, lo: u64,
load_ty			pub fn load_ty<'a, 'tcx>(b: &Builder<'a, 'tcx>, ptr: ValueRef,
local			    fn local(&self) -> &'b LocalCrateContext<'b, 'tcx> 
local_node_id			        fn local_node_id(tcx: TyCtxt, trans_item: TransItem) -> Option<NodeId> 
log_rpaths			    fn log_rpaths(desc: &str, rpaths: &[String]) 
lshr			    pub fn lshr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
lto			    pub mod lto;
lvalue			pub mod lvalue;
lvalue_locals			pub fn lvalue_locals<'a, 'tcx>(mircx: &MirContext<'a, 'tcx>) -> BitVector 
machine			mod machine;
macros			mod macros;
main			fn main() 
make_indirect			    pub fn make_indirect(&mut self, ccx: &CrateContext<'a, 'tcx>) 
make_mir_scope			fn make_mir_scope(ccx: &CrateContext,
make_return_dest			    fn make_return_dest(&mut self, bcx: &Builder<'a, 'tcx>,
mangled_name_of_item			pub fn mangled_name_of_item(ccx: &CrateContext, def_id: DefId, extra: &str) -> String 
mark_as_lvalue			    fn mark_as_lvalue(&mut self, local: mir::Local) 
mark_assigned			    fn mark_assigned(&mut self, local: mir::Local) 
maybe_create_entry_wrapper			pub fn maybe_create_entry_wrapper(ccx: &CrateContext) 
memcpy_ty			pub fn memcpy_ty<'a, 'tcx>(
memory_ty			    pub fn memory_ty(&self, ccx: &CrateContext<'a, 'tcx>) -> Type 
memset_intrinsic			fn memset_intrinsic<'a, 'tcx>(
merge_codegen_units			fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<'tcx>,
metadata			pub mod metadata;
metadata			    pub fn metadata(ccx: &CrateContext) -> Type 
metadata_symbol_name			pub fn metadata_symbol_name(tcx: TyCtxt) -> String 
meth			mod meth;
min_with			    pub fn min_with(self, align: u32) -> Option<u32> 
minimize_rpaths			fn minimize_rpaths(rpaths: &[String]) -> Vec<String> 
mir			mod mir;
modify_as_needed			            fn modify_as_needed<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
module_translation			    fn module_translation<'a, 'tcx>(
monomorphize			mod monomorphize;
monomorphize			    fn monomorphize<T>(&self, value: &T) -> T
monomorphize			    pub fn monomorphize<T>(&self, value: &T) -> T
monomorphized_lvalue_ty			    pub fn monomorphized_lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> 
msvc			    pub mod msvc;
mul			    pub fn mul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
naked			pub fn naked(val: ValueRef, is_naked: bool) 
name			    pub fn name(&self) -> &str 
named_struct			    pub fn named_struct(ccx: &CrateContext, name: &str) -> Type 
namespace			mod namespace;
needs_drop_glue			pub fn needs_drop_glue<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>, t: Ty<'tcx>) -> bool 
needs_fn_once_adapter_shim			fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,
needs_gdb_debug_scripts_section			pub fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool 
needs_unwind_cleanup_cache			    pub fn needs_unwind_cleanup_cache(&self) -> &RefCell<FxHashMap<Ty<'tcx>, bool>> 
neg			    pub fn neg(&self, v: ValueRef) -> ValueRef 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
new			    fn new(layout: TyLayout<'tcx>) -> ArgType<'tcx> 
new			    pub fn new(ccx: &CrateContext<'a, 'tcx>,
new			    pub fn new(config: ArchiveConfig<'a>) -> ArchiveBuilder<'a> 
new			    pub fn new(scx: &SharedCrateContext<'a, 'tcx>,
new			    fn new() -> Self 
new			    fn new() -> SharedEmitter 
new			    fn new(tm: TargetMachineRef, passes: Vec<String>) -> ModuleConfig 
new			    pub fn new(ccx: &'a CrateContext<'a, 'tcx>, name: String) -> StatRecorder<'a, 'tcx> 
new			    fn new() -> InliningMap<'tcx> 
new			    pub fn new(cleanuppad: ValueRef) -> Funclet 
new			    pub fn new(shared: &'a SharedCrateContext<'a, 'tcx>,
new			    pub fn new(shared: &SharedCrateContext<'a, 'tcx>,
new			    pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,
new			    fn new(metadata: DIType, already_stored_in_typemap: bool) -> MetadataCreationResult 
new			    pub fn new() -> TypeMap<'tcx> 
new			    pub fn new(llmod: ModuleRef) -> CrateDebugContext<'tcx> 
new			    pub fn new(scope: DIScope, line: usize, col: usize) -> InternalDebugLocation 
new			    fn new(mircx: &'mir MirContext<'a, 'tcx>) -> LocalAnalyzer<'mir, 'a, 'tcx> 
new			    fn new(ccx: &'a CrateContext<'a, 'tcx>,
new			    pub fn new(llval: ValueRef, ty: Ty<'tcx>) -> Const<'tcx> 
new			    pub fn new(name: InternedString,
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new_block			    pub fn new_block<'b>(ccx: &'a CrateContext<'a, 'tcx>, llfn: ValueRef, name: &'b str) -> Self 
new_block			    pub fn new_block(&self, name: &str) -> Builder<'a, 'tcx> 
new_operand			    fn new_operand<'a>(ccx: &CrateContext<'a, 'tcx>,
new_sized			    pub fn new_sized(llval: ValueRef, lvalue_ty: LvalueTy<'tcx>,
new_sized_ty			    pub fn new_sized_ty(llval: ValueRef, ty: Ty<'tcx>, alignment: Alignment) -> LvalueRef<'tcx> 
new_vtable			    pub fn new_vtable(ccx: &CrateContext<'a, 'tcx>,
new_with_session			    fn new_with_session(sess: &'a Session,
new_zst			    pub fn new_zst(ccx: &CrateContext<'a, 'tcx>,
next			    fn next(&mut self) -> Option<ValueRef> 
nil			    pub fn nil(ccx: &CrateContext) -> Type 
no_default_libraries			    fn no_default_libraries(&mut self) 
no_default_libraries			    fn no_default_libraries(&mut self);
noname			fn noname() -> *const c_char 
normalize_projections			    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> 
not			    pub fn not(&self, v: ValueRef) -> ValueRef 
nswadd			    pub fn nswadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswmul			    pub fn nswmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswneg			    pub fn nswneg(&self, v: ValueRef) -> ValueRef 
nswsub			    pub fn nswsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
numbered_codegen_unit_name			fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString 
nuwadd			    pub fn nuwadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwmul			    pub fn nuwmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwneg			    pub fn nuwneg(&self, v: ValueRef) -> ValueRef 
nuwsub			    pub fn nuwsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
obj_size_bound			    pub fn obj_size_bound(&self) -> u64 
object_filenames			fn object_filenames(trans: &CrateTranslation,
one			            fn one<T>(x: Vec<T>) -> T 
opaque_vec			    pub fn opaque_vec(ccx: &CrateContext) -> Type 
opaque_vec_type			    pub fn opaque_vec_type(&self) -> Type 
open			    pub fn open(&self, key: &OsStr) -> io::Result<RegistryKey> 
operand			mod operand;
ops::BitOr for Alignment			impl ops::BitOr for Alignment 
optimize			    fn optimize(&mut self) 
optimize			    fn optimize(&mut self);
optimize_and_codegen			unsafe fn optimize_and_codegen(cgcx: &CodegenContext,
or			    pub fn or(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
out_filename			fn out_filename(sess: &Session,
output_filename			    fn output_filename(&mut self, path: &Path) { self.cmd.arg("-o").arg(path); }
output_filename			    fn output_filename(&mut self, path: &Path) 
output_filename			    fn output_filename(&mut self, path: &Path);
over_align_of			    pub fn over_align_of(&self, t: Ty<'tcx>)
pack_if_pair			    pub fn pack_if_pair(mut self, bcx: &Builder<'a, 'tcx>) -> OperandRef<'tcx> 
pad_with			    pub fn pad_with(&mut self, ccx: &CrateContext, reg: Reg) 
padding			fn padding(ccx: &CrateContext, size: u64) -> ValueRef 
partition			pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,
partitioning			mod partitioning;
path_relative_from			fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> 
phi			    pub fn phi(&self, ty: Type, vals: &[ValueRef], bbs: &[BasicBlockRef]) -> ValueRef 
place_inlined_translation_items			fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartitioning<'tcx>,
place_root_translation_items			fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,
platform			mod platform 
pointer_type_metadata			fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
pointercast			    pub fn pointercast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
position_at_end			    pub fn position_at_end(&self, llbb: BasicBlockRef) 
position_at_start			    pub fn position_at_start(&self, llbb: BasicBlockRef) 
position_before			    pub fn position_before(&self, insn: ValueRef) 
position_independent_executable			    fn position_independent_executable(&mut self) { self.cmd.arg("-pie"); }
position_independent_executable			    fn position_independent_executable(&mut self) 
position_independent_executable			    fn position_independent_executable(&mut self);
predefine			    pub fn predefine(&self,
predefine_fn			    fn predefine_fn(ccx: &CrateContext<'a, 'tcx>,
predefine_static			    fn predefine_static(ccx: &CrateContext<'a, 'tcx>,
prepare_enum_metadata			fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_index			    fn prepare_index(&mut self, bcx: &Builder<'a, 'tcx>, llindex: ValueRef) -> ValueRef 
prepare_struct_metadata			fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_tuple_metadata			fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_union_metadata			fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
process_attrs			    fn process_attrs(&mut self,
project_index			    pub fn project_index(&self, bcx: &Builder<'a, 'tcx>, llindex: ValueRef) -> ValueRef 
propagate			    fn propagate<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,
ptr_to			    pub fn ptr_to(&self) -> Type 
ptrcast			pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef 
ptrdiff			    pub fn ptrdiff(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ptrtoint			    pub fn ptrtoint(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
push			    fn push(&mut self, text: &str) 
push_debuginfo_type_name			pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
push_def_path			    pub fn push_def_path(&self,
push_instance_as_string			    pub fn push_instance_as_string(&self,
push_item_name			    fn push_item_name(cx: &CrateContext,
push_type_name			    pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String) 
push_type_params			    fn push_type_params<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
push_type_params			    fn push_type_params<I>(&self,
query_str			    pub fn query_str(&self, name: &str) -> io::Result<OsString> 
raw			    fn raw(&self) -> HKEY 
record_inlining_canditates			    fn record_inlining_canditates<I>(&mut self,
record_inlining_canditates			fn record_inlining_canditates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
reg_component			fn reg_component(cls: &[Class], i: &mut usize, size: u64) -> Option<Reg> 
register_type_with_metadata			    fn register_type_with_metadata<'a>(&mut self,
register_unique_id_with_metadata			    fn register_unique_id_with_metadata(&mut self,
registry			mod registry;
relevant_lib			fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool 
remove			pub fn remove(sess: &Session, path: &Path) 
remove_file			    pub fn remove_file(&mut self, file: &str) 
report_overbig_object			    pub fn report_overbig_object(&self, obj: Ty<'tcx>) -> ! 
report_symbol_names			pub fn report_symbol_names<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
requests_inline			pub fn requests_inline<'a, 'tcx>(
resolve			pub fn resolve<'a, 'tcx>(
resolve_and_get_fn			pub fn resolve_and_get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
resolve_associated_item			fn resolve_associated_item<'a, 'tcx>(
resolve_closure			pub fn resolve_closure<'a, 'tcx> (
resolve_drop_in_place			pub fn resolve_drop_in_place<'a, 'tcx>(
resume			    pub fn resume(&self, exn: ValueRef) -> ValueRef 
ret			    pub fn ret(&self, v: ValueRef) 
ret_void			    pub fn ret_void(&self) 
return_type			    pub fn return_type(&self) -> Type 
root_mode			    fn root_mode(&self) -> &RootMode 
roundup			fn roundup(x: u64, a: u32) -> u64 { let a = a as u64; ((x + (a - 1)) \/ a) * a }
rpath			    pub mod rpath;
rpaths_to_flags			fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> 
run			pub fn run(sess: &session::Session,
run_assembler			pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) 
run_passes			pub fn run_passes(sess: &Session,
run_work_multithreaded			fn run_work_multithreaded(sess: &Session,
run_work_singlethreaded			fn run_work_singlethreaded(sess: &Session,
rust_try_fn			    pub fn rust_try_fn<'a>(&'a self) -> &'a Cell<Option<ValueRef>> 
rvalue			mod rvalue;
rvalue_creates_operand			    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>) -> bool 
sanitize			pub fn sanitize(result: &mut String, s: &str) -> bool 
scope_metadata_for_loc			    fn scope_metadata_for_loc(&self, scope_id: mir::VisibilityScope, pos: BytePos)
sdiv			    pub fn sdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
select			    pub fn select(&self, cond: ValueRef, then_val: ValueRef, else_val: ValueRef) -> ValueRef 
sess			    pub fn sess(&self) -> &Session 
sess			    pub fn sess<'a>(&'a self) -> &'a Session 
set			    pub fn set(&mut self, attr: ArgAttribute) -> &mut Self 
set_cleanup			    pub fn set_cleanup(&self, landing_pad: ValueRef) 
set_debug_loc			    pub fn set_debug_loc(&mut self, bcx: &Builder, source_info: mir::SourceInfo) 
set_debug_location			pub fn set_debug_location(builder: &Builder, debug_location: InternalDebugLocation) 
set_dereferenceable			    pub fn set_dereferenceable(&mut self, bytes: u64) -> &mut Self 
set_flags			    fn set_flags(&mut self, sess: &Session, trans: &CrateTranslation) 
set_frame_pointer_elimination			pub fn set_frame_pointer_elimination(ccx: &CrateContext, llfn: ValueRef) 
set_invariant_load			    pub fn set_invariant_load(&self, load: ValueRef) 
set_link_section			pub fn set_link_section(ccx: &CrateContext,
set_members_of_composite_type			fn set_members_of_composite_type(cx: &CrateContext,
set_optimize_for_size			pub fn set_optimize_for_size(val: ValueRef, optimize: bool) 
set_personality_fn			    pub fn set_personality_fn(&self, personality: ValueRef) 
set_source_location			pub fn set_source_location(
set_struct_body			    pub fn set_struct_body(&mut self, els: &[Type], packed: bool) 
sext			    pub fn sext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
sext_or_bitcast			    pub fn sext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
shared			    pub fn shared(&self) -> &'b SharedCrateContext<'b, 'tcx> 
shift_mask_rhs			fn shift_mask_rhs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, rhs: ValueRef) -> ValueRef 
shift_mask_val			pub fn shift_mask_val<'a, 'tcx>(
shl			    pub fn shl(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
should_be_ignored_message			    fn should_be_ignored_message() -> &'static str 
should_trans_locally			fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instance<'tcx>)
shuffle_vector			    pub fn shuffle_vector(&self, v1: ValueRef, v2: ValueRef, mask: ValueRef) -> ValueRef 
simd_add			    fn simd_add<T>(a: T, b: T) -> T;
sitofp			    pub fn sitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
size_and_align_of			pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u32) 
size_and_align_of_dst			pub fn size_and_align_of_dst<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, info: ValueRef)
size_of			    pub fn size_of(&self, ty: Ty<'tcx>) -> machine::llsize 
slice_for_each			pub fn slice_for_each<'a, 'tcx, F>(
slice_layout_is_correct			    fn slice_layout_is_correct<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
source_loc			mod source_loc;
span_invalid_monomorphization_error			fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) 
span_start			pub fn span_start(cx: &CrateContext, span: Span) -> syntax_pos::Loc 
src_archive			    fn src_archive(&mut self) -> Option<&ArchiveRO> 
src_files			    pub fn src_files(&mut self) -> Vec<String> 
srem			    pub fn srem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
start_emitting_source_locations			pub fn start_emitting_source_locations(dbg_context: &FunctionDebugContext) 
statement			mod statement;
statics			    pub fn statics<'a>(&'a self) -> &'a RefCell<FxHashMap<ValueRef, DefId>> 
statics_to_rauw			    pub fn statics_to_rauw<'a>(&'a self) -> &'a RefCell<Vec<(ValueRef, ValueRef)>> 
stats			    pub fn stats<'a>(&'a self) -> &'a Stats 
store			    pub fn store(&self, bcx: &Builder<'a, 'tcx>, mut val: ValueRef, dst: ValueRef) 
store			    pub fn store(&self, val: ValueRef, ptr: ValueRef, align: Option<u32>) -> ValueRef 
store			    fn store(&mut self, dest: &mir::Lvalue<'tcx>, value: Const<'tcx>, span: Span) 
store_fat_ptr			pub fn store_fat_ptr<'a, 'tcx>(cx: &Builder<'a, 'tcx>,
store_fn_arg			    pub fn store_fn_arg(&self, bcx: &Builder<'a, 'tcx>, idx: &mut usize, dst: ValueRef) 
store_operand			    pub fn store_operand(&mut self,
store_return			    fn store_return(&mut self,
store_ty			pub fn store_ty<'a, 'tcx>(cx: &Builder<'a, 'tcx>, v: ValueRef, dst: ValueRef,
str_slice_type			    pub fn str_slice_type(&self) -> Type 
string_to_io_error			fn string_to_io_error(s: String) -> io::Error 
struct_			    pub fn struct_(ccx: &CrateContext, els: &[Type], packed: bool) -> Type 
struct_field_ptr			    fn struct_field_ptr(
struct_gep			    pub fn struct_gep(&self, ptr: ValueRef, idx: usize) -> ValueRef 
struct_llfields			pub fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, field_tys: &Vec<Ty<'tcx>>,
struct_llfields_index			pub fn struct_llfields_index(variant: &layout::Struct, index: usize) -> usize 
struct_llfields_path			fn struct_llfields_path(discrfield: &layout::FieldPath) -> Vec<usize> 
struct_wrapped_nullable_bitdiscr			fn struct_wrapped_nullable_bitdiscr(
sub			    pub fn sub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
subroutine_type_metadata			fn subroutine_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
subsystem			    fn subsystem(&mut self, _subsystem: &str) 
subsystem			    fn subsystem(&mut self, subsystem: &str) 
subsystem			    fn subsystem(&mut self, subsystem: &str);
switch			    pub fn switch(&self, v: ValueRef, else_llbb: BasicBlockRef, num_cases: usize) -> ValueRef 
symbol_cache			    pub fn symbol_cache(&self) -> &'b SymbolCache<'b, 'tcx> 
symbol_cache			mod symbol_cache;
symbol_export			    pub mod symbol_export;
symbol_for_def_id			fn symbol_for_def_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
symbol_map			mod symbol_map;
symbol_name			pub fn symbol_name<'a, 'tcx>(instance: Instance<'tcx>,
symbol_names			    pub mod symbol_names;
symbol_names_test			mod symbol_names_test;
takes_hints			    fn takes_hints(&self) -> bool 
target_feature			fn target_feature(sess: &Session) -> String 
target_sets_discr_via_memset			fn target_sets_discr_via_memset<'a, 'tcx>(bcx: &Builder<'a, 'tcx>) -> bool 
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> 
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> 
tcx			    pub fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> 
td			    pub fn td(&self) -> llvm::TargetDataRef 
tests			mod tests 
to_align			    pub fn to_align(self) -> Option<u32> 
to_const			    fn to_const(&self, span: Span) -> Const<'tcx> 
to_const_int			fn to_const_int(value: ValueRef, t: Ty, tcx: TyCtxt) -> Option<ConstInt> 
to_immediate			pub fn to_immediate(bcx: &Builder, val: ValueRef, ty: Ty) -> ValueRef 
to_linker			    pub fn to_linker(&'a self,
to_operand			    pub fn to_operand<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> OperandRef<'tcx> 
to_raw_string			    pub fn to_raw_string(&self) -> String 
to_ref			    pub fn to_ref(&self) -> TypeRef 
to_ref_slice			    pub fn to_ref_slice(slice: &[Type]) -> &[TypeRef] 
to_string			    pub fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String 
to_string_internal			        fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
trait_pointer_metadata			fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
trans			    fn trans(&mut self) -> Result<Const<'tcx>, ConstEvalErr<'tcx>> 
trans_argument			    fn trans_argument(&mut self,
trans_arguments_untupled			    fn trans_arguments_untupled(&mut self,
trans_block			    pub fn trans_block(&mut self, bb: mir::BasicBlock,
trans_const			fn trans_const<'a, 'tcx>(
trans_constant			    pub fn trans_constant(&mut self,
trans_consume			    pub fn trans_consume(&mut self,
trans_crate			pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
trans_def			    fn trans_def(ccx: &'a CrateContext<'a, 'tcx>,
trans_fat_ptr_binop			    pub fn trans_fat_ptr_binop(&mut self,
trans_field_ptr			    pub fn trans_field_ptr(self, bcx: &Builder<'a, 'tcx>, ix: usize) -> (ValueRef, Alignment) 
trans_get_discr			pub fn trans_get_discr<'a, 'tcx>(
trans_global_asm			pub fn trans_global_asm<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_gnu_try			fn trans_gnu_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
trans_inline_asm			pub fn trans_inline_asm<'a, 'tcx>(
trans_instance			pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance<'tcx>) 
trans_intrinsic_call			pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
trans_item			mod trans_item;
trans_load			    pub fn trans_load(&mut self,
trans_lvalue			    pub fn trans_lvalue(&mut self,
trans_mir			pub fn trans_mir<'a, 'tcx: 'a>(
trans_msvc_try			fn trans_msvc_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,
trans_operand			    pub fn trans_operand(&mut self,
trans_rvalue			    pub fn trans_rvalue(&mut self,
trans_rvalue_operand			    pub fn trans_rvalue_operand(&mut self,
trans_scalar_binop			    pub fn trans_scalar_binop(&mut self,
trans_scalar_checked_binop			    pub fn trans_scalar_checked_binop(&mut self,
trans_set_discr			pub fn trans_set_discr<'a, 'tcx>(bcx: &Builder<'a, 'tcx>, t: Ty<'tcx>, val: ValueRef, to: u64) 
trans_statement			    pub fn trans_statement(&mut self,
trans_static			pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_static_initializer			pub fn trans_static_initializer<'a, 'tcx>(
trans_storage_liveness			    fn trans_storage_liveness(&self,
trans_transmute			    fn trans_transmute(&mut self, bcx: &Builder<'a, 'tcx>,
trans_transmute_into			    fn trans_transmute_into(&mut self, bcx: &Builder<'a, 'tcx>,
trap			    pub fn trap(&self) 
trunc			    pub fn trunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
trunc_or_bitcast			    pub fn trunc_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
try_intrinsic			fn try_intrinsic<'a, 'tcx>(
tvec			mod tvec;
ty			impl<'a, 'tcx> ty::layout::HasDataLayout for &'a CrateContext<'a, 'tcx> 
ty			impl<'a, 'tcx> ty::layout::HasDataLayout for &'a SharedCrateContext<'a, 'tcx> 
ty			impl<'a, 'tcx> ty::layout::HasTyCtxt<'tcx> for &'a CrateContext<'a, 'tcx> 
ty			impl<'a, 'tcx> ty::layout::HasTyCtxt<'tcx> for &'a SharedCrateContext<'a, 'tcx> 
ty_fn_sig			pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
ty_to_type			            fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type,
type_			mod type_;
type_hashcodes			    pub fn type_hashcodes<'a>(&'a self) -> &'a RefCell<FxHashMap<Ty<'tcx>, String>> 
type_is_fat_ptr			pub fn type_is_fat_ptr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_freeze			    pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool 
type_is_imm_pair			pub fn type_is_imm_pair<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)
type_is_immediate			pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_sized			    pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool 
type_is_zero_size			pub fn type_is_zero_size<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_metadata			pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
type_names			mod type_names;
type_needs_drop			    pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool 
type_of			pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
type_of			mod type_of;
type_of			pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
type_pair_fields			pub fn type_pair_fields<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)
udiv			    pub fn udiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
uint_from_ty			    pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type 
uitofp			    pub fn uitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
unadjusted			    pub fn unadjusted(ccx: &CrateContext<'a, 'tcx>,
unify			    fn unify(cls: &mut [Class],
union_fill			fn union_fill(cx: &CrateContext, size: u64, align: u64) -> Type 
unknown_file_metadata			pub fn unknown_file_metadata(cx: &CrateContext) -> DIFile 
unlib			    fn unlib<'a>(config: &config::Config, stem: &'a str) -> &'a str 
unpack_if_pair			    pub fn unpack_if_pair(mut self, bcx: &Builder<'a, 'tcx>) -> OperandRef<'tcx> 
unreachable			    pub fn unreachable(&self) 
unreachable_block			    fn unreachable_block(&mut self) -> BasicBlockRef 
unsize_thin_ptr			pub fn unsize_thin_ptr<'a, 'tcx>(
unsized_info			pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,
unsized_info_ty			pub fn unsized_info_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
unwind			pub fn unwind(val: ValueRef, can_unwind: bool) 
update_symbols			    pub fn update_symbols(&mut self) 
urem			    pub fn urem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
use_dll_storage_attrs			    pub fn use_dll_storage_attrs(&self) -> bool 
used_statics			    pub fn used_statics<'a>(&'a self) -> &'a RefCell<Vec<ValueRef>> 
utils			mod utils;
va_arg			    pub fn va_arg(&self, list: ValueRef, ty: Type) -> ValueRef 
val_ty			pub fn val_ty(v: ValueRef) -> Type 
value			mod value;
variadic_func			    pub fn variadic_func(args: &[Type], ret: &Type) -> Type 
vc_lib_subdir			    fn vc_lib_subdir(arch: &str) -> Option<&'static str> 
vec			    pub fn vec(ccx: &CrateContext, ty: &Type) -> Type 
vec_slice_metadata			fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
vector			    pub fn vector(ty: &Type, len: u64) -> Type 
vector_length			    pub fn vector_length(&self) -> usize 
vector_splat			    pub fn vector_splat(&self, num_elts: usize, elt: ValueRef) -> ValueRef 
visit_assign			    fn visit_assign(&mut self,
visit_constant			    fn visit_constant(&mut self, constant: &mir::Constant<'tcx>, location: Location) 
visit_drop_use			fn visit_drop_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
visit_fn_use			fn visit_fn_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) 
visit_instance_use			fn visit_instance_use<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
visit_item			    fn visit_item(&mut self, item: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_lvalue			    fn visit_lvalue(&mut self,
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &mir::Rvalue<'tcx>, location: Location) 
visit_terminator_kind			    fn visit_terminator_kind(&mut self,
visit_terminator_kind			    fn visit_terminator_kind(&mut self,
visit_trait_item			    fn visit_trait_item(&mut self, _: &'v hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) 
void			    pub fn void(ccx: &CrateContext) -> Type 
volatile_load			    pub fn volatile_load(&self, ptr: ValueRef) -> ValueRef 
volatile_store			    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef) -> ValueRef 
vtable_ptr			    pub fn vtable_ptr(ccx: &CrateContext) -> Type 
vtables			    pub fn vtables<'a>(&'a self)
wants_msvc_seh			pub fn wants_msvc_seh(sess: &Session) -> bool 
with_ccx			    pub fn with_ccx(ccx: &'a CrateContext<'a, 'tcx>) -> Self 
with_codegen			    unsafe fn with_codegen<F>(tm: TargetMachineRef,
with_inlining_candidates			    pub fn with_inlining_candidates<F>(&self, source: TransItem<'tcx>, mut f: F)
with_llvm_pmb			pub unsafe fn with_llvm_pmb(llmod: ModuleRef,
work_product_dep_node			    pub fn work_product_dep_node(&self) -> DepNode<DefId> 
work_product_id			    pub fn work_product_id(&self) -> Arc<WorkProductId> 
write			    pub mod write;
write_metadata			fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,
write_output_file			pub fn write_output_file(
write_rlib_bytecode_object_v1			fn write_rlib_bytecode_object_v1(writer: &mut Write,
xor			    pub fn xor(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
zext			    pub fn zext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
zext_or_bitcast			    pub fn zext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
