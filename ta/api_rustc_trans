::std::ops::BitAnd for Disr			impl ::std::ops::BitAnd for Disr 
AShr			pub fn AShr(cx: Block,
Action			enum Action<'a> 
Add			pub fn Add(cx: Block,
AddCase			pub fn AddCase(s: ValueRef, on_val: ValueRef, dest: BasicBlockRef) 
AddClause			pub fn AddClause(cx: Block, landing_pad: ValueRef, clause: ValueRef) 
AddIncomingToPhi			pub fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) 
Addition			enum Addition 
AggregateRet			pub fn AggregateRet(cx: Block,
Alloca			pub fn Alloca(cx: Block, ty: Type, name: &str) -> ValueRef 
AllocaFcx			pub fn AllocaFcx(fcx: &FunctionContext, ty: Type, name: &str) -> ValueRef 
And			pub fn And(cx: Block,
ArchiveBuilder			impl<'a> ArchiveBuilder<'a> 
ArchiveBuilder			pub struct ArchiveBuilder<'a> 
ArchiveConfig			pub struct ArchiveConfig<'a> 
ArgKind			pub enum ArgKind 
ArgType			impl ArgType 
ArgType			pub struct ArgType 
ArmData			struct ArmData<'p, 'blk, 'tcx: 'blk> 
AsI64			pub trait AsI64 { fn as_i64(self) -> i64; }
AsI64 for i32			impl AsI64 for i32 { fn as_i64(self) -> i64 { self as i64 }}
AsI64 for i64			impl AsI64 for i64 { fn as_i64(self) -> i64 { self as i64 }}
AsI64 for isize			impl AsI64 for isize { fn as_i64(self) -> i64 { self as i64 }}
AsU64			pub trait AsU64 { fn as_u64(self) -> u64; }
AsU64 for u32			impl AsU64 for u32  { fn as_u64(self) -> u64 { self as u64 }}
AsU64 for u64			impl AsU64 for u64  { fn as_u64(self) -> u64 { self as u64 }}
AsU64 for usize			impl AsU64 for usize { fn as_u64(self) -> u64 { self as u64 }}
AtomicCmpXchg			pub fn AtomicCmpXchg(cx: Block, dst: ValueRef,
AtomicFence			pub fn AtomicFence(cx: Block, order: AtomicOrdering, scope: SynchronizationScope) 
AtomicLoad			pub fn AtomicLoad(cx: Block, pointer_val: ValueRef, order: AtomicOrdering) -> ValueRef 
AtomicRMW			pub fn AtomicRMW(cx: Block, op: AtomicBinOp,
AtomicStore			pub fn AtomicStore(cx: Block, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
AutorefArg			pub enum AutorefArg 
B			pub fn B<'blk, 'tcx>(cx: Block<'blk, 'tcx>) -> Builder<'blk, 'tcx> 
BasicBlock			impl BasicBlock 
BasicBlock			pub struct BasicBlock(pub BasicBlockRef);
BinOp			pub fn BinOp(cx: Block,
BindingInfo			pub struct BindingInfo<'tcx> 
BitCast			pub fn BitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
BlockS			impl<'blk, 'tcx> BlockS<'blk, 'tcx> 
BlockS			pub struct BlockS<'blk, 'tcx: 'blk> 
Br			pub fn Br(cx: Block, dest: BasicBlockRef, debug_loc: DebugLoc) 
BranchKind			pub enum BranchKind 
Builder			impl<'a, 'tcx> Builder<'a, 'tcx> 
Builder			pub struct Builder<'a, 'tcx: 'a> 
BuilderRef_res			pub fn BuilderRef_res(b: BuilderRef) -> BuilderRef_res 
BuilderRef_res			pub struct BuilderRef_res 
C_array			pub fn C_array(ty: Type, elts: &[ValueRef]) -> ValueRef 
C_bool			pub fn C_bool(ccx: &CrateContext, val: bool) -> ValueRef 
C_bytes			pub fn C_bytes(cx: &CrateContext, bytes: &[u8]) -> ValueRef 
C_bytes_in_context			pub fn C_bytes_in_context(llcx: ContextRef, bytes: &[u8]) -> ValueRef 
C_cstr			pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> ValueRef 
C_floating			pub fn C_floating(s: &str, t: Type) -> ValueRef 
C_floating_f64			pub fn C_floating_f64(f: f64, t: Type) -> ValueRef 
C_i32			pub fn C_i32(ccx: &CrateContext, i: i32) -> ValueRef 
C_int			pub fn C_int<I: AsI64>(ccx: &CrateContext, i: I) -> ValueRef 
C_integral			pub fn C_integral(t: Type, u: u64, sign_extend: bool) -> ValueRef 
C_named_struct			pub fn C_named_struct(t: Type, elts: &[ValueRef]) -> ValueRef 
C_nil			pub fn C_nil(ccx: &CrateContext) -> ValueRef 
C_null			pub fn C_null(t: Type) -> ValueRef 
C_str_slice			pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef 
C_struct			pub fn C_struct(cx: &CrateContext, elts: &[ValueRef], packed: bool) -> ValueRef 
C_struct_in_context			pub fn C_struct_in_context(llcx: ContextRef, elts: &[ValueRef], packed: bool) -> ValueRef 
C_u32			pub fn C_u32(ccx: &CrateContext, i: u32) -> ValueRef 
C_u64			pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef 
C_u8			pub fn C_u8(ccx: &CrateContext, i: u8) -> ValueRef 
C_uint			pub fn C_uint<I: AsU64>(ccx: &CrateContext, i: I) -> ValueRef 
C_undef			pub fn C_undef(t: Type) -> ValueRef 
C_vector			pub fn C_vector(elts: &[ValueRef]) -> ValueRef 
CachedEarlyExit			pub struct CachedEarlyExit 
Call			pub fn Call(cx: Block,
CallArgs			pub enum CallArgs<'a, 'tcx> 
CallWithConv			pub fn CallWithConv(cx: Block,
Callee			pub struct Callee<'blk, 'tcx: 'blk> 
CalleeData			pub enum CalleeData<'tcx> 
Case			impl<'tcx> Case<'tcx> 
Case			struct Case<'tcx> 
Cast			pub fn Cast(cx: Block, op: Opcode, val: ValueRef, dest_ty: Type,
ClassList			impl ClassList for [RegClass] 
ClassList			trait ClassList 
Cleanup			pub trait Cleanup<'tcx> 
Cleanup for DropValue			impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> 
Cleanup for FreeValue			impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> 
Cleanup for LifetimeEnd			impl<'tcx> Cleanup<'tcx> for LifetimeEnd 
CleanupHelperMethods			trait CleanupHelperMethods<'blk, 'tcx> 
CleanupHelperMethods for FunctionContext			impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> 
CleanupMethods			pub trait CleanupMethods<'blk, 'tcx> 
CleanupMethods for FunctionContext			impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> 
CleanupScope			impl<'blk, 'tcx> CleanupScope<'blk, 'tcx> 
CleanupScope			pub struct CleanupScope<'blk, 'tcx: 'blk> 
CleanupScopeKind			impl<'blk, 'tcx> CleanupScopeKind<'blk, 'tcx> 
CleanupScopeKind			pub enum CleanupScopeKind<'blk, 'tcx: 'blk> 
ClosureEnv			impl<'a> ClosureEnv<'a> 
ClosureEnv			pub enum ClosureEnv<'a> 
CodegenContext			impl<'a> CodegenContext<'a> 
CodegenContext			struct CodegenContext<'a> 
CondBr			pub fn CondBr(cx: Block,
ConstEvalFailure			impl ConstEvalFailure 
ConstEvalFailure			pub enum ConstEvalFailure 
ConstantExpr			impl<'a> ConstantExpr<'a> 
ConstantExpr			struct ConstantExpr<'a>(&'a hir::Expr);
CrateContext			impl<'b, 'tcx> CrateContext<'b, 'tcx> 
CrateContext			pub struct CrateContext<'a, 'tcx: 'a> 
CrateContextIterator			pub struct CrateContextIterator<'a, 'tcx: 'a> 
CrateContextMaybeIterator			pub struct CrateContextMaybeIterator<'a, 'tcx: 'a> 
CrateData			pub struct CrateData 
CrateDebugContext			impl<'tcx> CrateDebugContext<'tcx> 
CrateDebugContext			pub struct CrateDebugContext<'tcx> 
CrateTranslation			pub struct CrateTranslation 
CustomScopeIndex			pub struct CustomScopeIndex 
DIB			pub fn DIB(cx: &CrateContext) -> DIBuilderRef 
Data			pub enum Data 
Datum			impl<'tcx> Datum<'tcx, Lvalue> 
Datum			impl<'tcx, K: KindOps + fmt::Debug> Datum<'tcx, K> 
Datum			impl<'tcx> Datum<'tcx, Expr> 
Datum			impl<'tcx> Datum<'tcx, Lvalue> 
Datum			impl<'tcx> Datum<'tcx, Rvalue> 
Datum			pub struct Datum<'tcx, K> 
DatumBlock			impl<'blk, 'tcx, K: KindOps + fmt::Debug> DatumBlock<'blk, 'tcx, K> 
DatumBlock			impl<'blk, 'tcx, K> DatumBlock<'blk, 'tcx, K> 
DatumBlock			impl<'blk, 'tcx> DatumBlock<'blk, 'tcx, Expr> 
DatumBlock			pub struct DatumBlock<'blk, 'tcx: 'blk, K> 
DebugLoc			impl DebugLoc 
DebugLoc			pub enum DebugLoc 
Dest			pub enum Dest<'a, 'tcx: 'a> 
Dest			impl Dest 
Dest			pub enum Dest 
Diagnostic			struct Diagnostic 
Disr			impl Disr 
Disr			pub struct Disr(pub u64);
Drop for BuilderRef_res			impl Drop for BuilderRef_res 
Drop for OwnedKey			impl Drop for OwnedKey 
Drop for Rvalue			impl Drop for Rvalue 
Drop for StatRecorder			impl<'a, 'tcx> Drop for StatRecorder<'a, 'tcx> 
Drop for TypeOfDepthLock			impl<'a, 'tcx> Drop for TypeOfDepthLock<'a, 'tcx> 
Drop for _InsnCtxt			impl Drop for _InsnCtxt 
DropFlagHintsMap			impl<'tcx> DropFlagHintsMap<'tcx> 
DropFlagHintsMap			pub struct DropFlagHintsMap<'tcx> 
DropFlagInfo			impl DropFlagInfo 
DropFlagInfo			pub enum DropFlagInfo 
DropGlueKind			impl<'tcx> DropGlueKind<'tcx> 
DropGlueKind			pub enum DropGlueKind<'tcx> 
DropHint			impl DropHint<ValueRef> 
DropHint			impl<K> DropHint<K> 
DropHint			pub struct DropHint<K>(pub ast::NodeId, pub K);
DropHintMethods			pub trait DropHintMethods 
DropHintMethods for DropHintDatum			impl<'tcx> DropHintMethods for DropHintDatum<'tcx> 
DropValue			pub struct DropValue<'tcx> 
DumpCsvVisitor			impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> 
DumpCsvVisitor			pub struct DumpCsvVisitor<'l, 'tcx: 'l> 
EarlyExitLabel			impl EarlyExitLabel 
EarlyExitLabel			pub enum EarlyExitLabel 
Emitter for SharedEmitter			impl Emitter for SharedEmitter 
EmptyPhi			pub fn EmptyPhi(cx: Block, ty: Type) -> ValueRef 
EnumData			pub struct EnumData 
EnumDiscriminantInfo			enum EnumDiscriminantInfo 
EnumMemberDescriptionFactory			impl<'tcx> EnumMemberDescriptionFactory<'tcx> 
EnumMemberDescriptionFactory			struct EnumMemberDescriptionFactory<'tcx> 
ExactSDiv			pub fn ExactSDiv(cx: Block,
Expr			pub enum Expr 
ExprKind			enum ExprKind 
ExprOrMethodCall			pub enum ExprOrMethodCall 
ExtractElement			pub fn ExtractElement(cx: Block, vec_val: ValueRef, index: ValueRef) -> ValueRef 
ExtractValue			pub fn ExtractValue(cx: Block, agg_val: ValueRef, index: usize) -> ValueRef 
ExtractedBlock			struct ExtractedBlock<'blk, 'tcx: 'blk> 
FAdd			pub fn FAdd(cx: Block,
FCmp			pub fn FCmp(cx: Block,
FDiv			pub fn FDiv(cx: Block,
FMul			pub fn FMul(cx: Block,
FNeg			pub fn FNeg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
FPCast			pub fn FPCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPExt			pub fn FPExt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPToSI			pub fn FPToSI(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPToUI			pub fn FPToUI(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPTrunc			pub fn FPTrunc(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FRem			pub fn FRem(cx: Block,
FSub			pub fn FSub(cx: Block,
FailureHandler			enum FailureHandler 
FailureHandler			impl FailureHandler 
Field			pub struct Field<'tcx>(pub ast::Name, pub Ty<'tcx>);
FindNestedReturn			impl FindNestedReturn 
FindNestedReturn			struct FindNestedReturn 
Flavor			pub enum Flavor 
FmtStrs			impl<'a, 'tcx: 'a> FmtStrs<'a, 'tcx> 
FmtStrs			pub struct FmtStrs<'a, 'tcx: 'a> 
FnType			pub struct FnType 
ForeignTypes			struct ForeignTypes<'tcx> 
Free			pub fn Free(cx: Block, pointer_val: ValueRef) 
FreeValue			pub struct FreeValue<'tcx> 
From for Disr			impl From<::middle::ty::Disr> for Disr 
From for Disr			impl From<usize> for Disr 
FunctionCallData			pub struct FunctionCallData 
FunctionContext			impl<'a, 'tcx> FunctionContext<'a, 'tcx> 
FunctionContext			pub struct FunctionContext<'a, 'tcx: 'a> 
FunctionData			pub struct FunctionData 
FunctionDebugContext			impl FunctionDebugContext 
FunctionDebugContext			pub enum FunctionDebugContext 
FunctionDebugContextData			pub struct FunctionDebugContextData 
GEP			pub fn GEP(cx: Block, pointer: ValueRef, indices: &[ValueRef]) -> ValueRef 
GEPi			pub fn GEPi(cx: Block, base: ValueRef, ixs: &[usize]) -> ValueRef 
GetDtorType			pub trait GetDtorType<'tcx> { fn dtor_type(&self) -> Ty<'tcx>; }
GetDtorType for ty			impl<'tcx> GetDtorType<'tcx> for ty::ctxt<'tcx> 
GlobalString			pub fn GlobalString(cx: Block, _str: *const c_char) -> ValueRef 
GlobalStringPtr			pub fn GlobalStringPtr(cx: Block, _str: *const c_char) -> ValueRef 
GnuLinker			impl<'a> GnuLinker<'a> 
GnuLinker			pub struct GnuLinker<'a> 
GraphvizDepGraph			pub struct GraphvizDepGraph(FnvHashSet<DepNode>, Vec<(DepNode, DepNode)>);
HandlerFreeVars			struct HandlerFreeVars<'a> 
Heap			pub enum Heap 
HintEntry			struct HintEntry<'tcx> 
HintKind			pub enum HintKind 
ICmp			pub fn ICmp(cx: Block,
IfThisChanged			impl<'a, 'tcx> IfThisChanged<'a, 'tcx> 
IfThisChanged			struct IfThisChanged<'a, 'tcx:'a> 
ImplData			pub struct ImplData 
InBoundsGEP			pub fn InBoundsGEP(cx: Block, pointer: ValueRef, indices: &[ValueRef]) -> ValueRef 
IndirectBr			pub fn IndirectBr(cx: Block,
InitAlloca			pub enum InitAlloca 
InlineAsmCall			pub fn InlineAsmCall(cx: Block, asm: *const c_char, cons: *const c_char,
InsertElement			pub fn InsertElement(cx: Block, vec_val: ValueRef, elt_val: ValueRef,
InsertValue			pub fn InsertValue(cx: Block, agg_val: ValueRef, elt_val: ValueRef, index: usize) -> ValueRef 
IntBounds			struct IntBounds 
IntCast			pub fn IntCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
IntToPtr			pub fn IntToPtr(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
InternalDebugLocation			impl InternalDebugLocation 
InternalDebugLocation			pub enum InternalDebugLocation 
Invoke			pub fn Invoke(cx: Block,
IsNotNull			pub fn IsNotNull(cx: Block, val: ValueRef) -> ValueRef 
IsNull			pub fn IsNull(cx: Block, val: ValueRef) -> ValueRef 
Iterator for CrateContextIterator			impl<'a, 'tcx> Iterator for CrateContextIterator<'a,'tcx> 
Iterator for CrateContextMaybeIterator			impl<'a, 'tcx> Iterator for CrateContextMaybeIterator<'a, 'tcx> 
Iterator for Users			impl Iterator for Users 
Iterator for ValueIter			impl Iterator for ValueIter 
KindOps			pub trait KindOps 
KindOps for Expr			impl KindOps for Expr 
KindOps for Lvalue			impl KindOps for Lvalue 
KindOps for Rvalue			impl KindOps for Rvalue 
LShr			pub fn LShr(cx: Block,
LandingPad			pub fn LandingPad(cx: Block, ty: Type, pers_fn: ValueRef,
Lifetime			enum Lifetime { Start, End }
LifetimeEnd			pub struct LifetimeEnd 
Linker			pub trait Linker 
Linker for GnuLinker			impl<'a> Linker for GnuLinker<'a> 
Linker for MsvcLinker			impl<'a> Linker for MsvcLinker<'a> 
LlvmRepr			impl<T:LlvmRepr> LlvmRepr for [T] 
LlvmRepr			pub trait LlvmRepr 
LlvmRepr for Type			impl LlvmRepr for Type 
LlvmRepr for ValueRef			impl LlvmRepr for ValueRef 
LlvmSignature			struct LlvmSignature 
Load			pub fn Load(cx: Block, pointer_val: ValueRef) -> ValueRef 
LoadNonNull			pub fn LoadNonNull(cx: Block, ptr: ValueRef) -> ValueRef 
LoadRangeAssert			pub fn LoadRangeAssert(cx: Block, pointer_val: ValueRef, lo: u64,
LocalCrateContext			impl<'tcx> LocalCrateContext<'tcx> 
LocalCrateContext			pub struct LocalCrateContext<'tcx> 
Lvalue			impl Lvalue { \/\/ Constructors for various Lvalues.
Lvalue			impl Lvalue 
Lvalue			pub struct Lvalue 
LvalueRef			impl<'tcx> LvalueRef<'tcx> 
LvalueRef			pub struct LvalueRef<'tcx> 
Match			struct Match<'a, 'p: 'a, 'blk: 'a, 'tcx: 'blk> 
MatchInput			impl MatchInput 
MatchInput			pub struct MatchInput { val: ValueRef, lval: Lvalue }
MaybeSizedValue			impl MaybeSizedValue 
MaybeSizedValue			pub struct MaybeSizedValue 
MemberDescription			struct MemberDescription 
MemberDescriptionFactory			enum MemberDescriptionFactory<'tcx> 
MemberDescriptionFactory			impl<'tcx> MemberDescriptionFactory<'tcx> 
MemberOffset			enum MemberOffset 
MetadataCreationResult			impl MetadataCreationResult 
MetadataCreationResult			struct MetadataCreationResult 
MethodCallData			pub struct MethodCallData 
MethodData			pub struct MethodData 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			pub struct MirContext<'bcx, 'tcx:'bcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
ModData			pub struct ModData 
ModRefData			pub struct ModRefData 
ModuleConfig			impl ModuleConfig 
ModuleConfig			pub struct ModuleConfig 
ModuleTranslation			pub struct ModuleTranslation 
MonoId			pub struct MonoId<'tcx> 
MsvcLinker			pub struct MsvcLinker<'a> 
Mul			pub fn Mul(cx: Block,
NSWAdd			pub fn NSWAdd(cx: Block,
NSWMul			pub fn NSWMul(cx: Block,
NSWNeg			pub fn NSWNeg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
NSWSub			pub fn NSWSub(cx: Block,
NUWAdd			pub fn NUWAdd(cx: Block,
NUWMul			pub fn NUWMul(cx: Block,
NUWNeg			pub fn NUWNeg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
NUWSub			pub fn NUWSub(cx: Block,
NamespaceTreeNode			impl NamespaceTreeNode 
NamespaceTreeNode			pub struct NamespaceTreeNode 
Neg			pub fn Neg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
NodeIdAndSpan			pub struct NodeIdAndSpan 
Not			pub fn Not(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
OperandRef			impl<'tcx> OperandRef<'tcx> 
OperandRef			pub struct OperandRef<'tcx> 
OperandValue			pub enum OperandValue 
Opt			enum Opt<'a, 'tcx> 
Opt			impl<'a, 'tcx> Opt<'a, 'tcx> 
OptResult			pub enum OptResult<'blk, 'tcx: 'blk> 
Or			pub fn Or(cx: Block,
Ord for Disr			impl Ord for Disr 
OverflowCodegen			enum OverflowCodegen 
OverflowOp			enum OverflowOp 
OverflowOp			impl OverflowOp 
OverflowOpViaInputCheck			enum OverflowOpViaInputCheck { Shl, Shr, }
OverflowOpViaInputCheck			impl OverflowOpViaInputCheck 
OverflowOpViaIntrinsic			enum OverflowOpViaIntrinsic { Add, Sub, Mul, }
OverflowOpViaIntrinsic			impl OverflowOpViaIntrinsic 
OwnedKey			struct OwnedKey(HKEY);
PartialOrd for Disr			impl PartialOrd for Disr 
PathCollector			impl PathCollector 
PathCollector			struct PathCollector 
Phi			pub fn Phi(cx: Block, ty: Type, vals: &[ValueRef],
PointerCast			pub fn PointerCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
PtrDiff			pub fn PtrDiff(cx: Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
PtrToInt			pub fn PtrToInt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
ReassignmentChecker			struct ReassignmentChecker 
Recorder			impl Recorder 
Recorder			pub struct Recorder 
RecursiveTypeDescription			enum RecursiveTypeDescription<'tcx> 
RecursiveTypeDescription			impl<'tcx> RecursiveTypeDescription<'tcx> 
RegClass			enum RegClass 
RegClass			impl RegClass 
RegCloseKey			    fn RegCloseKey(hKey: HKEY) -> LONG;
RegOpenKeyExW			    fn RegOpenKeyExW(hKey: HKEY,
RegQueryValueExW			    fn RegQueryValueExW(hKey: HKEY,
RegistryKey			impl RegistryKey 
RegistryKey			pub struct RegistryKey(Repr);
Repr			enum Repr 
Repr			pub enum Repr<'tcx> 
Result			impl<'b, 'tcx> Result<'b, 'tcx> 
Result			pub struct Result<'blk, 'tcx: 'blk> 
Resume			pub fn Resume(cx: Block, exn: ValueRef) -> ValueRef 
Ret			pub fn Ret(cx: Block, v: ValueRef, debug_loc: DebugLoc) 
RetVoid			pub fn RetVoid(cx: Block, debug_loc: DebugLoc) 
Row			pub enum Row 
Rvalue			impl Rvalue 
Rvalue			pub struct Rvalue 
RvalueMode			pub enum RvalueMode 
SDiv			pub fn SDiv(cx: Block,
SExt			pub fn SExt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SExtOrBitCast			pub fn SExtOrBitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SIToFP			pub fn SIToFP(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SRem			pub fn SRem(cx: Block,
SaveContext			impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> 
SaveContext			pub struct SaveContext<'l, 'tcx: 'l> 
ScopeId			pub enum ScopeId 
ScopeStackEntry			struct ScopeStackEntry 
Select			pub fn Select(cx: Block, if_: ValueRef, then: ValueRef, else_: ValueRef) -> ValueRef 
Send for ModuleConfig			unsafe impl Send for ModuleConfig { }
Send for ModuleTranslation			unsafe impl Send for ModuleTranslation { }
Send for RegistryKey			unsafe impl Send for RegistryKey {}
SetCleanup			pub fn SetCleanup(cx: Block, landing_pad: ValueRef) 
SharedCrateContext			impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> 
SharedCrateContext			pub struct SharedCrateContext<'a, 'tcx: 'a> 
SharedEmitter			impl SharedEmitter 
SharedEmitter			struct SharedEmitter 
Shl			pub fn Shl(cx: Block,
ShuffleVector			pub fn ShuffleVector(cx: Block, v1: ValueRef, v2: ValueRef,
SpanUtils			impl<'a> SpanUtils<'a> 
SpanUtils			pub struct SpanUtils<'a> 
StatRecorder			impl<'a, 'tcx> StatRecorder<'a, 'tcx> 
StatRecorder			pub struct StatRecorder<'a, 'tcx: 'a> 
State			    enum State { Undecided, Deciding, Included, Excluded }
Stats			pub struct Stats 
Store			pub fn Store(cx: Block, val: ValueRef, ptr: ValueRef) -> ValueRef 
Strategy			enum Strategy { RetValue(Type), RetPointer }
Struct			pub struct Struct<'tcx> 
StructBaseInfo			pub struct StructBaseInfo<'a, 'tcx> 
StructGEP			pub fn StructGEP(cx: Block, pointer: ValueRef, idx: usize) -> ValueRef 
StructMemberDescriptionFactory			impl<'tcx> StructMemberDescriptionFactory<'tcx> 
StructMemberDescriptionFactory			struct StructMemberDescriptionFactory<'tcx> 
Style			        enum Style { Float, Int(\/* is signed? *\/ bool), Unsupported }
Sub			pub fn Sub(cx: Block,
Switch			pub fn Switch(cx: Block, v: ValueRef, else_: BasicBlockRef, num_cases: usize)
Sync for ModuleTranslation			unsafe impl Sync for ModuleTranslation { }
Sync for RegistryKey			unsafe impl Sync for RegistryKey {}
TempAnalyzer			impl TempAnalyzer 
TempAnalyzer			struct TempAnalyzer 
TempRef			enum TempRef<'tcx> 
ToDebugLoc			pub trait ToDebugLoc 
ToDebugLoc for NodeIdAndSpan			impl ToDebugLoc for NodeIdAndSpan 
ToDebugLoc for Option			impl ToDebugLoc for Option<NodeIdAndSpan> 
ToDebugLoc for hir			impl ToDebugLoc for hir::Expr 
TransBindingMode			impl TransBindingMode 
TransBindingMode			pub enum TransBindingMode 
TransItemsWithinModVisitor			pub struct TransItemsWithinModVisitor<'a, 'tcx: 'a> 
TransModVisitor			pub struct TransModVisitor<'a, 'tcx: 'a> 
Trap			pub fn Trap(cx: Block) 
TrueConst			pub enum TrueConst 
Trunc			pub fn Trunc(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
TruncOrBitCast			pub fn TruncOrBitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
TupleMemberDescriptionFactory			impl<'tcx> TupleMemberDescriptionFactory<'tcx> 
TupleMemberDescriptionFactory			struct TupleMemberDescriptionFactory<'tcx> 
Type			impl Type 
Type			pub struct Type 
TypeContext			impl TypeContext 
TypeContext			pub struct TypeContext 
TypeMap			impl<'tcx> TypeMap<'tcx> 
TypeMap			pub struct TypeMap<'tcx> 
TypeMethods			trait TypeMethods 
TypeMethods for Type			impl TypeMethods for Type 
TypeNames			impl TypeNames 
TypeNames			pub struct TypeNames 
TypeOfDepthLock			pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);
TypeRefData			pub struct TypeRefData 
UDiv			pub fn UDiv(cx: Block,
UIToFP			pub fn UIToFP(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
URem			pub fn URem(cx: Block,
UniqueTypeId			pub struct UniqueTypeId(ast::Name);
Unreachable			pub fn Unreachable(cx: Block) 
Use			impl Use 
Use			pub struct Use(UseRef);
Users			pub struct Users 
VAArg			pub fn VAArg(cx: Block, list: ValueRef, ty: Type) -> ValueRef 
Value			impl Value 
Value			pub struct Value(pub ValueRef);
ValueIter			struct ValueIter 
ValueOrigin			pub enum ValueOrigin 
VariableAccess			pub enum VariableAccess<'a> 
VariableData			pub struct VariableData 
VariableKind			pub enum VariableKind 
VariableRefData			pub struct VariableRefData 
VariantInfo			impl<'tcx> VariantInfo<'tcx> 
VariantInfo			pub struct VariantInfo<'tcx> 
VariantMemberDescriptionFactory			impl<'tcx> VariantMemberDescriptionFactory<'tcx> 
VariantMemberDescriptionFactory			struct VariantMemberDescriptionFactory<'tcx> 
VecTypes			impl<'tcx> VecTypes<'tcx> 
VecTypes			struct VecTypes<'tcx> 
VectorSplat			pub fn VectorSplat(cx: Block, num_elts: usize, elt_val: ValueRef) -> ValueRef 
Visitor for DumpCsvVisitor			impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> 
Visitor for FindNestedReturn			impl<'v> Visitor<'v> for FindNestedReturn 
Visitor for IfThisChanged			impl<'a, 'tcx> Visitor<'tcx> for IfThisChanged<'a, 'tcx> 
Visitor for PathCollector			impl<'v> Visitor<'v> for PathCollector 
Visitor for TempAnalyzer			impl<'tcx> Visitor<'tcx> for TempAnalyzer 
Visitor for TransItemsWithinModVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for TransItemsWithinModVisitor<'a, 'tcx> 
Visitor for TransModVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for TransModVisitor<'a, 'tcx> 
VolatileLoad			pub fn VolatileLoad(cx: Block, pointer_val: ValueRef) -> ValueRef 
VolatileStore			pub fn VolatileStore(cx: Block, val: ValueRef, ptr: ValueRef) -> ValueRef 
WorkItem			struct WorkItem 
Xor			pub fn Xor(cx: Block,
ZExt			pub fn ZExt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
ZExtOrBitCast			pub fn ZExtOrBitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
_InsnCtxt			pub struct _InsnCtxt 
_Undef			pub fn _Undef(val: ValueRef) -> ValueRef 
_UndefReturn			pub fn _UndefReturn(cx: Block, fn_: ValueRef) -> ValueRef 
__HKEY__			pub enum __HKEY__ {}
_match			mod _match;
add			    pub fn add(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
add_archive			    fn add_archive<F>(&mut self, archive: &Path, name: &str, skip: F)
add_archive_members			    fn add_archive_members(&mut self, members: &mut Vec<PathBuf>,
add_argument_attributes			fn add_argument_attributes(tys: &ForeignTypes,
add_cached_early_exit			    fn add_cached_early_exit(&mut self,
add_clause			    pub fn add_clause(&self, landing_pad: ValueRef, clause: ValueRef) 
add_clean			    pub fn add_clean<'a>(self,
add_clean_if_rvalue			    pub fn add_clean_if_rvalue<'blk>(self,
add_comment			pub fn add_comment(cx: Block, text: &str) 
add_comment			    pub fn add_comment(&self, text: &str) 
add_dynamic_crate			    fn add_dynamic_crate(cmd: &mut Linker, sess: &Session, cratepath: &Path) 
add_file			    pub fn add_file(&mut self, file: &Path) 
add_lib			    fn add_lib(cmd: &mut Command, lib: &Path) 
add_local_native_libraries			fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) 
add_native_library			    pub fn add_native_library(&mut self, name: &str) 
add_object			    fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }
add_object			    fn add_object(&mut self, path: &Path);
add_rlib			    pub fn add_rlib(&mut self, rlib: &Path, name: &str, lto: bool)
add_rvalue_clean			fn add_rvalue_clean<'a, 'tcx>(mode: RvalueMode,
add_span_comment			pub fn add_span_comment(cx: Block, sp: Span, text: &str) 
add_span_comment			    pub fn add_span_comment(&self, sp: Span, text: &str) 
add_static_crate			    fn add_static_crate(cmd: &mut Linker, sess: &Session, tmpdir: &Path,
add_upstream_native_libraries			fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) 
add_upstream_rust_crates			fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,
addr_of			pub fn addr_of(ccx: &CrateContext,
addr_of_mut			fn addr_of_mut(ccx: &CrateContext,
adjustment_required			fn adjustment_required<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
adt			mod adt;
adt_reprs			    pub fn adt_reprs<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, Rc<adt::Repr<'tcx>>>> 
aggregate_ret			    pub fn aggregate_ret(&self, ret_vals: &[ValueRef]) 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type, align_fn: TyAlignFn) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			    fn align(off: usize, ty: Type) -> usize 
align_of			pub fn align_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>)
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
all_mem			    fn all_mem(cls: &mut [RegClass]) 
alloc_ty			pub fn alloc_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
alloc_ty_init			pub fn alloc_ty_init<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
alloca			pub fn alloca(cx: Block, ty: Type, name: &str) -> ValueRef 
alloca			    pub fn alloca(&self, ty: Type, name: &str) -> ValueRef 
alloca			    pub fn alloca<'bcx>(bcx: Block<'bcx, 'tcx>,
alloca_dropped			pub fn alloca_dropped<'blk, 'tcx>(cx: Block<'blk, 'tcx>, ty: Ty<'tcx>, name: &str) -> ValueRef 
alloca_if_copy			    fn alloca_if_copy(&self) -> Option<ValueRef> 
analyze			mod analyze;
and			    pub fn and(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
any_irrefutable_adt_pat			fn any_irrefutable_adt_pat(tcx: &ty::ctxt, m: &[Match], col: usize) -> bool 
any_region_pat			fn any_region_pat(m: &[Match], col: usize) -> bool 
any_uniq_pat			fn any_uniq_pat(m: &[Match], col: usize) -> bool 
apply			    pub fn apply(&self, fcx: &FunctionContext) 
apply_adjustments			fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
apply_param_substs			pub fn apply_param_substs<'tcx,T>(tcx: &ty::ctxt<'tcx>,
appropriate_rvalue_mode			    pub fn appropriate_rvalue_mode<'a>(&self, ccx: &CrateContext<'a, 'tcx>)
appropriate_rvalue_mode			pub fn appropriate_rvalue_mode<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
archive			    pub mod archive;
archive_config			fn archive_config<'a>(sess: &'a Session,
archive_search_paths			fn archive_search_paths(sess: &Session) -> Vec<PathBuf> 
arg_is_indirect			pub fn arg_is_indirect<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
arg_kind			pub fn arg_kind<'a, 'tcx>(cx: &FunctionContext<'a, 'tcx>, t: Ty<'tcx>) -> datum::Rvalue 
arg_offset			    pub fn arg_offset(&self) -> usize 
arg_type_of			pub fn arg_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
arg_value_refs			fn arg_value_refs<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>,
args			    fn args(&mut self, args: &[String]) { self.cmd.args(args); }
args			    fn args(&mut self, args: &[String]);
array			    pub fn array(ty: &Type, len: u64) -> Type 
array_length			    pub fn array_length(&self) -> usize 
as_store_inst			    pub fn as_store_inst(self) -> Option<Value> 
as_value			    pub fn as_value(self) -> Value 
ashr			    pub fn ashr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
asm			mod asm;
assert_dep_graph			pub fn assert_dep_graph(tcx: &ty::ctxt) 
assert_dep_graph			mod assert_dep_graph;
assert_discr_in_range			fn assert_discr_in_range(ity: IntType, min: Disr, max: Disr, discr: Disr) 
assert_lvalue			    pub fn assert_lvalue(self, bcx: Block) -> Datum<'tcx, Lvalue> 
assert_type_for_node_id			pub fn assert_type_for_node_id(cx: &CrateContext,
associate_type			    pub fn associate_type(&self, s: &str, t: &Type) 
atomic_cmpxchg			    pub fn atomic_cmpxchg(&self, dst: ValueRef,
atomic_fence			    pub fn atomic_fence(&self, order: AtomicOrdering, scope: SynchronizationScope) 
atomic_load			    pub fn atomic_load(&self, ptr: ValueRef, order: AtomicOrdering) -> ValueRef 
atomic_rmw			    pub fn atomic_rmw(&self, op: AtomicBinOp,
atomic_store			    pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
attributes			mod attributes;
auto_ref			fn auto_ref<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
available_drop_glues			    pub fn available_drop_glues(&self) -> &RefCell<FnvHashMap<DropGlueKind<'tcx>, String>> 
available_monomorphizations			    pub fn available_monomorphizations<'a>(&'a self) -> &'a RefCell<FnvHashSet<String>> 
avoid_invoke			pub fn avoid_invoke(bcx: Block) -> bool 
back			pub mod back 
base			mod base;
basic_block			mod basic_block;
basic_type_metadata			fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
bcx			    fn bcx(&self, bb: mir::BasicBlock) -> Block<'bcx, 'tcx> 
bin_op_to_fcmp_predicate			pub fn bin_op_to_fcmp_predicate(ccx: &CrateContext, op: hir::BinOp_) -> llvm::RealPredicate 
bin_op_to_icmp_predicate			pub fn bin_op_to_icmp_predicate(ccx: &CrateContext,
bin_subdir			    fn bin_subdir(arch: &str) -> Option<&'static str> 
bind_irrefutable_pat			pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
bind_subslice_pat			fn bind_subslice_pat(bcx: Block,
binop			    pub fn binop(&self, op: Opcode, lhs: ValueRef, rhs: ValueRef)
bitand			    fn bitand(self, other: Self) -> Self 
bitcast			    pub fn bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
block			mod block;
block_name			    fn block_name(&self, prefix: &str) -> String 
bool			    pub fn bool(ccx: &CrateContext) -> Type 
borrow			    fn borrow(&mut self, _: ast::NodeId, _: Span, _: mc::cmt, _: ty::Region,
bounds_usable			fn bounds_usable(cx: &CrateContext, ity: IntType, bounds: &IntBounds) -> bool 
br			    pub fn br(&self, dest: BasicBlockRef) 
build			    pub fn build(&mut self) 
build			mod build;
build_cfg			fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>) 
build_const_struct			fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
build_dylib			    fn build_dylib(&mut self, _out_filename: &Path) { self.cmd.arg("\/DLL"); }
build_dylib			    fn build_dylib(&mut self, out_filename: &Path) 
build_dylib			    fn build_dylib(&mut self, out_filename: &Path);
build_intrinsic_call			    fn build_intrinsic_call<'blk, 'tcx>(&self, bcx: Block<'blk, 'tcx>,
build_link_meta			pub fn build_link_meta(sess: &Session,
build_nonzero_check			fn build_nonzero_check<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
build_return_block			pub fn build_return_block<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,
build_rust_fn			    fn build_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
build_unchecked_lshift			pub fn build_unchecked_lshift<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
build_unchecked_rshift		hift<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
build_with_ar_cmd			    fn build_with_ar_cmd(&mut self) -> io::Result<()> 
build_with_input_check			    fn build_with_input_check<'blk, 'tcx>(&self,
build_with_llvm			    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> 
build_work_item			fn build_work_item(sess: &Session,
build_wrap_fn			    unsafe fn build_wrap_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
builder			    pub fn builder<'a>(&'a self) -> Builder<'a, 'tcx> 
builder			mod builder;
by_pointer			pub unsafe fn by_pointer() -> String 
by_value			pub unsafe fn by_value() -> i32 
bytes_to_bits			pub fn bytes_to_bits(bytes: u64) -> u64 
cabi			mod cabi;
cabi_aarch64			mod cabi_aarch64;
cabi_arm			mod cabi_arm;
cabi_mips			mod cabi_mips;
cabi_powerpc			mod cabi_powerpc;
cabi_powerpc64			mod cabi_powerpc64;
cabi_x86			mod cabi_x86;
cabi_x86_64			mod cabi_x86_64;
cabi_x86_win64			mod cabi_x86_win64;
cached_early_exit			    fn cached_early_exit(&self,
call			    pub fn call(&self, llfn: ValueRef, args: &[ValueRef],
call_lifetime_end			pub fn call_lifetime_end(cx: Block, ptr: ValueRef) 
call_lifetime_start			pub fn call_lifetime_start(cx: Block, ptr: ValueRef) 
call_memcpy			pub fn call_memcpy(cx: Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) 
call_with_conv			    pub fn call_with_conv(&self, llfn: ValueRef, args: &[ValueRef],
callee			mod callee;
cast			    pub fn cast(&self, op: Opcode, val: ValueRef, dest_ty: Type) -> ValueRef 
cast_is_noop			pub fn cast_is_noop<'tcx>(tcx: &ty::ctxt<'tcx>,
cast_shift_const_rhs			pub fn cast_shift_const_rhs(op: hir::BinOp_, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
cast_shift_expr_rhs			pub fn cast_shift_expr_rhs(cx: Block, op: hir::BinOp_, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
cast_shift_rhs			fn cast_shift_rhs<F, G>(op: hir::BinOp_,
ccx			    pub fn ccx(&self) -> &'blk CrateContext<'blk, 'tcx> 
char			    pub fn char(ccx: &CrateContext) -> Type 
check_and_record			    pub fn check_and_record(&mut self,
check_array			    fn check_array(ty: Type) -> Option<(Type, u64)> 
check_array			    fn check_array(ty: Type) -> Option<(Type, u64)> 
check_binary_expr_validity			fn check_binary_expr_validity(cx: &CrateContext, e: &hir::Expr, t: Ty,
check_drop_flag_for_sanity			    pub fn check_drop_flag_for_sanity(&self) -> bool 
check_intrinsics			pub fn check_intrinsics(ccx: &CrateContext) 
check_not_terminated			pub fn check_not_terminated(cx: Block) 
check_overflow			    pub fn check_overflow(&self) -> bool 
check_paths			fn check_paths(tcx: &ty::ctxt,
check_struct			    fn check_struct(ty: Type) -> Option<(Type, u64)> 
check_struct			    fn check_struct(ty: Type) -> Option<(Type, u64)> 
check_unary_expr_validity			fn check_unary_expr_validity(cx: &CrateContext, e: &hir::Expr, t: Ty,
classify			    fn classify(ty: Type,
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type, align_fn: TyAlignFn) -> ArgType 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type, offset: &mut usize) -> ArgType 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type, offset: &mut usize) -> ArgType 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ty: Type, align_fn: TyAlignFn) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_struct			    fn classify_struct(tys: &[Type],
classify_ty			fn classify_ty(ty: Type) -> Vec<RegClass> 
cleanup			    pub fn cleanup(&self) 
cleanup			mod cleanup;
clear_cached_exits			    fn clear_cached_exits(&mut self) 
clear_source_location			pub fn clear_source_location(fcx: &FunctionContext) 
closure			mod closure;
closure_bare_wrapper_cache			    pub fn closure_bare_wrapper_cache<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, ValueRef>> 
closure_vals			    pub fn closure_vals<'a>(&'a self) -> &'a RefCell<FnvHashMap<MonoId<'tcx>, ValueRef>> 
cmp			    fn cmp(&self, other: &Disr) -> ::std::cmp::Ordering 
codegen_strategy			    fn codegen_strategy(&self) -> OverflowCodegen 
coerce_to_int			fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_to_int			fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_to_long			fn coerce_to_long(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_unsized			fn coerce_unsized<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
coerce_unsized_into			pub fn coerce_unsized_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
combine_impl_and_methods_tps			fn combine_impl_and_methods_tps<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
command_path			fn command_path(sess: &Session) -> OsString 
common			mod common;
compare_fat_ptrs			pub fn compare_fat_ptrs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compare_scalar_types			pub fn compare_scalar_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compare_simd_types			pub fn compare_simd_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compare_str			    fn compare_str<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
compare_values			fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
compile_guard			fn compile_guard<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compile_submatch			fn compile_submatch<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compile_submatch_continue			fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
compile_unit_metadata			pub fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor 
composite_type_metadata			fn composite_type_metadata(cx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_debuginfo_type_name			pub fn compute_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
compute_struct_field_offsets			fn compute_struct_field_offsets<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
cond_br			    pub fn cond_br(&self, cond: ValueRef, then_llbb: BasicBlockRef, else_llbb: BasicBlockRef) 
configure_llvm			pub unsafe fn configure_llvm(sess: &Session) 
const_cstr_cache			    pub fn const_cstr_cache<'a>(&'a self) -> &'a RefCell<FnvHashMap<InternedString, ValueRef>> 
const_deref			fn const_deref<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
const_deref_ptr			fn const_deref_ptr(cx: &CrateContext, v: ValueRef) -> ValueRef 
const_err			fn const_err(cx: &CrateContext,
const_expr			pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
const_expr_unadjusted			fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
const_fn_call			fn const_fn_call<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
const_get_discrim			pub fn const_get_discrim(ccx: &CrateContext, r: &Repr, val: ValueRef) -> Disr 
const_get_elt			pub fn const_get_elt(cx: &CrateContext, v: ValueRef, us: &[c_uint])
const_get_field			pub fn const_get_field(ccx: &CrateContext, r: &Repr, val: ValueRef,
const_globals			    pub fn const_globals<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, ValueRef>> 
const_lit			pub fn const_lit(cx: &CrateContext, e: &hir::Expr, lit: &ast::Lit)
const_struct_field			fn const_struct_field(ccx: &CrateContext, val: ValueRef, ix: usize) -> ValueRef 
const_to_int			pub fn const_to_int(v: ValueRef) -> i64 
const_to_opt_int			pub fn const_to_opt_int(v: ValueRef) -> Option<i64> 
const_to_opt_uint			pub fn const_to_opt_uint(v: ValueRef) -> Option<u64> 
const_to_uint			pub fn const_to_uint(v: ValueRef) -> u64 
const_unsized			    pub fn const_unsized<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, ValueRef>> 
const_values			    pub fn const_values<'a>(&'a self) -> &'a RefCell<FnvHashMap<(ast::NodeId, &'tcx Substs<'tcx>),
constant			mod constant;
consts			mod consts;
consume			    fn consume(&mut self, _: ast::NodeId, _: Span, _: mc::cmt, _: euv::ConsumeMode) {}
consume_pat			    fn consume_pat(&mut self, _: &hir::Pat, _: mc::cmt, _: euv::ConsumeMode) {}
contains_nodebug_attribute			pub fn contains_nodebug_attribute(attributes: &[ast::Attribute]) -> bool 
contains_null			fn contains_null(s: &str) -> bool 
context			mod context;
controlflow			mod controlflow;
copy_fat_ptr			pub fn copy_fat_ptr(bcx: Block, src_ptr: ValueRef, dst_ptr: ValueRef) 
copy_intrinsic			fn copy_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
core_lifetime_emit			fn core_lifetime_emit<'blk, 'tcx, F>(ccx: &'blk CrateContext<'blk, 'tcx>,
count_insn			    pub fn count_insn(&self, category: &str) 
count_llvm_insn			    pub fn count_llvm_insn(&self) 
count_zeros_intrinsic			fn count_zeros_intrinsic(bcx: Block,
crate_root_namespace			pub fn crate_root_namespace<'a>(cx: &'a CrateContext) -> &'a str 
crate_str			    pub fn crate_str(&mut self, span: Span, name: &str, crate_root: &str) 
create_DIArray			pub fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray 
create_and_register_recursive_type_forward_declaration			fn create_and_register_recursive_type_forward_declaration<'a, 'tcx>(
create_argument_metadata			pub fn create_argument_metadata(bcx: Block, arg: &hir::Arg) 
create_bindings_map			fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &hir::Pat,
create_captured_var_metadata			pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
create_context_and_module			unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextRef, ModuleRef) 
create_datums_for_fn_args			pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,
create_dummy_locals			    fn create_dummy_locals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
create_entry_fn			    fn create_entry_fn(ccx: &CrateContext,
create_entry_wrapper			pub fn create_entry_wrapper(ccx: &CrateContext, sp: Span, main_llfn: ValueRef) 
create_function_debug_context			pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
create_global_var_metadata			pub fn create_global_var_metadata(cx: &CrateContext,
create_imps			fn create_imps(cx: &SharedCrateContext) 
create_local_var_metadata			pub fn create_local_var_metadata(bcx: Block, local: &hir::Local) 
create_match_binding_metadata			pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
create_member_descriptions			    fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)
create_scope_map			pub fn create_scope_map(cx: &CrateContext,
create_scope_map			mod create_scope_map;
create_struct_stub			fn create_struct_stub(cx: &CrateContext,
create_target_machine			pub fn create_target_machine(sess: &Session) -> TargetMachineRef 
custom_emit			    fn custom_emit(&mut self, _sp: errors::RenderSpan, _msg: &str, _lvl: Level) 
datum			mod datum;
datum_callee			    fn datum_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)
dbg_cx			    pub fn dbg_cx<'a>(&'a self) -> &'a Option<debuginfo::CrateDebugContext<'tcx>> 
debug_context			pub fn debug_context<'a, 'tcx>(cx: &'a CrateContext<'a, 'tcx>)
debug_loc			    fn debug_loc(&self) -> DebugLoc 
debug_loc			    fn debug_loc(&self) -> DebugLoc 
debug_loc			    fn debug_loc(&self) -> DebugLoc;
debuginfo			    fn debuginfo(&mut self) 
debuginfo			    fn debuginfo(&mut self);
debuginfo			mod debuginfo;
debuginfo_disabled_message			    fn debuginfo_disabled_message() -> &'static str 
decl_rust_fn_with_foreign_abi			pub fn decl_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
decl_without_init			    fn decl_without_init(&mut self, _: ast::NodeId, _: Span) {}
declare			mod declare;
declare_cfn			pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type,
declare_fn			pub fn declare_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv,
declare_global			pub fn declare_global(ccx: &CrateContext, name: &str, ty: Type) -> llvm::ValueRef 
declare_internal_rust_fn			pub fn declare_internal_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,
declare_intrinsic			fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> 
declare_local			fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
declare_rust_fn			pub fn declare_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,
def			    pub fn def(&self, nid: ast::NodeId) -> def::Def 
default_output_for_target			pub fn default_output_for_target(sess: &Session) -> config::CrateType 
define_cfn			pub fn define_cfn(ccx: &CrateContext, name: &str, fn_type: Type,
define_fn			pub fn define_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv,
define_global			pub fn define_global(ccx: &CrateContext, name: &str, ty: Type) -> Option<ValueRef> 
define_internal_rust_fn			pub fn define_internal_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
define_rust_fn			pub fn define_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,
deref_multiple			fn deref_multiple<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
deref_once			fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
describe_enum_variant			fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
description			    pub fn description(&self) -> Cow<str> 
diagnostics			pub mod diagnostics;
did			mod did;
direct			    fn direct(t: Type) -> TypeContext 
direct			    pub fn direct(ty: Type, cast: option::Option<Type>,
disr			mod disr;
diverging_type_metadata			pub fn diverging_type_metadata(cx: &CrateContext) -> DIType 
doc			mod doc;
dot::GraphWalk for GraphvizDepGraph			impl<'a, 'tcx> dot::GraphWalk<'a, DepNode, (DepNode, DepNode)> for GraphvizDepGraph 
dot::Labeller for GraphvizDepGraph			impl<'a, 'tcx> dot::Labeller<'a, DepNode, (DepNode, DepNode)> for GraphvizDepGraph 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) { }
drop_done_fill_mem			pub fn drop_done_fill_mem<'blk, 'tcx>(cx: Block<'blk, 'tcx>, llptr: ValueRef, t: Ty<'tcx>) 
drop_glues			    pub fn drop_glues<'a>(&'a self) -> &'a RefCell<FnvHashMap<DropGlueKind<'tcx>, ValueRef>> 
drop_non_lifetime_clean			    pub fn drop_non_lifetime_clean(&mut self) 
drop_ty			pub fn drop_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
drop_ty_core			pub fn drop_ty_core<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
drop_ty_immediate			pub fn drop_ty_immediate<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
dropflag_hint			    pub fn dropflag_hint<'blk, 'tcx>(&self, bcx: Block<'blk, 'tcx>)
dtor_active			fn dtor_active(flag: u8) -> bool 
dtor_done_usize			pub fn dtor_done_usize(ccx: &CrateContext) -> usize 
dtor_needed_usize			pub fn dtor_needed_usize(ccx: &CrateContext) -> usize 
dtor_to_init_u8			fn dtor_to_init_u8(dtor: bool) -> u8 
dtor_type			    fn dtor_type(&self) -> Ty<'tcx> { self.types.u8 }
dummy_ccx			    fn dummy_ccx<'a>(&'a self, shared: &'a SharedCrateContext<'a, 'tcx>)
dump			    fn dump(&mut self, handler: &Handler) 
dump_crate_info			    pub fn dump_crate_info(&mut self, name: &str, krate: &ast::Crate) 
dump_csv			mod dump_csv;
dump_graph			fn dump_graph(tcx: &ty::ctxt) 
dump_span			    pub fn dump_span(&mut self, su: SpanUtils, kind: &str, span: Span, _sub_span: Option<Span>) 
each_linked_rlib			pub fn each_linked_rlib(sess: &Session,
early_exit_block			    fn early_exit_block(&self,
edges			    fn edges(&self) -> dot::Edges<(DepNode, DepNode)> 
eh_personality			    pub fn eh_personality(&self) -> ValueRef 
eh_personality			    pub fn eh_personality<'a>(&'a self) -> &'a RefCell<Option<ValueRef>> 
eh_unwind_resume			    pub fn eh_unwind_resume(&self) -> ValueRef 
eh_unwind_resume			    pub fn eh_unwind_resume<'a>(&'a self) -> &'a RefCell<Option<ValueRef>> 
element_type			    pub fn element_type(&self) -> Type 
elements_required			fn elements_required(bcx: Block, content_expr: &hir::Expr) -> usize 
emit			    fn emit(&mut self, sp: Option<codemap::Span>,
emit_uwtable			pub fn emit_uwtable(val: ValueRef, emit: bool) 
emit_vtable_methods			fn emit_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
empty_phi			    pub fn empty_phi(&self, ty: Type) -> ValueRef 
empty_struct			    pub fn empty_struct(ccx: &CrateContext) -> Type 
enclosing_scope			    pub fn enclosing_scope(&self, id: NodeId) -> NodeId 
ensure_array_fits_in_address_space			fn ensure_array_fits_in_address_space<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
ensure_enum_fits_in_address_space			fn ensure_enum_fits_in_address_space<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
ensure_struct_fits_in_address_space			fn ensure_struct_fits_in_address_space<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
enter_default			fn enter_default<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
enter_match			fn enter_match<'a, 'b, 'p, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
enter_opt			fn enter_opt<'a, 'p, 'blk, 'tcx>(
enter_type_of			    pub fn enter_type_of(&self, ty: Ty<'tcx>) -> TypeOfDepthLock<'b, 'tcx> 
enum_str			    pub fn enum_str(&mut self,
enum_variant_size_lint			fn enum_variant_size_lint(ccx: &CrateContext, enum_def: &hir::EnumDef, sp: Span, id: ast::NodeId) 
env_arg_pos			    pub fn env_arg_pos(&self) -> usize 
eq			    fn eq(&self, other: &Opt<'a, 'tcx>, tcx: &ty::ctxt<'tcx>) -> bool 
eq			    fn eq(self, other: ConstantExpr<'a>, tcx: &ty::ctxt) -> bool 
erase_from_parent			    pub fn erase_from_parent(self) 
escape			fn escape(s: String) -> String 
escape_string			            fn escape_string(s: &[u8]) -> String 
euv::Delegate for ReassignmentChecker			impl<'tcx> euv::Delegate<'tcx> for ReassignmentChecker 
exactsdiv			    pub fn exactsdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
execute_work_item			fn execute_work_item(cgcx: &CodegenContext,
expand_nested_bindings			fn expand_nested_bindings<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
export_map			    pub fn export_map<'a>(&'a self) -> &'a ExportMap 
export_symbols			    fn export_symbols(&mut self, _: &Session, _: &CrateTranslation, _: &Path) 
export_symbols			    fn export_symbols(&mut self, sess: &Session, trans: &CrateTranslation,
exported_name			pub fn exported_name(path: DefPath, hash: &str) -> String 
exported_name			fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
expr			mod expr;
expr_info			pub fn expr_info(expr: &hir::Expr) -> NodeIdAndSpan 
expr_kind			fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind 
expr_ty			pub fn expr_ty<'blk, 'tcx>(bcx: &BlockS<'blk, 'tcx>, ex: &hir::Expr) -> Ty<'tcx> 
expr_ty_adjusted			pub fn expr_ty_adjusted<'blk, 'tcx>(bcx: &BlockS<'blk, 'tcx>, ex: &hir::Expr) -> Ty<'tcx> 
extent_str			    pub fn extent_str(&self, span: Span) -> String 
extern_const_values			    pub fn extern_const_values<'a>(&'a self) -> &'a RefCell<DefIdMap<ValueRef>> 
extern_crate_str			    pub fn extern_crate_str(&mut self,
external			    pub fn external<'a>(&'a self) -> &'a RefCell<DefIdMap<Option<ast::NodeId>>> 
external_crate_str			    pub fn external_crate_str(&mut self, span: Span, name: &str, num: ast::CrateNum) 
external_srcs			    pub fn external_srcs<'a>(&'a self) -> &'a RefCell<NodeMap<DefId>> 
externs			    pub fn externs<'a>(&'a self) -> &'a RefCell<ExternMap> 
extract_bytecode_format_version			fn extract_bytecode_format_version(bc: &[u8]) -> u32 
extract_compressed_bytecode_size_v1			fn extract_compressed_bytecode_size_v1(bc: &[u8]) -> u64 
extract_element			    pub fn extract_element(&self, vec: ValueRef, idx: ValueRef) -> ValueRef 
extract_value			    pub fn extract_value(&self, agg_val: ValueRef, idx: usize) -> ValueRef 
extract_variant_args			fn extract_variant_args<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
extract_vec_elems			fn extract_vec_elems<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
f32			    pub fn f32(ccx: &CrateContext) -> Type 
f64			    pub fn f64(ccx: &CrateContext) -> Type 
fadd			    pub fn fadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fail_if_zero_or_overflows			pub fn fail_if_zero_or_overflows<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
fallback_path			    fn fallback_path(cx: &CrateContext) -> CString 
fcmp			    pub fn fcmp(&self, op: RealPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fdiv			    pub fn fdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
field_index			    pub fn field_index(&self, name: ast::Name) -> usize 
field_str			    pub fn field_str(&mut self,
field_ty			pub fn field_ty<'tcx>(tcx: &ty::ctxt<'tcx>,
field_types			    pub fn field_types(&self) -> Vec<Type> 
file_metadata			pub fn file_metadata(cx: &CrateContext, full_path: &str) -> DIFile 
file_metadata_			fn file_metadata_(cx: &CrateContext, key: &str, file_name: &str, work_dir: &str) -> DIFile 
filename_for_input			pub fn filename_for_input(sess: &Session,
fill_nested			        fn fill_nested(node: &NamespaceTreeNode, output: &mut String) 
filter_edges			fn filter_edges(query: &DepGraphQuery,
filter_nodes			fn filter_nodes(query: &DepGraphQuery,
filter_reachable_ids			pub fn filter_reachable_ids(ccx: &SharedCrateContext) -> NodeSet 
finalize			    fn finalize<'a>(&self, cx: &CrateContext<'a, 'tcx>) -> MetadataCreationResult 
finalize			pub fn finalize(cx: &CrateContext) 
find_crate_name			pub fn find_crate_name(sess: Option<&Session>,
find_discr_field_candidate			fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,
find_library			pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)
find_metadata_for_type			    fn find_metadata_for_type(&self, type_: Ty<'tcx>) -> Option<DIType> 
find_metadata_for_unique_id			    fn find_metadata_for_unique_id(&self, unique_type_id: UniqueTypeId) -> Option<DIType> 
find_ptr			    fn find_ptr<'a>(&self, cx: &CrateContext<'a, 'tcx>) -> Option<DiscrField> 
find_type			    pub fn find_type(&self, s: &str) -> Option<Type> 
finish_fn			pub fn finish_fn<'blk, 'tcx>(fcx: &'blk FunctionContext<'blk, 'tcx>,
finish_register_fn			fn finish_register_fn(ccx: &CrateContext, sym: String, node_id: ast::NodeId) 
finish_type_of			pub fn finish_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
fixed_vec_metadata			fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
fixup			    fn fixup(ty: Type, cls: &mut [RegClass]) 
float_cast			    fn float_cast(bcx: Block,
float_from_ty			    pub fn float_from_ty(ccx: &CrateContext, t: ast::FloatTy) -> Type 
float_width			    pub fn float_width(&self) -> usize 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for CleanupScopeKind			impl<'blk, 'tcx: 'blk> fmt::Debug for CleanupScopeKind<'blk, 'tcx> 
fmt::Debug for Match			impl<'a, 'p, 'blk, 'tcx> fmt::Debug for Match<'a, 'p, 'blk, 'tcx> 
fmul			    pub fn fmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fn_call_str			    pub fn fn_call_str(&mut self,
fn_callee			    fn fn_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, datum: Datum<'tcx, Rvalue>)
fn_pointer_shims			    pub fn fn_pointer_shims(&self) -> &RefCell<FnvHashMap<Ty<'tcx>, ValueRef>> 
fn_should_be_ignored			pub fn fn_should_be_ignored(fcx: &FunctionContext) -> bool 
fn_str			    pub fn fn_str(&mut self,
fneg			    pub fn fneg(&self, v: ValueRef) -> ValueRef 
fold_variants			pub fn fold_variants<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
foreign			mod foreign;
foreign_arg_type_of			pub fn foreign_arg_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
foreign_signature			fn foreign_signature<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
foreign_types_for_fn_ty			fn foreign_types_for_fn_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
formal_str			    pub fn formal_str(&mut self,
fpcast			    pub fn fpcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fpext			    pub fn fpext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptosi			    pub fn fptosi(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptoui			    pub fn fptoui(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptrunc			    pub fn fptrunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
framework_path			    fn framework_path(&mut self, _path: &Path) 
framework_path			    fn framework_path(&mut self, path: &Path) { self.cmd.arg("-F").arg(path); }
framework_path			    fn framework_path(&mut self, path: &Path);
free			    pub fn free(&self, ptr: ValueRef) 
frem			    pub fn frem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
from			    fn from(i: ::middle::ty::Disr) -> Disr 
from			    fn from(i: usize) -> Disr 
from_arg_ty			pub fn from_arg_ty(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef 
from_def_id_and_substs			        fn from_def_id_and_substs<'a, 'tcx>(type_map: &mut TypeMap<'tcx>,
from_fn_attrs			pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) 
from_fn_type			pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx>)
from_ref			    pub fn from_ref(r: TypeRef) -> Type 
from_rvalue_datum			    pub fn from_rvalue_datum(datum: datum::Datum<'tcx, datum::Rvalue>) -> OperandRef 
from_span_utils			    pub fn from_span_utils(tcx: &'l ty::ctxt<'tcx>,
from_ty			    pub fn from_ty(tcx: &ty::ctxt<'tcx>,
from_val			    fn from_val(val: ValueRef) -> MatchInput 
fsub			    pub fn fsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fulfill_obligation			pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
func			    pub fn func(args: &[Type], ret: &Type) -> Type 
func_params			    pub fn func_params(&self) -> Vec<Type> 
gate_simd_ffi			fn gate_simd_ffi(tcx: &ty::ctxt, decl: &hir::FnDecl, ty: &ty::BareFnTy) 
gc_sections			    fn gc_sections(&mut self, _is_dylib: bool) { self.cmd.arg("\/OPT:REF,ICF"); }
gc_sections			    fn gc_sections(&mut self, is_dylib: bool) 
gc_sections			    fn gc_sections(&mut self, is_dylib: bool);
gdb			pub mod gdb;
general_ty_align			fn general_ty_align(ty: Type) -> usize 
generated_code			pub fn generated_code(span: Span) -> bool 
generic_simd_intrinsic			fn generic_simd_intrinsic<'blk, 'tcx, 'a>
generic_type_of			fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
gensym_name			pub fn gensym_name(name: &str) -> ast::Name 
gep			    pub fn gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
gepi			    pub fn gepi(&self, base: ValueRef, ixs: &[usize]) -> ValueRef 
get			    pub fn get(&self) -> BasicBlockRef 
get			    pub fn get(&self) -> UseRef 
get			    pub fn get(&self) -> ValueRef 
get_ar_prog			pub fn get_ar_prog(sess: &Session) -> String 
get_base_and_len			pub fn get_base_and_len<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
get_branches			fn get_branches<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
get_cases			fn get_cases<'tcx>(tcx: &ty::ctxt<'tcx>,
get_ccx			    pub fn get_ccx<'a>(&'a self, index: usize) -> CrateContext<'a, 'tcx> 
get_cleanup_debug_loc_for_ast_node			pub fn get_cleanup_debug_loc_for_ast_node<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_const_expr			pub fn get_const_expr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_const_expr_as_global			pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_const_val			fn get_const_val<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_data_for_id			    pub fn get_data_for_id(&self, _id: &NodeId) -> Data 
get_dataptr			pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef 
get_defined_value			fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_dominating_store			    pub fn get_dominating_store(self, bcx: Block) -> Option<Value> 
get_drop_glue			pub fn get_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> ValueRef 
get_drop_glue_core			fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_drop_glue_type			pub fn get_drop_glue_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_element			    pub fn get_element<'blk, F>(&self, bcx: Block<'blk, 'tcx>, ty: Ty<'tcx>,
get_enum_discriminant_name			    fn get_enum_discriminant_name(cx: &CrateContext,
get_expr_data			    pub fn get_expr_data(&self, expr: &ast::Expr) -> Option<Data> 
get_extern_const			pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_extern_fn			pub fn get_extern_fn(ccx: &CrateContext,
get_extern_rust_fn			fn get_extern_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_external_crates			    pub fn get_external_crates(&self) -> Vec<CrateData> 
get_field_data			    pub fn get_field_data(&self, field: &ast::StructField, scope: NodeId) -> Option<VariableData> 
get_field_ref_data			    pub fn get_field_ref_data(&self,
get_first_use			    pub fn get_first_use(self) -> Option<Use> 
get_fixed_base_and_len			pub fn get_fixed_base_and_len(bcx: Block,
get_function_signature			    fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_intrinsic			    pub fn get_intrinsic(&self, key: &str) -> ValueRef 
get_item_data			    pub fn get_item_data(&self, item: &ast::Item) -> Data 
get_item_val			pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef 
get_landing_pad			    fn get_landing_pad(&'blk self) -> BasicBlockRef 
get_landing_pad			    fn get_landing_pad(&'blk self) -> BasicBlockRef;
get_linker			pub fn get_linker(sess: &Session) -> (String, Command) 
get_llreturn			    pub fn get_llreturn(&self) -> BasicBlockRef 
get_llvm_opt_level			fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel 
get_local_instance			pub fn get_local_instance(ccx: &CrateContext, fn_id: DefId)
get_meta			pub fn get_meta(bcx: Block, fat_ptr: ValueRef) -> ValueRef 
get_method_data			    pub fn get_method_data(&self, id: ast::NodeId, name: ast::Name, span: Span) -> FunctionData 
get_namespace_and_span_for_item			pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)
get_next_use			    pub fn get_next_use(self) -> Option<Use> 
get_operand			    pub fn get_operand(self, i: usize) -> Option<Value> 
get_or_create_closure_declaration			pub fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_or_create_landing_pad			    fn get_or_create_landing_pad(&'blk self) -> BasicBlockRef 
get_or_create_landing_pad			    fn get_or_create_landing_pad(&'blk self) -> BasicBlockRef;
get_or_insert_gdb_debug_scripts_section_global			pub fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)
get_parent			        fn get_parent(user: Value) -> BasicBlock { user.get_parent().unwrap() }
get_parent			    pub fn get_parent(self) -> Option<BasicBlock> 
get_path_data			    pub fn get_path_data(&self, id: NodeId, path: &ast::Path) -> Option<Data> 
get_personality_slot			    fn get_personality_slot(&mut self, bcx: Block<'bcx, 'tcx>) -> ValueRef 
get_ref			    fn get_ref<'a>(&'a self,
get_ret_slot			    pub fn get_ret_slot(&self, bcx: Block<'a, 'tcx>,
get_rust_try_fn			fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,
get_sdk10_dir			    fn get_sdk10_dir() -> Option<PathBuf> 
get_sdk81_dir			    fn get_sdk81_dir() -> Option<PathBuf> 
get_sdk8_dir			    fn get_sdk8_dir() -> Option<PathBuf> 
get_simple_intrinsic			pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Option<ValueRef> 
get_single_predecessor			    pub fn get_single_predecessor(self) -> Option<BasicBlock> 
get_single_user			    pub fn get_single_user(self) -> Option<Value> 
get_smallest_ccx			    fn get_smallest_ccx<'a>(&'a self) -> CrateContext<'a, 'tcx> 
get_static_val			pub fn get_static_val<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_symbol_hash			fn get_symbol_hash<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> String 
get_template_parameters			    fn get_template_parameters<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_trait_ref_data			    pub fn get_trait_ref_data(&self,
get_ucrt_dir			    fn get_ucrt_dir() -> Option<PathBuf> 
get_unique_type_id_as_string			    fn get_unique_type_id_as_string(&self, unique_type_id: UniqueTypeId) -> Rc<String> 
get_unique_type_id_of_enum_variant			    fn get_unique_type_id_of_enum_variant<'a>(&mut self,
get_unique_type_id_of_type			    fn get_unique_type_id_of_type<'a>(&mut self, cx: &CrateContext<'a, 'tcx>,
get_user			    pub fn get_user(self) -> Value 
get_vc_dir			    fn get_vc_dir() -> Option<(&'static str, PathBuf)> 
get_vec_base_and_len			    pub fn get_vec_base_and_len<'blk>(&self, bcx: Block<'blk, 'tcx>)
get_vtable			pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
global_string			    pub fn global_string(&self, _str: *const c_char) -> ValueRef 
global_string_ptr			    pub fn global_string_ptr(&self, _str: *const c_char) -> ValueRef 
glue			mod glue;
glue_fn			    pub fn glue_fn(ccx: &CrateContext, t: Type) -> Type 
graph_id			    fn graph_id(&self) -> dot::Id 
handle_fail			    fn handle_fail(&self, bcx: Block) 
has_dropflag_hint			    fn has_dropflag_hint<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
has_hint			    pub fn has_hint(&self, id: ast::NodeId) -> bool { self.node_map.contains_key(&id) }
has_meta			    pub fn has_meta(&self) -> bool 
has_nested_bindings			fn has_nested_bindings(m: &[Match], col: usize) -> bool 
has_nested_returns			fn has_nested_returns(tcx: &ty::ctxt, cfg: &cfg::CFG, blk_id: ast::NodeId) -> bool 
has_no_uses			    pub fn has_no_uses(self) -> bool 
hint_datum			    pub fn hint_datum(&self, id: ast::NodeId) -> Option<cleanup::DropHintDatum<'tcx>> 
hint_datum			    pub fn hint_datum<'blk, 'tcx>(&self, bcx: Block<'blk, 'tcx>)
hint_dynamic			    fn hint_dynamic(&mut self) 
hint_dynamic			    fn hint_dynamic(&mut self) {}
hint_dynamic			    fn hint_dynamic(&mut self);
hint_static			    fn hint_static(&mut self) 
hint_static			    fn hint_static(&mut self) {}
hint_static			    fn hint_static(&mut self);
i1			    pub fn i1(ccx: &CrateContext) -> Type 
i16			    pub fn i16(ccx: &CrateContext) -> Type 
i32			    pub fn i32(ccx: &CrateContext) -> Type 
i32x1			struct i32x1(i32);
i64			    pub fn i64(ccx: &CrateContext) -> Type 
i8			    pub fn i8(ccx: &CrateContext) -> Type 
i8p			    pub fn i8p(ccx: &CrateContext) -> Type 
icmp			    pub fn icmp(&self, op: IntPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ignore			    pub fn ignore(ty: Type) -> ArgType 
immediate			    pub fn immediate(self) -> ValueRef 
immediate_rvalue			pub fn immediate_rvalue<'tcx>(val: ValueRef, ty: Ty<'tcx>) -> Datum<'tcx, Rvalue> 
immediate_rvalue_bcx			pub fn immediate_rvalue_bcx<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
impl_method_cache			    pub fn impl_method_cache<'a>(&'a self)
impl_str			    pub fn impl_str(&mut self,
in_memory_type_of			pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
inbounds_gep			    pub fn inbounds_gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
include_path			    fn include_path(&mut self, path: &Path) { self.cmd.arg("-L").arg(path); }
include_path			    fn include_path(&mut self, path: &Path) 
include_path			    fn include_path(&mut self, path: &Path);
incomplete_type_of			pub fn incomplete_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
indirect			    pub fn indirect(ty: Type, attr: option::Option<Attribute>) -> ArgType 
indirect_br			    pub fn indirect_br(&self, addr: ValueRef, num_dests: usize) 
inherit_str			    pub fn inherit_str(&mut self,
init_function			pub fn init_function<'a, 'tcx>(fcx: &'a FunctionContext<'a, 'tcx>,
init_insn_ctxt			pub fn init_insn_ctxt() 
init_local			pub fn init_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, local: &hir::Local) -> Block<'blk, 'tcx> 
init_zero_mem			pub fn init_zero_mem<'blk, 'tcx>(cx: Block<'blk, 'tcx>, llptr: ValueRef, t: Ty<'tcx>) 
inline			pub fn inline(val: ValueRef, inline: InlineAttr) 
inline			mod inline;
inline_asm_call			    pub fn inline_asm_call(&self, asm: *const c_char, cons: *const c_char,
inlined_variant_def			pub fn inlined_variant_def<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
insert			    pub fn insert(&mut self, id: ast::NodeId, datum: cleanup::DropHintDatum<'tcx>) 
insert_element			    pub fn insert_element(&self, vec: ValueRef, elt: ValueRef, idx: ValueRef) -> ValueRef 
insert_lllocals			fn insert_lllocals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
insert_reference_to_gdb_debug_scripts_section_global			pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) 
insert_value			    pub fn insert_value(&self, agg_val: ValueRef, elt: ValueRef,
instantiate_inline			fn instantiate_inline(ccx: &CrateContext, fn_id: DefId) -> Option<DefId> 
int			    pub fn int(ccx: &CrateContext) -> Type 
int_cast			    fn int_cast(bcx: Block,
int_from_ty			    pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type 
int_type			    pub fn int_type(&self) -> Type 
int_type_width_signed			fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)
int_width			    pub fn int_width(&self) -> u64 
intcast			    pub fn intcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
internalize_symbols			fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<&str>) 
into_inner			    fn into_inner(self) -> ConstEvalErr 
intrinsic			mod intrinsic;
intrinsics			    fn intrinsics<'a>(&'a self) -> &'a RefCell<FnvHashMap<&'static str, ValueRef>> 
inttoptr			    pub fn inttoptr(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
invalid_output_for_target			pub fn invalid_output_for_target(sess: &Session,
invoke			pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
invoke			    pub fn invoke(&self,
ios_ty_align			fn ios_ty_align(ty: Type) -> usize 
is_a_terminator_inst			        fn is_a_terminator_inst(user: &Value) -> bool { user.is_a_terminator_inst() }
is_a_terminator_inst			    pub fn is_a_terminator_inst(self) -> bool 
is_aggregate			    pub fn is_aggregate(&self) -> bool 
is_ast_with_id			    fn is_ast_with_id(&self, id: ast::NodeId) -> bool 
is_by_ref			    fn is_by_ref(&self) -> bool 
is_by_ref			    fn is_by_ref(&self) -> bool;
is_const_integral			fn is_const_integral(v: ValueRef) -> bool 
is_discr_reassigned			fn is_discr_reassigned(bcx: Block, discr: &hir::Expr, body: &hir::Expr) -> bool 
is_discr_signed			pub fn is_discr_signed<'tcx>(r: &Repr<'tcx>) -> bool 
is_entry_fn			pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool 
is_fallible			    fn is_fallible(&self) -> bool 
is_homogenous_aggregate_ty			fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> 
is_homogenous_aggregate_ty			fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> 
is_ignore			    pub fn is_ignore(&self) -> bool 
is_indirect			    pub fn is_indirect(&self) -> bool 
is_infallible			    fn is_infallible(&self) -> bool 
is_lifetime_end			    fn is_lifetime_end(&self) -> bool 
is_lifetime_end			    fn is_lifetime_end(&self) -> bool;
is_loop_with_id			    fn is_loop_with_id(&self, id: ast::NodeId) -> bool 
is_named_tuple_constructor			    fn is_named_tuple_constructor(tcx: &ty::ctxt, def_id: DefId) -> bool 
is_named_tuple_constructor			fn is_named_tuple_constructor(tcx: &ty::ctxt, def_id: DefId) -> bool 
is_node_local_to_unit			pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool
is_not_null			    pub fn is_not_null(&self, val: ValueRef) -> ValueRef 
is_null			    pub fn is_null(&self, val: ValueRef) -> ValueRef 
is_null			pub fn is_null(val: ValueRef) -> bool 
is_packed			    pub fn is_packed(&self) -> bool 
is_pass_byval			    fn is_pass_byval(&self) -> bool 
is_pass_byval			    fn is_pass_byval(&self) -> bool;
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			    fn is_reg_ty(&self) -> bool 
is_reg_ty			    fn is_reg_ty(&self) -> bool;
is_relevant_child			fn is_relevant_child(c: &Child) -> bool 
is_ret_bysret			    fn is_ret_bysret(&self) -> bool 
is_ret_bysret			    fn is_ret_bysret(&self) -> bool;
is_sse			    fn is_sse(&self) -> bool 
is_temp			    fn is_temp(&self) -> bool 
is_undef			pub fn is_undef(val: ValueRef) -> bool 
is_unwind			    fn is_unwind(&self) -> bool 
is_valid_custom_scope			    fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool 
is_valid_custom_scope			    fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool;
is_valid_to_pop_custom_scope			    fn is_valid_to_pop_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool 
is_valid_to_pop_custom_scope			    fn is_valid_to_pop_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool;
is_versioned_bytecode_format			fn is_versioned_bytecode_format(bc: &[u8]) -> bool 
is_writeable			fn is_writeable(p: &Path) -> bool 
is_zerolen			    fn is_zerolen<'a>(&self, cx: &CrateContext<'a, 'tcx>, scapegoat: Ty<'tcx>) -> bool 
item_symbols			    pub fn item_symbols<'a>(&'a self) -> &'a RefCell<NodeMap<String>> 
item_vals			    pub fn item_vals<'a>(&'a self) -> &'a RefCell<NodeMap<ValueRef>> 
iter			    pub fn iter<'a>(&'a self) -> CrateContextIterator<'a, 'tcx> 
iter_functions			fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter 
iter_globals			fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter 
iter_structural_ty			pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,
iter_variant			    fn iter_variant<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,
iter_vec_loop			fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
iter_vec_raw			pub fn iter_vec_raw<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
ix			    pub fn ix(ccx: &CrateContext, num_bits: u64) -> Type 
join_blocks			    pub fn join_blocks(&'a self,
kind			    pub fn kind(&self) -> TypeKind 
kind_for_closure			pub fn kind_for_closure(ccx: &CrateContext, closure_id: DefId) -> ty::ClosureKind 
landing_pad			    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,
langcall			pub fn langcall(bcx: Block,
lazy_binop_ty			enum lazy_binop_ty 
lib			pub mod lib 
lib_subdir			    fn lib_subdir(arch: &str) -> Option<&'static str> 
link			    pub mod link;
link_args			fn link_args(cmd: &mut Linker,
link_binary			pub fn link_binary(sess: &Session,
link_binary_output			fn link_binary_output(sess: &Session,
link_dylib			    fn link_dylib(&mut self, lib: &str) { self.cmd.arg("-l").arg(lib); }
link_dylib			    fn link_dylib(&mut self, lib: &str) 
link_dylib			    fn link_dylib(&mut self, lib: &str);
link_exe_cmd			pub fn link_exe_cmd(_sess: &Session) -> Command 
link_exe_cmd			pub fn link_exe_cmd(sess: &Session) -> Command 
link_framework			    fn link_framework(&mut self, _framework: &str) 
link_framework			    fn link_framework(&mut self, framework: &str) 
link_framework			    fn link_framework(&mut self, framework: &str);
link_meta			    pub fn link_meta<'a>(&'a self) -> &'a LinkMeta 
link_name			pub fn link_name(i: &hir::ForeignItem) -> InternedString 
link_natively			fn link_natively(sess: &Session, dylib: bool,
link_rlib			fn link_rlib<'a>(sess: &'a Session,
link_rlib			    fn link_rlib(&mut self, lib: &Path) { self.cmd.arg(lib); }
link_rlib			    fn link_rlib(&mut self, lib: &Path);
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) 
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, path: &Path) 
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, path: &Path);
link_staticlib			fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,
link_staticlib			    fn link_staticlib(&mut self, lib: &str) { self.cmd.arg("-l").arg(lib); }
link_staticlib			    fn link_staticlib(&mut self, lib: &str) 
link_staticlib			    fn link_staticlib(&mut self, lib: &str);
link_whole_rlib			    fn link_whole_rlib(&mut self, lib: &Path) 
link_whole_rlib			    fn link_whole_rlib(&mut self, lib: &Path);
link_whole_rlib			    fn link_whole_rlib(&mut self, path: &Path) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]);
linker			    pub mod linker;
ll_inttype			pub fn ll_inttype(cx: &CrateContext, ity: IntType) -> Type 
llalign_of_min			pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> llalign 
llalign_of_pref			pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign 
llbitsize_of_real			pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> llbits 
llblock			    fn llblock(&self, bb: mir::BasicBlock) -> BasicBlockRef 
llcx			    pub fn llcx(&self) -> ContextRef 
llelement_offset			pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: usize) -> u64 
llmod			    pub fn llmod(&self) -> ModuleRef 
llreg_ty			fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type 
llrepr			    fn llrepr(&self, ccx: &CrateContext) -> String 
llrepr			    fn llrepr(&self, ccx: &CrateContext) -> String;
llrepr			mod llrepr;
llsize_of			pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef 
llsize_of_alloc			pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize 
llsize_of_real			pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> llsize 
llsize_of_store			pub fn llsize_of_store(cx: &CrateContext, ty: Type) -> llsize 
llsizingtypes			    pub fn llsizingtypes<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, Type>> 
llty_and_min_for_signed_ty			pub fn llty_and_min_for_signed_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
llty_str			    pub fn llty_str(&self, ty: Type) -> String 
lltype_for_fn_from_foreign_types			fn lltype_for_fn_from_foreign_types(ccx: &CrateContext, tys: &ForeignTypes) -> Type 
lltype_for_foreign_fn			pub fn lltype_for_foreign_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
lltypes			    pub fn lltypes<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, Type>> 
llvec_len			    fn llvec_len(cls: &[RegClass]) -> usize 
llvm_archive_kind			    pub fn llvm_archive_kind(&self) -> Option<ArchiveKind> 
llvm_calling_convention			pub fn llvm_calling_convention(ccx: &CrateContext,
llvm_err			pub fn llvm_err(handler: &errors::Handler, msg: String) -> ! 
llvm_linkage_by_name			pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> 
llvm_type_name			fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
load			    pub fn load(&self, ptr: ValueRef) -> ValueRef 
load			    pub fn load<'blk,'tcx>(self, bcx: Block<'blk, 'tcx>, arg_scope: ScopeId)
load_closure_environment			fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
load_discr			fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)
load_fat_ptr			pub fn load_fat_ptr<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
load_if_immediate			pub fn load_if_immediate<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, t: Ty<'tcx>) -> ValueRef 
load_nonnull			    pub fn load_nonnull(&self, ptr: ValueRef) -> ValueRef 
load_range_assert			    pub fn load_range_assert(&self, ptr: ValueRef, lo: u64,
load_ty			pub fn load_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, ptr: ValueRef, t: Ty<'tcx>) -> ValueRef 
local			    pub fn local(&self) -> &'b LocalCrateContext<'tcx> 
lookup_def_kind			    fn lookup_def_kind(&self, ref_id: NodeId, span: Span) -> Option<recorder::Row> 
lookup_ref_id			    fn lookup_ref_id(&self, ref_id: NodeId) -> Option<DefId> 
lookup_row			    fn lookup_row(r: Row) -> (&'static str, Vec<&'static str>, bool, bool) 
lookup_type_ref			    fn lookup_type_ref(&self, ref_id: NodeId) -> Option<DefId> 
lshr			    pub fn lshr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
lto			    pub mod lto;
lvalue			mod lvalue;
lvalue_len			    pub fn lvalue_len(&mut self,
lvalue_scratch_datum			pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,
lvalue_temps			pub fn lvalue_temps<'bcx,'tcx>(bcx: Block<'bcx,'tcx>,
machine			mod machine;
macros			mod macros;
main			fn main() 
make_drop_glue			fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueKind<'tcx>)
make_field			            fn make_field(field_name: &str, expr: P<hir::Expr>) -> hir::Field 
make_landing_pad			    fn make_landing_pad(&mut self, cleanup: Block<'bcx, 'tcx>) -> Block<'bcx, 'tcx> 
make_path_string			    pub fn make_path_string(file_name: &str) -> String 
make_return_slot_pointer			pub fn make_return_slot_pointer<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,
make_sub_span			    pub fn make_sub_span(&self, span: Span, sub_span: Option<Span>) -> Option<Span> 
make_values_str			    pub fn make_values_str(&self,
malloc_raw_dyn			pub fn malloc_raw_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
mangle			pub fn mangle<PI: Iterator<Item=InternedString>>(path: PI, hash: Option<&str>) -> String 
mangle_exported_name			pub fn mangle_exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, path: DefPath,
mangle_internal_name_by_path_and_seq			pub fn mangle_internal_name_by_path_and_seq(path: DefPath, flav: &str) -> String 
mangle_internal_name_by_type_and_seq			pub fn mangle_internal_name_by_type_and_seq<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
mangled_name_of_contained_item			    pub fn mangled_name_of_contained_item(&self, item_name: &str) -> String 
map_ty			    fn map_ty<F>(&self, mut f: F) -> DropGlueKind<'tcx> where F: FnMut(Ty<'tcx>) -> Ty<'tcx>
mark_as_lvalue			    fn mark_as_lvalue(&mut self, temp: usize) 
match_datum			fn match_datum<'tcx>(val: MatchInput, left_ty: Ty<'tcx>) -> Datum<'tcx, Lvalue> 
match_input			    pub fn match_input(&self) -> MatchInput 
match_kind			    fn match_kind<R, F, G>(self, if_lvalue: F, if_rvalue: G) -> R where
matched_pat			    fn matched_pat(&mut self, _: &hir::Pat, _: mc::cmt, _: euv::MatchMode) {}
may_need_drop_flag			    fn may_need_drop_flag(t: Type, needs_drop_flag: bool) -> TypeContext 
maybe_instantiate_inline			pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: DefId) -> DefId 
maybe_iter			    pub fn maybe_iter(&self, iter_all: bool) -> CrateContextMaybeIterator<'b, 'tcx> 
memcpy_ty			pub fn memcpy_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, dst: ValueRef, src: ValueRef, t: Ty<'tcx>) 
memfill			fn memfill<'a, 'tcx>(b: &Builder<'a, 'tcx>, llptr: ValueRef, ty: Ty<'tcx>, byte: u8) 
memset_intrinsic			fn memset_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
metadata			mod metadata;
metadata			    pub fn metadata(ccx: &CrateContext) -> Type 
metadata_llcx			    pub fn metadata_llcx(&self) -> ContextRef 
metadata_llmod			    pub fn metadata_llmod(&self) -> ModuleRef 
meth			mod meth;
meth_call_str			    pub fn meth_call_str(&mut self,
method_decl_str			    pub fn method_decl_str(&mut self,
method_str			    pub fn method_str(&mut self,
mir			    pub fn mir(&self) -> &'a Mir<'tcx> 
mir			    pub fn mir(&self) -> &'blk Mir<'tcx> 
mir			mod mir;
mir_map			    pub fn mir_map(&self) -> &'b MirMap<'tcx> 
mk_binding_alloca			fn mk_binding_alloca<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,
mk_cenum			fn mk_cenum<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
mk_struct			fn mk_struct<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
mod_str			    pub fn mod_str(&mut self,
modify_as_needed			            fn modify_as_needed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
monomorphic_fn			pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
monomorphize			    pub fn monomorphize<T>(&self, value: &T) -> T
monomorphize			mod monomorphize;
monomorphize_type			pub fn monomorphize_type<'blk, 'tcx>(bcx: &BlockS<'blk, 'tcx>, t: Ty<'tcx>) -> Ty<'tcx> 
monomorphized			    pub fn monomorphized<'a>(&'a self) -> &'a RefCell<FnvHashMap<MonoId<'tcx>, ValueRef>> 
monomorphizing			    pub fn monomorphizing<'a>(&'a self) -> &'a RefCell<DefIdMap<usize>> 
msvc			    pub mod msvc;
mul			    pub fn mul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
must_unwind			    fn must_unwind(&self) -> bool 
must_unwind			    fn must_unwind(&self) -> bool;
must_zero			    pub fn must_zero(&self) -> bool 
mutate			    fn mutate(&mut self, _: ast::NodeId, _: Span, cmt: mc::cmt, _: euv::MutateMode) 
name			    pub fn name(&self, name: ast::Name) -> String 
named_struct			    pub fn named_struct(ccx: &CrateContext, name: &str) -> Type 
namespace			mod namespace;
namespace_for_item			pub fn namespace_for_item(cx: &CrateContext, def_id: DefId) -> Rc<NamespaceTreeNode> 
need_invoke			pub fn need_invoke(bcx: Block) -> bool 
needs_drop_flag			    pub fn needs_drop_flag(&self) -> bool { self.needs_drop_flag }
needs_gdb_debug_scripts_section			pub fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool 
needs_invoke			    fn needs_invoke(&self) -> bool 
needs_invoke			    fn needs_invoke(&self) -> bool;
needs_unwind_cleanup_cache			    pub fn needs_unwind_cleanup_cache(&self) -> &RefCell<FnvHashMap<Ty<'tcx>, bool>> 
neg			    pub fn neg(&self, v: ValueRef) -> ValueRef 
nest			    fn nest<F>(&mut self, scope_id: NodeId, f: F)
new			    pub fn new(config: ArchiveConfig<'a>) -> ArchiveBuilder<'a> 
new			    fn new() -> SharedEmitter 
new			    fn new(tm: TargetMachineRef, passes: Vec<String>) -> ModuleConfig 
new			    pub fn new(tcx: &'l ty::ctxt<'tcx>,
new			    fn new() -> PathCollector 
new			    pub fn new(tcx: &'l ty::ctxt<'tcx>,
new			    pub fn new(rec: Box<Recorder>,
new			    pub fn new(sess: &'a Session) -> SpanUtils<'a> 
new			    fn new() -> FindNestedReturn 
new			    pub fn new(ccx: &'a CrateContext<'a, 'tcx>, name: String) -> StatRecorder<'a, 'tcx> 
new			    pub fn new(ccx: &'a CrateContext<'a, 'tcx>) -> Builder<'a, 'tcx> 
new			    fn new(kind: CleanupScopeKind<'blk, 'tcx>,
new			    pub fn new(id: ast::NodeId, k: K) -> DropHint<K> { DropHint(id, k) }
new			    pub fn new() -> DropFlagHintsMap<'tcx> { DropFlagHintsMap { node_map: NodeMap() } }
new			    pub fn new(bcx: Block<'b, 'tcx>, val: ValueRef) -> Result<'b, 'tcx> 
new			    pub fn new(llbb: BasicBlockRef,
new			    fn new<'a>(shared: &SharedCrateContext<'a, 'tcx>,
new			    pub fn new(crate_name: &str,
new			    pub fn new(bcx: Block<'blk, 'tcx>, datum: Datum<'tcx, K>)
new			    pub fn new(m: RvalueMode) -> Rvalue 
new			    pub fn new(val: ValueRef, ty: Ty<'tcx>, kind: K) -> Datum<'tcx, K> 
new			    pub fn new<'blk, 'tcx>(source: &'static str) -> Lvalue 
new			    fn new(metadata: DIType, already_stored_in_typemap: bool) -> MetadataCreationResult 
new			    pub fn new() -> TypeMap<'tcx> 
new			    pub fn new(llmod: ModuleRef) -> CrateDebugContext<'tcx> 
new			    pub fn new(scope: DIScope, line: usize, col: usize) -> InternalDebugLocation 
new			    fn new() -> TempAnalyzer 
new			    pub fn new() -> TypeNames 
new_block			    pub fn new_block(&'a self,
new_dropflag_hint			    pub fn new_dropflag_hint(source: &'static str) -> Lvalue 
new_fn_ctxt			pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,
new_id_block			    pub fn new_id_block(&'a self,
new_sized			    pub fn new_sized(llval: ValueRef, lvalue_ty: LvalueTy<'tcx>) -> LvalueRef<'tcx> 
new_temp_block			    pub fn new_temp_block(&'a self,
new_with_hint			    pub fn new_with_hint<'blk, 'tcx>(source: &'static str,
new_with_session			    fn new_with_session(sess: &'a Session, reachable: &'a [String]) -> CodegenContext<'a> 
next			    fn next(&mut self) -> Option<ValueRef> 
next			    fn next(&mut self) -> Option<(CrateContext<'a, 'tcx>, bool)> 
next			    fn next(&mut self) -> Option<CrateContext<'a, 'tcx>> 
next			    fn next(&mut self) -> Option<Value> 
nil			    fn nil<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ty: Ty<'tcx>)
nil			    pub fn nil(ccx: &CrateContext) -> Type 
no_default_libraries			    fn no_default_libraries(&mut self) 
no_default_libraries			    fn no_default_libraries(&mut self);
no_whole_archives			    fn no_whole_archives(&mut self) 
no_whole_archives			    fn no_whole_archives(&mut self);
node_id			    fn node_id(&self, n: &DepNode) -> dot::Id 
node_id_substs			pub fn node_id_substs<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
node_id_to_string			    pub fn node_id_to_string(&self, id: ast::NodeId) -> String 
node_id_type			pub fn node_id_type<'blk, 'tcx>(bcx: &BlockS<'blk, 'tcx>, id: ast::NodeId) -> Ty<'tcx> 
node_label			    fn node_label(&self, n: &DepNode) -> dot::LabelText 
node_set			fn node_set(query: &DepGraphQuery, filter: &str) -> Option<FnvHashSet<DepNode>> 
nodes			    fn nodes(&self) -> dot::Nodes<DepNode> 
noname			pub fn noname() -> *const c_char 
normal_exit_block			    fn normal_exit_block(&'blk self,
normalize_and_test_predicates			pub fn normalize_and_test_predicates<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
normalize_node_id			    fn normalize_node_id(&self, id: NodeId) -> usize 
not			    pub fn not(&self, v: ValueRef) -> ValueRef 
nswadd			    pub fn nswadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswmul			    pub fn nswmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswneg			    pub fn nswneg(&self, v: ValueRef) -> ValueRef 
nswsub			    pub fn nswsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
num_args			pub fn num_args(r: &Repr, discr: Disr) -> usize 
nuwadd			    pub fn nuwadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwmul			    pub fn nuwmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwneg			    pub fn nuwneg(&self, v: ValueRef) -> ValueRef 
nuwsub			    pub fn nuwsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
obj_size_bound			    pub fn obj_size_bound(&self) -> u64 
object_filenames			fn object_filenames(sess: &Session, outputs: &OutputFilenames) -> Vec<PathBuf> 
of_node			    pub fn of_node(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, id: ast::NodeId) -> Self 
one			            fn one<T>(x: Vec<T>) -> T 
opaque_method_ty			fn opaque_method_ty<'tcx>(tcx: &ty::ctxt<'tcx>, method_ty: &ty::BareFnTy<'tcx>)
opaque_vec			    pub fn opaque_vec(ccx: &CrateContext) -> Type 
opaque_vec_type			    pub fn opaque_vec_type(&self) -> Type 
open			    pub fn open(&self, key: &OsStr) -> io::Result<RegistryKey> 
operand			mod operand;
optimize			    fn optimize(&mut self) 
optimize			    fn optimize(&mut self);
optimize_and_codegen			unsafe fn optimize_and_codegen(cgcx: &CodegenContext,
or			    pub fn or(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
output_filename			    fn output_filename(&mut self, path: &Path) { self.cmd.arg("-o").arg(path); }
output_filename			    fn output_filename(&mut self, path: &Path) 
output_filename			    fn output_filename(&mut self, path: &Path);
padding			fn padding(ccx: &CrateContext, size: u64) -> ValueRef 
padding_ty			fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> 
padding_ty			fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> 
partial_cmp			    fn partial_cmp(&self, other: &Disr) -> Option<::std::cmp::Ordering> 
pat_score			    fn pat_score(def_map: &RefCell<DefMap>, pat: &hir::Pat) -> usize 
phi			    pub fn phi(&self, ty: Type, vals: &[ValueRef], bbs: &[BasicBlockRef]) -> ValueRef 
pick_column_to_specialize			fn pick_column_to_specialize(def_map: &RefCell<DefMap>, m: &[Match]) -> Option<usize> 
pointer_type_metadata			fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
pointercast			    pub fn pointercast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
pop_and_trans_ast_cleanup_scope			    fn pop_and_trans_ast_cleanup_scope(&self,
pop_and_trans_custom_cleanup_scope			    fn pop_and_trans_custom_cleanup_scope(&self,
pop_custom_cleanup_scope			    fn pop_custom_cleanup_scope(&self,
pop_loop_cleanup_scope			    fn pop_loop_cleanup_scope(&self,
pop_scope			    fn pop_scope(&self) -> CleanupScope<'blk, 'tcx> 
pop_scope			    fn pop_scope(&self) -> CleanupScope<'blk, 'tcx>;
position_at_end			    pub fn position_at_end(&self, llbb: BasicBlockRef) 
position_before			    pub fn position_before(&self, insn: ValueRef) 
position_independent_executable			    fn position_independent_executable(&mut self) { self.cmd.arg("-pie"); }
position_independent_executable			    fn position_independent_executable(&mut self) 
position_independent_executable			    fn position_independent_executable(&mut self);
post_store			    fn post_store<'blk, 'tcx>(&self,
pred_iter			    pub fn pred_iter(self) -> Preds 
prefix			    pub fn prefix(&self) -> Type { self.prefix }
prepare_ar_action			    fn prepare_ar_action(&self, cmd: &mut Command, dst: &Path, action: Action) 
prepare_enum_metadata			fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_index			    fn prepare_index(&mut self,
prepare_struct_metadata			fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_tuple_metadata			fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
process_attrs			    fn process_attrs(&mut self, node_id: ast::NodeId, def_id: DefId) 
process_const			    fn process_const(&mut self,
process_crate			pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,
process_enum			    fn process_enum(&mut self,
process_fn			    fn process_fn(&mut self,
process_formals			    fn process_formals(&mut self, formals: &Vec<ast::Arg>, qualname: &str) 
process_generic_params			    fn process_generic_params(&mut self,
process_impl			    fn process_impl(&mut self,
process_method			    fn process_method(&mut self,
process_method_call			    fn process_method_call(&mut self, ex: &ast::Expr, args: &Vec<P<ast::Expr>>) 
process_mod			    fn process_mod(&mut self, item: &ast::Item) 
process_pat			    fn process_pat(&mut self, p: &ast::Pat) 
process_path			    fn process_path(&mut self, id: NodeId, path: &ast::Path, ref_kind: Option<recorder::Row>) 
process_path_prefixes			    fn process_path_prefixes(&self, path: &ast::Path) -> Vec<(Span, String)> 
process_static_or_const_item			    fn process_static_or_const_item(&mut self, item: &ast::Item, typ: &ast::Ty, expr: &ast::Expr) 
process_struct			    fn process_struct(&mut self,
process_struct_field_def			    fn process_struct_field_def(&mut self, field: &ast::StructField, parent_id: NodeId) 
process_struct_lit			    fn process_struct_lit(&mut self,
process_trait			    fn process_trait(&mut self,
process_trait_ref			    fn process_trait_ref(&mut self, trait_ref: &ast::TraitRef) 
process_var_decl			    fn process_var_decl(&mut self, p: &ast::Pat, value: String) 
ptr_to			    pub fn ptr_to(&self) -> Type 
ptrcast			pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef 
ptrdiff			    pub fn ptrdiff(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ptrtoint			    pub fn ptrtoint(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
push			    fn push(n: &mut String, s: &str) 
push_ast_cleanup_scope			    fn push_ast_cleanup_scope(&self, debug_loc: NodeIdAndSpan) 
push_ast_cleanup_scope			    fn push_ast_cleanup_scope(&self, id: NodeIdAndSpan);
push_ctxt			pub fn push_ctxt(s: &'static str) -> _InsnCtxt 
push_custom_cleanup_scope			    fn push_custom_cleanup_scope(&self) -> CustomScopeIndex 
push_custom_cleanup_scope			    fn push_custom_cleanup_scope(&self) -> CustomScopeIndex;
push_custom_cleanup_scope_with_debug_loc			    fn push_custom_cleanup_scope_with_debug_loc(&self,
push_debuginfo_type_name			pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
push_item_name			    fn push_item_name(cx: &CrateContext,
push_loop_cleanup_scope			    fn push_loop_cleanup_scope(&self,
push_scope			    fn push_scope(&self, scope: CleanupScope<'blk, 'tcx>) 
push_scope			    fn push_scope(&self, scope: CleanupScope<'blk, 'tcx>);
push_type_params			    fn push_type_params<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
query_str			    pub fn query_str(&self, name: &str) -> io::Result<OsString> 
range_to_inttype			fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntType 
raw			    fn raw(&self) -> HKEY 
raw_block			pub fn raw_block<'blk, 'tcx>(fcx: &'blk FunctionContext<'blk, 'tcx>,
raw_builder			    pub fn raw_builder<'a>(&'a self) -> BuilderRef 
reachable			    pub fn reachable<'a>(&'a self) -> &'a NodeSet 
record			    pub fn record(&mut self, info: &str) 
record_with_span			    pub fn record_with_span(&mut self,
record_without_span			    pub fn record_without_span(&mut self, kind: Row, values: Vec<String>, span: Span) 
recorder			pub mod recorder;
recurse			    fn recurse(query: &DepGraphQuery,
ref_str			    pub fn ref_str(&mut self,
register_fn			fn register_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
register_fn_llvmty			pub fn register_fn_llvmty(ccx: &CrateContext,
register_foreign_item_fn			pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
register_method			fn register_method(ccx: &CrateContext,
register_rust_fn_with_foreign_abi			pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,
register_static			pub fn register_static(ccx: &CrateContext,
register_type_with_metadata			    fn register_type_with_metadata<'a>(&mut self,
register_unique_id_with_metadata			    fn register_unique_id_with_metadata(&mut self,
registry			mod registry;
remove			pub fn remove(sess: &Session, path: &Path) 
remove_file			    pub fn remove_file(&mut self, file: &str) 
report_overbig_object			    pub fn report_overbig_object(&self, obj: Ty<'tcx>) -> ! 
report_span_err			    pub fn report_span_err(&self, kind: &str, span: Span) 
repr			    pub fn repr<'bcx>(self, bcx: Block<'bcx, 'tcx>) -> String 
represent_node			pub fn represent_node<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
represent_type			pub fn represent_type<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
represent_type_uncached			fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
require_alloc_fn			fn require_alloc_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, info_ty: Ty<'tcx>, it: LangItem) -> DefId 
resume			    pub fn resume(&self, exn: ValueRef) -> ValueRef 
ret			    pub fn ret(&self, v: ValueRef) 
ret_void			    pub fn ret_void(&self) 
retokenise_span			    pub fn retokenise_span(&self, span: Span) -> StringReader<'a> 
return_address			    fn return_address() -> *const u8;
return_exit_block			    fn return_exit_block(&'blk self) -> BasicBlockRef 
return_exit_block			    fn return_exit_block(&'blk self) -> BasicBlockRef;
return_type			    pub fn return_type(&self) -> Type 
return_type_is_void			pub fn return_type_is_void<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
return_uses_outptr			pub fn return_uses_outptr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
rotate			    pub fn rotate(&self) -> CrateContext<'b, 'tcx> 
roundup			fn roundup(x: u64, a: u32) -> u64 { let a = a as u64; ((x + (a - 1)) \/ a) * a }
run			    fn run(&self, cwd: Option<&Path>, action: Action) -> Output 
run			pub fn run(sess: &session::Session, llmod: ModuleRef,
run_assembler			pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) 
run_passes			pub fn run_passes(sess: &Session,
run_work_multithreaded			fn run_work_multithreaded(sess: &Session,
run_work_singlethreaded			fn run_work_singlethreaded(sess: &Session,
rust_try_fn			    pub fn rust_try_fn<'a>(&'a self) -> &'a RefCell<Option<ValueRef>> 
rvalue			mod rvalue;
rvalue_creates_operand			pub fn rvalue_creates_operand<'tcx>(rvalue: &mir::Rvalue<'tcx>) -> bool 
rvalue_scratch_datum			pub fn rvalue_scratch_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
sanitize			pub fn sanitize(s: &str) -> String 
save			pub mod save;
schedule_clean			    fn schedule_clean(&self,
schedule_clean_in_ast_scope			    fn schedule_clean_in_ast_scope(&self,
schedule_clean_in_custom_scope			    fn schedule_clean_in_custom_scope(&self,
schedule_drop_adt_contents			    fn schedule_drop_adt_contents(&self,
schedule_drop_and_fill_mem			    fn schedule_drop_and_fill_mem(&self,
schedule_drop_immediate			    fn schedule_drop_immediate(&self,
schedule_drop_mem			    fn schedule_drop_mem(&self,
schedule_free_value			    fn schedule_free_value(&self,
schedule_lifetime_end			    fn schedule_lifetime_end(&self,
scope_metadata			pub fn scope_metadata(fcx: &FunctionContext,
scopes_len			    fn scopes_len(&self) -> usize 
scopes_len			    fn scopes_len(&self) -> usize;
sdiv			    pub fn sdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
select			    pub fn select(&self, cond: ValueRef, then_val: ValueRef, else_val: ValueRef) -> ValueRef 
self_type_for_closure			pub fn self_type_for_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
sess			    pub fn sess(&self) -> &'blk Session { self.fcx.ccx.sess() }
sess			    pub fn sess<'a>(&'a self) -> &'a Session 
set_cleanup			    pub fn set_cleanup(&self, landing_pad: ValueRef) 
set_debug_location			pub fn set_debug_location(cx: &CrateContext, debug_location: InternalDebugLocation) 
set_flags			    fn set_flags(&mut self, sess: &Session, trans: &CrateTranslation) 
set_global_section			fn set_global_section(ccx: &CrateContext, llval: ValueRef, i: &hir::Item) 
set_members_of_composite_type			fn set_members_of_composite_type(cx: &CrateContext,
set_optimize_for_size			pub fn set_optimize_for_size(val: ValueRef, optimize: bool) 
set_source_location			pub fn set_source_location(fcx: &FunctionContext,
set_struct_body			    pub fn set_struct_body(&mut self, els: &[Type], packed: bool) 
set_value_name			pub fn set_value_name(val: ValueRef, name: &str) 
sext			    pub fn sext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
sext_or_bitcast			    pub fn sext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
shallow_copy			    pub fn shallow_copy<'blk>(&self,
shallow_copy_raw			    fn shallow_copy_raw<'blk>(&self,
shared			    pub fn shared(&self) -> &'b SharedCrateContext<'b, 'tcx> 
shift_mask_rhs			fn shift_mask_rhs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
shift_mask_val			pub fn shift_mask_val<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
shl			    pub fn shl(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
should_be_ignored_message			    fn should_be_ignored_message() -> &'static str 
shuffle_vector			    pub fn shuffle_vector(&self, v1: ValueRef, v2: ValueRef, mask: ValueRef) -> ValueRef 
simd_add			    fn simd_add<T>(a: T, b: T) -> T;
sitofp			    pub fn sitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
size_and_align_of			pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) 
size_and_align_of_dst			pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, info: ValueRef)
sized			    pub fn sized(value: ValueRef) -> MaybeSizedValue 
sizing_type_context_of			pub fn sizing_type_context_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
sizing_type_of			pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
sizing_type_of			pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
slice_layout_is_correct			    fn slice_layout_is_correct<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
snippet			    pub fn snippet(&self, span: Span) -> String 
source			    fn source(&self, edge: &(DepNode, DepNode)) -> DepNode 
source_loc			mod source_loc;
span_for_first_ident			    pub fn span_for_first_ident(&self, span: Span) -> Option<Span> 
span_for_last_ident			    pub fn span_for_last_ident(&self, span: Span) -> Option<Span> 
span_invalid_monomorphization_error			fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) 
span_start			pub fn span_start(cx: &CrateContext, span: Span) -> codemap::Loc 
span_transmute_size_error			pub fn span_transmute_size_error(a: &Session, b: Span, msg: &str) 
span_utils			pub mod span_utils;
spans_for_path_segments			    pub fn spans_for_path_segments(&self, path: &ast::Path) -> Vec<Span> 
spans_for_ty_params			    pub fn spans_for_ty_params(&self, span: Span, number: isize) -> Vec<Span> 
spans_with_brackets			    pub fn spans_with_brackets(&self, span: Span, nesting: isize, limit: isize) -> Vec<Span> 
src_archive			    fn src_archive(&mut self) -> Option<&ArchiveRO> 
src_files			    pub fn src_files(&mut self) -> Vec<String> 
srem			    pub fn srem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
start_emitting_source_locations			pub fn start_emitting_source_locations(fcx: &FunctionContext) 
statement			mod statement;
static_str			    pub fn static_str(&mut self,
statics_to_rauw			    pub fn statics_to_rauw<'a>(&'a self) -> &'a RefCell<Vec<(ValueRef, ValueRef)>> 
stats			    pub fn stats<'a>(&'a self) -> &'a Stats 
store			    pub fn store(&self, val: ValueRef, ptr: ValueRef) -> ValueRef 
store_fat_ptr			pub fn store_fat_ptr<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
store_local			pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
store_operand			    pub fn store_operand(&mut self,
store_to			    pub fn store_to<'blk>(self,
store_to_dest			    pub fn store_to_dest(self,
store_to_dest			    pub fn store_to_dest<'blk>(self,
store_ty			pub fn store_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, dst: ValueRef, t: Ty<'tcx>) 
struct_			    pub fn struct_(ccx: &CrateContext, els: &[Type], packed: bool) -> Type 
struct_field_ptr			pub fn struct_field_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, st: &Struct<'tcx>, val: MaybeSizedValue,
struct_gep			    pub fn struct_gep(&self, ptr: ValueRef, idx: usize) -> ValueRef 
struct_llfields			fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, st: &Struct<'tcx>,
struct_str			    pub fn struct_str(&mut self,
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_variant_str			    pub fn struct_variant_str(&mut self,
struct_wrapped_nullable_bitdiscr			fn struct_wrapped_nullable_bitdiscr(bcx: Block, nndiscr: Disr, discrfield: &DiscrField,
sub			    pub fn sub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
sub_mod_ref_str			    pub fn sub_mod_ref_str(&mut self, span: Span, sub_span: Span, qualname: &str, parent: NodeId) 
sub_span_after			    fn sub_span_after<F: Fn(Token) -> bool>(&self, span: Span, f: F) -> Option<Span> 
sub_span_after_keyword			    pub fn sub_span_after_keyword(&self, span: Span, keyword: keywords::Keyword) -> Option<Span> 
sub_span_after_token			    pub fn sub_span_after_token(&self, span: Span, tok: Token) -> Option<Span> 
sub_span_before_token			    pub fn sub_span_before_token(&self, span: Span, tok: Token) -> Option<Span> 
sub_span_for_meth_name			    pub fn sub_span_for_meth_name(&self, span: Span) -> Option<Span> 
sub_span_for_type_name			    pub fn sub_span_for_type_name(&self, span: Span) -> Option<Span> 
sub_span_of_token			    pub fn sub_span_of_token(&self, span: Span, tok: Token) -> Option<Span> 
sub_type_ref_str			    pub fn sub_type_ref_str(&mut self, span: Span, sub_span: Span, qualname: &str) 
subroutine_type_metadata			fn subroutine_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
switch			    pub fn switch(&self, v: ValueRef, else_llbb: BasicBlockRef, num_cases: usize) -> ValueRef 
symbol_hash			fn symbol_hash<'tcx>(tcx: &ty::ctxt<'tcx>,
symbol_hasher			    pub fn symbol_hasher<'a>(&'a self) -> &'a RefCell<Sha256> 
takes_hints			    fn takes_hints(&self) -> bool 
takes_u8			fn takes_u8(_: u8) {}
target			    fn target(&self, edge: &(DepNode, DepNode)) -> DepNode 
target_feature			fn target_feature(sess: &Session) -> String 
tcx			    pub fn tcx(&self) -> &'blk ty::ctxt<'tcx> 
tcx			    pub fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> 
td			    pub fn td(&self) -> llvm::TargetDataRef 
temporary_scope			pub fn temporary_scope(tcx: &ty::ctxt,
terminate			pub fn terminate(cx: Block, _: &str) 
tn			    pub fn tn<'a>(&'a self) -> &'a TypeNames 
to_appropriate_datum			    pub fn to_appropriate_datum<'blk>(self, bcx: Block<'blk, 'tcx>)
to_arg_ty			pub fn to_arg_ty(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef 
to_arg_ty_ptr			pub fn to_arg_ty_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ptr: ValueRef, ty: Ty<'tcx>) -> ValueRef 
to_datum			    fn to_datum<'tcx>(self, ty: Ty<'tcx>) -> Datum<'tcx, Lvalue> 
to_expr_datum			    pub fn to_expr_datum(self) -> Datum<'tcx, Expr> 
to_expr_datumblock			    pub fn to_expr_datumblock(self) -> DatumBlock<'blk, 'tcx, Expr> 
to_expr_kind			    fn to_expr_kind(self) -> Expr 
to_expr_kind			    fn to_expr_kind(self) -> Expr;
to_intrinsic			    fn to_intrinsic<'blk, 'tcx>(&self, bcx: Block<'blk, 'tcx>, lhs_ty: Ty) -> ValueRef 
to_intrinsic_name			    fn to_intrinsic_name(&self, tcx: &ty::ctxt, ty: Ty) -> &'static str 
to_llbool			    pub fn to_llbool(self) -> Result<'blk, 'tcx> 
to_llbool			    pub fn to_llbool<'blk>(self, bcx: Block<'blk, 'tcx>) -> ValueRef 
to_llref			    pub fn to_llref(self) -> ValueRef 
to_llscalarish			    pub fn to_llscalarish<'blk>(self, bcx: Block<'blk, 'tcx>) -> ValueRef 
to_lvalue_datum			    pub fn to_lvalue_datum<'blk>(self,
to_lvalue_datum_in_scope			    pub fn to_lvalue_datum_in_scope<'blk>(self,
to_ref			    pub fn to_ref(&self) -> TypeRef 
to_ref_datum			    pub fn to_ref_datum<'blk>(self, bcx: Block<'blk, 'tcx>)
to_ref_slice			    pub fn to_ref_slice(slice: &[Type]) -> &[TypeRef] 
to_rvalue_datum			    pub fn to_rvalue_datum<'blk>(self,
to_str			    pub fn to_str(&self) -> String 
to_string			    pub fn to_string(self) -> String 
to_string			    pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String 
to_string			    pub fn to_string(&self, ccx: &CrateContext) -> String 
to_string			    pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String 
to_string			    pub fn to_string(self: Type) -> String 
to_value			    fn to_value(&self) -> DropHintValue { DropHint(self.0, self.1.val) }
to_value			    fn to_value(&self) -> Self::ValueKind;
top_ast_scope			    fn top_ast_scope(&self) -> Option<ast::NodeId> 
top_ast_scope			    fn top_ast_scope(&self) -> Option<ast::NodeId>;
top_loop_scope			    fn top_loop_scope(&self) -> ast::NodeId 
top_loop_scope			    fn top_loop_scope(&self) -> ast::NodeId;
top_nonempty_cleanup_scope			    fn top_nonempty_cleanup_scope(&self) -> Option<usize> 
top_nonempty_cleanup_scope			    fn top_nonempty_cleanup_scope(&self) -> Option<usize>;
top_scope			    fn top_scope<R, F>(&self, f: F) -> R where F: FnOnce(&CleanupScope<'blk, 'tcx>) -> R 
top_scope			    fn top_scope<R, F>(&self, f: F) -> R where F: FnOnce(&CleanupScope<'blk, 'tcx>) -> R;
trait_cache			    pub fn trait_cache(&self) -> &RefCell<FnvHashMap<ty::PolyTraitRef<'tcx>,
trait_method_has_body			    fn trait_method_has_body(&self, mr: &ty::ImplOrTraitItem) -> bool 
trait_pointer_metadata			fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
trait_str			    pub fn trait_str(&mut self,
trans			pub mod trans;
trans			    fn trans<'blk>(&self, mut bcx: Block<'blk, 'tcx>) -> OptResult<'blk, 'tcx> 
trans			fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &hir::Expr)
trans			    fn trans<'blk>(&self,
trans			pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_addr_of			fn trans_addr_of<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_adt			pub fn trans_adt<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_arg_datum			pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_args			pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,
trans_args_under_call_abi			fn trans_args_under_call_abi<'blk, 'tcx>(
trans_assign_op			fn trans_assign_op<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_binary			fn trans_binary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_block			pub fn trans_block<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_block			    pub fn trans_block(&mut self, bb: mir::BasicBlock) 
trans_break			pub fn trans_break<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_break_cont			pub fn trans_break_cont<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_call			pub fn trans_call<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_call_inner			pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
trans_case			pub fn trans_case<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr, discr: Disr)
trans_cleanups_to_exit_scope			    fn trans_cleanups_to_exit_scope(&'blk self,
trans_closure			pub fn trans_closure<'a, 'b, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_closure_adapter_shim			fn trans_closure_adapter_shim<'a, 'tcx>(
trans_closure_expr			pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,
trans_closure_method			pub fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,
trans_const			pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, r: &Repr<'tcx>, discr: Disr,
trans_constant			    pub fn trans_constant(&mut self,
trans_constval			    pub fn trans_constval(&mut self,
trans_constval_inner			    fn trans_constval_inner(&mut self,
trans_cont			pub fn trans_cont<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_crate			pub fn trans_crate<'tcx>(tcx: &ty::ctxt<'tcx>,
trans_datum_unadjusted			fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_def			    fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_def			fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_def_dps_unadjusted			fn trans_def_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_def_fn_unadjusted			pub fn trans_def_fn_unadjusted<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_drop_flag_ptr			pub fn trans_drop_flag_ptr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_enum_variant			pub fn trans_enum_variant<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_enum_variant_or_tuple_like_struct			fn trans_enum_variant_or_tuple_like_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_exchange_free			pub fn trans_exchange_free<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
trans_exchange_free_dyn			pub fn trans_exchange_free_dyn<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
trans_exchange_free_ty			pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_external_path			pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_fail			pub fn trans_fail<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_fail_bounds_check			pub fn trans_fail_bounds_check<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_field			fn trans_field<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
trans_field_ptr			pub fn trans_field_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,
trans_fixed_vstore			pub fn trans_fixed_vstore<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_fn			pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_fn_once_adapter_shim			fn trans_fn_once_adapter_shim<'a, 'tcx>(
trans_fn_pointer_shim			pub fn trans_fn_pointer_shim<'a, 'tcx>(
trans_fn_ref			pub fn trans_fn_ref<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_fn_ref			    pub fn trans_fn_ref(&mut self,
trans_fn_ref_with_substs			pub fn trans_fn_ref_with_substs<'a, 'tcx>(
trans_foreign_mod			pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) 
trans_get_discr			pub fn trans_get_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,
trans_gnu_try			fn trans_gnu_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_if			pub fn trans_if<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_imm_cast			fn trans_imm_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_immediate_lit			fn trans_immediate_lit<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_impl			pub fn trans_impl(ccx: &CrateContext,
trans_index			fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_inline_asm			pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)
trans_into			pub fn trans_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_intrinsic_call			pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_item			pub fn trans_item(ccx: &CrateContext, item: &hir::Item) 
trans_item_ref			    pub fn trans_item_ref(&mut self,
trans_lang_call			pub fn trans_lang_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_lazy_binop			fn trans_lazy_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_lit_str			pub fn trans_lit_str<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_local_var			pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_loop			pub fn trans_loop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_lvalue			    pub fn trans_lvalue(&mut self,
trans_match			pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_match_inner			fn trans_match_inner<'blk, 'tcx>(scope_cx: Block<'blk, 'tcx>,
trans_method_call			pub fn trans_method_call<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_method_callee			pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_mir			pub fn trans_mir<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>) 
trans_monomorphized_callee			fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_msvc_try			fn trans_msvc_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_named_tuple_constructor			pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_native_call			pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_object_shim			pub fn trans_object_shim<'a, 'tcx>(
trans_operand			    pub fn trans_operand(&mut self,
trans_operand_into			    pub fn trans_operand_into(&mut self,
trans_overloaded_call			fn trans_overloaded_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_overloaded_call_args			fn trans_overloaded_call_args<'blk, 'tcx>(
trans_overloaded_op			fn trans_overloaded_op<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_rec_field			fn trans_rec_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_rec_tup_field			fn trans_rec_tup_field<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_ret			pub fn trans_ret<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_rust_fn_with_foreign_abi			pub fn trans_rust_fn_with_foreign_abi<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_rvalue			    pub fn trans_rvalue(&mut self,
trans_rvalue_dps_unadjusted			fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_rvalue_operand			    pub fn trans_rvalue_operand(&mut self,
trans_rvalue_stmt_unadjusted			fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_scalar_binop			fn trans_scalar_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_scalar_binop			    pub fn trans_scalar_binop(&mut self,
trans_scope_cleanups			    fn trans_scope_cleanups(&self, \/\/ cannot borrow self, will recurse
trans_scope_cleanups			    fn trans_scope_cleanups(&self,
trans_set_discr			pub fn trans_set_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,
trans_slice_vec			pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_statement			    pub fn trans_statement(&mut self,
trans_static			pub fn trans_static(ccx: &CrateContext,
trans_static_method			    pub fn trans_static_method(&mut self,
trans_static_method_callee			pub fn trans_static_method_callee<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_stmt			pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
trans_stmt_semi			pub fn trans_stmt_semi<'blk, 'tcx>(cx: Block<'blk, 'tcx>, e: &hir::Expr)
trans_struct			fn trans_struct<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_struct_drop			fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_struct_drop_flag			fn trans_struct_drop_flag<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_switch			pub fn trans_switch<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_to_lvalue			pub fn trans_to_lvalue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_trait_callee			fn trans_trait_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_trait_callee_from_llval			fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_tuple_struct			pub fn trans_tuple_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_unadjusted			fn trans_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_unary			fn trans_unary<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_uniq_expr			fn trans_uniq_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_unwind_resume			pub fn trans_unwind_resume(bcx: Block, lpval: ValueRef) 
trans_while			pub fn trans_while<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trap			    pub fn trap(&self) 
trunc			    pub fn trunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
trunc_or_bitcast			    pub fn trunc_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
truncated_hash_result			fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String 
try_intrinsic			fn try_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
tuple_variant_str			    pub fn tuple_variant_str(&mut self,
tvec			mod tvec;
ty			    fn ty(&self) -> Ty<'tcx> 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			    fn ty_align(ty: Type) -> usize 
ty_of_inttype			pub fn ty_of_inttype<'tcx>(tcx: &ty::ctxt<'tcx>, ity: IntType) -> Ty<'tcx> 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type, align_fn: TyAlignFn) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			    fn ty_size(ty: Type) -> usize 
ty_to_type			            fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type,
type_			mod type_;
type_hashcodes			    pub fn type_hashcodes<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, String>> 
type_is_fat_ptr			pub fn type_is_fat_ptr<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool 
type_is_immediate			pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_newtype_immediate			fn type_is_newtype_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_sized			pub fn type_is_sized<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool 
type_is_zero_size			pub fn type_is_zero_size<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_metadata			pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
type_names			mod type_names;
type_needs_drop			    pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool 
type_needs_drop			fn type_needs_drop<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool 
type_of			pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, r: &Repr<'tcx>) -> Type 
type_of			mod type_of;
type_of			pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
type_of_explicit_arg			pub fn type_of_explicit_arg<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
type_of_fn_from_ty			pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>) -> Type 
type_of_rust_fn			pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
type_to_string			    pub fn type_to_string(&self, ty: Type) -> String 
typedef_str			    pub fn typedef_str(&mut self,
types_to_str			    pub fn types_to_str(&self, tys: &[Type]) -> String 
udiv			    pub fn udiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
uint_from_ty			    pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type 
uitofp			    pub fn uitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
unify			    fn unify(cls: &mut [RegClass],
union_size_and_align			fn union_size_and_align(sts: &[Struct]) -> (machine::llsize, machine::llalign) 
unknown_file_metadata			pub fn unknown_file_metadata(cx: &CrateContext) -> DIFile 
unlib			    fn unlib<'a>(config: &config::Config, stem: &'a str) -> &'a str 
unreachable			    pub fn unreachable(&self) 
unreachable_block			    fn unreachable_block(&mut self) -> Block<'bcx, 'tcx> 
unsize_thin_ptr			pub fn unsize_thin_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
unsized_			    pub fn unsized_(value: ValueRef, meta: ValueRef) -> MaybeSizedValue 
unsized_info			pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,
untuple_arguments			pub fn untuple_arguments<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
unwind			pub fn unwind(val: ValueRef, can_unwind: bool) 
update_linkage			pub fn update_linkage(ccx: &CrateContext,
update_symbols			    pub fn update_symbols(&mut self) 
urem			    pub fn urem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
use_alias_str			    pub fn use_alias_str(&mut self,
use_dll_storage_attrs			    pub fn use_dll_storage_attrs(&self) -> bool 
use_glob_str			    pub fn use_glob_str(&mut self,
user_iter			    pub fn user_iter(self) -> Users 
using_llvm			    pub fn using_llvm(&self) -> bool 
utils			mod utils;
va_arg			    pub fn va_arg(&self, list: ValueRef, ty: Type) -> ValueRef 
val_to_string			    pub fn val_to_string(&self, val: ValueRef) -> String 
val_to_string			    pub fn val_to_string(&self, val: ValueRef) -> String 
val_ty			pub fn val_ty(v: ValueRef) -> Type 
validate_substs			pub fn validate_substs(substs: &Substs) 
value			    pub fn value(&self) -> ValueRef { self.1 }
value			mod value;
var_scope			pub fn var_scope(tcx: &ty::ctxt,
variable_str			    pub fn variable_str(&mut self,
variadic_func			    pub fn variadic_func(args: &[Type], ret: &Type) -> Type 
vc_lib_subdir			    fn vc_lib_subdir(arch: &str) -> Option<&'static str> 
vec			    pub fn vec(ccx: &CrateContext, ty: &Type) -> Type 
vec_slice_metadata			fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
vec_types			fn vec_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, unit_ty: Ty<'tcx>)
vec_types_from_expr			fn vec_types_from_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, vec_expr: &hir::Expr)
vector			    pub fn vector(ty: &Type, len: u64) -> Type 
vector_length			    pub fn vector_length(&self) -> usize 
vector_splat			    pub fn vector_splat(&self, num_elts: usize, elt: ValueRef) -> ValueRef 
visit_arm			    fn visit_arm(&mut self, arm: &ast::Arm) 
visit_assign			    fn visit_assign(&mut self,
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &hir::Expr) 
visit_generics			    fn visit_generics(&mut self, generics: &ast::Generics) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, i: &hir::Item) 
visit_local			    fn visit_local(&mut self, l: &ast::Local) 
visit_lvalue			    fn visit_lvalue(&mut self,
visit_mac			    fn visit_mac(&mut self, _: &ast::Mac) 
visit_nested_item			    fn visit_nested_item(&mut self, item_id: hir::ItemId) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat) 
visit_stmt			    fn visit_stmt(&mut self, s: &ast::Stmt) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) 
visit_ty			    fn visit_ty(&mut self, t: &ast::Ty) 
void			    pub fn void(ccx: &CrateContext) -> Type 
volatile_load			    pub fn volatile_load(&self, ptr: ValueRef) -> ValueRef 
volatile_store			    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef) -> ValueRef 
vtable_ptr			    pub fn vtable_ptr(ccx: &CrateContext) -> Type 
vtables			    pub fn vtables<'a>(&'a self) -> &'a RefCell<FnvHashMap<ty::PolyTraitRef<'tcx>, ValueRef>> 
walk_between			fn walk_between(query: &DepGraphQuery,
walk_block			fn walk_block(cx: &CrateContext,
walk_decl			fn walk_decl(cx: &CrateContext,
walk_expr			fn walk_expr(cx: &CrateContext,
walk_nodes			fn walk_nodes(query: &DepGraphQuery,
walk_pattern			fn walk_pattern(cx: &CrateContext,
wants_msvc_seh			pub fn wants_msvc_seh(sess: &Session) -> bool 
whole_archives			    fn whole_archives(&mut self) 
whole_archives			    fn whole_archives(&mut self);
with_codegen			    unsafe fn with_codegen<F>(tm: TargetMachineRef,
with_cond			pub fn with_cond<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>, val: ValueRef, f: F) -> Block<'blk, 'tcx>
with_insn_ctxt			pub fn with_insn_ctxt<F>(blk: F)
with_llvm_pmb			pub unsafe fn with_llvm_pmb(llmod: ModuleRef,
with_new_scope			fn with_new_scope<F>(cx: &CrateContext,
with_overflow_check			fn with_overflow_check<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, oop: OverflowOp, info: NodeIdAndSpan,
with_overflow_intrinsic			fn with_overflow_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
with_source_location_override			pub fn with_source_location_override<F, R>(fcx: &FunctionContext,
wrapping_add			    pub fn wrapping_add(self, other: Self) -> Self 
write			    pub mod write;
write_content			fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
write_metadata			pub fn write_metadata<'a, 'tcx>(cx: &SharedCrateContext<'a, 'tcx>,
write_output_file			pub fn write_output_file(
write_rlib_bytecode_object_v1			fn write_rlib_bytecode_object_v1(writer: &mut Write,
write_sub_path_trait_truncated			    fn write_sub_path_trait_truncated(&mut self, path: &ast::Path) 
write_sub_paths			    fn write_sub_paths(&mut self, path: &ast::Path, global: bool) 
write_sub_paths_truncated			    fn write_sub_paths_truncated(&mut self, path: &ast::Path, global: bool) 
x86_64_ty			    fn x86_64_ty<F>(ccx: &CrateContext,
xor			    pub fn xor(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
zext			    pub fn zext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
zext_or_bitcast			    pub fn zext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
