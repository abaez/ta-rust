::std::ops::BitAnd for Disr			impl ::std::ops::BitAnd for Disr 
AShr			pub fn AShr(cx: Block,
Add			pub fn Add(cx: Block,
AddCase			pub fn AddCase(s: ValueRef, on_val: ValueRef, dest: BasicBlockRef) 
AddClause			pub fn AddClause(cx: Block, landing_pad: ValueRef, clause: ValueRef) 
AddHandler			pub fn AddHandler(cx: Block, catch_switch: ValueRef, handler: BasicBlockRef) 
AddIncomingToPhi			pub fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) 
Addition			enum Addition 
AggregateRet			pub fn AggregateRet(cx: Block,
Alloca			pub fn Alloca(cx: Block, ty: Type, name: &str) -> ValueRef 
AllocaFcx			pub fn AllocaFcx(fcx: &FunctionContext, ty: Type, name: &str) -> ValueRef 
And			pub fn And(cx: Block,
Arch			pub enum Arch 
ArchiveBuilder			impl<'a> ArchiveBuilder<'a> 
ArchiveBuilder			pub struct ArchiveBuilder<'a> 
ArchiveConfig			pub struct ArchiveConfig<'a> 
ArgKind			enum ArgKind 
ArgType			impl ArgType 
ArgType			pub struct ArgType 
AsI64			pub trait AsI64 { fn as_i64(self) -> i64; }
AsI64 for i32			impl AsI64 for i32 { fn as_i64(self) -> i64 { self as i64 }}
AsI64 for i64			impl AsI64 for i64 { fn as_i64(self) -> i64 { self as i64 }}
AsI64 for isize			impl AsI64 for isize { fn as_i64(self) -> i64 { self as i64 }}
AsU64			pub trait AsU64 { fn as_u64(self) -> u64; }
AsU64 for u32			impl AsU64 for u32  { fn as_u64(self) -> u64 { self as u64 }}
AsU64 for u64			impl AsU64 for u64  { fn as_u64(self) -> u64 { self as u64 }}
AsU64 for usize			impl AsU64 for usize { fn as_u64(self) -> u64 { self as u64 }}
AssertModuleSource			impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> 
AssertModuleSource			struct AssertModuleSource<'a, 'tcx: 'a> 
AssociatedTypeNormalizer			impl<'a, 'b, 'gcx> AssociatedTypeNormalizer<'a, 'b, 'gcx> 
AssociatedTypeNormalizer			struct AssociatedTypeNormalizer<'a, 'b: 'a, 'gcx: 'b> 
AtomicCmpXchg			pub fn AtomicCmpXchg(cx: Block, dst: ValueRef,
AtomicFence			pub fn AtomicFence(cx: Block, order: AtomicOrdering, scope: SynchronizationScope) 
AtomicLoad			pub fn AtomicLoad(cx: Block, pointer_val: ValueRef, order: AtomicOrdering) -> ValueRef 
AtomicRMW			pub fn AtomicRMW(cx: Block, op: AtomicRmwBinOp,
AtomicStore			pub fn AtomicStore(cx: Block, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
B			pub fn B<'blk, 'tcx>(cx: Block<'blk, 'tcx>) -> Builder<'blk, 'tcx> 
Base			enum Base 
BasicBlock			impl BasicBlock 
BasicBlock			pub struct BasicBlock(pub BasicBlockRef);
BinOp			pub fn BinOp(cx: Block,
BitCast			pub fn BitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
BlockAndBuilder			impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> 
BlockAndBuilder			pub struct BlockAndBuilder<'blk, 'tcx: 'blk> 
BlockS			impl<'blk, 'tcx> BlockS<'blk, 'tcx> 
BlockS			pub struct BlockS<'blk, 'tcx: 'blk> 
Br			pub fn Br(cx: Block, dest: BasicBlockRef, debug_loc: DebugLoc) 
BranchKind			pub enum BranchKind 
Builder			impl<'a, 'tcx> Builder<'a, 'tcx> 
Builder			pub struct Builder<'a, 'tcx: 'a> 
BuilderRef_res			pub fn BuilderRef_res(b: BuilderRef) -> BuilderRef_res 
BuilderRef_res			pub struct BuilderRef_res 
C_array			pub fn C_array(ty: Type, elts: &[ValueRef]) -> ValueRef 
C_bool			pub fn C_bool(ccx: &CrateContext, val: bool) -> ValueRef 
C_bytes			pub fn C_bytes(cx: &CrateContext, bytes: &[u8]) -> ValueRef 
C_bytes_in_context			pub fn C_bytes_in_context(llcx: ContextRef, bytes: &[u8]) -> ValueRef 
C_cstr			pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> ValueRef 
C_floating_f64			pub fn C_floating_f64(f: f64, t: Type) -> ValueRef 
C_i32			pub fn C_i32(ccx: &CrateContext, i: i32) -> ValueRef 
C_integral			pub fn C_integral(t: Type, u: u64, sign_extend: bool) -> ValueRef 
C_named_struct			pub fn C_named_struct(t: Type, elts: &[ValueRef]) -> ValueRef 
C_nil			pub fn C_nil(ccx: &CrateContext) -> ValueRef 
C_null			pub fn C_null(t: Type) -> ValueRef 
C_str_slice			pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef 
C_struct			pub fn C_struct(cx: &CrateContext, elts: &[ValueRef], packed: bool) -> ValueRef 
C_struct_in_context			pub fn C_struct_in_context(llcx: ContextRef, elts: &[ValueRef], packed: bool) -> ValueRef 
C_u32			pub fn C_u32(ccx: &CrateContext, i: u32) -> ValueRef 
C_u64			pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef 
C_u8			pub fn C_u8(ccx: &CrateContext, i: u8) -> ValueRef 
C_uint			pub fn C_uint<I: AsU64>(ccx: &CrateContext, i: I) -> ValueRef 
C_undef			pub fn C_undef(t: Type) -> ValueRef 
C_vector			pub fn C_vector(elts: &[ValueRef]) -> ValueRef 
CachedEarlyExit			pub struct CachedEarlyExit 
CachedMir			pub enum CachedMir<'mir, 'tcx: 'mir> 
Call			pub fn Call(cx: Block,
Callee			impl<'tcx> Callee<'tcx> 
Callee			pub struct Callee<'tcx> 
CalleeData			pub enum CalleeData 
Cast			pub fn Cast(cx: Block, op: Opcode, val: ValueRef, dest_ty: Type,
CatchPad			pub fn CatchPad(cx: Block,
CatchRet			pub fn CatchRet(cx: Block, pad: ValueRef, unwind: BasicBlockRef) -> ValueRef 
CatchSwitch			pub fn CatchSwitch(cx: Block,
ClassList			impl ClassList for [RegClass] 
ClassList			trait ClassList 
CleanupKind			pub enum CleanupKind 
CleanupPad			pub fn CleanupPad(cx: Block,
CleanupRet			pub fn CleanupRet(cx: Block,
CleanupScope			impl<'tcx> CleanupScope<'tcx> 
CleanupScope			pub struct CleanupScope<'tcx> 
Clone for LandingPad			impl Clone for LandingPad 
CodegenContext			impl<'a> CodegenContext<'a> 
CodegenContext			struct CodegenContext<'a> 
CodegenUnit			impl<'tcx> CodegenUnit<'tcx> 
CodegenUnit			pub struct CodegenUnit<'tcx> 
CondBr			pub fn CondBr(cx: Block,
Const			impl<'tcx> Const<'tcx> 
Const			pub struct Const<'tcx> 
ConstLvalue			impl<'tcx> ConstLvalue<'tcx> 
ConstLvalue			struct ConstLvalue<'tcx> 
CrateContext			impl<'b, 'tcx> CrateContext<'b, 'tcx> 
CrateContext			pub struct CrateContext<'a, 'tcx: 'a> 
CrateContextIterator			pub struct CrateContextIterator<'a, 'tcx: 'a> 
CrateContextList			impl<'a, 'tcx: 'a> CrateContextList<'a, 'tcx> 
CrateContextList			pub struct CrateContextList<'a, 'tcx: 'a> 
CrateContextMaybeIterator			pub struct CrateContextMaybeIterator<'a, 'tcx: 'a> 
CrateDebugContext			impl<'tcx> CrateDebugContext<'tcx> 
CrateDebugContext			pub struct CrateDebugContext<'tcx> 
CrateTranslation			pub struct CrateTranslation 
CustomScopeIndex			pub struct CustomScopeIndex 
DIB			pub fn DIB(cx: &CrateContext) -> DIBuilderRef 
DebugLoc			impl DebugLoc 
DebugLoc			pub enum DebugLoc 
DepTrackingMapConfig for MirCache			impl<'tcx> DepTrackingMapConfig for MirCache<'tcx> 
DepTrackingMapConfig for ProjectionCache			impl<'gcx> DepTrackingMapConfig for ProjectionCache<'gcx> 
DepTrackingMapConfig for TraitSelectionCache			impl<'tcx> DepTrackingMapConfig for TraitSelectionCache<'tcx> 
Deref for BlockAndBuilder			impl<'blk, 'tcx> Deref for BlockAndBuilder<'blk, 'tcx> 
Deref for CachedMir			impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> 
Diagnostic			struct Diagnostic 
Disposition			enum Disposition { Reused, Translated }
Disr			impl Disr 
Disr			pub struct Disr(pub u64);
Drop for BuilderRef_res			impl Drop for BuilderRef_res 
Drop for OwnedBuilder			impl<'blk, 'tcx> Drop for OwnedBuilder<'blk, 'tcx> 
Drop for OwnedKey			impl Drop for OwnedKey 
Drop for StatRecorder			impl<'a, 'tcx> Drop for StatRecorder<'a, 'tcx> 
Drop for TypeOfDepthLock			impl<'a, 'tcx> Drop for TypeOfDepthLock<'a, 'tcx> 
Drop for _InsnCtxt			impl Drop for _InsnCtxt 
DropGlueKind			impl<'tcx> DropGlueKind<'tcx> 
DropGlueKind			pub enum DropGlueKind<'tcx> 
DropValue			impl<'tcx> DropValue<'tcx> 
DropValue			pub struct DropValue<'tcx> 
EarlyExitLabel			impl EarlyExitLabel 
EarlyExitLabel			pub enum EarlyExitLabel 
Emitter for SharedEmitter			impl Emitter for SharedEmitter 
EmptyPhi			pub fn EmptyPhi(cx: Block, ty: Type) -> ValueRef 
EnumDiscriminantInfo			enum EnumDiscriminantInfo 
EnumMemberDescriptionFactory			impl<'tcx> EnumMemberDescriptionFactory<'tcx> 
EnumMemberDescriptionFactory			struct EnumMemberDescriptionFactory<'tcx> 
ExactSDiv			pub fn ExactSDiv(cx: Block,
ExtractElement			pub fn ExtractElement(cx: Block, vec_val: ValueRef, index: ValueRef) -> ValueRef 
ExtractValue			pub fn ExtractValue(cx: Block, agg_val: ValueRef, index: usize) -> ValueRef 
FAdd			pub fn FAdd(cx: Block,
FAddFast			pub fn FAddFast(cx: Block,
FCmp			pub fn FCmp(cx: Block,
FDiv			pub fn FDiv(cx: Block,
FDivFast			pub fn FDivFast(cx: Block,
FMul			pub fn FMul(cx: Block,
FMulFast			pub fn FMulFast(cx: Block,
FNeg			pub fn FNeg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
FPCast			pub fn FPCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPExt			pub fn FPExt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPToSI			pub fn FPToSI(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPToUI			pub fn FPToUI(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPTrunc			pub fn FPTrunc(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FRem			pub fn FRem(cx: Block,
FRemFast			pub fn FRemFast(cx: Block,
FSub			pub fn FSub(cx: Block,
FSubFast			pub fn FSubFast(cx: Block,
Field			pub struct Field<'tcx>(pub ast::Name, pub Ty<'tcx>);
Flavor			pub enum Flavor 
FnType			impl FnType 
FnType			pub struct FnType 
Free			pub fn Free(cx: Block, pointer_val: ValueRef) 
From for Disr			impl From<::rustc::ty::Disr> for Disr 
From for Disr			impl From<usize> for Disr 
FunctionContext			impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> 
FunctionContext			impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> 
FunctionContext			impl<'a, 'tcx> FunctionContext<'a, 'tcx> 
FunctionContext			pub struct FunctionContext<'a, 'tcx: 'a> 
FunctionDebugContext			impl FunctionDebugContext 
FunctionDebugContext			pub enum FunctionDebugContext 
FunctionDebugContextData			pub struct FunctionDebugContextData 
GEP			pub fn GEP(cx: Block, pointer: ValueRef, indices: &[ValueRef]) -> ValueRef 
GEPi			pub fn GEPi(cx: Block, base: ValueRef, ixs: &[usize]) -> ValueRef 
GetNativeSystemInfo			    fn GetNativeSystemInfo(lpSystemInfo: *mut SYSTEM_INFO);
GlobalString			pub fn GlobalString(cx: Block, _str: *const c_char) -> ValueRef 
GlobalStringPtr			pub fn GlobalStringPtr(cx: Block, _str: *const c_char) -> ValueRef 
GnuLinker			impl<'a> GnuLinker<'a> 
GnuLinker			pub struct GnuLinker<'a> 
HandlerFreeVars			struct HandlerFreeVars<'a> 
Hash for TransItem			impl<'tcx> Hash for TransItem<'tcx> 
Hasher for Sha256Hasher			impl<'a> Hasher for Sha256Hasher<'a> 
ICmp			pub fn ICmp(cx: Block,
InBoundsGEP			pub fn InBoundsGEP(cx: Block, pointer: ValueRef, indices: &[ValueRef]) -> ValueRef 
IndirectBr			pub fn IndirectBr(cx: Block,
InlineAsmCall			pub fn InlineAsmCall(cx: Block, asm: *const c_char, cons: *const c_char,
InliningMap			impl<'tcx> InliningMap<'tcx> 
InliningMap			pub struct InliningMap<'tcx> 
InsertElement			pub fn InsertElement(cx: Block, vec_val: ValueRef, elt_val: ValueRef,
InsertValue			pub fn InsertValue(cx: Block, agg_val: ValueRef, elt_val: ValueRef, index: usize) -> ValueRef 
Instance			impl<'a, 'tcx> Instance<'tcx> 
Instance			impl<'tcx> Instance<'tcx> 
Instance			pub struct Instance<'tcx> 
IntCast			pub fn IntCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
IntToPtr			pub fn IntToPtr(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
InternalDebugLocation			impl InternalDebugLocation 
InternalDebugLocation			pub enum InternalDebugLocation 
Invoke			pub fn Invoke(cx: Block,
IsNotNull			pub fn IsNotNull(cx: Block, val: ValueRef) -> ValueRef 
IsNull			pub fn IsNull(cx: Block, val: ValueRef) -> ValueRef 
ItemPathBuffer for SymbolPathBuffer			impl ItemPathBuffer for SymbolPathBuffer 
Iterator for CrateContextIterator			impl<'a, 'tcx> Iterator for CrateContextIterator<'a,'tcx> 
Iterator for CrateContextMaybeIterator			impl<'a, 'tcx> Iterator for CrateContextMaybeIterator<'a, 'tcx> 
Iterator for Users			impl Iterator for Users 
Iterator for ValueIter			impl Iterator for ValueIter 
LShr			pub fn LShr(cx: Block,
LandingPad			pub fn LandingPad(cx: Block, ty: Type, pers_fn: ValueRef,
LandingPad			impl LandingPad 
LandingPad			pub struct LandingPad 
Lifetime			impl Lifetime 
Lifetime			pub enum Lifetime { Start, End }
Linker			pub trait Linker 
Linker for GnuLinker			impl<'a> Linker for GnuLinker<'a> 
Linker for MsvcLinker			impl<'a> Linker for MsvcLinker<'a> 
LinkerInfo			impl<'a, 'tcx> LinkerInfo 
LinkerInfo			pub struct LinkerInfo 
Load			pub fn Load(cx: Block, pointer_val: ValueRef) -> ValueRef 
LoadNonNull			pub fn LoadNonNull(cx: Block, ptr: ValueRef) -> ValueRef 
LoadRangeAssert			pub fn LoadRangeAssert(cx: Block, pointer_val: ValueRef, lo: u64,
LocalAnalyzer			impl<'mir, 'bcx, 'tcx> LocalAnalyzer<'mir, 'bcx, 'tcx> 
LocalAnalyzer			struct LocalAnalyzer<'mir, 'bcx: 'mir, 'tcx: 'bcx> 
LocalCrateContext			impl<'tcx> LocalCrateContext<'tcx> 
LocalCrateContext			pub struct LocalCrateContext<'tcx> 
LocalRef			enum LocalRef<'tcx> 
LocalRef			impl<'tcx> LocalRef<'tcx> 
LvalueRef			impl<'tcx> LvalueRef<'tcx> 
LvalueRef			pub struct LvalueRef<'tcx> 
MaybeSizedValue			impl MaybeSizedValue 
MaybeSizedValue			pub struct MaybeSizedValue 
MemberDescription			struct MemberDescription 
MemberDescriptionFactory			enum MemberDescriptionFactory<'tcx> 
MemberDescriptionFactory			impl<'tcx> MemberDescriptionFactory<'tcx> 
MemberOffset			enum MemberOffset 
MetadataCreationResult			impl MetadataCreationResult 
MetadataCreationResult			struct MetadataCreationResult 
MirCache			struct MirCache<'tcx> 
MirConstContext			impl<'a, 'tcx> MirConstContext<'a, 'tcx> 
MirConstContext			struct MirConstContext<'a, 'tcx: 'a> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'blk, 'tcx> MirContext<'blk, 'tcx> 
MirContext			pub struct MirContext<'bcx, 'tcx:'bcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirContext			impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> 
MirDebugScope			impl MirDebugScope 
MirDebugScope			pub struct MirDebugScope 
MirNeighborCollector			struct MirNeighborCollector<'a, 'tcx: 'a> 
MirVisitor for MirNeighborCollector			impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> 
ModuleConfig			impl ModuleConfig 
ModuleConfig			pub struct ModuleConfig 
ModuleLlvm			pub struct ModuleLlvm 
ModuleSource			pub enum ModuleSource 
ModuleTranslation			pub struct ModuleTranslation 
MsvcLinker			pub struct MsvcLinker<'a> 
Mul			pub fn Mul(cx: Block,
NSWAdd			pub fn NSWAdd(cx: Block,
NSWMul			pub fn NSWMul(cx: Block,
NSWNeg			pub fn NSWNeg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
NSWSub			pub fn NSWSub(cx: Block,
NUWAdd			pub fn NUWAdd(cx: Block,
NUWMul			pub fn NUWMul(cx: Block,
NUWNeg			pub fn NUWNeg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
NUWSub			pub fn NUWSub(cx: Block,
Neg			pub fn Neg(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
Not			pub fn Not(cx: Block, v: ValueRef, debug_loc: DebugLoc) -> ValueRef 
OperandRef			impl<'bcx, 'tcx> OperandRef<'tcx> 
OperandRef			pub struct OperandRef<'tcx> 
OperandValue			pub enum OperandValue 
Or			pub fn Or(cx: Block,
Ord for Disr			impl Ord for Disr 
OverflowOp			enum OverflowOp 
OwnedBuilder			impl<'blk, 'tcx> OwnedBuilder<'blk, 'tcx> 
OwnedBuilder			pub struct OwnedBuilder<'blk, 'tcx: 'blk> 
OwnedKey			struct OwnedKey(HKEY);
PartialEq for UnwindKind			impl PartialEq for UnwindKind 
PartialOrd for Disr			impl PartialOrd for Disr 
PartitioningStrategy			pub enum PartitioningStrategy 
Phi			pub fn Phi(cx: Block, ty: Type, vals: &[ValueRef],
PointerCast			pub fn PointerCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
PostInliningPartitioning			struct PostInliningPartitioning<'tcx>(Vec<CodegenUnit<'tcx>>);
PreInliningPartitioning			struct PreInliningPartitioning<'tcx> 
ProjectionCache			pub struct ProjectionCache<'gcx> 
PtrDiff			pub fn PtrDiff(cx: Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
PtrToInt			pub fn PtrToInt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
RPathConfig			pub struct RPathConfig<'a> 
RecursiveTypeDescription			enum RecursiveTypeDescription<'tcx> 
RecursiveTypeDescription			impl<'tcx> RecursiveTypeDescription<'tcx> 
RegClass			enum RegClass 
RegClass			impl RegClass 
RegCloseKey			    fn RegCloseKey(hKey: HKEY) -> LONG;
RegOpenKeyExW			    fn RegOpenKeyExW(hKey: HKEY,
RegQueryValueExW			    fn RegQueryValueExW(hKey: HKEY,
RegistryKey			impl RegistryKey 
RegistryKey			pub struct RegistryKey(Repr);
Repr			enum Repr 
Result			impl<'b, 'tcx> Result<'b, 'tcx> 
Result			pub struct Result<'blk, 'tcx: 'blk> 
Resume			pub fn Resume(cx: Block, exn: ValueRef) -> ValueRef 
Ret			pub fn Ret(cx: Block, v: ValueRef, debug_loc: DebugLoc) 
RetVoid			pub fn RetVoid(cx: Block, debug_loc: DebugLoc) 
ReturnDest			enum ReturnDest 
RootCollector			struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> 
SDiv			pub fn SDiv(cx: Block,
SExt			pub fn SExt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SExtOrBitCast			pub fn SExtOrBitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SIToFP			pub fn SIToFP(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SRem			pub fn SRem(cx: Block,
SYSTEM_INFO			struct SYSTEM_INFO 
Select			pub fn Select(cx: Block, if_: ValueRef, then: ValueRef, else_: ValueRef) -> ValueRef 
Send for ModuleConfig			unsafe impl Send for ModuleConfig { }
Send for ModuleTranslation			unsafe impl Send for ModuleTranslation { }
Send for RegistryKey			unsafe impl Send for RegistryKey {}
SetCleanup			pub fn SetCleanup(cx: Block, landing_pad: ValueRef) 
SetPersonalityFn			pub fn SetPersonalityFn(cx: Block, f: ValueRef) 
Sha256Hasher			struct Sha256Hasher<'a>(&'a mut Sha256);
SharedCrateContext			impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> 
SharedCrateContext			pub struct SharedCrateContext<'a, 'tcx: 'a> 
SharedEmitter			impl SharedEmitter 
SharedEmitter			struct SharedEmitter 
Shl			pub fn Shl(cx: Block,
ShuffleVector			pub fn ShuffleVector(cx: Block, v1: ValueRef, v2: ValueRef,
StatRecorder			impl<'a, 'tcx> StatRecorder<'a, 'tcx> 
StatRecorder			pub struct StatRecorder<'a, 'tcx: 'a> 
Stats			pub struct Stats 
Store			pub fn Store(cx: Block, val: ValueRef, ptr: ValueRef) -> ValueRef 
StructGEP			pub fn StructGEP(cx: Block, pointer: ValueRef, idx: usize) -> ValueRef 
StructMemberDescriptionFactory			impl<'tcx> StructMemberDescriptionFactory<'tcx> 
StructMemberDescriptionFactory			struct StructMemberDescriptionFactory<'tcx> 
Style			        enum Style { Float, Int(\/* is signed? *\/ bool), Unsupported }
Sub			pub fn Sub(cx: Block,
Switch			pub fn Switch(cx: Block, v: ValueRef, else_: BasicBlockRef, num_cases: usize)
SymbolMap			impl<'tcx> SymbolMap<'tcx> 
SymbolMap			pub struct SymbolMap<'tcx> 
SymbolNamesTest			impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> 
SymbolNamesTest			struct SymbolNamesTest<'a, 'tcx:'a> 
SymbolPathBuffer			struct SymbolPathBuffer 
Sync for ModuleTranslation			unsafe impl Sync for ModuleTranslation { }
Sync for RegistryKey			unsafe impl Sync for RegistryKey {}
TraitSelectionCache			pub struct TraitSelectionCache<'tcx> 
TransItem			impl<'a, 'tcx> TransItem<'tcx> 
TransItem			pub enum TransItem<'tcx> 
TransItemCollectionMode			pub enum TransItemCollectionMode 
Trap			pub fn Trap(cx: Block) 
Trunc			pub fn Trunc(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
TruncOrBitCast			pub fn TruncOrBitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
TupleMemberDescriptionFactory			impl<'tcx> TupleMemberDescriptionFactory<'tcx> 
TupleMemberDescriptionFactory			struct TupleMemberDescriptionFactory<'tcx> 
Type			impl Type 
Type			pub struct Type 
TypeFolder for AssociatedTypeNormalizer			impl<'a, 'b, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'b, 'gcx> 
TypeMap			impl<'tcx> TypeMap<'tcx> 
TypeMap			pub struct TypeMap<'tcx> 
TypeMethods			trait TypeMethods 
TypeMethods for Type			impl TypeMethods for Type 
TypeNames			impl TypeNames 
TypeNames			pub struct TypeNames 
TypeOfDepthLock			pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);
UDiv			pub fn UDiv(cx: Block,
UIToFP			pub fn UIToFP(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
URem			pub fn URem(cx: Block,
UnionMemberDescriptionFactory			impl<'tcx> UnionMemberDescriptionFactory<'tcx> 
UnionMemberDescriptionFactory			struct UnionMemberDescriptionFactory<'tcx> 
UniqueTypeId			pub struct UniqueTypeId(ast::Name);
Unreachable			pub fn Unreachable(cx: Block) 
UnwindKind			pub enum UnwindKind 
Use			impl Use 
Use			pub struct Use(UseRef);
Users			pub struct Users 
VAArg			pub fn VAArg(cx: Block, list: ValueRef, ty: Type) -> ValueRef 
Value			impl Value 
Value			pub struct Value(pub ValueRef);
ValueIter			struct ValueIter 
VariableAccess			pub enum VariableAccess<'a> 
VariableKind			pub enum VariableKind 
VariantInfo			impl<'a, 'tcx> VariantInfo<'tcx> 
VariantInfo			pub struct VariantInfo<'tcx> 
VariantMemberDescriptionFactory			impl<'tcx> VariantMemberDescriptionFactory<'tcx> 
VariantMemberDescriptionFactory			struct VariantMemberDescriptionFactory<'tcx> 
VectorSplat			pub fn VectorSplat(cx: Block, num_elts: usize, elt_val: ValueRef) -> ValueRef 
Visitor for LocalAnalyzer			impl<'mir, 'bcx, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'bcx, 'tcx> 
Visitor for SymbolNamesTest			impl<'a, 'tcx> Visitor<'tcx> for SymbolNamesTest<'a, 'tcx> 
VolatileLoad			pub fn VolatileLoad(cx: Block, pointer_val: ValueRef) -> ValueRef 
VolatileStore			pub fn VolatileStore(cx: Block, val: ValueRef, ptr: ValueRef) -> ValueRef 
WorkItem			struct WorkItem 
Xor			pub fn Xor(cx: Block,
ZExt			pub fn ZExt(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
ZExtOrBitCast			pub fn ZExtOrBitCast(cx: Block, val: ValueRef, dest_ty: Type) -> ValueRef 
_InsnCtxt			pub struct _InsnCtxt 
_Undef			pub fn _Undef(val: ValueRef) -> ValueRef 
_UndefReturn			pub fn _UndefReturn(cx: Block, fn_: ValueRef) -> ValueRef 
__HKEY__			pub enum __HKEY__ {}
abi			mod abi;
add			    pub fn add(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
add_archive			    fn add_archive<F>(&mut self, archive: &Path, skip: F)
add_cached_early_exit			    fn add_cached_early_exit(&mut self,
add_clause			    pub fn add_clause(&self, landing_pad: ValueRef, clause: ValueRef) 
add_comment			pub fn add_comment(cx: Block, text: &str) 
add_comment			    pub fn add_comment(&self, text: &str) 
add_dynamic_crate			    fn add_dynamic_crate(cmd: &mut Linker, sess: &Session, cratepath: &Path) 
add_file			    pub fn add_file(&mut self, file: &Path) 
add_handler			    pub fn add_handler(&self, catch_switch: ValueRef, handler: BasicBlockRef) 
add_lib			    fn add_lib(cmd: &mut Command, lib: &Path) 
add_local_native_libraries			fn add_local_native_libraries(cmd: &mut Linker, sess: &Session) 
add_native_library			    pub fn add_native_library(&mut self, name: &str) 
add_object			    fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }
add_object			    fn add_object(&mut self, path: &Path);
add_rlib			    pub fn add_rlib(&mut self, rlib: &Path, name: &str, lto: bool)
add_span_comment			pub fn add_span_comment(cx: Block, sp: Span, text: &str) 
add_span_comment			    pub fn add_span_comment(&self, sp: Span, text: &str) 
add_static_crate			    fn add_static_crate(cmd: &mut Linker,
add_upstream_native_libraries			fn add_upstream_native_libraries(cmd: &mut Linker, sess: &Session) 
add_upstream_rust_crates			fn add_upstream_rust_crates(cmd: &mut Linker,
addr_of			pub fn addr_of(ccx: &CrateContext,
addr_of_mut			pub fn addr_of_mut(ccx: &CrateContext,
adjust_for_abi			    pub fn adjust_for_abi<'a, 'tcx>(&mut self,
adt			mod adt;
aggregate_ret			    pub fn aggregate_ret(&self, ret_vals: &[ValueRef]) 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type, align_fn: TyAlignFn) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			fn align(off: usize, ty: Type) -> usize 
align			    fn align(off: usize, ty: Type) -> usize 
align_of			pub fn align_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>)
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
align_up_to			fn align_up_to(off: usize, a: usize) -> usize 
all_mem			    fn all_mem(cls: &mut [RegClass]) 
alloc_ty			pub fn alloc_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
alloca			pub fn alloca(cx: Block, ty: Type, name: &str) -> ValueRef 
alloca			    pub fn alloca(&self, ty: Type, name: &str) -> ValueRef 
alloca			    pub fn alloca<'bcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,
analyze			mod analyze;
and			    pub fn and(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
apply			    pub fn apply(self, fcx: &FunctionContext) 
apply_attrs_callsite			    pub fn apply_attrs_callsite(&self, callsite: ValueRef) 
apply_attrs_llfn			    pub fn apply_attrs_llfn(&self, llfn: ValueRef) 
apply_param_substs			pub fn apply_param_substs<'a, 'tcx, T>(scx: &SharedCrateContext<'a, 'tcx>,
apply_to_bcx			    pub fn apply_to_bcx(self, bcx: &BlockAndBuilder) 
arch			mod arch;
archive			    pub mod archive;
archive_config			fn archive_config<'a>(sess: &'a Session,
archive_search_paths			fn archive_search_paths(sess: &Session) -> Vec<PathBuf> 
arg_local_refs			fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,
args			    fn args(&mut self, args: &[String]) { self.cmd.args(args); }
args			    fn args(&mut self, args: &[String]);
array			    pub fn array(ty: &Type, len: u64) -> Type 
array_length			    pub fn array_length(&self) -> usize 
as_lvalue			    fn as_lvalue(&self) -> ConstLvalue<'tcx> 
as_store_inst			    pub fn as_store_inst(self) -> Option<Value> 
as_value			    pub fn as_value(self) -> Value 
ashr			    pub fn ashr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
asm			mod asm;
assert_discr_in_range			fn assert_discr_in_range(min: Disr, max: Disr, discr: Disr) 
assert_module_sources			pub fn assert_module_sources<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
assert_module_sources			mod assert_module_sources;
associate_type			    pub fn associate_type(&self, s: &str, t: &Type) 
at_start			    pub fn at_start<F, R>(&self, f: F) -> R
atomic_cmpxchg			    pub fn atomic_cmpxchg(&self, dst: ValueRef,
atomic_fence			    pub fn atomic_fence(&self, order: AtomicOrdering, scope: SynchronizationScope) 
atomic_load			    pub fn atomic_load(&self, ptr: ValueRef, order: AtomicOrdering) -> ValueRef 
atomic_rmw			    pub fn atomic_rmw(&self, op: AtomicRmwBinOp,
atomic_store			    pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
attributes			mod attributes;
avoid_invoke			pub fn avoid_invoke(bcx: Block) -> bool 
back			pub mod back 
base			mod base;
basic_block			mod basic_block;
basic_type_metadata			fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
bcx			    fn bcx(&self, bb: mir::BasicBlock) -> BlockAndBuilder<'bcx, 'tcx> 
bin_op_to_fcmp_predicate			pub fn bin_op_to_fcmp_predicate(op: hir::BinOp_) -> llvm::RealPredicate 
bin_op_to_icmp_predicate			pub fn bin_op_to_icmp_predicate(op: hir::BinOp_,
bin_subdir			    fn bin_subdir(arch: &str) -> Vec<(&'static str, &'static str)> 
binop			    pub fn binop(&self, op: Opcode, lhs: ValueRef, rhs: ValueRef)
bitand			    fn bitand(self, other: Self) -> Self 
bitcast			    pub fn bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
block			mod block;
block_name			    fn block_name(&self, prefix: &str) -> String 
bool			    pub fn bool(ccx: &CrateContext) -> Type 
br			    pub fn br(&self, dest: BasicBlockRef) 
branch			    fn branch(&self, from_bcx: Block, to_llbb: BasicBlockRef) 
build			    pub fn build(&mut self) 
build			    pub fn build(&'blk self) -> BlockAndBuilder<'blk, 'tcx> 
build			mod build;
build			    pub fn build<'a, I>(scx: &SharedCrateContext<'a, 'tcx>,
build_const_struct			fn build_const_struct<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
build_const_union			fn build_const_union<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
build_dylib			    fn build_dylib(&mut self, out_filename: &Path) 
build_dylib			    fn build_dylib(&mut self, out_filename: &Path);
build_link_meta			pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap,
build_return_block			    pub fn build_return_block(&self, ret_cx: Block<'blk, 'tcx>,
build_unchecked_lshift			pub fn build_unchecked_lshift<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
build_unchecked_rshift		hift<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
build_with_llvm			    fn build_with_llvm(&mut self, kind: ArchiveKind) -> io::Result<()> 
build_work_item			fn build_work_item(sess: &Session,
builder			    pub fn builder<'a>(&'a self) -> Builder<'a, 'tcx> 
builder			mod builder;
bundle			    pub fn bundle(&self) -> Option<&OperandBundleDef> 
bytes_to_bits			pub fn bytes_to_bits(bytes: u64) -> u64 
cabi_aarch64			mod cabi_aarch64;
cabi_arm			mod cabi_arm;
cabi_asmjs			mod cabi_asmjs;
cabi_mips			mod cabi_mips;
cabi_mips64			mod cabi_mips64;
cabi_powerpc			mod cabi_powerpc;
cabi_powerpc64			mod cabi_powerpc64;
cabi_s390x			mod cabi_s390x;
cabi_x86			mod cabi_x86;
cabi_x86_64			mod cabi_x86_64;
cabi_x86_win64			mod cabi_x86_win64;
cached_early_exit			    fn cached_early_exit(&self,
call			    pub fn call(self, b: &Builder, ptr: ValueRef) 
call			    pub fn call(&self, llfn: ValueRef, args: &[ValueRef],
call			    pub fn call<'a, 'blk>(self, bcx: Block<'blk, 'tcx>,
call_lifetime_end			pub fn call_lifetime_end(bcx: Block, ptr: ValueRef) 
call_lifetime_start			pub fn call_lifetime_start(bcx: Block, ptr: ValueRef) 
call_memcpy			pub fn call_memcpy<'bcx, 'tcx>(b: &Builder<'bcx, 'tcx>,
call_memset			pub fn call_memset<'bcx, 'tcx>(b: &Builder<'bcx, 'tcx>,
callee			mod callee;
can_have_local_instance			fn can_have_local_instance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
can_result_in_trans_item			        fn can_result_in_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
cast			    pub fn cast(&self, op: Opcode, val: ValueRef, dest_ty: Type) -> ValueRef 
cast_shift_const_rhs			pub fn cast_shift_const_rhs(op: hir::BinOp_, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
cast_shift_expr_rhs			pub fn cast_shift_expr_rhs(cx: Block, op: hir::BinOp_, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
cast_shift_rhs			fn cast_shift_rhs<F, G>(op: hir::BinOp_,
catch_pad			    pub fn catch_pad(&self,
catch_ret			    pub fn catch_ret(&self, pad: ValueRef, unwind: BasicBlockRef) -> ValueRef 
catch_switch			    pub fn catch_switch(&self,
ccx			    pub fn ccx(&self) -> &'blk CrateContext<'blk, 'tcx> 
char			    pub fn char(ccx: &CrateContext) -> Type 
characteristic_def_id_of_trans_item			fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
check_array			    fn check_array(ty: Type) -> Option<(Type, u64)> 
check_array			    fn check_array(ty: Type) -> Option<(Type, u64)> 
check_attr			    fn check_attr(&self, attr: &ast::Attribute) 
check_call			    fn check_call<'b>(&self,
check_config			    fn check_config(&self, attr: &ast::Attribute) -> bool 
check_not_terminated			pub fn check_not_terminated(cx: Block) 
check_overflow			    pub fn check_overflow(&self) -> bool 
check_recursion_limit			fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_store			    fn check_store<'b>(&self,
check_struct			    fn check_struct(ty: Type) -> Option<(Type, u64)> 
check_struct			    fn check_struct(ty: Type) -> Option<(Type, u64)> 
classify			    fn classify(ty: Type,
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, align_fn: TyAlignFn) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType, align_fn: TyAlignFn) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) 
classify_struct			    fn classify_struct(tys: &[Type],
classify_ty			fn classify_ty(ty: Type) -> Vec<RegClass> 
cleanup			    pub fn cleanup(&self) 
cleanup			mod cleanup;
cleanup_kinds			pub fn cleanup_kinds<'bcx,'tcx>(_bcx: Block<'bcx,'tcx>,
cleanup_llvm			pub fn cleanup_llvm(trans: &CrateTranslation) 
cleanup_pad			    pub fn cleanup_pad(&self,
cleanup_ret			    pub fn cleanup_ret(&self, cleanup: ValueRef,
cleanuppad			    pub fn cleanuppad(&self) -> Option<ValueRef> 
clone			    fn clone(&self) -> LandingPad 
closure			mod closure;
closure_bare_wrapper_cache			    pub fn closure_bare_wrapper_cache<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, ValueRef>> 
closure_vals			    pub fn closure_vals<'a>(&'a self) -> &'a RefCell<FnvHashMap<Instance<'tcx>, ValueRef>> 
cmp			    fn cmp(&self, other: &Disr) -> ::std::cmp::Ordering 
codegen_unit			    pub fn codegen_unit(&self) -> &CodegenUnit<'tcx> 
coerce_to_int			fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_to_int			fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_to_int			fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_to_long			fn coerce_to_long(ccx: &CrateContext, size: usize) -> Vec<Type> 
coerce_unsized_into			pub fn coerce_unsized_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
collect_and_partition_translation_items			fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>)
collect_const_item_neighbours			fn collect_const_item_neighbours<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
collect_crate_translation_items			pub fn collect_crate_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
collect_items_rec			fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,
collect_roots			fn collect_roots<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
collector			mod collector;
command_path			fn command_path(sess: &Session, extra: Option<PathBuf>) -> OsString 
common			mod common;
compare_fat_ptrs			pub fn compare_fat_ptrs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compare_scalar_types			pub fn compare_scalar_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compare_simd_types			pub fn compare_simd_types<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
compile_unit_metadata			pub fn compile_unit_metadata(scc: &SharedCrateContext,
composite_type_metadata			fn composite_type_metadata(cx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType, flavor: Flavor) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) 
compute_codegen_unit_name			fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
compute_debuginfo_type_name			pub fn compute_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
compute_fields			fn compute_fields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,
compute_symbol_name			    pub fn compute_symbol_name(&self,
compute_symbol_name_hash			    pub fn compute_symbol_name_hash(&self, tcx: TyCtxt, symbol_map: &SymbolMap) -> u64 
cond_br			    pub fn cond_br(&self, cond: ValueRef, then_llbb: BasicBlockRef, else_llbb: BasicBlockRef) 
const_array			    fn const_array(&self, array_ty: Ty<'tcx>, fields: &[ValueRef])
const_cstr_cache			    pub fn const_cstr_cache<'a>(&'a self) -> &'a RefCell<FnvHashMap<InternedString, ValueRef>> 
const_get_elt			pub fn const_get_elt(v: ValueRef, us: &[c_uint])
const_get_field			pub fn const_get_field<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,
const_globals			    pub fn const_globals<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, ValueRef>> 
const_lvalue			    fn const_lvalue(&self, lvalue: &mir::Lvalue<'tcx>, span: Span)
const_operand			    fn const_operand(&self, operand: &mir::Operand<'tcx>, span: Span)
const_rvalue			    fn const_rvalue(&self, rvalue: &mir::Rvalue<'tcx>,
const_scalar_binop			pub fn const_scalar_binop(op: mir::BinOp,
const_scalar_checked_binop			pub fn const_scalar_checked_binop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
const_struct_field			fn const_struct_field(val: ValueRef, ix: usize) -> ValueRef 
const_to_opt_int			pub fn const_to_opt_int(v: ValueRef) -> Option<i64> 
const_to_opt_uint			pub fn const_to_opt_uint(v: ValueRef) -> Option<u64> 
const_to_uint			pub fn const_to_uint(v: ValueRef) -> u64 
const_unsized			    pub fn const_unsized<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, ValueRef>> 
const_values			    pub fn const_values<'a>(&'a self) -> &'a RefCell<FnvHashMap<(ast::NodeId, &'tcx Substs<'tcx>),
constant			mod constant;
consts			mod consts;
contains_item			    pub fn contains_item(&self, item: &TransItem<'tcx>) -> bool 
contains_null			fn contains_null(s: &str) -> bool 
context			mod context;
copy_intrinsic			fn copy_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
core_lifetime_emit			fn core_lifetime_emit<'blk, 'tcx, F>(ccx: &'blk CrateContext<'blk, 'tcx>,
count_insn			    pub fn count_insn(&self, category: &str) 
count_llvm_insn			    pub fn count_llvm_insn(&self) 
count_zeros_intrinsic			fn count_zeros_intrinsic(bcx: Block,
create_DIArray			pub fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray 
create_and_register_recursive_type_forward_declaration			fn create_and_register_recursive_type_forward_declaration<'a, 'tcx>(
create_context_and_module			unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextRef, ModuleRef) 
create_entry_fn			    fn create_entry_fn(ccx: &CrateContext,
create_fn_trans_item			fn create_fn_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
create_function_debug_context			pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
create_global_var_metadata			pub fn create_global_var_metadata(cx: &CrateContext,
create_imps			fn create_imps(cx: &CrateContextList) 
create_member_descriptions			    fn create_member_descriptions<'a>(&self, cx: &CrateContext<'a, 'tcx>)
create_mir_scopes			pub fn create_mir_scopes(fcx: &FunctionContext) -> IndexVec<VisibilityScope, MirDebugScope> 
create_scope_map			mod create_scope_map;
create_struct_stub			fn create_struct_stub(cx: &CrateContext,
create_target_machine			pub fn create_target_machine(sess: &Session) -> TargetMachineRef 
create_trans_items_for_default_impls			fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
create_trans_items_for_vtable_methods			fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
create_union_stub			fn create_union_stub(cx: &CrateContext,
custom_coerce_unsize_info			pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx>,
dbg_cx			    pub fn dbg_cx<'a>(&'a self) -> &'a Option<debuginfo::CrateDebugContext<'tcx>> 
debug_context			pub fn debug_context<'a, 'tcx>(cx: &'a CrateContext<'a, 'tcx>)
debug_dump			fn debug_dump<'a, 'b, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,
debug_loc			    pub fn debug_loc(&mut self, source_info: mir::SourceInfo) -> DebugLoc 
debuginfo			    fn debuginfo(&mut self) 
debuginfo			    fn debuginfo(&mut self);
debuginfo			mod debuginfo;
debuginfo_disabled_message			    fn debuginfo_disabled_message() -> &'static str 
declare			mod declare;
declare_cfn			pub fn declare_cfn(ccx: &CrateContext, name: &str, fn_type: Type) -> ValueRef 
declare_fn			pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,
declare_global			pub fn declare_global(ccx: &CrateContext, name: &str, ty: Type) -> llvm::ValueRef 
declare_intrinsic			fn declare_intrinsic(ccx: &CrateContext, key: &str) -> Option<ValueRef> 
declare_local			pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
declare_raw_fn			fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty: Type) -> ValueRef 
def			    pub fn def<'a>(ccx: &CrateContext<'a, 'tcx>,
def_id_to_string			pub fn def_id_to_string(tcx: TyCtxt, def_id: DefId) -> String 
def_ty			fn def_ty<'a, 'tcx>(shared: &SharedCrateContext<'a, 'tcx>,
default_output_for_target			pub fn default_output_for_target(sess: &Session) -> config::CrateType 
defid_for_inlined_node			    pub fn defid_for_inlined_node<'a>(&'a self, node_id: ast::NodeId) -> Option<DefId> 
define			    pub fn define(&self, ccx: &CrateContext<'a, 'tcx>) 
define_fn			pub fn define_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
define_global			pub fn define_global(ccx: &CrateContext, name: &str, ty: Type) -> Option<ValueRef> 
define_internal_fn			pub fn define_internal_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
delete			    pub fn delete(self) 
deref			    fn deref(&self) -> &Self::Target 
deref			    fn deref(&self) -> &mir::Mir<'tcx> 
describe_enum_variant			fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
diagnostics			pub mod diagnostics;
direct_fn_type			    pub fn direct_fn_type<'a>(&self, ccx: &CrateContext<'a, 'tcx>,
discover_masters			    fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,
disposition			    fn disposition(&self, mtrans: &ModuleTranslation) -> Disposition 
disr			mod disr;
do_static_dispatch			fn do_static_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
do_static_trait_method_dispatch			fn do_static_trait_method_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
doc			mod doc;
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop_glues			    pub fn drop_glues<'a>(&'a self)
drop_structural_ty			fn drop_structural_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
drop_ty			pub fn drop_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
drop_ty_core			pub fn drop_ty_core<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
drop_ty_immediate			pub fn drop_ty_immediate<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
dummy_ccx			    fn dummy_ccx<'a>(shared: &'a SharedCrateContext<'a, 'tcx>,
dump			    fn dump(&mut self, handler: &Handler) 
dump_incremental_data			fn dump_incremental_data(trans: &CrateTranslation) 
each_linked_rlib			pub fn each_linked_rlib(sess: &Session,
eh_personality			    pub fn eh_personality(&self) -> ValueRef 
eh_personality			    pub fn eh_personality<'a>(&'a self) -> &'a Cell<Option<ValueRef>> 
eh_unwind_resume			    pub fn eh_unwind_resume(&self) -> Callee<'tcx> 
eh_unwind_resume			    pub fn eh_unwind_resume<'a>(&'a self) -> &'a Cell<Option<ValueRef>> 
element_type			    pub fn element_type(&self) -> Type 
emit			    fn emit(&mut self, db: &DiagnosticBuilder) 
emit_uwtable			pub fn emit_uwtable(val: ValueRef, emit: bool) 
empty			    pub fn empty(name: InternedString) -> Self 
empty_function_debug_context			pub fn empty_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>)
empty_phi			    pub fn empty_phi(&self, ty: Type) -> ValueRef 
empty_struct			    pub fn empty_struct(ccx: &CrateContext) -> Type 
empty_substs_for_def_id			    pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> 
enter_type_of			    pub fn enter_type_of(&self, ty: Ty<'tcx>) -> TypeOfDepthLock<'b, 'tcx> 
eq			    fn eq(&self, val: &UnwindKind) -> bool 
erase_from_parent			    pub fn erase_from_parent(self) 
escape_string			            fn escape_string(s: &[u8]) -> String 
exactsdiv			    pub fn exactsdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
execute_work_item			fn execute_work_item(cgcx: &CodegenContext,
explicit_linkage			    pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<llvm::Linkage> 
export_map			    pub fn export_map<'a>(&'a self) -> &'a ExportMap 
export_symbols			    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) 
export_symbols			    fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);
export_symbols			    fn export_symbols(&mut self,
exported_name_from_type_and_prefix			pub fn exported_name_from_type_and_prefix<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
exported_symbols			fn exported_symbols(scx: &SharedCrateContext,
extend_integer_width_to			    pub fn extend_integer_width_to(&mut self, bits: u64) 
extend_scope_to_file			pub fn extend_scope_to_file(ccx: &CrateContext,
extern_const_values			    pub fn extern_const_values<'a>(&'a self) -> &'a RefCell<DefIdMap<ValueRef>> 
extract_bytecode_format_version			fn extract_bytecode_format_version(bc: &[u8]) -> u32 
extract_compressed_bytecode_size_v1			fn extract_compressed_bytecode_size_v1(bc: &[u8]) -> u64 
extract_element			    pub fn extract_element(&self, vec: ValueRef, idx: ValueRef) -> ValueRef 
extract_value			    pub fn extract_value(&self, agg_val: ValueRef, idx: usize) -> ValueRef 
f32			    pub fn f32(ccx: &CrateContext) -> Type 
f64			    pub fn f64(ccx: &CrateContext) -> Type 
fadd			    pub fn fadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fadd_fast			    pub fn fadd_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fallback_path			    fn fallback_path(scc: &SharedCrateContext) -> CString 
fat_ptr_base_ty			pub fn fat_ptr_base_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
fcmp			    pub fn fcmp(&self, op: RealPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fcx			    pub fn fcx(&self) -> &'blk FunctionContext<'blk, 'tcx> 
fdiv			    pub fn fdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fdiv_fast			    pub fn fdiv_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
field			    fn field(&self, attr: &ast::Attribute, name: &str) -> InternedString 
field_ty			pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
field_types			    pub fn field_types(&self) -> Vec<Type> 
file_metadata			pub fn file_metadata(cx: &CrateContext, path: &str, full_path: &Option<String>) -> DIFile 
file_metadata_			fn file_metadata_(cx: &CrateContext, key: &str, file_name: &str, work_dir: &str) -> DIFile 
filename_for_input			pub fn filename_for_input(sess: &Session,
fill_nested			    fn fill_nested(ccx: &CrateContext, def_id: DefId, extra: &str, output: &mut String) 
filter_reachable_ids			pub fn filter_reachable_ids(tcx: TyCtxt, reachable: NodeSet) -> NodeSet 
finalize			    fn finalize<'a>(&self, cx: &CrateContext<'a, 'tcx>) -> MetadataCreationResult 
finalize			pub fn finalize(cx: &CrateContext) 
find_crate_name			pub fn find_crate_name(sess: Option<&Session>,
find_drop_glue_neighbors			fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
find_library			pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)
find_metadata_for_type			    fn find_metadata_for_type(&self, type_: Ty<'tcx>) -> Option<DIType> 
find_metadata_for_unique_id			    fn find_metadata_for_unique_id(&self, unique_type_id: UniqueTypeId) -> Option<DIType> 
find_msvc_11			    fn find_msvc_11(arch: &str) -> Option<(Command, PathBuf)> 
find_msvc_12			    fn find_msvc_12(arch: &str) -> Option<(Command, PathBuf)> 
find_msvc_latest			    fn find_msvc_latest(arch: &str, ver: &str) -> Option<(Command, PathBuf)> 
find_type			    pub fn find_type(&self, s: &str) -> Option<Type> 
find_vtable_types_for_unsizing			fn find_vtable_types_for_unsizing<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
finish			    fn finish(&self) -> u64 
finish			    pub fn finish(&'blk self, ret_cx: Block<'blk, 'tcx>,
finish_type_of			pub fn finish_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
fixed_vec_metadata			fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
fixup			    fn fixup(ty: Type, cls: &mut [RegClass]) 
float_from_ty			    pub fn float_from_ty(ccx: &CrateContext, t: ast::FloatTy) -> Type 
float_type_width			fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>)
float_width			    pub fn float_width(&self) -> usize 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Const			impl<'tcx> fmt::Debug for Const<'tcx> 
fmt::Debug for OperandRef			impl<'tcx> fmt::Debug for OperandRef<'tcx> 
fmt::Debug for Type			impl fmt::Debug for Type 
fmt::Debug for Value			impl fmt::Debug for Value 
fmt::Display for Instance			impl<'tcx> fmt::Display for Instance<'tcx> 
fmul			    pub fn fmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fmul_fast			    pub fn fmul_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fn_pointer_shims			    pub fn fn_pointer_shims(&self) -> &RefCell<FnvHashMap<Ty<'tcx>, ValueRef>> 
fneg			    pub fn fneg(&self, v: ValueRef) -> ValueRef 
fold			    fn fold<T:TypeFoldable<'gcx>>(&mut self, value: &T) -> T 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'gcx>) -> Ty<'gcx> 
follow_inlining			    fn follow_inlining<'tcx>(trans_item: TransItem<'tcx>,
fpcast			    pub fn fpcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fpext			    pub fn fpext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptosi			    pub fn fptosi(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptoui			    pub fn fptoui(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptrunc			    pub fn fptrunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
framework_path			    fn framework_path(&mut self, _path: &Path) 
framework_path			    fn framework_path(&mut self, path: &Path) { self.cmd.arg("-F").arg(path); }
framework_path			    fn framework_path(&mut self, path: &Path);
free			    pub fn free(&self, ptr: ValueRef) 
frem			    pub fn frem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
frem_fast			    pub fn frem_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
from			    fn from(i: ::rustc::ty::Disr) -> Disr 
from			    fn from(i: usize) -> Disr 
from_constval			    pub fn from_constval<'a>(ccx: &CrateContext<'a, 'tcx>,
from_def_id_and_substs			        fn from_def_id_and_substs<'a, 'tcx>(type_map: &mut TypeMap<'tcx>,
from_fn_attrs			pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) 
from_immediate			pub fn from_immediate(bcx: Block, val: ValueRef) -> ValueRef 
from_integer			    pub fn from_integer(cx: &CrateContext, i: layout::Integer) -> Type 
from_primitive			    pub fn from_primitive(ccx: &CrateContext, p: layout::Primitive) -> Type 
from_ref			    pub fn from_ref(r: TypeRef) -> Type 
from_ty			    pub fn from_ty(tcx: TyCtxt<'a, 'tcx, 'tcx>,
fsub			    pub fn fsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fsub_fast			    pub fn fsub_fast(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fulfill_obligation			pub fn fulfill_obligation<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
func			    pub fn func(args: &[Type], ret: &Type) -> Type 
func_params			    pub fn func_params(&self) -> Vec<Type> 
gc_sections			    fn gc_sections(&mut self, _keep_metadata: bool) 
gc_sections			    fn gc_sections(&mut self, keep_metadata: bool) 
gc_sections			    fn gc_sections(&mut self, keep_metadata: bool);
gdb			pub mod gdb;
gen_fn			fn gen_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,
general_ty_align			fn general_ty_align(ty: Type) -> usize 
generic_simd_intrinsic			fn generic_simd_intrinsic<'blk, 'tcx, 'a>
generic_type_of			fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
gep			    pub fn gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
gepi			    pub fn gepi(&self, base: ValueRef, ixs: &[usize]) -> ValueRef 
get			    pub fn get(&self) -> BasicBlockRef 
get			    pub fn get(&self, trans_item: TransItem<'tcx>) -> Option<&str> 
get			    pub fn get(&self) -> UseRef 
get			    pub fn get(&self) -> ValueRef 
get_ar_prog			pub fn get_ar_prog(sess: &Session) -> String 
get_containing_scope			    fn get_containing_scope<'ccx, 'tcx>(cx: &CrateContext<'ccx, 'tcx>,
get_dataptr			pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef 
get_dataptr			pub fn get_dataptr(b: &Builder, fat_ptr: ValueRef) -> ValueRef 
get_declared_value			pub fn get_declared_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_defined_value			pub fn get_defined_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_dominating_store			    pub fn get_dominating_store(self, bcx: Block) -> Option<Value> 
get_drop_glue			pub fn get_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> ValueRef 
get_drop_glue_core			fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_drop_glue_type			pub fn get_drop_glue_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
get_enum_discriminant_name			    fn get_enum_discriminant_name(cx: &CrateContext,
get_fat_ptr			    fn get_fat_ptr(&self) -> (ValueRef, ValueRef) 
get_first_use			    pub fn get_first_use(self) -> Option<Use> 
get_fn			fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_function_signature			    fn get_function_signature<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_install_prefix_rpath			fn get_install_prefix_rpath(config: &mut RPathConfig) -> String 
get_intrinsic			    pub fn get_intrinsic(&self, key: &str) -> ValueRef 
get_landing_pad			    pub fn get_landing_pad(&'blk self) -> BasicBlockRef 
get_linker			pub fn get_linker(sess: &Session) -> (String, Command, Option<PathBuf>) 
get_linker			    fn get_linker(path: &Path, arch: &str) -> Option<(Command, PathBuf)> 
get_llvm_opt_level			fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel 
get_llvm_opt_size			fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize 
get_meta			pub fn get_meta(bcx: Block, fat_ptr: ValueRef) -> ValueRef 
get_meta			pub fn get_meta(b: &Builder, fat_ptr: ValueRef) -> ValueRef 
get_mir			    pub fn get_mir(&self, def_id: DefId) -> Option<CachedMir<'b, 'tcx>> 
get_namespace_and_span_for_item			pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)
get_next_use			    pub fn get_next_use(self) -> Option<Use> 
get_operand			    pub fn get_operand(self, i: usize) -> Option<Value> 
get_or_compute			    pub fn get_or_compute<'map, 'scx>(&'map self,
get_or_create_closure_declaration			fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
get_or_create_landing_pad			    fn get_or_create_landing_pad(&'blk self) -> BasicBlockRef 
get_or_insert_gdb_debug_scripts_section_global			pub fn get_or_insert_gdb_debug_scripts_section_global(ccx: &CrateContext)
get_overflow_intrinsic			fn get_overflow_intrinsic(oop: OverflowOp, bcx: &BlockAndBuilder, ty: Ty) -> ValueRef 
get_pair			    fn get_pair(&self) -> (ValueRef, ValueRef) 
get_parent			        fn get_parent(user: Value) -> BasicBlock { user.get_parent().unwrap() }
get_parent			    pub fn get_parent(self) -> Option<BasicBlock> 
get_personality_slot			    fn get_personality_slot(&mut self, bcx: &BlockAndBuilder<'bcx, 'tcx>) -> ValueRef 
get_ref			    fn get_ref<'a>(&'a self,
get_reloc_model			pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode 
get_rpath_flags			pub fn get_rpath_flags(config: &mut RPathConfig) -> Vec<String> 
get_rpath_relative_to_output			fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String 
get_rpaths			fn get_rpaths(config: &mut RPathConfig, libs: &[PathBuf]) -> Vec<String> 
get_rpaths_relative_to_output			fn get_rpaths_relative_to_output(config: &mut RPathConfig,
get_rust_try_fn			fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,
get_sdk10_dir			    fn get_sdk10_dir() -> Option<PathBuf> 
get_sdk81_dir			    fn get_sdk81_dir() -> Option<PathBuf> 
get_sdk8_dir			    fn get_sdk8_dir() -> Option<PathBuf> 
get_self_type			fn get_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
get_simple_intrinsic			fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> 
get_single_predecessor			    pub fn get_single_predecessor(self) -> Option<BasicBlock> 
get_single_user			    pub fn get_single_user(self) -> Option<Value> 
get_span			        fn get_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
get_static			pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef 
get_symbol_hash			fn get_symbol_hash<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,
get_template_parameters			    fn get_template_parameters<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_type_parameter_names			    fn get_type_parameter_names<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
get_ucrt_dir			    fn get_ucrt_dir() -> Option<PathBuf> 
get_unique_type_id_as_string			    fn get_unique_type_id_as_string(&self, unique_type_id: UniqueTypeId) -> Rc<String> 
get_unique_type_id_of_enum_variant			    fn get_unique_type_id_of_enum_variant<'a>(&mut self,
get_unique_type_id_of_type			    fn get_unique_type_id_of_type<'a>(&mut self, cx: &CrateContext<'a, 'tcx>,
get_user			    pub fn get_user(self) -> Value 
get_vc_dir			    fn get_vc_dir(ver: &str) -> Option<PathBuf> 
get_virtual_method			pub fn get_virtual_method<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
get_vtable			pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
global_string			    pub fn global_string(&self, _str: *const c_char) -> ValueRef 
global_string_ptr			    pub fn global_string_ptr(&self, _str: *const c_char) -> ValueRef 
glue			mod glue;
gnu			    pub fn gnu() -> LandingPad 
has_meta			    pub fn has_meta(&self) -> bool 
has_no_uses			    pub fn has_no_uses(self) -> bool 
hash			    fn hash<H: Hasher>(&self, s: &mut H) 
hint_dynamic			    fn hint_dynamic(&mut self) 
hint_dynamic			    fn hint_dynamic(&mut self) {}
hint_dynamic			    fn hint_dynamic(&mut self);
hint_static			    fn hint_static(&mut self) 
hint_static			    fn hint_static(&mut self) {}
hint_static			    fn hint_static(&mut self);
hir_visit::Visitor for RootCollector			impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> 
host_arch			pub fn host_arch() -> Option<Arch> 
i1			    pub fn i1(ccx: &CrateContext) -> Type 
i16			    pub fn i16(ccx: &CrateContext) -> Type 
i32			    pub fn i32(ccx: &CrateContext) -> Type 
i32x1			struct i32x1(i32);
i64			    pub fn i64(ccx: &CrateContext) -> Type 
i8			    pub fn i8(ccx: &CrateContext) -> Type 
i8p			    pub fn i8p(ccx: &CrateContext) -> Type 
icmp			    pub fn icmp(&self, op: IntPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ignore			    pub fn ignore(&mut self) 
immediate			    pub fn immediate(self) -> ValueRef 
immediate_type_of			pub fn immediate_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
impl_method_cache			    pub fn impl_method_cache<'a>(&'a self)
implement_drop_glue			pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
in_memory_type_of			pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
inbounds_gep			    pub fn inbounds_gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
include_path			    fn include_path(&mut self, path: &Path) { self.cmd.arg("-L").arg(path); }
include_path			    fn include_path(&mut self, path: &Path) 
include_path			    fn include_path(&mut self, path: &Path);
incomplete_type_of			pub fn incomplete_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
indirect_br			    pub fn indirect_br(&self, addr: ValueRef, num_dests: usize) 
init			    pub fn init(&'blk self, skip_retptr: bool) -> Block<'blk, 'tcx> 
init_cpad			    pub fn init_cpad(&mut self, bb: mir::BasicBlock) 
init_insn_ctxt			pub fn init_insn_ctxt() 
init_zero_mem			pub fn init_zero_mem<'blk, 'tcx>(cx: Block<'blk, 'tcx>, llptr: ValueRef, t: Ty<'tcx>) 
inline			pub fn inline(val: ValueRef, inline: InlineAttr) 
inline_asm_call			    pub fn inline_asm_call(&self, asm: *const c_char, cons: *const c_char,
insert_element			    pub fn insert_element(&self, vec: ValueRef, elt: ValueRef, idx: ValueRef) -> ValueRef 
insert_reference_to_gdb_debug_scripts_section_global			pub fn insert_reference_to_gdb_debug_scripts_section_global(ccx: &CrateContext) 
insert_value			    pub fn insert_value(&self, agg_val: ValueRef, elt: ValueRef,
instances			    pub fn instances<'a>(&'a self) -> &'a RefCell<FnvHashMap<Instance<'tcx>, ValueRef>> 
int			    pub fn int(ccx: &CrateContext) -> Type 
int_from_ty			    pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type 
int_type			    pub fn int_type(&self) -> Type 
int_type_width_signed			fn int_type_width_signed<'tcx>(sty: &ty::TypeVariants<'tcx>, ccx: &CrateContext)
int_width			    pub fn int_width(&self) -> u64 
intcast			    pub fn intcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
internalize_symbols			fn internalize_symbols<'a, 'tcx>(sess: &Session,
intrinsic			mod intrinsic;
intrinsics			    fn intrinsics<'a>(&'a self) -> &'a RefCell<FnvHashMap<&'static str, ValueRef>> 
inttoptr			    pub fn inttoptr(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
invalid_output_for_target			pub fn invalid_output_for_target(sess: &Session,
invoke			pub fn invoke<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
invoke			    pub fn invoke(&self,
ios_ty_align			fn ios_ty_align(ty: Type) -> usize 
is_a_terminator_inst			        fn is_a_terminator_inst(user: &Value) -> bool { user.is_a_terminator_inst() }
is_a_terminator_inst			    pub fn is_a_terminator_inst(self) -> bool 
is_aggregate			    pub fn is_aggregate(&self) -> bool 
is_any_library			fn is_any_library(sess: &Session) -> bool 
is_const_integral			fn is_const_integral(v: ValueRef) -> bool 
is_discr_signed			pub fn is_discr_signed<'tcx>(l: &layout::Layout) -> bool 
is_drop_in_place_intrinsic			        fn is_drop_in_place_intrinsic<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_from_extern_crate			    pub fn is_from_extern_crate(&self) -> bool 
is_generic_fn			    pub fn is_generic_fn(&self) -> bool 
is_homogenous_aggregate_ty			fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> 
is_homogenous_aggregate_ty			fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> 
is_ignore			    pub fn is_ignore(&self) -> bool 
is_indirect			    pub fn is_indirect(&self) -> bool 
is_instantiated_only_on_demand			    pub fn is_instantiated_only_on_demand(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool 
is_node_local_to_unit			pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool
is_not_null			    pub fn is_not_null(&self, val: ValueRef) -> ValueRef 
is_null			    pub fn is_null(&self, val: ValueRef) -> ValueRef 
is_null			pub fn is_null(val: ValueRef) -> bool 
is_packed			    pub fn is_packed(&self) -> bool 
is_pass_byval			    fn is_pass_byval(&self) -> bool 
is_pass_byval			    fn is_pass_byval(&self) -> bool;
is_pie_binary			pub fn is_pie_binary(sess: &Session) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			    fn is_reg_ty(&self) -> bool 
is_reg_ty			    fn is_reg_ty(&self) -> bool;
is_relevant_child			fn is_relevant_child(c: &Child) -> bool 
is_ret_bysret			    fn is_ret_bysret(&self) -> bool 
is_ret_bysret			    fn is_ret_bysret(&self) -> bool;
is_single_fp_element			        fn is_single_fp_element(tys: &[Type]) -> bool 
is_sse			    fn is_sse(&self) -> bool 
is_undef			pub fn is_undef(val: ValueRef) -> bool 
is_unreachable			    pub fn is_unreachable(&self) -> bool 
is_valid			    pub fn is_valid(&self) -> bool 
is_valid_custom_scope			    fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool 
is_valid_to_pop_custom_scope			    fn is_valid_to_pop_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool 
is_versioned_bytecode_format			fn is_versioned_bytecode_format(bc: &[u8]) -> bool 
is_writeable			fn is_writeable(p: &Path) -> bool 
item_namespace			pub fn item_namespace(ccx: &CrateContext, def_id: DefId) -> DIScope 
items			    pub fn items(&self) -> &FnvHashMap<TransItem<'tcx>, llvm::Linkage> 
items_in_deterministic_order			    pub fn items_in_deterministic_order(&self,
iter_all			    pub fn iter_all<'b>(&'b self) -> CrateContextIterator<'b, 'tcx> 
iter_functions			fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter 
iter_globals			fn iter_globals(llmod: llvm::ModuleRef) -> ValueIter 
iter_need_trans			    pub fn iter_need_trans<'b>(&'b self) -> CrateContextIterator<'b, 'tcx> 
iter_variant			    fn iter_variant<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
ix			    pub fn ix(ccx: &CrateContext, num_bits: u64) -> Type 
kind			    pub fn kind(&self) -> TypeKind 
landing_pad			    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef,
landing_pad_to			    fn landing_pad_to(&mut self, target_bb: mir::BasicBlock) -> Block<'bcx, 'tcx>
langcall			pub fn langcall(tcx: TyCtxt,
layout_of			    pub fn layout_of(&self, ty: Ty<'tcx>) -> &'tcx ty::layout::Layout 
len			    pub fn len<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef 
len			    pub fn len<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef 
lib_subdir			    fn lib_subdir(arch: &str) -> Option<&'static str> 
link			    pub mod link;
link_args			fn link_args(cmd: &mut Linker,
link_binary			pub fn link_binary(sess: &Session,
link_binary_output			fn link_binary_output(sess: &Session,
link_dylib			    fn link_dylib(&mut self, lib: &str) { self.cmd.arg("-l").arg(lib); }
link_dylib			    fn link_dylib(&mut self, lib: &str) 
link_dylib			    fn link_dylib(&mut self, lib: &str);
link_exe_cmd			    pub fn link_exe_cmd(_sess: &Session) -> (Command, Option<PathBuf>) 
link_exe_cmd			    pub fn link_exe_cmd(sess: &Session) -> (Command, Option<PathBuf>) 
link_framework			    fn link_framework(&mut self, _framework: &str) 
link_framework			    fn link_framework(&mut self, framework: &str) 
link_framework			    fn link_framework(&mut self, framework: &str);
link_meta			    pub fn link_meta<'a>(&'a self) -> &'a LinkMeta 
link_natively			fn link_natively(sess: &Session,
link_rlib			fn link_rlib<'a>(sess: &'a Session,
link_rlib			    fn link_rlib(&mut self, lib: &Path) { self.cmd.arg(lib); }
link_rlib			    fn link_rlib(&mut self, lib: &Path);
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) 
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, path: &Path) 
link_rust_dylib			    fn link_rust_dylib(&mut self, lib: &str, path: &Path);
link_staticlib			fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,
link_staticlib			    fn link_staticlib(&mut self, lib: &str) { self.cmd.arg("-l").arg(lib); }
link_staticlib			    fn link_staticlib(&mut self, lib: &str) 
link_staticlib			    fn link_staticlib(&mut self, lib: &str);
link_whole_rlib			    fn link_whole_rlib(&mut self, lib: &Path) 
link_whole_rlib			    fn link_whole_rlib(&mut self, lib: &Path);
link_whole_rlib			    fn link_whole_rlib(&mut self, path: &Path) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]) 
link_whole_staticlib			    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]);
linker			    pub mod linker;
llalign_of_min			pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> llalign 
llalign_of_pref			pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> llalign 
llbb			    pub fn llbb(&self) -> BasicBlockRef 
llbitsize_of_real			pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> llbits 
llcx			    pub fn llcx(&self) -> ContextRef 
llelement_offset			pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: usize) -> u64 
llmod			    pub fn llmod(&self) -> ModuleRef 
llreg_ty			fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type 
llsize_of			pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef 
llsize_of_alloc			pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> llsize 
llsizingtypes			    pub fn llsizingtypes<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, Type>> 
lltypes			    pub fn lltypes<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, Type>> 
llvec_len			    fn llvec_len(cls: &[RegClass]) -> usize 
llvm_archive_kind			    fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> 
llvm_err			pub fn llvm_err(handler: &errors::Handler, msg: String) -> ! 
llvm_linkage_by_name			pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> 
llvm_type			    pub fn llvm_type(&self, ccx: &CrateContext) -> Type 
llvm_type_name			fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
load			    pub fn load(&self, ptr: ValueRef) -> ValueRef 
load_discr			fn load_discr(bcx: Block, ity: layout::Integer, ptr: ValueRef, min: u64, max: u64,
load_fat_ptr			pub fn load_fat_ptr<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
load_fat_ptr			pub fn load_fat_ptr(b: &Builder, fat_ptr: ValueRef) -> (ValueRef, ValueRef) 
load_nonnull			    pub fn load_nonnull(&self, ptr: ValueRef) -> ValueRef 
load_range_assert			    pub fn load_range_assert(&self, ptr: ValueRef, lo: u64,
load_ty			pub fn load_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, ptr: ValueRef, t: Ty<'tcx>) -> ValueRef 
load_ty_builder			pub fn load_ty_builder<'a, 'tcx>(b: &Builder<'a, 'tcx>, ptr: ValueRef, t: Ty<'tcx>) -> ValueRef 
local			    pub fn local(&self) -> &'b LocalCrateContext<'tcx> 
local_node_for_inlined_defid			    pub fn local_node_for_inlined_defid<'a>(&'a self, def_id: DefId) -> Option<ast::NodeId> 
local_node_id			        fn local_node_id(tcx: TyCtxt, trans_item: TransItem) -> Option<NodeId> 
local_prefix_bytes			            fn local_prefix_bytes(variant: &ty::layout::Struct) -> u64 
log_rpaths			    fn log_rpaths(desc: &str, rpaths: &[String]) 
lpad			    pub fn lpad(&self) -> Option<&'blk LandingPad> 
lshr			    pub fn lshr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
lto			    pub mod lto;
lvalue			mod lvalue;
lvalue_locals			pub fn lvalue_locals<'bcx, 'tcx>(bcx: Block<'bcx,'tcx>,
machine			mod machine;
macros			mod macros;
main			fn main() 
make_drop_glue			fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
make_indirect			    pub fn make_indirect(&mut self, ccx: &CrateContext) 
make_mir_scope			fn make_mir_scope(ccx: &CrateContext,
make_return_dest			    fn make_return_dest(&mut self, bcx: &BlockAndBuilder<'bcx, 'tcx>,
malloc_raw_dyn			pub fn malloc_raw_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
mangle			fn mangle<PI: Iterator<Item=InternedString>>(path: PI, hash: &str) -> String 
mangled_name_of_item			pub fn mangled_name_of_item(ccx: &CrateContext, def_id: DefId, extra: &str) -> String 
map_block			    pub fn map_block<F>(self, f: F) -> Self
map_ty			    pub fn map_ty<F>(&self, mut f: F) -> DropGlueKind<'tcx> where F: FnMut(Ty<'tcx>) -> Ty<'tcx>
mark_as_lvalue			    fn mark_as_lvalue(&mut self, local: mir::Local) 
mark_assigned			    fn mark_assigned(&mut self, local: mir::Local) 
maybe_create_entry_wrapper			pub fn maybe_create_entry_wrapper(ccx: &CrateContext) 
maybe_iter			    pub fn maybe_iter(&self, iter_all: bool) -> CrateContextMaybeIterator<'b, 'tcx> 
memcpy_ty			pub fn memcpy_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, dst: ValueRef, src: ValueRef, t: Ty<'tcx>) 
memfill			fn memfill<'a, 'tcx>(b: &Builder<'a, 'tcx>, llptr: ValueRef, ty: Ty<'tcx>, byte: u8) 
memory_ty			    pub fn memory_ty(&self, ccx: &CrateContext) -> Type 
memset_intrinsic			fn memset_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
merge_codegen_units			fn merge_codegen_units<'tcx>(initial_partitioning: &mut PreInliningPartitioning<'tcx>,
metadata			pub mod metadata;
metadata			    pub fn metadata(ccx: &CrateContext) -> Type 
metadata_llcx			    pub fn metadata_llcx(&self) -> ContextRef 
metadata_llmod			    pub fn metadata_llmod(&self) -> ModuleRef 
metadata_symbol_name			    pub fn metadata_symbol_name(&self) -> String 
meth			mod meth;
method			    pub fn method<'blk>(bcx: Block<'blk, 'tcx>,
method_call			    pub fn method_call<'blk>(bcx: Block<'blk, 'tcx>,
minimize_rpaths			fn minimize_rpaths(rpaths: &[String]) -> Vec<String> 
mir			    pub fn mir(&self) -> CachedMir<'a, 'tcx> 
mir			    pub fn mir(&self) -> CachedMir<'blk, 'tcx> 
mir			mod mir;
mir_map			    pub fn mir_map(&self) -> &MirMap<'tcx> 
modify_as_needed			            fn modify_as_needed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
mono			    pub fn mono<'a>(scx: &SharedCrateContext<'a, 'tcx>, def_id: DefId) -> Instance<'tcx> 
monomorphize			    pub fn monomorphize<T>(&self, value: &T) -> T
monomorphize			mod monomorphize;
monomorphize			    fn monomorphize<T>(&self, value: &T) -> T
monomorphized_lvalue_ty			    pub fn monomorphized_lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> 
msvc			    pub fn msvc(cleanuppad: ValueRef) -> LandingPad 
msvc			    pub mod msvc;
mul			    pub fn mul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
naked			pub fn naked(val: ValueRef, is_naked: bool) 
name			    pub fn name(&self, name: ast::Name) -> String 
name			    pub fn name(&self) -> &str 
named_struct			    pub fn named_struct(ccx: &CrateContext, name: &str) -> Type 
namespace			mod namespace;
need_invoke			pub fn need_invoke(bcx: Block) -> bool 
needs_gdb_debug_scripts_section			pub fn needs_gdb_debug_scripts_section(ccx: &CrateContext) -> bool 
needs_invoke			    fn needs_invoke(&self) -> bool 
needs_invoke			    pub fn needs_invoke(&self) -> bool 
needs_local_copy			    pub fn needs_local_copy(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool 
needs_unwind_cleanup_cache			    pub fn needs_unwind_cleanup_cache(&self) -> &RefCell<FnvHashMap<Ty<'tcx>, bool>> 
neg			    pub fn neg(&self, v: ValueRef) -> ValueRef 
new			    fn new(original_ty: Type, ty: Type) -> ArgType 
new			    pub fn new<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
new			    pub fn new(config: ArchiveConfig<'a>) -> ArchiveBuilder<'a> 
new			    pub fn new(scx: &SharedCrateContext<'a, 'tcx>,
new			    fn new() -> SharedEmitter 
new			    fn new(tm: TargetMachineRef, passes: Vec<String>) -> ModuleConfig 
new			    pub fn new(ccx: &'a CrateContext<'a, 'tcx>, name: String) -> StatRecorder<'a, 'tcx> 
new			    pub fn new(ccx: &'blk CrateContext<'blk, 'tcx>,
new			    pub fn new(ccx: &'a CrateContext<'a, 'tcx>) -> Builder<'a, 'tcx> 
new			    fn new(debug_loc: DebugLoc) -> CleanupScope<'tcx> 
new			    fn new() -> InliningMap<'tcx> 
new			    pub fn new(bcx: Block<'b, 'tcx>, val: ValueRef) -> Result<'b, 'tcx> 
new			    pub fn new(bcx: Block<'blk, 'tcx>, owned_builder: OwnedBuilder<'blk, 'tcx>) -> Self 
new			    pub fn new(llbb: BasicBlockRef,
new			    fn new<'a>(shared: &SharedCrateContext<'a, 'tcx>,
new			    pub fn new(shared_ccx: &'a SharedCrateContext<'a, 'tcx>,
new			    pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,
new			    fn new(metadata: DIType, already_stored_in_typemap: bool) -> MetadataCreationResult 
new			    pub fn new() -> TypeMap<'tcx> 
new			    pub fn new(llmod: ModuleRef) -> CrateDebugContext<'tcx> 
new			    pub fn new(scope: DIScope, line: usize, col: usize) -> InternalDebugLocation 
new			    fn new(mir: &'mir mir::Mir<'tcx>,
new			    fn new(ccx: &'a CrateContext<'a, 'tcx>,
new			    pub fn new(llval: ValueRef, ty: Ty<'tcx>) -> Const<'tcx> 
new			    fn new(shared: &'a SharedCrateContext<'b, 'gcx>) -> Self 
new			    pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>)
new			    pub fn new(name: InternedString,
new			    pub fn new() -> TypeNames 
new_block			    pub fn new_block(&'a self,
new_operand			    fn new_operand<'bcx>(ccx: &CrateContext<'bcx, 'tcx>,
new_sized			    pub fn new_sized(llval: ValueRef, lvalue_ty: LvalueTy<'tcx>) -> LvalueRef<'tcx> 
new_with_ccx			    pub fn new_with_ccx(ccx: &'blk CrateContext<'blk, 'tcx>) -> Self 
new_with_session			    fn new_with_session(sess: &'a Session, reachable: &'a [String]) -> CodegenContext<'a> 
next			    fn next(&mut self) -> Option<ValueRef> 
next			    fn next(&mut self) -> Option<(CrateContext<'a, 'tcx>, bool)> 
next			    fn next(&mut self) -> Option<CrateContext<'a, 'tcx>> 
next			    fn next(&mut self) -> Option<Value> 
nil			    pub fn nil(ccx: &CrateContext) -> Type 
no_default_libraries			    fn no_default_libraries(&mut self) 
no_default_libraries			    fn no_default_libraries(&mut self);
no_whole_archives			    fn no_whole_archives(&mut self) 
no_whole_archives			    fn no_whole_archives(&mut self);
node_id_to_string			    pub fn node_id_to_string(&self, id: ast::NodeId) -> String 
noname			pub fn noname() -> *const c_char 
not			    pub fn not(&self, v: ValueRef) -> ValueRef 
nswadd			    pub fn nswadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswmul			    pub fn nswmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswneg			    pub fn nswneg(&self, v: ValueRef) -> ValueRef 
nswsub			    pub fn nswsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
numbered_codegen_unit_name			fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString 
nuwadd			    pub fn nuwadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwmul			    pub fn nuwmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwneg			    pub fn nuwneg(&self, v: ValueRef) -> ValueRef 
nuwsub			    pub fn nuwsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
obj_size_bound			    pub fn obj_size_bound(&self) -> u64 
object_filenames			fn object_filenames(trans: &CrateTranslation,
one			            fn one<T>(x: Vec<T>) -> T 
opaque_vec			    pub fn opaque_vec(ccx: &CrateContext) -> Type 
opaque_vec_type			    pub fn opaque_vec_type(&self) -> Type 
open			    pub fn open(&self, key: &OsStr) -> io::Result<RegistryKey> 
operand			mod operand;
optimize			    fn optimize(&mut self) 
optimize			    fn optimize(&mut self);
optimize_and_codegen			unsafe fn optimize_and_codegen(cgcx: &CodegenContext,
or			    pub fn or(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
output_filename			    fn output_filename(&mut self, path: &Path) { self.cmd.arg("-o").arg(path); }
output_filename			    fn output_filename(&mut self, path: &Path) 
output_filename			    fn output_filename(&mut self, path: &Path);
pack_if_pair			    pub fn pack_if_pair(mut self, bcx: &BlockAndBuilder<'bcx, 'tcx>)
padding			fn padding(ccx: &CrateContext, size: u64) -> ValueRef 
padding_ty			fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> 
padding_ty			fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> 
padding_ty			fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> 
partial_cmp			    fn partial_cmp(&self, other: &Disr) -> Option<::std::cmp::Ordering> 
partition			pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,
partitioning			mod partitioning;
path_relative_from			fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> 
phi			    pub fn phi(&self, ty: Type, vals: &[ValueRef], bbs: &[BasicBlockRef]) -> ValueRef 
place_inlined_translation_items			fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartitioning<'tcx>,
place_root_translation_items			fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,
platform			mod platform 
pointer_type_metadata			fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
pointercast			    pub fn pointercast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
pop_and_trans_custom_cleanup_scope			    pub fn pop_and_trans_custom_cleanup_scope(&self,
pop_custom_cleanup_scope			    pub fn pop_custom_cleanup_scope(&self,
pop_scope			    fn pop_scope(&self) -> CleanupScope<'tcx> 
position_at_end			    pub fn position_at_end(&self, llbb: BasicBlockRef) 
position_at_start			    pub fn position_at_start(&self, llbb: BasicBlockRef) 
position_before			    pub fn position_before(&self, insn: ValueRef) 
position_independent_executable			    fn position_independent_executable(&mut self) { self.cmd.arg("-pie"); }
position_independent_executable			    fn position_independent_executable(&mut self) 
position_independent_executable			    fn position_independent_executable(&mut self);
pred_iter			    pub fn pred_iter(self) -> Preds 
predefine			    pub fn predefine(&self,
predefine_drop_glue			    fn predefine_drop_glue(ccx: &CrateContext<'a, 'tcx>,
predefine_fn			    fn predefine_fn(ccx: &CrateContext<'a, 'tcx>,
predefine_static			    fn predefine_static(ccx: &CrateContext<'a, 'tcx>,
prepare_enum_metadata			fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_index			    fn prepare_index(&mut self,
prepare_struct_metadata			fn prepare_struct_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_tuple_metadata			fn prepare_tuple_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
prepare_union_metadata			fn prepare_union_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
previous_work_product			    pub fn previous_work_product(&self) -> Option<&WorkProduct> 
process_attrs			    fn process_attrs(&mut self,
project_cache			    pub fn project_cache(&self) -> &RefCell<DepTrackingMap<ProjectionCache<'tcx>>> 
propagate			    fn propagate<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,
ptr			    pub fn ptr(llfn: ValueRef, ty: Ty<'tcx>) -> Callee<'tcx> 
ptr_to			    pub fn ptr_to(&self) -> Type 
ptrcast			pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef 
ptrdiff			    pub fn ptrdiff(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ptrtoint			    pub fn ptrtoint(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
push			    fn push(&mut self, text: &str) 
push			    fn push(n: &mut String, s: &str) 
push_ctxt			pub fn push_ctxt(s: &'static str) -> _InsnCtxt 
push_custom_cleanup_scope			    pub fn push_custom_cleanup_scope(&self) -> CustomScopeIndex 
push_debuginfo_type_name			pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
push_instance_as_string			fn push_instance_as_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
push_item_name			    fn push_item_name(cx: &CrateContext,
push_item_name			fn push_item_name(tcx: TyCtxt,
push_scope			    fn push_scope(&self, scope: CleanupScope<'tcx>) 
push_type_params			    fn push_type_params<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
push_type_params			fn push_type_params<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
push_unique_type_name			pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
query_str			    pub fn query_str(&self, name: &str) -> io::Result<OsString> 
raw			    fn raw(&self) -> HKEY 
raw_builder			    pub fn raw_builder<'a>(&'a self) -> BuilderRef 
reachable			    pub fn reachable<'a>(&'a self) -> &'a NodeSet 
record_inlining_canditates			    fn record_inlining_canditates<I>(&mut self,
record_inlining_canditates			fn record_inlining_canditates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
register_type_with_metadata			    fn register_type_with_metadata<'a>(&mut self,
register_unique_id_with_metadata			    fn register_unique_id_with_metadata(&mut self,
registry			mod registry;
reify			    pub fn reify<'a>(self, ccx: &CrateContext<'a, 'tcx>) -> ValueRef 
remove			pub fn remove(sess: &Session, path: &Path) 
remove_file			    pub fn remove_file(&mut self, file: &str) 
report_overbig_object			    pub fn report_overbig_object(&self, obj: Ty<'tcx>) -> ! 
report_symbol_names			pub fn report_symbol_names(scx: &SharedCrateContext) 
require_alloc_fn			fn require_alloc_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, info_ty: Ty<'tcx>, it: LangItem) -> DefId 
resume			    pub fn resume(&self, exn: ValueRef) -> ValueRef 
ret			    pub fn ret(&self, v: ValueRef) 
ret_void			    pub fn ret_void(&self) 
return_type			    pub fn return_type(&self) -> Type 
root_mode			    fn root_mode(&self) -> &RootMode 
rotate			    pub fn rotate(&'b self) -> CrateContext<'b, 'tcx> 
roundup			fn roundup(x: u64, a: u32) -> u64 { let a = a as u64; ((x + (a - 1)) \/ a) * a }
rpath			    pub mod rpath;
rpaths_to_flags			fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> 
run			pub fn run(sess: &session::Session, llmod: ModuleRef,
run_assembler			pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) 
run_passes			pub fn run_passes(sess: &Session,
run_work_multithreaded			fn run_work_multithreaded(sess: &Session,
run_work_singlethreaded			fn run_work_singlethreaded(sess: &Session,
rust_try_fn			    pub fn rust_try_fn<'a>(&'a self) -> &'a Cell<Option<ValueRef>> 
rvalue			mod rvalue;
rvalue_creates_operand			pub fn rvalue_creates_operand<'bcx, 'tcx>(_mir: &mir::Mir<'tcx>,
sanitize			pub fn sanitize(s: &str) -> String 
schedule_clean			    fn schedule_clean(&self, custom_scope: CustomScopeIndex, cleanup: DropValue<'tcx>) 
schedule_drop_adt_contents			    pub fn schedule_drop_adt_contents(&self,
schedule_drop_immediate			    pub fn schedule_drop_immediate(&self,
schedule_drop_mem			    pub fn schedule_drop_mem(&self,
scope_metadata_for_loc			    fn scope_metadata_for_loc(&self, scope_id: mir::VisibilityScope, pos: BytePos)
scopes_len			    fn scopes_len(&self) -> usize 
sdiv			    pub fn sdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
select			    pub fn select(&self, cond: ValueRef, then_val: ValueRef, else_val: ValueRef) -> ValueRef 
sess			    pub fn sess(&self) -> &'blk Session { self.fcx.ccx.sess() }
sess			    pub fn sess(&self) -> &'blk Session 
sess			    pub fn sess<'a>(&'a self) -> &'a Session 
set_cleanup			    pub fn set_cleanup(&self, landing_pad: ValueRef) 
set_debug_location			pub fn set_debug_location(cx: &CrateContext,
set_flags			    fn set_flags(&mut self, sess: &Session, trans: &CrateTranslation) 
set_frame_pointer_elimination			pub fn set_frame_pointer_elimination(ccx: &CrateContext, llfn: ValueRef) 
set_link_section			pub fn set_link_section(ccx: &CrateContext,
set_lpad			    pub fn set_lpad(&self, lpad: Option<LandingPad>) 
set_lpad_ref			    pub fn set_lpad_ref(&self, lpad: Option<&'blk LandingPad>) 
set_members_of_composite_type			fn set_members_of_composite_type(cx: &CrateContext,
set_optimize_for_size			pub fn set_optimize_for_size(val: ValueRef, optimize: bool) 
set_personality_fn			    pub fn set_personality_fn(&self, personality: ValueRef) 
set_source_location			pub fn set_source_location(fcx: &FunctionContext,
set_struct_body			    pub fn set_struct_body(&mut self, els: &[Type], packed: bool) 
sext			    pub fn sext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
sext_or_bitcast			    pub fn sext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
shared			    pub fn shared(&self) -> &'a SharedCrateContext<'a, 'tcx> 
shared			    pub fn shared(&self) -> &'b SharedCrateContext<'b, 'tcx> 
shift_mask_rhs			fn shift_mask_rhs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
shift_mask_val			pub fn shift_mask_val<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
shl			    pub fn shl(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
should_be_ignored_message			    fn should_be_ignored_message() -> &'static str 
shuffle_vector			    pub fn shuffle_vector(&self, v1: ValueRef, v2: ValueRef, mask: ValueRef) -> ValueRef 
simd_add			    fn simd_add<T>(a: T, b: T) -> T;
sitofp			    pub fn sitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
size_and_align_of			pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) 
size_and_align_of_dst			pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,
sized			    pub fn sized(value: ValueRef) -> MaybeSizedValue 
sizing_type_of			pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
sizing_type_of			pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
slice_for_each			pub fn slice_for_each<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,
slice_layout_is_correct			    fn slice_layout_is_correct<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
source_loc			mod source_loc;
span_invalid_monomorphization_error			fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) 
span_start			pub fn span_start(cx: &CrateContext, span: Span) -> syntax_pos::Loc 
src_archive			    fn src_archive(&mut self) -> Option<&ArchiveRO> 
src_files			    pub fn src_files(&mut self) -> Vec<String> 
srem			    pub fn srem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
start			    fn start(&self, bcx: Block) -> EarlyExitLabel 
start_emitting_source_locations			pub fn start_emitting_source_locations(fcx: &FunctionContext) 
statement			mod statement;
statics			    pub fn statics<'a>(&'a self) -> &'a RefCell<FnvHashMap<ValueRef, DefId>> 
statics_to_rauw			    pub fn statics_to_rauw<'a>(&'a self) -> &'a RefCell<Vec<(ValueRef, ValueRef)>> 
stats			    pub fn stats<'a>(&'a self) -> &'a Stats 
store			    pub fn store(&self, bcx: &BlockAndBuilder, mut val: ValueRef, dst: ValueRef) 
store			    pub fn store(&self, val: ValueRef, ptr: ValueRef) -> ValueRef 
store			    fn store(&mut self, dest: &mir::Lvalue<'tcx>, value: Const<'tcx>, span: Span) 
store_fat_ptr			pub fn store_fat_ptr<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
store_fn_arg			    pub fn store_fn_arg(&self, bcx: &BlockAndBuilder, idx: &mut usize, dst: ValueRef) 
store_operand			    pub fn store_operand(&mut self,
store_operand_direct			    pub fn store_operand_direct(&mut self,
store_return			    fn store_return(&mut self,
store_ty			pub fn store_ty<'blk, 'tcx>(cx: Block<'blk, 'tcx>, v: ValueRef, dst: ValueRef, t: Ty<'tcx>) 
string_to_io_error			fn string_to_io_error(s: String) -> io::Error 
struct_			    pub fn struct_(ccx: &CrateContext, els: &[Type], packed: bool) -> Type 
struct_field_ptr			fn struct_field_ptr<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,
struct_gep			    pub fn struct_gep(&self, ptr: ValueRef, idx: usize) -> ValueRef 
struct_llfields			fn struct_llfields<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fields: &Vec<Ty<'tcx>>,
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
struct_wrapped_nullable_bitdiscr			fn struct_wrapped_nullable_bitdiscr(bcx: Block, nndiscr: u64, discrfield: &layout::FieldPath,
sub			    pub fn sub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
subroutine_type_metadata			fn subroutine_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
switch			    pub fn switch(&self, v: ValueRef, else_llbb: BasicBlockRef, num_cases: usize) -> ValueRef 
symbol_for_def_id			fn symbol_for_def_id<'a, 'tcx>(def_id: DefId,
symbol_hasher			    pub fn symbol_hasher(&self) -> &RefCell<Sha256> 
symbol_hasher			    pub fn symbol_hasher<'a>(&'a self) -> &'a RefCell<Sha256> 
symbol_map			    pub fn symbol_map(&self) -> &SymbolMap<'tcx> 
symbol_map			mod symbol_map;
symbol_name			    pub fn symbol_name(self, scx: &SharedCrateContext<'a, 'tcx>) -> String 
symbol_names			    pub mod symbol_names;
symbol_names_test			mod symbol_names_test;
takes_hints			    fn takes_hints(&self) -> bool 
target_feature			fn target_feature(sess: &Session) -> String 
target_sets_discr_via_memset			fn target_sets_discr_via_memset<'blk, 'tcx>(bcx: Block<'blk, 'tcx>) -> bool 
tcx			    pub fn tcx(&self) -> TyCtxt<'blk, 'tcx, 'tcx> 
tcx			    pub fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> 
tcx			    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'gcx> 
td			    pub fn td(&self) -> llvm::TargetDataRef 
terminate			pub fn terminate(cx: Block, _: &str) 
tests			mod tests 
tn			    pub fn tn<'a>(&'a self) -> &'a TypeNames 
to_const			    fn to_const(&self, span: Span) -> Const<'tcx> 
to_const_int			fn to_const_int(value: ValueRef, t: Ty, tcx: TyCtxt) -> Option<ConstInt> 
to_dep_node			    fn to_dep_node(key: &DefId) -> DepNode<DefId> 
to_dep_node			    fn to_dep_node(key: &Self::Key) -> DepNode<DefId> 
to_dep_node			    fn to_dep_node(key: &ty::PolyTraitRef<'tcx>) -> DepNode<DefId> 
to_immediate			pub fn to_immediate(bcx: Block, val: ValueRef, ty: Ty) -> ValueRef 
to_linker			    pub fn to_linker(&'a self,
to_operand			    pub fn to_operand<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> OperandRef<'tcx> 
to_raw_string			    pub fn to_raw_string(&self) -> String 
to_ref			    pub fn to_ref(&self) -> TypeRef 
to_ref_slice			    pub fn to_ref_slice(slice: &[Type]) -> &[TypeRef] 
to_str			    pub fn to_str(&self) -> String 
to_string			    pub fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String 
to_string_internal			        fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
top_scope			    fn top_scope<R, F>(&self, f: F) -> R where F: FnOnce(&CleanupScope<'tcx>) -> R 
trait_cache			    pub fn trait_cache(&self) -> &RefCell<DepTrackingMap<TraitSelectionCache<'tcx>>> 
trait_method			    pub fn trait_method<'a>(ccx: &CrateContext<'a, 'tcx>,
trait_pointer_metadata			fn trait_pointer_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
trans			    fn trans<'blk>(&self,
trans			    fn trans(&mut self) -> Result<Const<'tcx>, ConstEvalErr> 
trans_argument			    fn trans_argument(&mut self,
trans_arguments_untupled			    fn trans_arguments_untupled(&mut self,
trans_block			    pub fn trans_block(&mut self, bb: mir::BasicBlock) 
trans_call_inner			fn trans_call_inner<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_case			pub fn trans_case<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, value: Disr)
trans_cleanups_to_exit_scope			    fn trans_cleanups_to_exit_scope(&'blk self,
trans_closure			pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_closure_body_via_mir			pub fn trans_closure_body_via_mir<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_closure_method			pub fn trans_closure_method<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,
trans_const			pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>, discr: Disr,
trans_constant			    pub fn trans_constant(&mut self,
trans_consume			    pub fn trans_consume(&mut self,
trans_crate			pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
trans_ctor_shim			pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
trans_custom_dtor			fn trans_custom_dtor<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_def			    fn trans_def(ccx: &'a CrateContext<'a, 'tcx>,
trans_exchange_free			pub fn trans_exchange_free<'blk, 'tcx>(cx: Block<'blk, 'tcx>,
trans_exchange_free_dyn			pub fn trans_exchange_free_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_exchange_free_ty			pub fn trans_exchange_free_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_field_ptr			pub fn trans_field_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>,
trans_field_ptr_builder			pub fn trans_field_ptr_builder<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,
trans_fn_once_adapter_shim			fn trans_fn_once_adapter_shim<'a, 'tcx>(
trans_fn_pointer_shim			fn trans_fn_pointer_shim<'a, 'tcx>(
trans_get_discr			pub fn trans_get_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>,
trans_gnu_try			fn trans_gnu_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_inline_asm			pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_instance			pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance<'tcx>) 
trans_intrinsic_call			pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,
trans_item			mod trans_item;
trans_load			    pub fn trans_load(&mut self,
trans_lvalue			    pub fn trans_lvalue(&mut self,
trans_mir			pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) 
trans_msvc_try			fn trans_msvc_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_object_shim			pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,
trans_operand			    pub fn trans_operand(&mut self,
trans_reuse_previous_work_products			fn trans_reuse_previous_work_products(tcx: TyCtxt,
trans_rvalue			    pub fn trans_rvalue(&mut self,
trans_rvalue_operand			    pub fn trans_rvalue_operand(&mut self,
trans_scalar_binop			    pub fn trans_scalar_binop(&mut self,
trans_scalar_checked_binop			    pub fn trans_scalar_checked_binop(&mut self,
trans_scope_cleanups			    fn trans_scope_cleanups(&self, \/\/ cannot borrow self, will recurse
trans_set_discr			pub fn trans_set_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>,
trans_statement			    pub fn trans_statement(&mut self,
trans_static			pub fn trans_static(ccx: &CrateContext,
trans_static_initializer			pub fn trans_static_initializer(ccx: &CrateContext, def_id: DefId)
trans_storage_liveness			    fn trans_storage_liveness(&self,
trans_switch			pub fn trans_switch<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
trans_transmute			    fn trans_transmute(&mut self, bcx: &BlockAndBuilder<'bcx, 'tcx>,
trans_unwind_resume			pub fn trans_unwind_resume(bcx: Block, lpval: ValueRef) 
translation_items			    pub fn translation_items(&self) -> &RefCell<FnvHashSet<TransItem<'tcx>>> 
trap			    pub fn trap(&self) 
trunc			    pub fn trunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
trunc_or_bitcast			    pub fn trunc_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
try_intrinsic			fn try_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
tvec			mod tvec;
ty			    pub fn ty(&self) -> Ty<'tcx> 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			fn ty_align(ty: Type) -> usize 
ty_align			    fn ty_align(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type, align_fn: TyAlignFn) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			fn ty_size(ty: Type) -> usize 
ty_size			    fn ty_size(ty: Type) -> usize 
ty_to_type			            fn ty_to_type(ccx: &CrateContext, t: &intrinsics::Type,
type_			mod type_;
type_hashcodes			    pub fn type_hashcodes<'a>(&'a self) -> &'a RefCell<FnvHashMap<Ty<'tcx>, String>> 
type_is_fat_ptr			pub fn type_is_fat_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_imm_pair			pub fn type_is_imm_pair<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)
type_is_immediate			pub fn type_is_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_sized			pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool 
type_is_zero_size			pub fn type_is_zero_size<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool 
type_metadata			pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
type_names			mod type_names;
type_needs_drop			    pub fn type_needs_drop(&self, ty: Ty<'tcx>) -> bool 
type_needs_drop			pub fn type_needs_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
type_of			pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type 
type_of			mod type_of;
type_of			pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
type_pair_fields			pub fn type_pair_fields<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>)
type_to_string			pub fn type_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
udiv			    pub fn udiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
uint_from_ty			    pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type 
uitofp			    pub fn uitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
unadjusted			    pub fn unadjusted<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,
unify			    fn unify(cls: &mut [RegClass],
union_fill			fn union_fill(cx: &CrateContext, size: u64, align: u64) -> Type 
unknown_file_metadata			pub fn unknown_file_metadata(cx: &CrateContext) -> DIFile 
unlib			    fn unlib<'a>(config: &config::Config, stem: &'a str) -> &'a str 
unpack_if_pair			    pub fn unpack_if_pair(mut self, bcx: &BlockAndBuilder<'bcx, 'tcx>)
unreachable			    pub fn unreachable(&self) 
unreachable_block			    fn unreachable_block(&mut self) -> Block<'bcx, 'tcx> 
unsize_thin_ptr			pub fn unsize_thin_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
unsized_			    pub fn unsized_(value: ValueRef, meta: ValueRef) -> MaybeSizedValue 
unsized_info			pub fn unsized_info<'ccx, 'tcx>(ccx: &CrateContext<'ccx, 'tcx>,
unsized_info_ty			fn unsized_info_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type 
unwind			pub fn unwind(val: ValueRef, can_unwind: bool) 
update_symbols			    pub fn update_symbols(&mut self) 
urem			    pub fn urem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
use_dll_storage_attrs			    pub fn use_dll_storage_attrs(&self) -> bool 
user_iter			    pub fn user_iter(self) -> Users 
utils			mod utils;
va_arg			    pub fn va_arg(&self, list: ValueRef, ty: Type) -> ValueRef 
val_ty			pub fn val_ty(v: ValueRef) -> Type 
validate_substs			pub fn validate_substs(substs: &Substs) 
value			mod value;
variadic_func			    pub fn variadic_func(args: &[Type], ret: &Type) -> Type 
vc_lib_subdir			    fn vc_lib_subdir(arch: &str) -> Option<&'static str> 
vec			    pub fn vec(ccx: &CrateContext, ty: &Type) -> Type 
vec_slice_metadata			fn vec_slice_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,
vector			    pub fn vector(ty: &Type, len: u64) -> Type 
vector_length			    pub fn vector_length(&self) -> usize 
vector_splat			    pub fn vector_splat(&self, num_elts: usize, elt: ValueRef) -> ValueRef 
visit_assign			    fn visit_assign(&mut self,
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) 
visit_item			    fn visit_item(&mut self, item: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_lvalue			    fn visit_lvalue(&mut self,
visit_lvalue			    fn visit_lvalue(&mut self,
visit_mir_and_promoted			fn visit_mir_and_promoted<'tcx, V: MirVisitor<'tcx>>(mut visitor: V, mir: &mir::Mir<'tcx>) 
visit_operand			    fn visit_operand(&mut self, operand: &mir::Operand<'tcx>, location: Location) 
visit_rvalue			    fn visit_rvalue(&mut self, rvalue: &mir::Rvalue<'tcx>, location: Location) 
visit_terminator_kind			    fn visit_terminator_kind(&mut self,
visit_terminator_kind			    fn visit_terminator_kind(&mut self,
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) 
void			    pub fn void(ccx: &CrateContext) -> Type 
volatile_load			    pub fn volatile_load(&self, ptr: ValueRef) -> ValueRef 
volatile_store			    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef) -> ValueRef 
vtable_ptr			    pub fn vtable_ptr(ccx: &CrateContext) -> Type 
vtables			    pub fn vtables<'a>(&'a self) -> &'a RefCell<FnvHashMap<ty::PolyTraitRef<'tcx>, ValueRef>> 
wants_msvc_seh			pub fn wants_msvc_seh(sess: &Session) -> bool 
whole_archives			    fn whole_archives(&mut self) 
whole_archives			    fn whole_archives(&mut self);
with_block			    pub fn with_block<F, R>(&self, f: F) -> R
with_codegen			    unsafe fn with_codegen<F>(tm: TargetMachineRef,
with_cond			pub fn with_cond<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>, val: ValueRef, f: F) -> Block<'blk, 'tcx>
with_inlining_candidates			    pub fn with_inlining_candidates<F>(&self, source: TransItem<'tcx>, mut f: F)
with_insn_ctxt			pub fn with_insn_ctxt<F>(blk: F)
with_llvm_pmb			pub unsafe fn with_llvm_pmb(llmod: ModuleRef,
with_lvalue_ref			    pub fn with_lvalue_ref<F, U>(&mut self, bcx: &BlockAndBuilder<'bcx, 'tcx>,
with_overflow_intrinsic			fn with_overflow_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,
work_product_dep_node			    pub fn work_product_dep_node(&self) -> DepNode<DefId> 
work_product_id			    pub fn work_product_id(&self) -> Arc<WorkProductId> 
wrapping_add			    pub fn wrapping_add(self, other: Self) -> Self 
write			    fn write(&mut self, msg: &[u8]) 
write			    pub mod write;
write_metadata			fn write_metadata(cx: &SharedCrateContext,
write_output_file			pub fn write_output_file(
write_rlib_bytecode_object_v1			fn write_rlib_bytecode_object_v1(writer: &mut Write,
x86_64_ty			    fn x86_64_ty<F>(ccx: &CrateContext,
xor			    pub fn xor(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
zext			    pub fn zext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
zext_or_bitcast			    pub fn zext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
