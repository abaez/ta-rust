::std::cmp::Ord for ConstInt			impl ::std::cmp::Ord for ConstInt 
::std::cmp::PartialOrd for ConstInt			impl ::std::cmp::PartialOrd for ConstInt 
::std::fmt::Display for ConstFloat			impl ::std::fmt::Display for ConstFloat 
::std::fmt::Display for ConstInt			impl ::std::fmt::Display for ConstInt 
::std::ops::Div for ConstInt			impl ::std::ops::Div for ConstInt 
::std::ops::Neg for ConstFloat			impl ::std::ops::Neg for ConstFloat 
::std::ops::Neg for ConstInt			impl ::std::ops::Neg for ConstInt 
::std::ops::Not for ConstInt			impl ::std::ops::Not for ConstInt 
::std::ops::Rem for ConstInt			impl ::std::ops::Rem for ConstInt 
::std::ops::Shl for ConstInt			impl ::std::ops::Shl<ConstInt> for ConstInt 
::std::ops::Shr for ConstInt			impl ::std::ops::Shr<ConstInt> for ConstInt 
ConstFloat			impl ConstFloat 
ConstFloat			pub enum ConstFloat 
ConstInt			impl ConstInt 
ConstInt			pub enum ConstInt 
ConstIsize			impl ConstIsize 
ConstIsize			pub enum ConstIsize 
ConstMathErr			impl ConstMathErr 
ConstMathErr			pub enum ConstMathErr 
ConstUsize			impl ConstUsize 
ConstUsize			pub enum ConstUsize 
Eq for ConstFloat			impl Eq for ConstFloat {}
Op			pub enum Op 
PartialEq for ConstFloat			impl PartialEq for ConstFloat 
as_i64			    pub fn as_i64(self, target_int_ty: ast::IntTy) -> i64 
as_u64			    pub fn as_u64(self, target_uint_ty: ast::UintTy) -> u64 
check_division			fn check_division(
cmp			    fn cmp(&self, other: &Self) -> Ordering 
description			    pub fn description(&self) -> &'static str 
description			    pub fn description(&self) -> &'static str 
description			    pub fn description(&self) -> &'static str 
div			    fn div(self, rhs: Self) -> Result<Self, ConstMathErr> 
eq			    fn eq(&self, other: &Self) -> bool 
err			mod err;
float			mod float;
fmt			    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> 
fmt			    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash::Hash for ConstFloat			impl hash::Hash for ConstFloat 
ibounds			mod ibounds 
int			mod int;
int_type			    pub fn int_type(self) -> IntType 
is			mod is;
is_nan			    pub fn is_nan(&self) -> bool 
is_negative			    pub fn is_negative(&self) -> bool 
neg			    fn neg(self) -> Self 
neg			    fn neg(self) -> Result<Self, ConstMathErr> 
new			    pub fn new(i: i64, target_int_ty: ast::IntTy) -> Result<Self, ConstMathErr> 
new			    pub fn new(i: u64, target_uint_ty: ast::UintTy) -> Result<Self, ConstMathErr> 
new_signed			    pub fn new_signed(val: i128, ty: IntTy, isize_ty: IntTy) -> Option<ConstInt> 
new_signed_truncating			    pub fn new_signed_truncating(val: i128, ty: IntTy, isize_ty: IntTy) -> ConstInt 
new_truncating			    pub fn new_truncating(i: i128, target_int_ty: ast::IntTy) -> Self 
new_truncating			    pub fn new_truncating(i: u128, target_uint_ty: ast::UintTy) -> Self 
new_unsigned			    pub fn new_unsigned(val: u128, ty: UintTy, usize_ty: UintTy) -> Option<ConstInt> 
new_unsigned_truncating			    pub fn new_unsigned_truncating(val: u128, ty: UintTy, usize_ty: UintTy) -> ConstInt 
not			    fn not(self) -> Result<Self, ConstMathErr> 
partial_cmp			    fn partial_cmp(&self, other: &Self) -> Option<Ordering> 
rem			    fn rem(self, rhs: Self) -> Result<Self, ConstMathErr> 
shl			    fn shl(self, rhs: Self) -> Result<Self, ConstMathErr> 
shr			    fn shr(self, rhs: Self) -> Result<Self, ConstMathErr> 
to_f32			    pub fn to_f32(self) -> f32 
to_f64			    pub fn to_f64(self) -> f64 
to_u128			    pub fn to_u128(&self) -> Option<u128> 
to_u128_unchecked			    pub fn to_u128_unchecked(self) -> u128 
to_u32			    pub fn to_u32(&self) -> Option<u32> 
to_u64			    pub fn to_u64(&self) -> Option<u64> 
try_cmp			    pub fn try_cmp(self, rhs: Self) -> Result<Ordering, ConstMathErr> 
try_cmp			    pub fn try_cmp(self, rhs: Self) -> Result<::std::cmp::Ordering, ConstMathErr> 
ubounds			mod ubounds 
us			mod us;
wrap_incr			    pub fn wrap_incr(self) -> Self 
