AssociatedContainer			impl AssociatedContainer 
AssociatedContainer			pub enum AssociatedContainer 
Ast			pub struct Ast<'tcx> 
CStore			impl CStore 
CStore			pub struct CStore 
Clone for Lazy			impl<T> Clone for Lazy<T> 
Clone for LazySeq			impl<T> Clone for LazySeq<T> 
Clone for Unaligned			impl<T: Copy> Clone for Unaligned<T> 
ClosureData			pub struct ClosureData<'tcx> 
Context			impl<'a> Context<'a> 
Context			pub struct Context<'a> 
Copy for Lazy			impl<T> Copy for Lazy<T> {}
Copy for LazySeq			impl<T> Copy for LazySeq<T> {}
CrateDep			pub struct CrateDep 
CrateFlavor			enum CrateFlavor 
CrateLoader			impl<'a> CrateLoader<'a> 
CrateLoader			pub struct CrateLoader<'a> 
CrateMetadata			impl CrateMetadata 
CrateMetadata			pub struct CrateMetadata 
CrateMetadata			impl<'a, 'tcx> CrateMetadata 
CrateMismatch			pub struct CrateMismatch 
CratePaths			impl CratePaths 
CratePaths			pub struct CratePaths 
CrateRoot			pub struct CrateRoot 
CrateStore for cstore			impl CrateStore for cstore::CStore 
DecodeContext			impl<'a, 'tcx> DecodeContext<'a, 'tcx> 
DecodeContext			pub struct DecodeContext<'a, 'tcx: 'a> 
Decoder for DecodeContext			impl<'doc, 'tcx> Decoder for DecodeContext<'doc, 'tcx> 
DepGraphRead			        impl<
DepGraphRead			        impl<'tcx> DepGraphRead for &'tcx 
DepGraphRead			impl<T> DepGraphRead for [T]
DepGraphRead			pub trait DepGraphRead 
DepGraphRead for DefId			impl DepGraphRead for DefId 
DepGraphRead for FromId			impl<T> DepGraphRead for FromId<T> 
DepGraphRead for Option			impl<T> DepGraphRead for Option<T>
DepGraphRead for Untracked			impl<T> DepGraphRead for Untracked<T> 
DepGraphRead for ast			impl DepGraphRead for ast::NodeId 
Deref for IndexBuilder			impl<'a, 'b, 'tcx> Deref for IndexBuilder<'a, 'b, 'tcx> 
Deref for PMDSource			impl Deref for PMDSource 
DerefMut for IndexBuilder			impl<'a, 'b, 'tcx> DerefMut for IndexBuilder<'a, 'b, 'tcx> 
EncodeContext			impl<'a, 'tcx> EncodeContext<'a, 'tcx> 
EncodeContext			pub struct EncodeContext<'a, 'tcx: 'a> 
EncodeVisitor			struct EncodeVisitor<'a, 'b: 'a, 'tcx: 'b> 
Encoder for EncodeContext			impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> 
Entry			pub struct Entry<'tcx> 
EntryKind			impl<'tcx> EntryKind<'tcx> 
EntryKind			pub enum EntryKind<'tcx> 
ExtensionCrate			struct ExtensionCrate 
ExternCrateInfo			struct ExternCrateInfo 
Finder			            struct Finder(bool);
FnData			pub struct FnData<'tcx> 
FromId			pub struct FromId<T>(pub ast::NodeId, pub T);
HashStable			impl<'a, 'gcx, 'tcx, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Tracked<T>
HashStable			impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for EntryKind<'tcx> 
HashStable			impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for TraitImpls 
HashStable for Lazy			impl<CTX, T> HashStable<CTX> for Lazy<T> 
HashStable for LazySeq			impl<CTX, T> HashStable<CTX> for LazySeq<T> 
ImplData			pub struct ImplData<'tcx> 
ImplVisitor			struct ImplVisitor<'a, 'tcx: 'a> 
ImportedFileMap			pub struct ImportedFileMap 
Index			impl Index 
Index			pub struct Index 
IndexBuilder			impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> 
IndexBuilder			impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> 
IndexBuilder			pub struct IndexBuilder<'a, 'b: 'a, 'tcx: 'b> 
IsolatedEncoder			impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> 
IsolatedEncoder			impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> 
IsolatedEncoder			impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> 
IsolatedEncoder			pub struct IsolatedEncoder<'a, 'b: 'a, 'tcx: 'b> 
ItemLikeVisitor for ImplVisitor			impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> 
Lazy			impl<'a, 'tcx: 'a, T: Decodable> Lazy<T> 
Lazy			impl<T> Lazy<T> 
Lazy			pub struct Lazy<T> 
LazySeq			impl<'a, 'tcx: 'a, T: Decodable> LazySeq<T> 
LazySeq			impl<'tcx> LazySeq<Index> 
LazySeq			impl<T> LazySeq<T> 
LazySeq			pub struct LazySeq<T> 
LazyState			pub enum LazyState 
Library			pub struct Library 
LoadResult			enum LoadResult 
MacroDef			pub struct MacroDef 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a CrateMetadata 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, &'a Session) 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'a, 'tcx, 'tcx>) 
Metadata			pub trait Metadata<'a, 'tcx>: Copy 
MetadataBlob			pub struct MetadataBlob(pub ErasedBoxRef<[u8]>);
MetadataBlob			impl<'a, 'tcx> MetadataBlob 
MethodData			pub struct MethodData<'tcx> 
ModData			pub struct ModData 
MyRegistrar			        struct MyRegistrar(Vec<(ast::Name, Rc<SyntaxExtension>)>);
NestedBodyCollector			struct NestedBodyCollector<'a, 'tcx: 'a> 
PMDSource			enum PMDSource 
Registry for MyRegistrar			        impl Registry for MyRegistrar 
SpecializedDecoder			impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx, T> SpecializedDecoder<LazySeq<T>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<&'tcx Substs<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<Ty<'tcx>>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>>
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<Ty<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<ty::GenericPredicates<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<ty::Region<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::AdtDef> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<CrateNum> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx, T> SpecializedEncoder<LazySeq<T>> for EncodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext<'a, 'tcx> 
Tracked			impl<T> Tracked<T> 
Tracked			pub struct Tracked<T> 
TraitData			pub struct TraitData<'tcx> 
TraitImpls			pub struct TraitImpls 
Unaligned			impl<T> Unaligned<T> 
Unaligned			struct Unaligned<T>(T);
Untracked			pub struct Untracked<T>(pub T);
VariantData			pub struct VariantData<'tcx> 
Visitor for EncodeVisitor			impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> 
Visitor for NestedBodyCollector			impl<'a, 'tcx: 'a> Visitor<'tcx> for NestedBodyCollector<'a, 'tcx> 
add_extern_mod_stmt_cnum			    pub fn add_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId, cnum: CrateNum) 
add_statically_included_foreign_item			    pub fn add_statically_included_foreign_item(&self, id: DefIndex) 
add_used_library			    pub fn add_used_library(&self, lib: NativeLibrary) 
add_used_link_args			    pub fn add_used_link_args(&self, args: &str) 
associated_item_cloned			    fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem
astencode			mod astencode;
bytes_to_words			fn bytes_to_words(b: &[u8]) -> &[Unaligned<u32>] 
cdata			    fn cdata(self) -> Option<&'a CrateMetadata> { None }
cdata			    fn cdata(self) -> Option<&'a CrateMetadata> 
cdata			    pub fn cdata(&self) -> &'a CrateMetadata 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Self 
closure_kind			    pub fn closure_kind(&self, closure_id: DefIndex) -> ty::ClosureKind 
const_is_rvalue_promotable_to_static			    pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool 
crate_data_as_rc_any			    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any> 
crate_dependencies_in_rpo			    pub fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum> 
crate_disambiguator			    fn crate_disambiguator(&self, cnum: CrateNum) -> Symbol
crate_hash			    fn crate_hash(&self, cnum: CrateNum) -> Svh
crate_matches			    fn crate_matches(&mut self, metadata: &MetadataBlob, libpath: &Path) -> Option<Svh> 
crate_name			    fn crate_name(&self, cnum: CrateNum) -> Symbol
crates			    fn crates(&self) -> Vec<CrateNum>
creader			pub mod creader;
cstore			pub mod cstore;
cstore_impl			mod cstore_impl;
decode			    pub fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> T 
decode			    pub fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> impl Iterator<Item = T> + 'a 
decoder			    fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> 
decoder			mod decoder;
def_key			    fn def_key(&self, def: DefId) -> DefKey 
def_key			    pub fn def_key(&self, index: DefIndex) -> DefKey 
def_path			    fn def_path(&self, def: DefId) -> DefPath 
def_path			    pub fn def_path(&self, id: DefIndex) -> DefPath 
def_path_hash			    fn def_path_hash(&self, def: DefId) -> DefPathHash 
def_path_hash			    pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash 
def_path_table			    fn def_path_table(&self, cnum: CrateNum) -> Rc<DefPathTable> 
defaultness			    pub fn defaultness(&self) -> hir::Defaultness 
dep_kind			    fn dep_kind(&self, cnum: CrateNum) -> DepKind
deref			    fn deref(&self) -> &MetadataBlob 
deref			    fn deref(&self) -> &Self::Target 
deref_mut			    fn deref_mut(&mut self) -> &mut Self::Target 
derive_registrar_fn			    fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>
diagnostics			mod diagnostics;
disambiguator			    pub fn disambiguator(&self) -> Symbol 
do_extern_mod_stmt_cnum			    pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> 
do_get_used_crates			    pub fn do_get_used_crates(&self,
do_is_statically_included_foreign_item			    pub fn do_is_statically_included_foreign_item(&self, def_id: DefId) -> bool 
dump_crates			fn dump_crates(cstore: &CStore) 
dylibname			    fn dylibname(&self) -> (String, String) 
each_child_of_item			    pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)
emit_lazy_distance			    fn emit_lazy_distance(&mut self,
emit_nil			    fn emit_nil(&mut self) -> Result<(), Self::Error> 
emit_node			    fn emit_node<F: FnOnce(&mut Self, usize) -> R, R>(&mut self, f: F) -> R 
empty			    pub fn empty() -> LazySeq<T> 
encode_addl_info_for_item			    fn encode_addl_info_for_item(&mut self, item: &hir::Item) 
encode_attributes			    fn encode_attributes(&mut self, attrs: &[ast::Attribute]) -> LazySeq<ast::Attribute> 
encode_body			    pub fn encode_body(&mut self, body_id: hir::BodyId) -> Lazy<Ast<'tcx>> 
encode_codemap			    fn encode_codemap(&mut self) -> LazySeq<syntax_pos::FileMap> 
encode_crate_deps			    fn encode_crate_deps(&mut self, _: ()) -> LazySeq<CrateDep> 
encode_crate_root			    fn encode_crate_root(&mut self) -> Lazy<CrateRoot> 
encode_def_path_table			    fn encode_def_path_table(&mut self) -> Lazy<DefPathTable> 
encode_deprecation			    fn encode_deprecation(&mut self, def_id: DefId) -> Option<Lazy<attr::Deprecation>> 
encode_dylib_dependency_formats			    fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> 
encode_enum_variant_info			    fn encode_enum_variant_info(&mut self,
encode_exported_symbols			    fn encode_exported_symbols(&mut self, exported_symbols: &NodeSet) -> LazySeq<DefIndex> 
encode_field			    fn encode_field(&mut self,
encode_fields			    fn encode_fields(&mut self, adt_def_id: DefId) 
encode_fn_arg_names			    fn encode_fn_arg_names(&mut self, names: &[Spanned<ast::Name>])
encode_fn_arg_names_for_body			    fn encode_fn_arg_names_for_body(&mut self, body_id: hir::BodyId)
encode_generics			    fn encode_generics(&mut self, def_id: DefId) -> Lazy<ty::Generics> 
encode_impls			    fn encode_impls(&mut self, _: ()) -> LazySeq<TraitImpls> 
encode_info_for_anon_ty			    fn encode_info_for_anon_ty(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_closure			    fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_embedded_const			    fn encode_info_for_embedded_const(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_expr			    fn encode_info_for_expr(&mut self, expr: &hir::Expr) 
encode_info_for_foreign_item			    fn encode_info_for_foreign_item(&mut self,
encode_info_for_generics			    fn encode_info_for_generics(&mut self, generics: &hir::Generics) 
encode_info_for_impl_item			    fn encode_info_for_impl_item(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_item			    fn encode_info_for_item(&mut self, (def_id, item): (DefId, &'tcx hir::Item)) -> Entry<'tcx> 
encode_info_for_items			    fn encode_info_for_items(&mut self) -> Index 
encode_info_for_macro_def			    fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef) -> Entry<'tcx> 
encode_info_for_mod			    fn encode_info_for_mod(&mut self,
encode_info_for_trait_item			    fn encode_info_for_trait_item(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_ty			    fn encode_info_for_ty(&mut self, ty: &hir::Ty) 
encode_info_for_ty_param			    fn encode_info_for_ty_param(&mut self,
encode_inherent_implementations			    fn encode_inherent_implementations(&mut self, def_id: DefId) -> LazySeq<DefIndex> 
encode_item_type			    fn encode_item_type(&mut self, def_id: DefId) -> Lazy<Ty<'tcx>> 
encode_lang_items			    fn encode_lang_items(&mut self, _: ()) -> LazySeq<(DefIndex, usize)> 
encode_lang_items_missing			    fn encode_lang_items_missing(&mut self, _: ()) -> LazySeq<lang_items::LangItem> 
encode_metadata			    fn encode_metadata<'a, 'tcx>(&self,
encode_metadata			pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
encode_native_libraries			    fn encode_native_libraries(&mut self, _: ()) -> LazySeq<NativeLibrary> 
encode_optimized_mir			    fn encode_optimized_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> 
encode_predicates			    fn encode_predicates(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> 
encode_stability			    fn encode_stability(&mut self, def_id: DefId) -> Option<Lazy<attr::Stability>> 
encode_struct_ctor			    fn encode_struct_ctor(&mut self, (adt_def_id, def_id): (DefId, DefId)) -> Entry<'tcx> 
encode_variances_of			    fn encode_variances_of(&mut self, def_id: DefId) -> LazySeq<ty::Variance> 
encode_with_shorthand			    fn encode_with_shorthand<T, U, M>(&mut self,
encoder			mod encoder;
entry			    fn entry(&self, item_id: DefIndex) -> Entry<'tcx> 
error			    fn error(&mut self, err: &str) -> Self::Error 
existing_match			    fn existing_match(&self, name: Symbol, hash: Option<&Svh>, kind: PathKind)
export_macros			    fn export_macros(&self, cnum: CrateNum) 
exported_symbols			    fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId>
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>
extract_crate_info			    fn extract_crate_info(&self, i: &ast::Item) -> Option<ExternCrateInfo> 
extract_one			    fn extract_one(&mut self,
find_commandline_library			    fn find_commandline_library<'b, LOCS>(&mut self, locs: LOCS) -> Option<Library>
find_library_crate			    fn find_library_crate(&mut self) -> Option<Library> 
find_plugin_registrar			    pub fn find_plugin_registrar(&mut self,
finish			    pub fn finish(self) -> (Option<Fingerprint>, &'a mut EncodeContext<'b, 'tcx>) 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for CrateFlavor			impl fmt::Display for CrateFlavor 
fn_sig			    pub fn fn_sig(&self,
get			    fn get(self) -> T { self.0 }
get			    pub fn get(&self, dep_graph: &DepGraph, dep_node: DepNode) -> &T 
get_adt_def			    pub fn get_adt_def(&self,
get_associated_item			    pub fn get_associated_item(&self, id: DefIndex) -> ty::AssociatedItem 
get_attributes			    fn get_attributes(&self, item: &Entry<'tcx>) -> Vec<ast::Attribute> 
get_coerce_unsized_info			    pub fn get_coerce_unsized_info(&self,
get_crate_data			    pub fn get_crate_data(&self, cnum: CrateNum) -> Rc<CrateMetadata> 
get_crate_hash			    pub fn get_crate_hash(&self, cnum: CrateNum) -> Svh 
get_ctor_kind			    pub fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind 
get_def			    pub fn get_def(&self, index: DefIndex) -> Option<Def> 
get_deprecation			    pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> 
get_dylib_dependency_formats			    pub fn get_dylib_dependency_formats(&self,
get_exported_symbols			    pub fn get_exported_symbols(&self, dep_graph: &DepGraph) -> Vec<DefId> 
get_fn_arg_names			    pub fn get_fn_arg_names(&self, id: DefIndex) -> Vec<ast::Name> 
get_foreign_items_of_kind			    fn get_foreign_items_of_kind(&self, kind: cstore::NativeLibraryKind) -> Vec<DefIndex> 
get_generics			    pub fn get_generics(&self, item_id: DefIndex) -> ty::Generics 
get_impl_data			    fn get_impl_data(&self, id: DefIndex) -> ImplData<'tcx> 
get_impl_defaultness			    pub fn get_impl_defaultness(&self, id: DefIndex) -> hir::Defaultness 
get_impl_polarity			    pub fn get_impl_polarity(&self, id: DefIndex) -> hir::ImplPolarity 
get_impl_trait			    pub fn get_impl_trait(&self,
get_implementations_for_trait			    pub fn get_implementations_for_trait(&self,
get_inherent_implementations_for_type			    pub fn get_inherent_implementations_for_type(&self, id: DefIndex) -> Vec<DefId> 
get_item_attrs			    pub fn get_item_attrs(&self,
get_item_variances			    pub fn get_item_variances(&self, id: DefIndex) -> Vec<ty::Variance> 
get_lang_items			    pub fn get_lang_items(&self, dep_graph: &DepGraph) -> Vec<(DefIndex, usize)> 
get_macro			    pub fn get_macro(&self, id: DefIndex) -> (ast::Name, MacroDef) 
get_metadata_section			fn get_metadata_section(target: &Target,
get_metadata_section_imp			fn get_metadata_section_imp(target: &Target,
get_missing_lang_items			    pub fn get_missing_lang_items(&self, dep_graph: &DepGraph) -> Vec<lang_items::LangItem> 
get_native_libraries			    pub fn get_native_libraries(&self,
get_parent_impl			    pub fn get_parent_impl(&self, id: DefIndex) -> Option<DefId> 
get_predicates			    pub fn get_predicates(&self,
get_repr_options			pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions 
get_root			    pub fn get_root(&self) -> CrateRoot 
get_rustc_version			    pub fn get_rustc_version(&self) -> String 
get_span			    pub fn get_span(&self, index: DefIndex, sess: &Session) -> Span 
get_stability			    pub fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> 
get_struct_ctor_def_id			    pub fn get_struct_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> 
get_struct_field_names			    pub fn get_struct_field_names(&self, id: DefIndex) -> Vec<ast::Name> 
get_super_predicates			    pub fn get_super_predicates(&self,
get_trait_def			    pub fn get_trait_def(&self, item_id: DefIndex) -> ty::TraitDef 
get_trait_of_item			    pub fn get_trait_of_item(&self, id: DefIndex) -> Option<DefId> 
get_type			    pub fn get_type(&self, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> 
get_untracked			    pub fn get_untracked(&self) -> &T 
get_used_libraries			    pub fn get_used_libraries(&self) -> &RefCell<Vec<NativeLibrary>> 
get_used_link_args			    pub fn get_used_link_args<'a>(&'a self) -> &'a RefCell<Vec<String>> 
get_variant			    fn get_variant(&self, item: &Entry, index: DefIndex) -> ty::VariantDef 
get_visibility			    pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility 
has_default_lib_allocator			    pub fn has_default_lib_allocator(&self, dep_graph: &DepGraph) -> bool 
has_global_allocator			        fn has_global_allocator(krate: &ast::Crate) -> bool 
has_global_allocator			    pub fn has_global_allocator(&self, dep_graph: &DepGraph) -> bool 
hash			    pub fn hash(&self) -> Svh 
hash_stable			    fn hash_stable<W: StableHasherResult>(&self,
impl_defaultness			    fn impl_defaultness(&self, def: DefId) -> hir::Defaultness
implementations_of_trait			    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>
imported_filemaps			    pub fn imported_filemaps(&'a self,
index			mod index;
index_builder			mod index_builder;
inject_allocator_crate			    fn inject_allocator_crate(&mut self, krate: &ast::Crate) 
inject_dependency_if			    fn inject_dependency_if(&self,
inject_panic_runtime			    fn inject_panic_runtime(&mut self, krate: &ast::Crate) 
inject_profiler_runtime			    fn inject_profiler_runtime(&mut self) 
inject_sanitizer_runtime			    fn inject_sanitizer_runtime(&mut self) 
into_items			    pub fn into_items(self) -> Index 
is_compatible			    pub fn is_compatible(&self) -> bool 
is_compiler_builtins			    pub fn is_compiler_builtins(&self, dep_graph: &DepGraph) -> bool 
is_compiler_builtins			    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool 
is_const_fn			    fn is_const_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool 
is_const_fn			    pub fn is_const_fn(&self, id: DefIndex) -> bool 
is_default_impl			    pub fn is_default_impl(&self, impl_id: DefIndex) -> bool 
is_dllimport_foreign_item			    fn is_dllimport_foreign_item(&self, def_id: DefId) -> bool 
is_dllimport_foreign_item			    pub fn is_dllimport_foreign_item(&self, id: DefIndex, dep_graph: &DepGraph) -> bool 
is_foreign_item			    pub fn is_foreign_item(&self, id: DefIndex) -> bool 
is_item_mir_available			    pub fn is_item_mir_available(&self, id: DefIndex) -> bool 
is_no_builtins			    pub fn is_no_builtins(&self, dep_graph: &DepGraph) -> bool 
is_no_builtins			    fn is_no_builtins(&self, cnum: CrateNum) -> bool 
is_panic_runtime			    pub fn is_panic_runtime(&self, dep_graph: &DepGraph) -> bool 
is_proc_macro			    fn is_proc_macro(&self, id: DefIndex) -> bool 
is_profiler_runtime			    pub fn is_profiler_runtime(&self, dep_graph: &DepGraph) -> bool 
is_profiler_runtime			    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool 
is_sanitizer_runtime			    pub fn is_sanitizer_runtime(&self, dep_graph: &DepGraph) -> bool 
is_sanitizer_runtime			    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool 
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool
isolated_encoder			mod isolated_encoder;
item_body			    fn item_body<'a, 'tcx>(&self,
item_body			    pub fn item_body(&self,
item_body_nested_bodies			    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> 
item_body_tables			    pub fn item_body_tables(&self,
item_children			    fn item_children(&self, def_id: DefId, sess: &Session) -> Vec<def::Export>
item_generics_cloned			    fn item_generics_cloned(&self, def: DefId) -> ty::Generics 
item_name			    pub fn item_name(&self, item_index: DefIndex) -> ast::Name 
iter_crate_data			    pub fn iter_crate_data<I>(&self, mut i: I)
iter_enumerated			    pub fn iter_enumerated<'a>(&self,
lang_items			    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>
lazy			    pub fn lazy<T: Encodable>(&mut self, value: &T) -> Lazy<T> 
lazy			    pub fn lazy<T>(&mut self, value: &T) -> Lazy<T>
lazy_seq			    pub fn lazy_seq<I, T>(&mut self, iter: I) -> LazySeq<T>
lazy_seq			    pub fn lazy_seq<I, T>(&mut self, iter: I) -> LazySeq<T>
lazy_seq_from_slice			    pub fn lazy_seq_from_slice<T>(&mut self, slice: &[T]) -> LazySeq<T>
lazy_seq_ref			    pub fn lazy_seq_ref<'b, I, T>(&mut self, iter: I) -> LazySeq<T>
lazy_seq_ref			    pub fn lazy_seq_ref<'x, I, T>(&mut self, iter: I) -> LazySeq<T>
lazy_seq_ref_from_slice			    pub fn lazy_seq_ref_from_slice<T>(&mut self, slice: &[&T]) -> LazySeq<T>
list_crate_metadata			    pub fn list_crate_metadata(&self,
list_file_metadata			pub fn list_file_metadata(target: &Target,
load			    fn load(&mut self, locate_ctxt: &mut locator::Context) -> Option<LoadResult> 
load_derive_macros			    fn load_derive_macros(&mut self, root: &CrateRoot, dylib: Option<PathBuf>, span: Span)
load_library_crate			    pub fn load_library_crate(&mut self) -> Library 
load_macro			    fn load_macro(&self, id: DefId, sess: &Session) -> LoadedMacro 
local_def_id			    fn local_def_id(&self, index: DefIndex) -> DefId 
locator			pub mod locator;
lookup			    pub fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> 
map			    pub fn map<F, R>(&self, f: F) -> Tracked<R>
maybe_entry			    fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> 
maybe_get_optimized_mir			    pub fn maybe_get_optimized_mir(&self,
maybe_load_library_crate			    pub fn maybe_load_library_crate(&mut self) -> Option<Library> 
metadata_dep_node			    pub fn metadata_dep_node(&self, kind: GlobalMetaDataKind) -> DepNode 
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8]
metadata_loader			    fn metadata_loader(&self) -> &MetadataLoader 
middle::cstore::CrateLoader for CrateLoader			impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> 
min_size			    pub fn min_size() -> usize 
min_size			    pub fn min_size(length: usize) -> usize 
mir_const_qualif			    pub fn mir_const_qualif(&self, id: DefIndex) -> u8 
missing_lang_items			    fn missing_lang_items(&self, cnum: CrateNum)
name			    pub fn name(&self) -> Symbol 
native_libraries			    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>
needs_allocator			    pub fn needs_allocator(&self, dep_graph: &DepGraph) -> bool 
needs_panic_runtime			    pub fn needs_panic_runtime(&self, dep_graph: &DepGraph) -> bool 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
new			    pub fn new(sess: &'a Session, cstore: &'a CStore, local_crate_name: &str) -> Self 
new			    pub fn new(dep_graph: &DepGraph, metadata_loader: Box<MetadataLoader>) -> CStore 
new			    pub fn new((max_index_lo, max_index_hi): (usize, usize)) -> Index 
new			    pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self 
new			    pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self 
new			    pub fn new(state: T) -> Tracked<T> 
next_crate_num			    pub fn next_crate_num(&self) -> CrateNum 
note_crate_name			pub fn note_crate_name(err: &mut DiagnosticBuilder, name: &str) 
original_crate_name			    fn original_crate_name(&self, cnum: CrateNum) -> Symbol
panic_strategy			    pub fn panic_strategy(&self, dep_graph: &DepGraph) -> PanicStrategy 
panic_strategy			    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy 
paths			    fn paths(&self) -> Vec<PathBuf> 
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>
position			    pub fn position(&self) -> usize 
postprocess			    fn postprocess(&mut self, krate: &ast::Crate) 
preprocess			    pub fn preprocess(&mut self, krate: &ast::Crate) 
process_foreign_mod			    fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod,
process_item			    fn process_item(&mut self, item: &ast::Item, definitions: &Definitions) 
provide			        pub fn provide<
provide_local			pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) 
push_dependencies_in_postorder			    pub fn push_dependencies_in_postorder(&self, ordering: &mut Vec<CrateNum>, krate: CrateNum) 
raw_bytes			    fn raw_bytes(self) -> &'a [u8] 
raw_bytes			    fn raw_bytes(self) -> &'a [u8];
read			            fn read(&self, tcx: TyCtxt) 
read			    fn read(&self, _tcx: TyCtxt) {}
read			    fn read(&self, tcx: TyCtxt) 
read			    fn read(&self, tcx: TyCtxt);
read_dep_node			    pub fn read_dep_node(&self, def_id: DefId) 
read_extension_crate			    fn read_extension_crate(&mut self, span: Span, info: &ExternCrateInfo) -> ExtensionCrate 
read_lazy_distance			    fn read_lazy_distance(&mut self, min_size: usize) -> Result<usize, <Self as Decoder>::Error> 
record			    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry>) 
record			    pub fn record<'x, DATA>(&'x mut self,
record_index			    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry>) 
register_attr_proc_macro			            fn register_attr_proc_macro(&mut self,
register_bang_proc_macro			            fn register_bang_proc_macro(&mut self,
register_crate			    fn register_crate(&mut self,
register_custom_derive			            fn register_custom_derive(&mut self,
register_dllimport_foreign_items			    fn register_dllimport_foreign_items(&mut self) 
register_native_lib			fn register_native_lib(sess: &Session,
register_statically_included_foreign_items			    fn register_statically_included_foreign_items(&mut self) 
relevant_lib			fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool 
report_errs			    pub fn report_errs(&mut self) -> ! 
reset			    pub fn reset(&self) 
resolve_crate			    fn resolve_crate(&mut self,
resolve_crate_deps			    fn resolve_crate_deps(&mut self,
retrace_path			    fn retrace_path(&self,
reverse_translate_def_id			    fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> 
rustc_version			pub fn rustc_version() -> String 
schema			mod schema;
serialize::UseSpecializedDecodable for Lazy			impl<T> serialize::UseSpecializedDecodable for Lazy<T> {}
serialize::UseSpecializedDecodable for LazySeq			impl<T> serialize::UseSpecializedDecodable for LazySeq<T> {}
serialize::UseSpecializedEncodable for Lazy			impl<T> serialize::UseSpecializedEncodable for Lazy<T> {}
serialize::UseSpecializedEncodable for LazySeq			impl<T> serialize::UseSpecializedEncodable for LazySeq<T> {}
sess			    fn sess(self) -> Option<&'a Session> { None }
sess			    fn sess(self) -> Option<&'a Session> 
set_crate_data			    pub fn set_crate_data(&self, cnum: CrateNum, data: Rc<CrateMetadata>) 
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx ty::AdtDef, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<Ty<'tcx>>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<LazySeq<T>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<Span, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<Ty<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<ty::GenericPredicates<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<ty::Region<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self)
specialized_encode			    fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> 
specialized_encode			    fn specialized_encode(&mut self, seq: &LazySeq<T>) -> Result<(), Self::Error> 
specialized_encode			    fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> 
specialized_encode			    fn specialized_encode(&mut self,
staticlibname			    fn staticlibname(&self) -> (String, String) 
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>
tcx			    fn tcx(self) -> Option<TyCtxt<'a, 'tcx, 'tcx>> { None }
tcx			    fn tcx(self) -> Option<TyCtxt<'a, 'tcx, 'tcx>> 
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> 
to_def			    fn to_def(&self, did: DefId) -> Option<Def> 
tracked			    pub fn tracked<'x, DATA, R>(&'x mut self,
update_extern_crate			    fn update_extern_crate(&mut self,
used_crate_source			    fn used_crate_source(&self, cnum: CrateNum) -> CrateSource
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>
used_libraries			    fn used_libraries(&self) -> Vec<NativeLibrary>
used_link_args			    fn used_link_args(&self) -> Vec<String>
verify_no_symbol_conflicts			    fn verify_no_symbol_conflicts(&self,
visibility			    fn visibility(&self, def: DefId) -> ty::Visibility 
visible_parent_map			    fn visible_parent_map<'a>(&'a self, sess: &Session) -> ::std::cell::Ref<'a, DefIdMap<DefId>> 
visit::Visitor for Finder			            impl<'ast> visit::Visitor<'ast> for Finder 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx hir::Expr) 
visit_foreign_item			    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, generics: &'tcx hir::Generics) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem) 
visit_item			                fn visit_item(&mut self, i: &'ast ast::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef) 
visit_nested_body			    fn visit_nested_body(&mut self, body: hir::BodyId) 
visit_trait_item			    fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem) {}
visit_ty			    fn visit_ty(&mut self, ty: &'tcx hir::Ty) 
visit_variant			    fn visit_variant(&mut self,
with_def_id			    pub fn with_def_id(&self, def_id: DefId) -> ty::AssociatedItemContainer 
with_position			    fn with_position<F: FnOnce(&mut Self) -> R, R>(&mut self, pos: usize, f: F) -> R 
with_position			    pub fn with_position(position: usize) -> Lazy<T> 
with_position_and_length			    pub fn with_position_and_length(position: usize, len: usize) -> LazySeq<T> 
words_to_bytes			fn words_to_bytes(w: &[u32]) -> &[u8] 
write_index			    pub fn write_index(&self, buf: &mut Cursor<Vec<u8>>) -> LazySeq<Index> 
