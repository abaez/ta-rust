ArchiveMetadata			impl ArchiveMetadata 
ArchiveMetadata			pub struct ArchiveMetadata 
CStore			impl CStore 
CStore			pub struct CStore 
CachedInlinedItem			pub struct CachedInlinedItem 
Context			impl<'a> Context<'a> 
Context			pub struct Context<'a> 
CrateDep			pub struct CrateDep 
CrateFlavor			enum CrateFlavor 
CrateIndex			impl<'a, 'tcx> CrateIndex<'a, 'tcx> 
CrateIndex			struct CrateIndex<'a, 'tcx> 
CrateInfo			struct CrateInfo 
CrateMetadata			impl CrateMetadata 
CrateMetadata			pub struct CrateMetadata 
CrateMetadata			impl CrateMetadata 
CrateMismatch			pub struct CrateMismatch 
CratePaths			impl CratePaths 
CratePaths			pub struct CratePaths 
CrateReader			impl<'a> CrateReader<'a> 
CrateReader			pub struct CrateReader<'a> 
CrateStore for cstore			impl<'tcx> CrateStore<'tcx> for cstore::CStore 
DecodeContext			impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> 
DecodeContext			struct DecodeContext<'a, 'b, 'tcx: 'a> 
DecodingContext			pub struct DecodingContext<'a, 'tcx: 'a> 
DefKey			pub struct DefKey 
DefPathData			pub enum DefPathData 
DenseIndex			impl DenseIndex 
DenseIndex			pub struct DenseIndex 
DisambiguatedDefPathData			pub struct DisambiguatedDefPathData 
EncodeContext			impl<'a, 'tcx> EncodeContext<'a,'tcx> 
EncodeContext			pub struct EncodeContext<'a, 'tcx: 'a> 
EncodeVisitor			struct EncodeVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> 
ExtensionCrate			struct ExtensionCrate 
FakeExtCtxt			trait FakeExtCtxt 
FakeExtCtxt for parse			impl FakeExtCtxt for parse::ParseSess 
Family			enum Family 
Folder for NestedItemsDropper			impl Folder for NestedItemsDropper 
FoundAst			pub enum FoundAst<'ast> 
HasVisibility			impl<'a> HasVisibility for &'a hir::Visibility 
HasVisibility			trait HasVisibility: Sized 
HasVisibility for ty			impl HasVisibility for ty::Visibility 
ImplVisitor			struct ImplVisitor<'a, 'tcx:'a> 
ImportedFileMap			pub struct ImportedFileMap 
Index			impl Index 
Index			pub struct Index 
IndexData			impl IndexData 
IndexData			pub struct IndexData 
Library			pub struct Library 
LoadResult			enum LoadResult 
LocalCrateReader			impl<'a> LocalCrateReader<'a> 
LocalCrateReader			struct LocalCrateReader<'a> 
MacroLoader			impl<'a> MacroLoader<'a> 
MacroLoader			pub struct MacroLoader<'a> 
MetadataBlob			impl MetadataBlob 
MetadataBlob			pub enum MetadataBlob 
MirDefIdAndSpanTranslator			    struct MirDefIdAndSpanTranslator<'cdata, 'codemap> 
NestedItemsDropper			struct NestedItemsDropper 
PMDSource			enum PMDSource 
PMDSource			impl PMDSource 
SideTableEncodingIdVisitor			struct SideTableEncodingIdVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> 
Stats			    struct Stats 
StructFieldVisitor			    struct StructFieldVisitor<'a, 'b:'a, 'c:'a, 'tcx:'b> 
TyDecoder			impl<'a,'tcx> TyDecoder<'a,'tcx> 
TyDecoder			pub struct TyDecoder<'a, 'tcx: 'a> 
Visitor			impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for
Visitor for EncodeVisitor			impl<'a, 'b, 'c, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'c, 'tcx> 
Visitor for ImplVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'tcx> 
Visitor for StructFieldVisitor			    impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for StructFieldVisitor<'a, 'b, 'c, 'tcx> 
XRef			pub enum XRef<'tcx> { Predicate(ty::Predicate<'tcx>) }
add_extern_mod_stmt_cnum			    pub fn add_extern_mod_stmt_cnum(&self,
add_statically_included_foreign_item			    pub fn add_statically_included_foreign_item(&self, id: ast::NodeId) 
add_used_crate_source			    pub fn add_used_crate_source(&self, src: CrateSource) 
add_used_library			    pub fn add_used_library(&self, lib: String, kind: NativeLibraryKind) 
add_used_link_args			    pub fn add_used_link_args(&self, args: &str) 
add_xref			    fn add_xref(&mut self, xref: XRef<'tcx>) -> u32 
adt_def			    fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>
are_equal_modulo_startpos			    fn are_equal_modulo_startpos(fm1: &syntax_pos::FileMap,
as_int			    fn as_int(&self) -> isize { reader::doc_as_u64(*self) as isize }
as_int			    fn as_int(&self) -> isize;
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] { unsafe { &*self.data } }
as_slice_raw			    pub fn as_slice_raw<'a>(&'a self) -> &'a [u8] 
associated_consts			    fn associated_consts<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
ast_map			impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> 
astencode			pub mod astencode;
astencode_tag			    pub enum astencode_tag { \/\/ Reserves 0x50 -- 0x6f
bytes_to_words			fn bytes_to_words(b: &[u8]) -> &[u32] 
call_bad_macro_reexport			pub fn call_bad_macro_reexport(a: &Session, b: Span) 
call_site			    fn call_site(&self) -> syntax_pos::Span 
call_site			    fn call_site(&self) -> syntax_pos::Span;
cfg			    fn cfg(&self) -> ast::CrateConfig { Vec::new() }
cfg			    fn cfg(&self) -> ast::CrateConfig;
closure_kind			    fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind
closure_kind			pub fn closure_kind(cdata: Cmd, closure_id: DefIndex) -> ty::ClosureKind 
closure_ty			    fn closure_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx> 
closure_ty			pub fn closure_ty<'a, 'tcx>(cdata: Cmd, closure_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
common			pub mod common;
convert_def_id			fn convert_def_id(dcx: &DecodeContext,
copy_item_type			    fn copy_item_type(dcx: &DecodeContext,
copy_item_types			fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) 
crate_attrs			    fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>
crate_dependencies_in_rpo			    pub fn crate_dependencies_in_rpo(&self, krate: ast::CrateNum) -> Vec<ast::CrateNum>
crate_disambiguator			    fn crate_disambiguator(&self, cnum: ast::CrateNum) -> token::InternedString
crate_hash			    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh
crate_matches			    fn crate_matches(&mut self, crate_data: &[u8], libpath: &Path) -> Option<Svh> 
crate_name			    fn crate_name(&self, cnum: ast::CrateNum) -> token::InternedString
crate_rustc_version			pub fn crate_rustc_version(data: &[u8]) -> Option<String> 
crate_struct_field_attrs			    fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)
crate_top_level_items			    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>
crates			    fn crates(&self) -> Vec<ast::CrateNum>
creader			pub mod creader;
csearch			pub mod csearch;
cstore			pub mod cstore;
ctxt			pub struct ctxt<'a, 'tcx: 'a> 
custom_coerce_unsized_kind			    fn custom_coerce_unsized_kind(&self, def: DefId)
data			    pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }
decode_ast			fn decode_ast(item_doc: rbml::Doc) -> InlinedItem 
decode_def			fn decode_def(dcx: &DecodeContext, dsr: &mut reader::Decoder) -> Def 
decode_inlined_item			pub fn decode_inlined_item<'a, 'tcx>(cdata: &cstore::CrateMetadata,
decode_item_ast			fn decode_item_ast(item_doc: rbml::Doc) -> hir::Item 
decode_side_tables			fn decode_side_tables(dcx: &DecodeContext,
decode_substs			    fn decode_substs(&self, decoder: &mut OpaqueDecoder) -> Substs<'tcx> 
decode_ty			    fn decode_ty(&self, decoder: &mut OpaqueDecoder) -> ty::Ty<'tcx> 
decoder			pub mod decoder;
def_id_decoder_helpers			trait def_id_decoder_helpers 
def_id_decoder_helpers for D			impl<D:serialize::Decoder> def_id_decoder_helpers for D
def_id_encoder_helpers			trait def_id_encoder_helpers 
def_id_encoder_helpers for S			impl<S:serialize::Encoder> def_id_encoder_helpers for S
def_index_for_def_key			    fn def_index_for_def_key(&self,
def_key			    fn def_key(&self, def: DefId) -> hir_map::DefKey 
def_key			pub fn def_key(cdata: Cmd, id: DefIndex) -> hir_map::DefKey 
def_key			pub mod def_key;
def_path			pub fn def_path(cdata: Cmd, id: DefIndex) -> hir_map::DefPath 
def_to_string			pub fn def_to_string(_tcx: TyCtxt, did: DefId) -> String 
def_to_u64			pub fn def_to_u64(did: DefId) -> u64 
defid_for_inlined_node			    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId> 
deprecation			    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> 
diagnostics			pub mod diagnostics;
disambiguator			    pub fn disambiguator(&self) -> &str 
do_extern_mod_stmt_cnum			    pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>
do_get_used_crates			    pub fn do_get_used_crates(&self, prefer: LinkagePreference)
do_is_statically_included_foreign_item			    pub fn do_is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool 
doc_decoder_helpers			trait doc_decoder_helpers: Sized 
doc_decoder_helpers for rbml			impl<'a> doc_decoder_helpers for rbml::Doc<'a> 
doc_generics			fn doc_generics<'a, 'tcx>(base_doc: rbml::Doc,
doc_predicate			fn doc_predicate<'a, 'tcx>(cdata: Cmd,
doc_predicates			fn doc_predicates<'a, 'tcx>(base_doc: rbml::Doc,
doc_trait_ref			fn doc_trait_ref<'a, 'tcx>(doc: rbml::Doc, tcx: TyCtxt<'a, 'tcx, 'tcx>, cdata: Cmd)
doc_type			fn doc_type<'a, 'tcx>(doc: rbml::Doc, tcx: TyCtxt<'a, 'tcx, 'tcx>, cdata: Cmd) -> Ty<'tcx> 
docstr			    fn docstr(doc: rbml::Doc, tag_: usize) -> String 
dump_crates			fn dump_crates(cstore: &CStore) 
dylib_dependency_formats			    fn dylib_dependency_formats(&self, cnum: ast::CrateNum)
dylibname			    fn dylibname(&self) -> (String, String) 
each_auxiliary_node_id			fn each_auxiliary_node_id<F>(item: &hir::Item, callback: F) -> bool where
each_child_of_item			pub fn each_child_of_item<F, G>(cdata: Cmd, id: DefIndex, get_crate_data: G, callback: F)
each_child_of_item_or_crate			fn each_child_of_item_or_crate<F, G>(cdata: Cmd,
each_exported_macro			pub fn each_exported_macro<F>(data: &[u8], mut f: F) where
each_implementation_for_trait			pub fn each_implementation_for_trait<F>(cdata: Cmd,
each_inherent_implementation_for_type			pub fn each_inherent_implementation_for_type<F>(cdata: Cmd,
each_lang_item			pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where
each_top_level_item_of_crate			pub fn each_top_level_item_of_crate<F, G>(cdata: Cmd, get_crate_data: G, callback: F)
emit_auto_adjustment			    fn emit_auto_adjustment<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_auto_adjustment			    fn emit_auto_adjustment<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_auto_deref_ref			    fn emit_auto_deref_ref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_auto_deref_ref			    fn emit_auto_deref_ref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_autoref			    fn emit_autoref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_autoref			    fn emit_autoref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_builtin_bounds			    fn emit_builtin_bounds(&mut self, ecx: &e::EncodeContext, bounds: &ty::BuiltinBounds) 
emit_builtin_bounds			    fn emit_builtin_bounds(&mut self, ecx: &e::EncodeContext, bounds: &ty::BuiltinBounds);
emit_def_id			    fn emit_def_id(&mut self, did: DefId) 
emit_def_id			    fn emit_def_id(&mut self, did: DefId);
emit_existential_bounds			    fn emit_existential_bounds<'b>(&mut self, ecx: &e::EncodeContext<'b,'tcx>,
emit_predicate			    fn emit_predicate<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_predicate			    fn emit_predicate<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_region			    fn emit_region(&mut self, ecx: &e::EncodeContext, r: ty::Region) 
emit_region			    fn emit_region(&mut self, ecx: &e::EncodeContext, r: ty::Region);
emit_substs			    fn emit_substs<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_substs			    fn emit_substs<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_trait_ref			    fn emit_trait_ref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_trait_ref			    fn emit_trait_ref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_ty			    fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);
emit_ty			    fn emit_ty<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>, ty: Ty<'tcx>) 
emit_tys			    fn emit_tys<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, tys: &[Ty<'tcx>]);
emit_tys			    fn emit_tys<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>, tys: &[Ty<'tcx>]) 
emit_upvar_capture			    fn emit_upvar_capture(&mut self, ecx: &e::EncodeContext, capture: &ty::UpvarCapture) 
emit_upvar_capture			    fn emit_upvar_capture(&mut self, ecx: &e::EncodeContext, capture: &ty::UpvarCapture);
enc_abi			fn enc_abi(w: &mut Cursor<Vec<u8>>, abi: Abi) 
enc_bare_fn_ty			pub fn enc_bare_fn_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_bound_region			fn enc_bound_region(w: &mut Cursor<Vec<u8>>, cx: &ctxt, br: ty::BoundRegion) 
enc_builtin_bounds			pub fn enc_builtin_bounds(w: &mut Cursor<Vec<u8>>, _cx: &ctxt, bs: &ty::BuiltinBounds) 
enc_closure_ty			pub fn enc_closure_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_existential_bounds			pub fn enc_existential_bounds<'a,'tcx>(w: &mut Cursor<Vec<u8>>,
enc_fn_sig			fn enc_fn_sig<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_mt			fn enc_mt<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_mutability			fn enc_mutability(w: &mut Cursor<Vec<u8>>, mt: hir::Mutability) 
enc_object_lifetime_default			fn enc_object_lifetime_default<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,
enc_opt			fn enc_opt<T, F>(w: &mut Cursor<Vec<u8>>, t: Option<T>, enc_f: F) where
enc_predicate			pub fn enc_predicate<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,
enc_projection_predicate			fn enc_projection_predicate<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,
enc_region			pub fn enc_region(w: &mut Cursor<Vec<u8>>, cx: &ctxt, r: ty::Region) 
enc_region_param_def			pub fn enc_region_param_def(w: &mut Cursor<Vec<u8>>, cx: &ctxt,
enc_scope			fn enc_scope(w: &mut Cursor<Vec<u8>>, cx: &ctxt, scope: region::CodeExtent) 
enc_substs			pub fn enc_substs<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_trait_ref			pub fn enc_trait_ref<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_ty			pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) 
enc_type_param_def			pub fn enc_type_param_def<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>,
enc_unsafety			fn enc_unsafety(w: &mut Cursor<Vec<u8>>, p: hir::Unsafety) 
enc_vec_per_param_space			fn enc_vec_per_param_space<'a, 'tcx, T, F>(w: &mut Cursor<Vec<u8>>,
encode_associated_type_names			fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[Name]) 
encode_ast			fn encode_ast(rbml_w: &mut Encoder, item: &InlinedItem) 
encode_attributes			fn encode_attributes(rbml_w: &mut Encoder, attrs: &[ast::Attribute]) 
encode_bounds_and_type			fn encode_bounds_and_type<'a, 'tcx>(rbml_w: &mut Encoder,
encode_bounds_and_type_for_item			fn encode_bounds_and_type_for_item<'a, 'tcx>(rbml_w: &mut Encoder,
encode_cast_kind			pub fn encode_cast_kind(ebml_w: &mut Encoder, kind: cast::CastKind) 
encode_codemap			fn encode_codemap(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_constness			fn encode_constness(rbml_w: &mut Encoder, constness: hir::Constness) 
encode_crate_dep			fn encode_crate_dep(rbml_w: &mut Encoder,
encode_crate_deps			fn encode_crate_deps(rbml_w: &mut Encoder, cstore: &cstore::CStore) 
encode_crate_disambiguator			fn encode_crate_disambiguator(rbml_w: &mut Encoder, crate_disambiguator: &str) 
encode_crate_name			fn encode_crate_name(rbml_w: &mut Encoder, crate_name: &str) 
encode_crate_triple			fn encode_crate_triple(rbml_w: &mut Encoder, triple: &str) 
encode_def_id			fn encode_def_id(rbml_w: &mut Encoder, id: DefId) 
encode_def_id_and_key			fn encode_def_id_and_key(ecx: &EncodeContext,
encode_def_key			fn encode_def_key(rbml_w: &mut Encoder, key: DefKey) 
encode_defaulted			fn encode_defaulted(rbml_w: &mut Encoder, is_defaulted: bool) 
encode_defaultness			fn encode_defaultness(rbml_w: &mut Encoder, defaultness: hir::Defaultness) 
encode_deprecation			fn encode_deprecation(rbml_w: &mut Encoder, depr_opt: Option<attr::Deprecation>) 
encode_disr_val			fn encode_disr_val(_: &EncodeContext,
encode_dylib_dependency_formats			fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) 
encode_enum_variant_info			fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_explicit_self			fn encode_explicit_self(rbml_w: &mut Encoder,
encode_family			fn encode_family(rbml_w: &mut Encoder, c: char) 
encode_field			fn encode_field<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_freevar_entry			fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &hir::Freevar) 
encode_generics			fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,
encode_hash			fn encode_hash(rbml_w: &mut Encoder, hash: &Svh) 
encode_impls			fn encode_impls<'a>(ecx: &'a EncodeContext,
encode_info_for_associated_const			fn encode_info_for_associated_const<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_associated_type			fn encode_info_for_associated_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_foreign_item			fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_item			fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_items			fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_method			fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_mod			fn encode_info_for_mod(ecx: &EncodeContext,
encode_info_for_struct_ctor			fn encode_info_for_struct_ctor<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_inherent_implementations			fn encode_inherent_implementations(ecx: &EncodeContext,
encode_inlined_item			pub fn encode_inlined_item(ecx: &e::EncodeContext,
encode_item_ast			fn encode_item_ast(rbml_w: &mut Encoder, item: &hir::Item) 
encode_item_index			fn encode_item_index(rbml_w: &mut Encoder, index: IndexData) 
encode_item_sort			fn encode_item_sort(rbml_w: &mut Encoder, sort: char) 
encode_item_variances			fn encode_item_variances(rbml_w: &mut Encoder,
encode_lang_items			fn encode_lang_items(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_macro_defs			fn encode_macro_defs(rbml_w: &mut Encoder,
encode_meta_item			fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) 
encode_metadata			    fn encode_metadata<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
encode_metadata			pub fn encode_metadata(ecx: EncodeContext, krate: &hir::Crate) -> Vec<u8> 
encode_metadata_inner			fn encode_metadata_inner(rbml_w: &mut Encoder,
encode_method_argument_names			fn encode_method_argument_names(rbml_w: &mut Encoder,
encode_method_callee			fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,
encode_method_ty_fields			fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_mir			fn encode_mir(ecx: &EncodeContext, rbml_w: &mut Encoder, node_id: NodeId) 
encode_misc_info			fn encode_misc_info(ecx: &EncodeContext,
encode_mutability			    fn encode_mutability(m: hir::Mutability) -> u8 
encode_name			fn encode_name(rbml_w: &mut Encoder, name: Name) 
encode_native_libraries			fn encode_native_libraries(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_panic_strategy			fn encode_panic_strategy(rbml_w: &mut Encoder, ecx: &EncodeContext) 
encode_paren_sugar			fn encode_paren_sugar(rbml_w: &mut Encoder, paren_sugar: bool) 
encode_parent_impl			fn encode_parent_impl(rbml_w: &mut Encoder, parent_opt: Option<DefId>) 
encode_parent_item			fn encode_parent_item(rbml_w: &mut Encoder, id: DefId) 
encode_plugin_registrar_fn			fn encode_plugin_registrar_fn(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_polarity			fn encode_polarity(rbml_w: &mut Encoder, polarity: hir::ImplPolarity) 
encode_predicates			fn encode_predicates<'a,'tcx>(rbml_w: &mut Encoder,
encode_predicates_in_current_doc			fn encode_predicates_in_current_doc<'a,'tcx>(rbml_w: &mut Encoder,
encode_reachable			fn encode_reachable(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_reexports			fn encode_reexports(ecx: &EncodeContext,
encode_repr_attrs			fn encode_repr_attrs(rbml_w: &mut Encoder,
encode_rustc_version			fn encode_rustc_version(rbml_w: &mut Encoder) 
encode_side_tables_for_id			fn encode_side_tables_for_id(ecx: &e::EncodeContext,
encode_side_tables_for_ii			fn encode_side_tables_for_ii(ecx: &e::EncodeContext,
encode_stability			fn encode_stability(rbml_w: &mut Encoder, stab_opt: Option<&attr::Stability>) 
encode_struct_field_attrs			fn encode_struct_field_attrs(ecx: &EncodeContext,
encode_struct_field_family			fn encode_struct_field_family(rbml_w: &mut Encoder,
encode_struct_fields			fn encode_struct_fields(rbml_w: &mut Encoder,
encode_substs			    fn encode_substs(&self, encoder: &mut OpaqueEncoder, substs: &Substs<'tcx>) 
encode_trait_ref			fn encode_trait_ref<'a, 'tcx>(rbml_w: &mut Encoder,
encode_ty			    fn encode_ty(&self, encoder: &mut OpaqueEncoder, t: ty::Ty<'tcx>) 
encode_type			    fn encode_type<'a>(&self,
encode_type			fn encode_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_unsafety			fn encode_unsafety(rbml_w: &mut Encoder, unsafety: hir::Unsafety) 
encode_variant_id			fn encode_variant_id(rbml_w: &mut Encoder, vid: DefId) 
encode_visibility			fn encode_visibility<T: HasVisibility>(rbml_w: &mut Encoder, visibility: T) 
encode_xrefs			fn encode_xrefs<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encoded_ty			pub fn encoded_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
encoder			pub mod encoder;
encoder			impl<'a, 'tcx> encoder::EncodeContext<'a, 'tcx> 
eq_int			            fn eq_int(a: isize, b: isize) -> bool { a == b }
existing_match			    fn existing_match(&self, name: &str, hash: Option<&Svh>, kind: PathKind)
expect_variant_kind			    fn expect_variant_kind(family: Family) -> ty::VariantKind 
ext::base::MacroLoader for MacroLoader			impl<'a> ext::base::MacroLoader for MacroLoader<'a> 
extern_crate			    fn extern_crate(&self, cnum: ast::CrateNum) -> Option<ExternCrate>
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>
extract_crate_info			    fn extract_crate_info(&self, i: &ast::Item) -> Option<CrateInfo> 
extract_one			    fn extract_one(&mut self, m: HashMap<PathBuf, PathKind>, flavor: CrateFlavor,
family_to_variant_kind			fn family_to_variant_kind<'tcx>(family: Family) -> Option<ty::VariantKind> 
find_commandline_library			    fn find_commandline_library<'b, LOCS> (&mut self, locs: LOCS) -> Option<Library>
find_library_crate			    fn find_library_crate(&mut self) -> Option<Library> 
find_plugin_registrar			    pub fn find_plugin_registrar(&mut self, span: Span, name: &str)
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for CrateFlavor			impl fmt::Display for CrateFlavor 
fn_constness			fn fn_constness(item: rbml::Doc) -> hir::Constness 
fold_block			    fn fold_block(&mut self, blk: P<hir::Block>) -> P<hir::Block> 
foo			            fn foo() -> isize { 3 + 4 } \/\/ first smalltalk program ever executed.
foo			            fn foo() {}
foo			            fn foo(x: usize, y: usize) -> usize 
from_buf			    pub fn from_buf(buf: &[u8], start: usize, end: usize) -> Self 
from_rbml			    pub fn from_rbml(index: rbml::Doc) -> Index 
from_u32			            pub fn from_u32(u: u32) -> Option<
get_adt_def			pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,
get_associated_consts			pub fn get_associated_consts<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_attributes			fn get_attributes(md: rbml::Doc) -> Vec<ast::Attribute> 
get_crate_attributes			pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> 
get_crate_data			    pub fn get_crate_data(&self, cnum: ast::CrateNum) -> Rc<CrateMetadata> 
get_crate_deps			pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> 
get_crate_disambiguator			pub fn get_crate_disambiguator<'a>(data: &'a [u8]) -> &'a str 
get_crate_hash			    pub fn get_crate_hash(&self, cnum: ast::CrateNum) -> Svh 
get_crate_hash			pub fn get_crate_hash(data: &[u8]) -> Svh 
get_crate_name			pub fn get_crate_name(data: &[u8]) -> &str 
get_crate_triple			pub fn get_crate_triple(data: &[u8]) -> Option<String> 
get_custom_coerce_unsized_kind			pub fn get_custom_coerce_unsized_kind<'tcx>(
get_deprecation			pub fn get_deprecation(cdata: Cmd, id: DefIndex) -> Option<attr::Deprecation> 
get_dylib_dependency_formats			pub fn get_dylib_dependency_formats(cdata: Cmd)
get_enum_variants			    fn get_enum_variants<'tcx>(cdata: Cmd, doc: rbml::Doc) -> Vec<ty::VariantDefData<'tcx, 'tcx>> 
get_explicit_self			fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory 
get_impl_items			pub fn get_impl_items(cdata: Cmd, impl_id: DefIndex)
get_impl_or_trait_item			pub fn get_impl_or_trait_item<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_impl_polarity			pub fn get_impl_polarity<'tcx>(cdata: Cmd,
get_impl_trait			pub fn get_impl_trait<'a, 'tcx>(cdata: Cmd,
get_imported_filemaps			pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<syntax_pos::FileMap> 
get_item			    fn get_item(&self, item_id: DefIndex) -> Option<rbml::Doc> 
get_item_attrs			pub fn get_item_attrs(cdata: Cmd,
get_item_name			pub fn get_item_name(cdata: Cmd, id: DefIndex) -> ast::Name 
get_item_variances			pub fn get_item_variances(cdata: Cmd, id: DefIndex) -> ty::ItemVariances 
get_macro_span			pub fn get_macro_span(doc: rbml::Doc) -> Span 
get_meta_items			fn get_meta_items(md: rbml::Doc) -> Vec<P<ast::MetaItem>> 
get_metadata_section			fn get_metadata_section(target: &Target, flavor: CrateFlavor, filename: &Path)
get_metadata_section_imp			fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Path)
get_method_arg_names			pub fn get_method_arg_names(cdata: Cmd, id: DefIndex) -> Vec<String> 
get_missing_lang_items			pub fn get_missing_lang_items(cdata: Cmd)
get_mutability			    fn get_mutability(ch: u8) -> hir::Mutability 
get_native_libraries			pub fn get_native_libraries(cdata: Cmd)
get_ordered_deps			    fn get_ordered_deps(cstore: &cstore::CStore)
get_panic_strategy			pub fn get_panic_strategy(data: &[u8]) -> PanicStrategy 
get_parent_impl			pub fn get_parent_impl(cdata: Cmd, id: DefIndex) -> Option<DefId> 
get_plugin_registrar_fn			pub fn get_plugin_registrar_fn(data: &[u8]) -> Option<DefIndex> 
get_predicates			pub fn get_predicates<'a, 'tcx>(cdata: Cmd,
get_provided_trait_methods			pub fn get_provided_trait_methods<'a, 'tcx>(cdata: Cmd,
get_reachable_ids			pub fn get_reachable_ids(cdata: Cmd) -> Vec<DefId> 
get_repr_attrs			pub fn get_repr_attrs(cdata: Cmd, id: DefIndex) -> Vec<attr::ReprAttr> 
get_stability			pub fn get_stability(cdata: Cmd, id: DefIndex) -> Option<attr::Stability> 
get_struct_ctor_def_id			pub fn get_struct_ctor_def_id(cdata: Cmd, node_id: DefIndex) -> Option<DefId>
get_struct_field_attrs			pub fn get_struct_field_attrs(cdata: Cmd) -> FnvHashMap<DefId, Vec<ast::Attribute>> 
get_struct_field_names			pub fn get_struct_field_names(cdata: Cmd, id: DefIndex) -> Vec<ast::Name> 
get_struct_variant			    fn get_struct_variant<'tcx>(cdata: Cmd,
get_super_predicates			pub fn get_super_predicates<'a, 'tcx>(cdata: Cmd,
get_trait_def			pub fn get_trait_def<'a, 'tcx>(cdata: Cmd,
get_trait_item_def_ids			pub fn get_trait_item_def_ids(cdata: Cmd, id: DefIndex)
get_trait_name			pub fn get_trait_name(cdata: Cmd, id: DefIndex) -> ast::Name 
get_trait_of_item			pub fn get_trait_of_item<'a, 'tcx>(cdata: Cmd,
get_tuple_struct_definition_if_ctor			pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,
get_type			pub fn get_type<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_used_libraries			    pub fn get_used_libraries<'a>(&'a self)
get_used_link_args			    pub fn get_used_link_args<'a>(&'a self) -> &'a RefCell<Vec<String> > 
get_variant_fields			    fn get_variant_fields<'tcx>(cdata: Cmd, doc: rbml::Doc) -> Vec<ty::FieldDefData<'tcx, 'tcx>> 
get_variant_kind			pub fn get_variant_kind(cdata: Cmd, node_id: DefIndex) -> Option<VariantKind>
get_visibility			pub fn get_visibility(cdata: Cmd, id: DefIndex) -> ty::Visibility 
hash			    pub fn hash(&self) -> Svh { decoder::get_crate_hash(self.data()) }
id			    fn id(&mut self, id: ast::NodeId) 
id			    fn id(&mut self, id: ast::NodeId);
ident_of			    fn ident_of(&self, st: &str) -> ast::Ident 
ident_of			    fn ident_of(&self, st: &str) -> ast::Ident;
impl_items			    fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>
impl_or_trait_item			    fn impl_or_trait_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
impl_parent			    fn impl_parent(&self, impl_def: DefId) -> Option<DefId> 
impl_polarity			    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>
impl_trait_ref			    fn impl_trait_ref<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
implementations_of_trait			    fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId>
import_codemap			pub fn import_codemap(local_codemap: &codemap::CodeMap,
imported_filemaps			    pub fn imported_filemaps<'a>(&'a self, codemap: &codemap::CodeMap)
index			pub mod index;
inherent_implementations_for_type			    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>
inject_allocator_crate			    fn inject_allocator_crate(&mut self) 
inject_dependency_if			    fn inject_dependency_if(&self,
inject_panic_runtime			    fn inject_panic_runtime(&mut self, krate: &ast::Crate) 
inlined_item_id_range			fn inlined_item_id_range(ii: &InlinedItem) -> IdRange 
is_allocator			    fn is_allocator(&self, cnum: ast::CrateNum) -> bool
is_allocator			    pub fn is_allocator(&self) -> bool 
is_const_fn			    fn is_const_fn(&self, did: DefId) -> bool
is_const_fn			pub fn is_const_fn(cdata: Cmd, id: DefIndex) -> bool 
is_default_impl			    fn is_default_impl(&self, impl_did: DefId) -> bool 
is_default_impl			pub fn is_default_impl(cdata: Cmd, impl_id: DefIndex) -> bool 
is_defaulted_trait			    fn is_defaulted_trait(&self, trait_def_id: DefId) -> bool
is_defaulted_trait			pub fn is_defaulted_trait(cdata: Cmd, trait_id: DefIndex) -> bool 
is_explicitly_linked			    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool
is_extern_item			    fn is_extern_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId) -> bool 
is_extern_item			pub fn is_extern_item<'a, 'tcx>(cdata: Cmd,
is_foreign_item			    fn is_foreign_item(&self, did: DefId) -> bool 
is_foreign_item			pub fn is_foreign_item(cdata: Cmd, id: DefIndex) -> bool 
is_impl			    fn is_impl(&self, did: DefId) -> bool
is_impl			pub fn is_impl(cdata: Cmd, id: DefIndex) -> bool 
is_item_mir_available			    fn is_item_mir_available(&self, def: DefId) -> bool 
is_item_mir_available			pub fn is_item_mir_available<'tcx>(cdata: Cmd, id: DefIndex) -> bool 
is_last			        fn is_last(b: char, c: char) -> bool { return c == b; }
is_panic_runtime			    fn is_panic_runtime(&self, cnum: ast::CrateNum) -> bool
is_panic_runtime			    pub fn is_panic_runtime(&self) -> bool 
is_public			    fn is_public(self) -> bool 
is_public			    fn is_public(self) -> bool;
is_staged_api			    fn is_staged_api(&self, data: &[u8]) -> bool 
is_staged_api			    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool
is_static_method			    fn is_static_method(&self, def: DefId) -> bool
is_static_method			pub fn is_static_method(cdata: Cmd, id: DefIndex) -> bool 
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool
is_typedef			    fn is_typedef(&self, did: DefId) -> bool 
is_typedef			pub fn is_typedef(cdata: Cmd, id: DefIndex) -> bool 
item_attrs			    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>
item_children			    fn item_children(&self, def_id: DefId) -> Vec<ChildItem>
item_def_id			fn item_def_id(d: rbml::Doc, cdata: Cmd) -> DefId 
item_def_key			fn item_def_key(item_doc: rbml::Doc) -> hir_map::DefKey 
item_defaultness			fn item_defaultness(item: rbml::Doc) -> hir::Defaultness 
item_family			fn item_family(item: rbml::Doc) -> Family 
item_name			    fn item_name(&self, def: DefId) -> ast::Name 
item_name			fn item_name(item: rbml::Doc) -> ast::Name 
item_parent_item			fn item_parent_item(cdata: Cmd, d: rbml::Doc) -> Option<DefId> 
item_predicates			    fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_require_parent_item			fn item_require_parent_item(cdata: Cmd, d: rbml::Doc) -> DefId 
item_sort			fn item_sort(item: rbml::Doc) -> Option<char> 
item_super_predicates			    fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_to_def_like			fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: DefId) -> DefLike 
item_trait_ref			fn item_trait_ref<'a, 'tcx>(doc: rbml::Doc, tcx: TyCtxt<'a, 'tcx, 'tcx>, cdata: Cmd)
item_type			    fn item_type<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_type			pub fn item_type<'a, 'tcx>(_item_id: DefId, item: rbml::Doc,
item_variances			    fn item_variances(&self, def: DefId) -> ty::ItemVariances 
item_visibility			fn item_visibility(item: rbml::Doc) -> ty::Visibility 
items			  impl items contain tag_item_impl_item elements, and classes
items			  trait items contain tag_item_trait_item elements,
iter_crate_data			    pub fn iter_crate_data<I>(&self, mut i: I) where
iter_crate_data_origins			    pub fn iter_crate_data_origins<I>(&self, mut i: I) where
lang_items			    fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>
list_crate_attributes			fn list_crate_attributes(md: rbml::Doc, hash: &Svh,
list_crate_deps			fn list_crate_deps(data: &[u8], out: &mut io::Write) -> io::Result<()> 
list_crate_metadata			pub fn list_crate_metadata(bytes: &[u8], out: &mut io::Write) -> io::Result<()> 
list_file_metadata			pub fn list_file_metadata(target: &Target, path: &Path,
load			    fn load(&mut self, loader: &mut loader::Context) -> Option<LoadResult> 
load_crate			    fn load_crate(&mut self, extern_crate: &ast::Item, allows_macros: bool) -> Vec<ast::MacroDef> 
load_index			pub fn load_index(data: &[u8]) -> index::Index 
load_key_map			pub fn load_key_map(data: &[u8]) -> FnvHashMap<DefKey, DefIndex> 
load_library_crate			    pub fn load_library_crate(&mut self) -> Library 
load_macros			    fn load_macros<'b>(&mut self,
load_xrefs			pub fn load_xrefs(data: &[u8]) -> index::DenseIndex 
loader			pub mod loader;
local_id			    fn local_id(&self, def_id: DefId) -> NodeId 
local_node_for_inlined_defid			    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId> 
lookup			    pub fn lookup(&self, buf: &[u8], ix: u32) -> Option<u32> 
lookup_item			    fn lookup_item(&self, item_id: DefIndex) -> rbml::Doc 
lookup_item			    pub fn lookup_item(&self, bytes: &[u8], def_index: DefIndex) -> Option<u32> 
macro_import			pub mod macro_import;
macros			mod macros;
maybe_doc_type			fn maybe_doc_type<'a, 'tcx>(doc: rbml::Doc, tcx: TyCtxt<'a, 'tcx, 'tcx>, cdata: Cmd)
maybe_get_crate_hash			pub fn maybe_get_crate_hash(data: &[u8]) -> Option<Svh> 
maybe_get_crate_name			pub fn maybe_get_crate_name(data: &[u8]) -> Option<&str> 
maybe_get_item_ast			    fn maybe_get_item_ast<'a>(&'tcx self,
maybe_get_item_ast			pub fn maybe_get_item_ast<'a, 'tcx>(cdata: Cmd, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)
maybe_get_item_mir			    fn maybe_get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
maybe_get_item_mir			pub fn maybe_get_item_mir<'a, 'tcx>(cdata: Cmd,
maybe_get_item_name			pub fn maybe_get_item_name(cdata: Cmd, id: DefIndex) -> Option<ast::Name> 
maybe_item_name			fn maybe_item_name(item: rbml::Doc) -> Option<ast::Name> 
maybe_load_library_crate			    pub fn maybe_load_library_crate(&mut self) -> Option<Library> 
meta_section_name			pub fn meta_section_name(target: &Target) -> &'static str 
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8]
metadata_filename			    fn metadata_filename(&self) -> &str
metadata_section_name			    fn metadata_section_name(&self, target: &Target) -> &str
method_arg_names			    fn method_arg_names(&self, did: DefId) -> Vec<String>
mir			    impl<'v, 'cdata, 'codemap> mir::visit::MutVisitor<'v>
missing_lang_items			    fn missing_lang_items(&self, cnum: ast::CrateNum)
mk_ctxt			fn mk_ctxt() -> parse::ParseSess 
my_visit_expr			fn my_visit_expr(expr: &hir::Expr,
name			    pub fn name(&self) -> &str { decoder::get_crate_name(self.data()) }
name_of			    fn name_of(&self, st: &str) -> ast::Name 
name_of			    fn name_of(&self, st: &str) -> ast::Name;
native_libraries			    fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>
needs_allocator			    pub fn needs_allocator(&self) -> bool 
needs_panic_runtime			    pub fn needs_panic_runtime(&self) -> bool 
new			    fn new(sess: &'a Session,
new			    pub fn new(sess: &'a Session,
new			    pub fn new(dep_graph: &DepGraph) -> CStore 
new			    pub fn new(max_index: usize) -> IndexData 
new			    fn new(ar: ArchiveRO) -> Option<ArchiveMetadata> 
new			    pub fn new(sess: &'a Session,
new			    pub fn new(data: &'a [u8],
new_def_id			    fn new_def_id(&self, def_id: DefId) -> DefId 
new_id			    fn new_id(&mut self, id: ast::NodeId) -> ast::NodeId 
new_id			    fn new_id(&self, id: ast::NodeId) -> ast::NodeId 
new_int_alist			            fn new_int_alist<B>() -> alist<isize, B> 
new_int_alist			        fn new_int_alist<B>() -> alist<isize, B> 
new_span			    fn new_span(&self, span: syntax_pos::Span) -> syntax_pos::Span 
next			    fn next(&mut self) -> char 
next_byte			    fn next_byte(&mut self) -> u8 
next_crate_num			    pub fn next_crate_num(&self) -> ast::CrateNum 
note_crate_name			pub fn note_crate_name(err: &mut DiagnosticBuilder, name: &str) 
opt_child			    fn opt_child(&self, tag: c::astencode_tag) -> Option<Self>;
opt_child			    fn opt_child(&self, tag: c::astencode_tag) -> Option<rbml::Doc<'a>> 
opt_item_name			    fn opt_item_name(&self, def: DefId) -> Option<ast::Name> 
opt_used_crate_source			    pub fn opt_used_crate_source(&self, cnum: ast::CrateNum)
original_crate_name			    fn original_crate_name(&self, cnum: ast::CrateNum) -> token::InternedString
panic_strategy			    fn panic_strategy(&self, cnum: ast::CrateNum) -> PanicStrategy 
panic_strategy			    pub fn panic_strategy(&self) -> PanicStrategy 
parse_abi_set			    fn parse_abi_set(&mut self) -> abi::Abi 
parse_associated_type_names			fn parse_associated_type_names(item_doc: rbml::Doc) -> Vec<ast::Name> 
parse_bare_fn_ty			    pub fn parse_bare_fn_ty(&mut self) -> &'tcx ty::BareFnTy<'tcx> 
parse_bound_region			    fn parse_bound_region(&mut self) -> ty::BoundRegion 
parse_builtin_bounds			    fn parse_builtin_bounds(&mut self) -> ty::BuiltinBounds 
parse_closure_ty			    pub fn parse_closure_ty(&mut self) -> ty::ClosureTy<'tcx> 
parse_def			    fn parse_def(&mut self) -> DefId 
parse_defid			fn parse_defid(buf: &[u8]) -> DefId 
parse_existential_bounds			    pub fn parse_existential_bounds(&mut self) -> ty::ExistentialBounds<'tcx> 
parse_mt			    fn parse_mt(&mut self) -> ty::TypeAndMut<'tcx> 
parse_mutability			    fn parse_mutability(&mut self) -> hir::Mutability 
parse_name			    fn parse_name(&mut self, last: char) -> ast::Name 
parse_object_lifetime_default			    fn parse_object_lifetime_default(&mut self) -> ty::ObjectLifetimeDefault 
parse_opt			    fn parse_opt<T, F>(&mut self, f: F) -> Option<T>
parse_param_space			    fn parse_param_space(&mut self) -> subst::ParamSpace 
parse_paren_sugar			fn parse_paren_sugar(item_doc: rbml::Doc) -> bool 
parse_polarity			fn parse_polarity(item_doc: rbml::Doc) -> hir::ImplPolarity 
parse_predicate			    pub fn parse_predicate(&mut self) -> ty::Predicate<'tcx> 
parse_projection_predicate			    fn parse_projection_predicate(&mut self) -> ty::ProjectionPredicate<'tcx> 
parse_region			    pub fn parse_region(&mut self) -> ty::Region 
parse_region_param_def			    pub fn parse_region_param_def(&mut self) -> ty::RegionParameterDef 
parse_scope			    fn parse_scope(&mut self) -> region::CodeExtent 
parse_sess			    fn parse_sess(&self) -> &parse::ParseSess { self }
parse_sess			    fn parse_sess(&self) -> &parse::ParseSess;
parse_sig			    fn parse_sig(&mut self) -> ty::PolyFnSig<'tcx> 
parse_size			    fn parse_size(&mut self) -> Option<usize> 
parse_str			    fn parse_str(&mut self, term: char) -> String 
parse_substs			    pub fn parse_substs(&mut self) -> subst::Substs<'tcx> 
parse_trait_ref			    pub fn parse_trait_ref(&mut self) -> ty::TraitRef<'tcx> 
parse_ty			    pub fn parse_ty(&mut self) -> Ty<'tcx> 
parse_type_param_def			    pub fn parse_type_param_def(&mut self) -> ty::TypeParameterDef<'tcx> 
parse_u32			    fn parse_u32(&mut self) -> u32 
parse_uint			    fn parse_uint(&mut self) -> usize 
parse_unsafety			fn parse_unsafety(item_doc: rbml::Doc) -> hir::Unsafety 
parse_unsafety			fn parse_unsafety(c: char) -> hir::Unsafety 
parse_vec_per_param_space			    fn parse_vec_per_param_space<T, F>(&mut self, mut f: F) -> VecPerParamSpace<T> where
parse_vuint			    fn parse_vuint(&mut self) -> usize 
paths			    fn paths(&self) -> Vec<PathBuf> 
peek			    fn peek(&self) -> char 
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>
position			    pub fn position(&self) -> usize 
process_crate			    fn process_crate(&self, c: &ast::Crate) 
process_foreign_mod			    fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod) 
process_item			    fn process_item(&mut self, i: &ast::Item) 
provided_trait_methods			    fn provided_trait_methods<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
push_dependencies_in_postorder			    pub fn push_dependencies_in_postorder(&self,
rbml_decoder_decoder_helpers			trait rbml_decoder_decoder_helpers<'tcx> 
rbml_decoder_decoder_helpers for reader			impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> 
rbml_decoder_helper			trait rbml_decoder_helper 
rbml_decoder_helper for reader			impl<'a> rbml_decoder_helper for reader::Decoder<'a> 
rbml_writer_helpers			trait rbml_writer_helpers<'tcx> 
rbml_writer_helpers for Encoder			impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> 
reachable_ids			    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>
read_auto_adjustment			    fn read_auto_adjustment<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_auto_adjustment			    fn read_auto_adjustment<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_auto_deref_ref			    fn read_auto_deref_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_auto_deref_ref			    fn read_auto_deref_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_autoref			    fn read_autoref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_autoref			    fn read_autoref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_capture_mode			    fn read_capture_mode(&mut self) -> hir::CaptureClause 
read_capture_mode			    fn read_capture_mode(&mut self) -> hir::CaptureClause;
read_cast_kind			    fn read_cast_kind<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_cast_kind			    fn read_cast_kind<'b, 'c>(&mut self, _dcx: &DecodeContext<'b, 'c, 'tcx>)
read_crates			    fn read_crates(&mut self, dep_graph: &DepGraph) 
read_def_id			    fn read_def_id(&mut self, dcx: &DecodeContext) -> DefId 
read_def_id			    fn read_def_id(&mut self, dcx: &DecodeContext) -> DefId;
read_def_id_nodcx			    fn read_def_id_nodcx(&mut self,
read_existential_bounds			    fn read_existential_bounds<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_existential_bounds			    fn read_existential_bounds<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_exported_macros			    pub fn read_exported_macros(&mut self, item: &ast::Item) -> Vec<ast::MacroDef> 
read_extension_crate			    fn read_extension_crate(&mut self, span: Span, info: &CrateInfo) -> ExtensionCrate 
read_freevar_entry			    fn read_freevar_entry(&mut self, dcx: &DecodeContext)
read_local_crates			pub fn read_local_crates(sess: & Session,
read_meta_section_name			pub fn read_meta_section_name(_target: &Target) -> &'static str 
read_method_callee			    fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_method_callee			    fn read_method_callee<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_method_callee_helper			trait read_method_callee_helper<'tcx> 
read_method_callee_helper for reader			impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> 
read_poly_trait_ref			    fn read_poly_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_poly_trait_ref			    fn read_poly_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_predicate			    fn read_predicate<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_predicate			    fn read_predicate<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_region			    fn read_region(&mut self, dcx: &DecodeContext) -> ty::Region 
read_region			    fn read_region(&mut self, dcx: &DecodeContext) -> ty::Region;
read_substs			    fn read_substs<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_substs			    fn read_substs<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_substs_nodcx			    fn read_substs_nodcx<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
read_substs_nodcx			    fn read_substs_nodcx<'b>(&mut self, tcx: TyCtxt<'b, 'tcx, 'tcx>,
read_trait_ref			    fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_trait_ref			    fn read_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_ty			    fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;
read_ty			    fn read_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> Ty<'tcx> 
read_ty_encoded			    fn read_ty_encoded<'a, 'b, F, R>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>,
read_ty_encoded			    fn read_ty_encoded<'b, 'c, F, R>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>, op: F) -> R
read_ty_nodcx			    fn read_ty_nodcx<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
read_ty_nodcx			    fn read_ty_nodcx<'b>(&mut self, tcx: TyCtxt<'b, 'tcx, 'tcx>,
read_tys			    fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;
read_tys			    fn read_tys<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_tys_nodcx			    fn read_tys_nodcx<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
read_tys_nodcx			    fn read_tys_nodcx<'b>(&mut self, tcx: TyCtxt<'b, 'tcx, 'tcx>,
read_upvar_capture			    fn read_upvar_capture(&mut self, dcx: &DecodeContext) -> ty::UpvarCapture 
read_upvar_capture			    fn read_upvar_capture(&mut self, dcx: &DecodeContext)
record			    fn record(&mut self, id: DefId, rbml_w: &mut Encoder) -> DepTask<'a> 
record			    pub fn record(&mut self, def_id: DefId, position: u64) 
record_index			    pub fn record_index(&mut self, item: DefIndex, position: u64) 
recover_def_key			pub fn recover_def_key(key: DefKey, name: Option<InternedString>) -> hir_map::DefKey 
recover_def_path_data			fn recover_def_path_data(data: DefPathData, name: Option<InternedString>) -> hir_map::DefPathData 
reexports			fn reexports<'a>(d: rbml::Doc<'a>) -> reader::TaggedDocsIterator<'a> 
register_crate			    fn register_crate(&mut self,
register_native_lib			fn register_native_lib(sess: &Session,
register_statically_included_foreign_items			    fn register_statically_included_foreign_items(&mut self) 
relative_def_path			    fn relative_def_path(&self, def: DefId) -> hir_map::DefPath 
report_load_errs			    pub fn report_load_errs(&mut self) -> ! 
repr_attrs			    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> 
reserve_id_range			fn reserve_id_range(sess: &Session,
reset			    pub fn reset(&self) 
resolve_crate			    fn resolve_crate(&mut self,
resolve_crate_deps			    fn resolve_crate_deps(&mut self,
reverse_translate_def_id			fn reverse_translate_def_id(cdata: Cmd, did: DefId) -> Option<DefId> 
roundtrip			fn roundtrip(in_item: hir::Item) 
rustc_version			pub fn rustc_version() -> String 
scan			    fn scan<F>(&mut self, mut is_last: F) -> &'a [u8]
set_crate_data			    pub fn set_crate_data(&self, cnum: ast::CrateNum, data: Rc<CrateMetadata>) 
should_link			fn should_link(i: &ast::Item) -> bool 
simplify_ast			fn simplify_ast(ii: InlinedItemRef) -> (InlinedItem, IdRange) 
simplify_def_key			pub fn simplify_def_key(key: hir_map::DefKey) -> DefKey 
simplify_def_path_data			fn simplify_def_path_data(data: hir_map::DefPathData) -> DefPathData 
stability			    fn stability(&self, def: DefId) -> Option<attr::Stability> 
staticlibname			    fn staticlibname(&self) -> (String, String) 
struct_ctor_def_id			    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>
struct_field_family_to_visibility			fn struct_field_family_to_visibility(family: Family) -> ty::Visibility 
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>
tag			    fn tag<F>(&mut self, tag_id: c::astencode_tag, f: F) where F: FnOnce(&mut Self);
tag			    fn tag<F>(&mut self,
tcx			    fn tcx<'s>(&'s self) -> TyCtxt<'s, 'tcx, 'tcx> 
tls::DecodingContext for DecodingContext			impl<'a, 'tcx: 'a> tls::DecodingContext<'tcx> for DecodingContext<'a, 'tcx> 
tls::EncodingContext for encoder			impl<'a, 'tcx: 'a> tls::EncodingContext<'tcx> for encoder::EncodeContext<'a, 'tcx> 
tls_context			pub mod tls_context;
tr			    fn tr(&self, dcx: &DecodeContext) -> Def 
tr			    fn tr(&self, dcx: &DecodeContext) -> DefId 
tr			    fn tr(&self, dcx: &DecodeContext) -> Option<DefId> 
tr			    fn tr(&self, dcx: &DecodeContext) -> Self;
tr			    fn tr(&self, dcx: &DecodeContext) -> hir::Freevar 
tr			    fn tr(&self, dcx: &DecodeContext) -> syntax_pos::Span 
tr			trait tr 
tr for Def			impl tr for Def 
tr for DefId			impl tr for DefId 
tr for Option			impl tr for Option<DefId> 
tr for hir			impl tr for hir::Freevar 
tr for syntax_pos			impl tr for syntax_pos::Span 
tr_def_id			    pub fn tr_def_id(&self, did: DefId) -> DefId 
tr_id			    pub fn tr_id(&self, id: ast::NodeId) -> ast::NodeId 
tr_span			    pub fn tr_span(&self, span: syntax_pos::Span) -> syntax_pos::Span 
trait_def			    fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::TraitDef<'tcx>
trait_item_def_ids			    fn trait_item_def_ids(&self, def: DefId)
trait_of_item			    fn trait_of_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId>
translate_def_id			pub fn translate_def_id(cdata: Cmd, did: DefId) -> DefId 
translate_def_id			    fn translate_def_id(&self, def_id: DefId) -> DefId 
translate_span			pub fn translate_span(cdata: Cmd,
translated_def_id			fn translated_def_id(cdata: Cmd, d: rbml::Doc) -> DefId 
tuple_struct_definition_if_ctor			    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>
ty_abbrev			pub struct ty_abbrev 
ty_str_ctxt			    pub fn ty_str_ctxt<'b>(&'b self) -> ctxt<'b, 'tcx> 
tydecode			pub mod tydecode;
tyencode			pub mod tyencode;
type_string			        fn type_string(doc: rbml::Doc) -> String 
untranslated_def_id			fn untranslated_def_id(d: rbml::Doc) -> DefId 
update_extern_crate			    fn update_extern_crate(&mut self,
used_crate_source			    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>
used_libraries			    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>
used_link_args			    fn used_link_args(&self) -> Vec<String>
variant_disr_val			fn variant_disr_val(d: rbml::Doc) -> Option<u64> 
variant_kind			    fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> 
verify_decompressed_encoding_version			fn verify_decompressed_encoding_version(blob: &MetadataBlob, filename: &Path)
verify_no_symbol_conflicts			    fn verify_no_symbol_conflicts(&self,
visibility			    fn visibility(&self, def: DefId) -> ty::Visibility 
visible_parent_map			    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> 
visit::Visitor for LocalCrateReader			impl<'a> visit::Visitor for LocalCrateReader<'a> 
visit_def_id			        fn visit_def_id(&mut self, def_id: &mut DefId) 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx hir::Expr) 
visit_foreign_item			    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) 
visit_id			    fn visit_id(&mut self, id: ast::NodeId) 
visit_item			    fn visit_item(&mut self, a: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_span			        fn visit_span(&mut self, span: &mut Span) 
visit_struct_field			        fn visit_struct_field(&mut self, field: &hir::StructField) 
visit_ty			    fn visit_ty(&mut self, ty: &'tcx hir::Ty) 
with_doc			    pub fn with_doc(tcx: TyCtxt<'a, 'tcx, 'tcx>,
with_testing_context			fn with_testing_context<T, F: FnOnce(&mut LoweringContext) -> T>(f: F) -> T 
write_be_u32			fn write_be_u32<W: Write>(w: &mut W, u: u32) 
write_closure_type			fn write_closure_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
write_dense_index			pub fn write_dense_index(entries: Vec<u32>, buf: &mut Cursor<Vec<u8>>) 
write_index			    pub fn write_index(&self, buf: &mut Cursor<Vec<u8>>) 
write_tag_and_id			trait write_tag_and_id 
write_tag_and_id for Encoder			impl<'a> write_tag_and_id for Encoder<'a> 
