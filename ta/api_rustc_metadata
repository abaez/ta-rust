ArchiveMetadata			impl ArchiveMetadata 
ArchiveMetadata			pub struct ArchiveMetadata 
AssociatedContainer			impl AssociatedContainer 
AssociatedContainer			pub enum AssociatedContainer 
Ast			pub struct Ast<'tcx> 
CStore			impl CStore 
CStore			pub struct CStore 
CachedInlinedItem			pub struct CachedInlinedItem 
Clone for Lazy			impl<T> Clone for Lazy<T> 
Clone for LazySeq			impl<T> Clone for LazySeq<T> 
ClosureData			pub struct ClosureData<'tcx> 
Context			impl<'a> Context<'a> 
Context			pub struct Context<'a> 
Copy for Lazy			impl<T> Copy for Lazy<T> {}
Copy for LazySeq			impl<T> Copy for LazySeq<T> {}
CrateDep			pub struct CrateDep 
CrateFlavor			enum CrateFlavor 
CrateLoader			impl<'a> CrateLoader<'a> 
CrateLoader			pub struct CrateLoader<'a> 
CrateLoader			impl<'a> CrateLoader<'a> 
CrateMetadata			impl CrateMetadata 
CrateMetadata			pub struct CrateMetadata 
CrateMetadata			impl<'a, 'tcx> CrateMetadata 
CrateMismatch			pub struct CrateMismatch 
CratePaths			impl CratePaths 
CratePaths			pub struct CratePaths 
CrateReader			impl<'a> CrateReader<'a> 
CrateReader			pub struct CrateReader<'a> 
CrateRoot			pub struct CrateRoot 
CrateStore for cstore			impl<'tcx> CrateStore<'tcx> for cstore::CStore 
DecodeContext			impl<'a, 'tcx> DecodeContext<'a, 'tcx> 
DecodeContext			pub struct DecodeContext<'a, 'tcx: 'a> 
Decoder for DecodeContext			impl<'doc, 'tcx> Decoder for DecodeContext<'doc, 'tcx> 
DepGraphRead			        impl<
DepGraphRead			        impl<'tcx> DepGraphRead for &'tcx 
DepGraphRead			impl<T> DepGraphRead for [T]
DepGraphRead			pub trait DepGraphRead 
DepGraphRead for DefId			impl DepGraphRead for DefId 
DepGraphRead for FromId			impl<T> DepGraphRead for FromId<T> 
DepGraphRead for Option			impl<T> DepGraphRead for Option<T>
DepGraphRead for Untracked			impl<T> DepGraphRead for Untracked<T> 
DepGraphRead for ast			impl DepGraphRead for ast::NodeId 
Deref for IndexBuilder			impl<'a, 'b, 'tcx> Deref for IndexBuilder<'a, 'b, 'tcx> 
Deref for PMDSource			impl Deref for PMDSource 
DerefMut for IndexBuilder			impl<'a, 'b, 'tcx> DerefMut for IndexBuilder<'a, 'b, 'tcx> 
EncodeContext			impl<'a, 'tcx> EncodeContext<'a, 'tcx> 
EncodeContext			impl<'a, 'tcx> EncodeContext<'a, 'tcx> 
EncodeContext			pub struct EncodeContext<'a, 'tcx: 'a> 
EncodeVisitor			struct EncodeVisitor<'a, 'b: 'a, 'tcx: 'b> 
Encoder for EncodeContext			impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> 
Entry			pub struct Entry<'tcx> 
EntryKind			impl<'tcx> EntryKind<'tcx> 
EntryKind			pub enum EntryKind<'tcx> 
ExtensionCrate			impl ExtensionCrate 
ExtensionCrate			struct ExtensionCrate 
ExternCrateInfo			struct ExternCrateInfo 
FnData			pub struct FnData 
FromId			pub struct FromId<T>(pub ast::NodeId, pub T);
ImplData			pub struct ImplData<'tcx> 
ImplVisitor			struct ImplVisitor<'a, 'tcx:'a> 
ImportedFileMap			pub struct ImportedFileMap 
Index			impl Index 
Index			pub struct Index 
IndexBuilder			impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> 
IndexBuilder			impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> 
IndexBuilder			pub struct IndexBuilder<'a, 'b: 'a, 'tcx: 'b> 
Lazy			impl<'a, 'tcx: 'a, T: Decodable> Lazy<T> 
Lazy			impl<T> Lazy<T> 
Lazy			pub struct Lazy<T> 
LazySeq			impl<'a, 'tcx: 'a, T: Decodable> LazySeq<T> 
LazySeq			impl<'tcx> LazySeq<Index> 
LazySeq			impl<T> LazySeq<T> 
LazySeq			pub struct LazySeq<T> 
LazyState			pub enum LazyState 
Library			pub struct Library 
LoadResult			enum LoadResult 
MacroDef			pub struct MacroDef 
Macros			pub struct Macros 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a CrateMetadata 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'a, 'tcx, 'tcx>) 
Metadata			impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'a, 'tcx, 'tcx>, [IdRange; 2]) 
Metadata			pub trait Metadata<'a, 'tcx>: Copy 
MetadataBlob			pub enum MetadataBlob 
MetadataBlob			impl<'a, 'tcx> MetadataBlob 
MethodData			pub struct MethodData<'tcx> 
ModData			pub struct ModData 
MyRegistrar			        struct MyRegistrar<'a>(&'a mut Vec<LoadedMacro>);
PMDSource			enum PMDSource 
Registry for MyRegistrar			        impl<'a> Registry for MyRegistrar<'a> 
SideTableEncodingIdVisitor			struct SideTableEncodingIdVisitor<'a, 'b:'a, 'tcx:'b> 
SpecializedDecoder			impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx, T> SpecializedDecoder<LazySeq<T>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<&'tcx Substs<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::BareFnTy<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<Ty<'tcx>>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<Ty<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<ty::AdtDef<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder			impl<'a, 'tcx> SpecializedDecoder<ty::GenericPredicates<'tcx>> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Region> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<CrateNum> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<NodeId> for DecodeContext<'a, 'tcx> 
SpecializedDecoder for DecodeContext			impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx, T> SpecializedEncoder<LazySeq<T>> for EncodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'a, 'tcx> 
SpecializedEncoder			impl<'a, 'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext<'a, 'tcx> 
TableEntry			enum TableEntry<'tcx> 
TraitData			pub struct TraitData<'tcx> 
TraitImpls			pub struct TraitImpls 
Untracked			pub struct Untracked<T>(pub T);
VariantData			pub struct VariantData 
Visibility			trait Visibility 
Visibility for hir			impl Visibility for hir::Visibility 
Visibility for ty			impl Visibility for ty::Visibility 
Visitor for EncodeVisitor			impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> 
Visitor for ImplVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'tcx> 
Visitor for SideTableEncodingIdVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> 
add_extern_mod_stmt_cnum			    pub fn add_extern_mod_stmt_cnum(&self,
add_statically_included_foreign_item			    pub fn add_statically_included_foreign_item(&self, id: ast::NodeId) 
add_used_crate_source			    pub fn add_used_crate_source(&self, src: CrateSource) 
add_used_for_derive_macros			    pub fn add_used_for_derive_macros(&self, i: &ast::Item) 
add_used_library			    pub fn add_used_library(&self, lib: String, kind: NativeLibraryKind) 
add_used_link_args			    pub fn add_used_link_args(&self, args: &str) 
adt_def			    fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>
are_equal_modulo_startpos			fn are_equal_modulo_startpos(fm1: &syntax_pos::FileMap, fm2: &syntax_pos::FileMap) -> bool 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] { unsafe { &*self.data } }
astencode			mod astencode;
bytes_to_words			fn bytes_to_words(b: &[u8]) -> &[u32] 
call_bad_macro_reexport			pub fn call_bad_macro_reexport(a: &Session, b: Span) 
cdata			    fn cdata(self) -> Option<&'a CrateMetadata> { None }
cdata			    fn cdata(self) -> Option<&'a CrateMetadata> { Some(self) }
cdata			    fn cdata(self) -> Option<&'a CrateMetadata> { Some(self.0) }
cdata			    pub fn cdata(&self) -> &'a CrateMetadata 
clone			    fn clone(&self) -> Self { *self }
closure_kind			    fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind
closure_kind			    pub fn closure_kind(&self, closure_id: DefIndex) -> ty::ClosureKind 
closure_ty			    fn closure_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx> 
closure_ty			    pub fn closure_ty(&self, closure_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
crate_dependencies_in_rpo			    pub fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum>
crate_disambiguator			    fn crate_disambiguator(&self, cnum: CrateNum) -> token::InternedString
crate_hash			    fn crate_hash(&self, cnum: CrateNum) -> Svh
crate_matches			    fn crate_matches(&mut self, metadata: &MetadataBlob, libpath: &Path) -> Option<Svh> 
crate_name			    fn crate_name(&self, cnum: CrateNum) -> token::InternedString
crates			    fn crates(&self) -> Vec<CrateNum>
creader			pub mod creader;
csearch			mod csearch;
cstore			pub mod cstore;
custom_coerce_unsized_kind			    fn custom_coerce_unsized_kind(&self, def: DefId)
decode			    pub fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> T 
decode			    pub fn decode<M: Metadata<'a, 'tcx>>(self, meta: M) -> impl Iterator<Item=T> + 'a 
decode_inlined_item			pub fn decode_inlined_item<'a, 'tcx>(cdata: &CrateMetadata,
decoder			    fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> 
decoder			mod decoder;
def_index_for_def_key			    fn def_index_for_def_key(&self,
def_key			    fn def_key(&self, def: DefId) -> hir_map::DefKey 
def_key			    pub fn def_key(&self, id: DefIndex) -> hir_map::DefKey 
def_path			    pub fn def_path(&self, id: DefIndex) -> Option<hir_map::DefPath> 
defaultness			    pub fn defaultness(&self) -> hir::Defaultness 
defid_for_inlined_node			    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId> 
deprecation			    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> 
deref			    fn deref(&self) -> &MetadataBlob 
deref			    fn deref(&self) -> &Self::Target 
deref_mut			    fn deref_mut(&mut self) -> &mut Self::Target 
describe_def			    fn describe_def(&self, def: DefId) -> Option<Def> 
diagnostics			mod diagnostics;
disambiguator			    pub fn disambiguator(&self) -> &str { &self.root.disambiguator }
do_extern_mod_stmt_cnum			    pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>
do_get_used_crates			    pub fn do_get_used_crates(&self, prefer: LinkagePreference)
do_is_statically_included_foreign_item			    pub fn do_is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool 
dump_crates			fn dump_crates(cstore: &CStore) 
dylib_dependency_formats			    fn dylib_dependency_formats(&self, cnum: CrateNum)
dylibname			    fn dylibname(&self) -> (String, String) 
each_child_of_item			    pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F)
emit_lazy_distance			    fn emit_lazy_distance(&mut self, position: usize, min_size: usize)
emit_nil			    fn emit_nil(&mut self) -> Result<(), Self::Error> 
emit_node			    fn emit_node<F: FnOnce(&mut Self, usize) -> R, R>(&mut self, f: F) -> R 
empty			    pub fn empty() -> LazySeq<T> 
encode_addl_info_for_item			    fn encode_addl_info_for_item(&mut self,
encode_attributes			    fn encode_attributes(&mut self, attrs: &[ast::Attribute]) -> LazySeq<ast::Attribute> 
encode_codemap			    fn encode_codemap(&mut self) -> LazySeq<syntax_pos::FileMap> 
encode_crate_deps			    fn encode_crate_deps(&mut self) -> LazySeq<CrateDep> 
encode_crate_root			    fn encode_crate_root(&mut self) -> Lazy<CrateRoot> 
encode_def_key			    fn encode_def_key(&mut self, def_id: DefId) -> Lazy<hir::map::DefKey> 
encode_deprecation			    fn encode_deprecation(&mut self, def_id: DefId) -> Option<Lazy<attr::Deprecation>> 
encode_dylib_dependency_formats			    fn encode_dylib_dependency_formats(&mut self) -> LazySeq<Option<LinkagePreference>> 
encode_enum_variant_info			    fn encode_enum_variant_info(&mut self,
encode_field			    fn encode_field(&mut self,
encode_fields			    fn encode_fields(&mut self,
encode_fn_arg_names			    fn encode_fn_arg_names(&mut self, decl: &hir::FnDecl) -> LazySeq<ast::Name> 
encode_generics			    fn encode_generics(&mut self, def_id: DefId) -> Lazy<ty::Generics<'tcx>> 
encode_impls			    fn encode_impls(&mut self) -> LazySeq<TraitImpls> 
encode_info_for_anon_ty			    fn encode_info_for_anon_ty(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_closure			    fn encode_info_for_closure(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_expr			    fn encode_info_for_expr(&mut self, expr: &hir::Expr) 
encode_info_for_foreign_item			    fn encode_info_for_foreign_item(&mut self,
encode_info_for_impl_item			    fn encode_info_for_impl_item(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_item			    fn encode_info_for_item(&mut self,
encode_info_for_items			    fn encode_info_for_items(&mut self) -> Index 
encode_info_for_mod			    fn encode_info_for_mod(&mut self,
encode_info_for_trait_item			    fn encode_info_for_trait_item(&mut self, def_id: DefId) -> Entry<'tcx> 
encode_info_for_ty			    fn encode_info_for_ty(&mut self, ty: &hir::Ty) 
encode_inherent_implementations			    fn encode_inherent_implementations(&mut self, def_id: DefId) -> LazySeq<DefIndex> 
encode_inlined_item			    pub fn encode_inlined_item(&mut self, ii: InlinedItemRef) -> Lazy<Ast<'tcx>> 
encode_item_type			    fn encode_item_type(&mut self, def_id: DefId) -> Lazy<Ty<'tcx>> 
encode_item_variances			    fn encode_item_variances(&mut self, def_id: DefId) -> LazySeq<ty::Variance> 
encode_lang_items			    fn encode_lang_items(&mut self)
encode_macro_defs			    fn encode_macro_defs(&mut self) -> LazySeq<MacroDef> 
encode_metadata			    fn encode_metadata<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
encode_metadata			pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
encode_mir			    fn encode_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::repr::Mir<'tcx>>> 
encode_native_libraries			    fn encode_native_libraries(&mut self) -> LazySeq<(NativeLibraryKind, String)> 
encode_predicates			    fn encode_predicates(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> 
encode_reachable			    fn encode_reachable(&mut self) -> LazySeq<DefIndex> 
encode_stability			    fn encode_stability(&mut self, def_id: DefId) -> Option<Lazy<attr::Stability>> 
encode_struct_ctor			    fn encode_struct_ctor(&mut self, (adt_def_id, def_id): (DefId, DefId))
encode_with_shorthand			    fn encode_with_shorthand<T, U, M>(&mut self, value: &T, variant: &U, map: M)
encoder			mod encoder;
entry			    fn entry(&self, item_id: DefIndex) -> Entry<'tcx> 
error			    fn error(&mut self, err: &str) -> Self::Error 
existing_match			    fn existing_match(&self, name: &str, hash: Option<&Svh>, kind: PathKind)
extern_crate			    fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>
extract_crate_info			    fn extract_crate_info(&self, i: &ast::Item) -> Option<ExternCrateInfo> 
extract_one			    fn extract_one(&mut self, m: FnvHashMap<PathBuf, PathKind>, flavor: CrateFlavor,
find_commandline_library			    fn find_commandline_library<'b, LOCS> (&mut self, locs: LOCS) -> Option<Library>
find_library_crate			    fn find_library_crate(&mut self) -> Option<Library> 
find_plugin_registrar			    pub fn find_plugin_registrar(&mut self, span: Span, name: &str)
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for CrateFlavor			impl fmt::Display for CrateFlavor 
fn_arg_names			    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>
foo			mod foo 
get_adt_def			    pub fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_attributes			    fn get_attributes(&self, item: &Entry<'tcx>) -> Vec<ast::Attribute> 
get_crate_data			    pub fn get_crate_data(&self, cnum: CrateNum) -> Rc<CrateMetadata> 
get_crate_hash			    pub fn get_crate_hash(&self, cnum: CrateNum) -> Svh 
get_custom_coerce_unsized_kind			    pub fn get_custom_coerce_unsized_kind(&self, id: DefIndex)
get_def			    pub fn get_def(&self, index: DefIndex) -> Option<Def> 
get_deprecation			    pub fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> 
get_dylib_dependency_formats			    pub fn get_dylib_dependency_formats(&self) -> Vec<(CrateNum, LinkagePreference)> 
get_fn_arg_names			    pub fn get_fn_arg_names(&self, id: DefIndex) -> Vec<ast::Name> 
get_generics			    pub fn get_generics(&self, item_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_impl_data			    fn get_impl_data(&self, id: DefIndex) -> ImplData<'tcx> 
get_impl_or_trait_item			    pub fn get_impl_or_trait_item(&self, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_impl_polarity			    pub fn get_impl_polarity(&self, id: DefIndex) -> hir::ImplPolarity 
get_impl_trait			    pub fn get_impl_trait(&self,
get_implementations_for_trait			    pub fn get_implementations_for_trait(&self, filter: Option<DefId>, result: &mut Vec<DefId>) 
get_inherent_implementations_for_type			    pub fn get_inherent_implementations_for_type(&self, id: DefIndex) -> Vec<DefId> 
get_item_attrs			    pub fn get_item_attrs(&self, node_id: DefIndex) -> Vec<ast::Attribute> 
get_item_variances			    pub fn get_item_variances(&self, id: DefIndex) -> Vec<ty::Variance> 
get_lang_items			    pub fn get_lang_items(&self) -> Vec<(DefIndex, usize)> 
get_metadata_section			fn get_metadata_section(target: &Target, flavor: CrateFlavor, filename: &Path)
get_metadata_section_imp			fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Path)
get_missing_lang_items			    pub fn get_missing_lang_items(&self) -> Vec<lang_items::LangItem> 
get_native_libraries			    pub fn get_native_libraries(&self) -> Vec<(NativeLibraryKind, String)> 
get_ordered_deps			        fn get_ordered_deps(cstore: &cstore::CStore)
get_parent_impl			    pub fn get_parent_impl(&self, id: DefIndex) -> Option<DefId> 
get_predicates			    pub fn get_predicates(&self, item_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_reachable_ids			    pub fn get_reachable_ids(&self) -> Vec<DefId> 
get_root			    pub fn get_root(&self) -> CrateRoot 
get_stability			    pub fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> 
get_struct_ctor_def_id			    pub fn get_struct_ctor_def_id(&self, node_id: DefIndex) -> Option<DefId> 
get_struct_field_names			    pub fn get_struct_field_names(&self, id: DefIndex) -> Vec<ast::Name> 
get_super_predicates			    pub fn get_super_predicates(&self, item_id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>)
get_trait_def			    pub fn get_trait_def(&self,
get_trait_of_item			    pub fn get_trait_of_item(&self, id: DefIndex) -> Option<DefId> 
get_type			    pub fn get_type(&self, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> 
get_used_libraries			    pub fn get_used_libraries<'a>(&'a self)
get_used_link_args			    pub fn get_used_link_args<'a>(&'a self) -> &'a RefCell<Vec<String> > 
get_variant			    fn get_variant(&self, item: &Entry<'tcx>, index: DefIndex)
get_variant_kind			    pub fn get_variant_kind(&self, node_id: DefIndex) -> Option<ty::VariantKind> 
get_visibility			    pub fn get_visibility(&self, id: DefIndex) -> ty::Visibility 
has_body			    pub fn has_body(&self) -> bool 
hash			    pub fn hash(&self) -> Svh { self.root.hash }
impl_or_trait_item			    fn impl_or_trait_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
impl_or_trait_items			    fn impl_or_trait_items(&self, def_id: DefId) -> Vec<DefId> 
impl_parent			    fn impl_parent(&self, impl_def: DefId) -> Option<DefId> 
impl_polarity			    fn impl_polarity(&self, def: DefId) -> hir::ImplPolarity
impl_trait_ref			    fn impl_trait_ref<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
implementations_of_trait			    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>
imported_filemaps			    pub fn imported_filemaps(&'a self, local_codemap: &codemap::CodeMap)
index			mod index;
index_builder			mod index_builder;
inherent_implementations_for_type			    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>
inject_allocator_crate			    fn inject_allocator_crate(&mut self) 
inject_dependency_if			    fn inject_dependency_if(&self,
inject_panic_runtime			    fn inject_panic_runtime(&mut self, krate: &ast::Crate) 
into_items			    pub fn into_items(self) -> Index 
is_allocator			    fn is_allocator(&self, cnum: CrateNum) -> bool
is_allocator			    pub fn is_allocator(&self) -> bool 
is_compatible			    pub fn is_compatible(&self) -> bool 
is_compiler_builtins			    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool 
is_compiler_builtins			    pub fn is_compiler_builtins(&self) -> bool 
is_const_fn			    fn is_const_fn(&self, did: DefId) -> bool
is_const_fn			    pub fn is_const_fn(&self, id: DefIndex) -> bool 
is_default_impl			    fn is_default_impl(&self, impl_did: DefId) -> bool 
is_default_impl			    pub fn is_default_impl(&self, impl_id: DefIndex) -> bool 
is_defaulted_trait			    fn is_defaulted_trait(&self, trait_def_id: DefId) -> bool
is_defaulted_trait			    pub fn is_defaulted_trait(&self, trait_id: DefIndex) -> bool 
is_explicitly_linked			    fn is_explicitly_linked(&self, cnum: CrateNum) -> bool
is_extern_item			    fn is_extern_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId) -> bool 
is_extern_item			    pub fn is_extern_item(&self, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool 
is_foreign_item			    fn is_foreign_item(&self, did: DefId) -> bool 
is_foreign_item			    pub fn is_foreign_item(&self, id: DefIndex) -> bool 
is_item_mir_available			    fn is_item_mir_available(&self, def: DefId) -> bool 
is_item_mir_available			    pub fn is_item_mir_available(&self, id: DefIndex) -> bool 
is_no_builtins			    fn is_no_builtins(&self, cnum: CrateNum) -> bool 
is_no_builtins			    pub fn is_no_builtins(&self) -> bool 
is_panic_runtime			    fn is_panic_runtime(&self, cnum: CrateNum) -> bool
is_panic_runtime			    pub fn is_panic_runtime(&self) -> bool 
is_staged_api			    fn is_staged_api(&self, cnum: CrateNum) -> bool
is_staged_api			    pub fn is_staged_api(&self) -> bool 
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool
item_attrs			    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>
item_children			    fn item_children(&self, def_id: DefId) -> Vec<def::Export>
item_generics			    fn item_generics<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_name			    fn item_name(&self, item: &Entry<'tcx>) -> ast::Name 
item_predicates			    fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_super_predicates			    fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_type			    fn item_type<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_variances			    fn item_variances(&self, def: DefId) -> Vec<ty::Variance> 
iter_crate_data			    pub fn iter_crate_data<I>(&self, mut i: I) where
iter_crate_data_origins			    pub fn iter_crate_data_origins<I>(&self, mut i: I) where
iter_enumerated			    pub fn iter_enumerated<'a>(&self, bytes: &'a [u8])
lang_items			    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>
lazy			    pub fn lazy<T: Encodable>(&mut self, value: &T) -> Lazy<T> 
lazy_seq			    fn lazy_seq<I, T>(&mut self, iter: I) -> LazySeq<T>
lazy_seq_ref			    fn lazy_seq_ref<'b, I, T>(&mut self, iter: I) -> LazySeq<T>
list_crate_metadata			    pub fn list_crate_metadata(&self, out: &mut io::Write) -> io::Result<()> 
list_file_metadata			pub fn list_file_metadata(target: &Target, path: &Path,
load			    fn load(&mut self, loader: &mut loader::Context) -> Option<LoadResult> 
load_crate			    fn load_crate(&mut self,
load_derive_macros			    fn load_derive_macros(&mut self,
load_key_map			    pub fn load_key_map(&self, index: LazySeq<Index>) -> FnvHashMap<DefKey, DefIndex> 
load_library_crate			    pub fn load_library_crate(&mut self) -> Library 
load_macros			    fn load_macros(&mut self, extern_crate: &ast::Item, allows_macros: bool) -> Vec<LoadedMacro> 
load_macros			    fn load_macros<'b>(&mut self,
load_macros			pub fn load_macros(loader: &mut CrateLoader, extern_crate: &ast::Item, allows_macros: bool)
loader			pub mod loader;
local_def_id			    fn local_def_id(&self, index: DefIndex) -> DefId 
local_node_for_inlined_defid			    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId> 
lookup			    pub fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> 
macro_import			pub mod macro_import;
main			fn main() 
maybe_entry			    fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> 
maybe_get_item_ast			    fn maybe_get_item_ast<'a>(&'tcx self,
maybe_get_item_ast			    pub fn maybe_get_item_ast(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)
maybe_get_item_mir			    fn maybe_get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
maybe_get_item_mir			    pub fn maybe_get_item_mir(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)
maybe_load_library_crate			    pub fn maybe_load_library_crate(&mut self) -> Option<Library> 
meta_section_name			pub fn meta_section_name(target: &Target) -> &'static str 
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8]
metadata_filename			    fn metadata_filename(&self) -> &str
metadata_section_name			    fn metadata_section_name(&self, target: &Target) -> &str
middle::cstore::CrateLoader for CrateLoader			impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> 
min_size			    pub fn min_size() -> usize 
min_size			    pub fn min_size(length: usize) -> usize 
missing_lang_items			    fn missing_lang_items(&self, cnum: CrateNum)
name			    pub fn name(&self) -> &str { &self.root.name }
native_libraries			    fn native_libraries(&self, cnum: CrateNum) -> Vec<(NativeLibraryKind, String)>
needs_allocator			    pub fn needs_allocator(&self) -> bool 
needs_panic_runtime			    pub fn needs_panic_runtime(&self) -> bool 
new			    pub fn new(sess: &'a Session, cstore: &'a CStore, krate: &ast::Crate, crate_name: &str)
new			    pub fn new(sess: &'a Session,
new			    pub fn new(dep_graph: &DepGraph) -> CStore 
new			    pub fn new(max_index: usize) -> Index 
new			    pub fn new(ecx: &'a mut EncodeContext<'b, 'tcx>) -> Self 
new			    fn new(ar: ArchiveRO) -> Option<ArchiveMetadata> 
next_crate_num			    pub fn next_crate_num(&self) -> CrateNum 
note_crate_name			pub fn note_crate_name(err: &mut DiagnosticBuilder, name: &str) 
opt_used_crate_source			    pub fn opt_used_crate_source(&self, cnum: CrateNum)
original_crate_name			    fn original_crate_name(&self, cnum: CrateNum) -> token::InternedString
panic_strategy			    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy 
panic_strategy			    pub fn panic_strategy(&self) -> PanicStrategy 
paths			    fn paths(&self) -> Vec<PathBuf> 
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>
position			    pub fn position(&self) -> usize 
postprocess			    fn postprocess(&mut self, krate: &ast::Crate) 
process_foreign_mod			    fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod) 
process_item			    fn process_item(&mut self, item: &ast::Item, definitions: &hir_map::Definitions) 
push_dependencies_in_postorder			    pub fn push_dependencies_in_postorder(&self,
raw_bytes			    fn raw_bytes(self) -> &'a [u8] { self.0.raw_bytes() }
raw_bytes			    fn raw_bytes(self) -> &'a [u8] { self.blob.raw_bytes() }
raw_bytes			    fn raw_bytes(self) -> &'a [u8] 
raw_bytes			    fn raw_bytes(self) -> &'a [u8];
reachable_ids			    fn reachable_ids(&self, cnum: CrateNum) -> Vec<DefId>
read			            fn read(&self, tcx: TyCtxt) 
read			    fn read(&self, _tcx: TyCtxt) { }
read			    fn read(&self, tcx: TyCtxt) 
read			    fn read(&self, tcx: TyCtxt);
read_extension_crate			    fn read_extension_crate(&mut self, span: Span, info: &ExternCrateInfo) -> ExtensionCrate 
read_lazy_distance			    fn read_lazy_distance(&mut self, min_size: usize)
read_macros			    pub fn read_macros(&mut self, item: &ast::Item) -> Macros 
read_meta_section_name			pub fn read_meta_section_name(_target: &Target) -> &'static str 
record			    pub fn record(&mut self, def_id: DefId, entry: Lazy<Entry>) 
record			    pub fn record<DATA>(&mut self,
record_index			    pub fn record_index(&mut self, item: DefIndex, entry: Lazy<Entry>) 
register			    fn register(self, creader: &mut CrateReader) 
register_crate			    fn register_crate(&mut self,
register_custom_derive			            fn register_custom_derive(&mut self,
register_native_lib			fn register_native_lib(sess: &Session,
register_statically_included_foreign_items			    fn register_statically_included_foreign_items(&mut self) 
relative_def_path			    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> 
report_load_errs			    pub fn report_load_errs(&mut self) -> ! 
reset			    pub fn reset(&self) 
resolve_crate			    fn resolve_crate(&mut self,
resolve_crate_deps			    fn resolve_crate_deps(&mut self,
reverse_translate_def_id			    fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> 
schema			mod schema;
serialize::UseSpecializedDecodable for Lazy			impl<T> serialize::UseSpecializedDecodable for Lazy<T> {}
serialize::UseSpecializedDecodable for LazySeq			impl<T> serialize::UseSpecializedDecodable for LazySeq<T> {}
serialize::UseSpecializedEncodable for Lazy			impl<T> serialize::UseSpecializedEncodable for Lazy<T> {}
serialize::UseSpecializedEncodable for LazySeq			impl<T> serialize::UseSpecializedEncodable for LazySeq<T> {}
set_crate_data			    pub fn set_crate_data(&self, cnum: CrateNum, data: Rc<CrateMetadata>) 
should_link			fn should_link(i: &ast::Item) -> bool 
simplify			    fn simplify(&self) -> ty::Visibility 
simplify			    fn simplify(&self) -> ty::Visibility;
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx ty::BareFnTy<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx ty::Region, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<Ty<'tcx>>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<LazySeq<T>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<NodeId, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<Span, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<Ty<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<ty::AdtDef<'tcx>, Self::Error> 
specialized_decode			    fn specialized_decode(&mut self) -> Result<ty::GenericPredicates<'tcx>, Self::Error> 
specialized_encode			    fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> 
specialized_encode			    fn specialized_encode(&mut self, predicates: &ty::GenericPredicates<'tcx>)
specialized_encode			    fn specialized_encode(&mut self, seq: &LazySeq<T>) -> Result<(), Self::Error> 
specialized_encode			    fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> 
stability			    fn stability(&self, def: DefId) -> Option<attr::Stability> 
staticlibname			    fn staticlibname(&self) -> (String, String) 
struct_ctor_def_id			    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>
tcx			    fn tcx(self) -> Option<TyCtxt<'a, 'tcx, 'tcx>> { None }
tcx			    fn tcx(self) -> Option<TyCtxt<'a, 'tcx, 'tcx>> { Some(self.1) }
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> 
to_def			    fn to_def(&self, did: DefId) -> Option<Def> 
trait_def			    fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::TraitDef<'tcx>
trait_of_item			    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> 
update_extern_crate			    fn update_extern_crate(&mut self,
used_crate_source			    fn used_crate_source(&self, cnum: CrateNum) -> CrateSource
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, Option<PathBuf>)>
used_libraries			    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>
used_link_args			    fn used_link_args(&self) -> Vec<String>
variant_kind			    fn variant_kind(&self, def_id: DefId) -> Option<ty::VariantKind>
verify_decompressed_encoding_version			fn verify_decompressed_encoding_version(blob: &MetadataBlob, filename: &Path)
verify_no_symbol_conflicts			    fn verify_no_symbol_conflicts(&self,
visibility			    fn visibility(&self, def: DefId) -> ty::Visibility 
visible_parent_map			    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx hir::Expr) 
visit_foreign_item			    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) 
visit_id			    fn visit_id(&mut self, id: ast::NodeId) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_ty			    fn visit_ty(&mut self, ty: &'tcx hir::Ty) 
was_used_for_derive_macros			    pub fn was_used_for_derive_macros(&self, i: &ast::Item) -> bool 
with_def_id			    pub fn with_def_id(&self, def_id: DefId) -> ty::ImplOrTraitItemContainer 
with_position			    fn with_position<F: FnOnce(&mut Self) -> R, R>(&mut self, pos: usize, f: F) -> R 
with_position			    pub fn with_position(position: usize) -> Lazy<T> 
with_position_and_length			    pub fn with_position_and_length(position: usize, len: usize) -> LazySeq<T> 
words_to_bytes			fn words_to_bytes(w: &[u32]) -> &[u8] 
write_index			    pub fn write_index(&self, buf: &mut Cursor<Vec<u8>>) -> LazySeq<Index> 
