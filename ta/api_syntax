::visit::Visitor for PatIdentVisitor			        impl<'v> ::visit::Visitor<'v> for PatIdentVisitor 
A			              impl A{fn get_x(&self, x: i32) {self + inject_self!() + inject_x!() + x;} }",
A			              struct A;
A			            impl A{ my_method!(); }
A			            struct A;
Abi			impl Abi 
Abi			pub enum Abi 
AbiArchitecture			pub enum AbiArchitecture 
AbiData			pub struct AbiData 
Add for BytePos			impl Add for BytePos 
Add for CharPos			impl Add for CharPos 
Add for LockstepIterSize			impl Add for LockstepIterSize 
AngleBracketedParameterData			impl AngleBracketedParameterData 
AngleBracketedParameterData			pub struct AngleBracketedParameterData 
AnnNode			pub enum AnnNode<'a> 
Annotatable			impl Annotatable 
Annotatable			pub enum Annotatable 
Architecture			pub enum Architecture 
Arg			impl Arg 
Arg			pub struct Arg 
Arm			pub struct Arm 
AsmDialect			pub enum AsmDialect 
AssocOp			impl AssocOp 
AssocOp			pub enum AssocOp 
AstBuilder			pub trait AstBuilder 
AstBuilder for ExtCtxt			impl<'a> AstBuilder for ExtCtxt<'a> 
AttrId			pub struct AttrId(pub usize);
AttrMetaMethods			pub trait AttrMetaMethods 
AttrMetaMethods for Attribute			impl AttrMetaMethods for Attribute 
AttrMetaMethods for MetaItem			impl AttrMetaMethods for MetaItem 
AttrMetaMethods for P			impl AttrMetaMethods for P<MetaItem> 
AttrStyle			pub enum AttrStyle 
AttributeGate			pub enum AttributeGate 
AttributeMethods			pub trait AttributeMethods 
AttributeMethods for Attribute			impl AttributeMethods for Attribute 
AttributeType			pub enum AttributeType 
Attribute_			pub struct Attribute_ 
AttributesExt			pub trait AttributesExt 
AttributesExt for Vec			impl AttributesExt for Vec<Attribute> 
BareFnTy			pub struct BareFnTy 
BasicEmitter			impl BasicEmitter 
BasicEmitter			pub struct BasicEmitter 
BeginToken			pub struct BeginToken 
BinOpToken			pub enum BinOpToken 
BinOp_			impl BinOp_ 
BinOp_			pub enum BinOp_ 
BindingMode			pub enum BindingMode 
Block			pub struct Block 
BlockCheckMode			pub enum BlockCheckMode 
BlockInfo			impl BlockInfo 
BlockInfo			pub struct BlockInfo 
Borrow for RcStr			impl Borrow<str> for RcStr 
BoundParsingMode			pub enum BoundParsingMode 
BreakToken			pub struct BreakToken 
Breaks			pub enum Breaks 
BytePos			pub struct BytePos(pub u32);
CaptureClause			pub enum CaptureClause 
CfgAttrFolder			struct CfgAttrFolder<'a, T> 
CfgDiag			pub trait CfgDiag 
CfgDiag for CfgDiagReal			impl<'a, 'b> CfgDiag for CfgDiagReal<'a, 'b> 
CfgDiag for CfgDiagSilent			impl CfgDiag for CfgDiagSilent 
CfgDiagReal			pub struct CfgDiagReal<'a, 'b> 
CfgDiagSilent			struct CfgDiagSilent 
CharPos			pub struct CharPos(pub usize);
Clone for P			impl<T: 'static + Clone> Clone for P<T> 
Clone for P			impl<T: Clone> Clone for P<[T]> 
CodeMap			impl CodeMap 
CodeMap			pub struct CodeMap 
ColorConfig			impl ColorConfig 
ColorConfig			pub enum ColorConfig 
Comment			pub struct Comment 
CommentStyle			pub enum CommentStyle 
Constness			pub enum Constness 
Context			struct Context<'a, F> where F: FnMut(&[ast::Attribute]) -> bool 
Context			impl<'a> Context<'a> 
Context			struct Context<'a> 
Crate			pub struct Crate 
CrateInjector			struct CrateInjector 
CurrentCommentAndLiteral			pub struct CurrentCommentAndLiteral 
Debug for P			impl<T: Debug> Debug for P<T> 
Decl			impl Decl 
Decl_			pub enum Decl_ 
Decodable for BytePos			impl Decodable for BytePos 
Decodable for FileMap			impl Decodable for FileMap 
Decodable for Ident			impl Decodable for Ident 
Decodable for InternedString			impl Decodable for InternedString 
Decodable for Name			impl Decodable for Name 
Decodable for P			impl<T: 'static + Decodable> Decodable for P<T> 
Decodable for P			impl<T: Decodable> Decodable for P<[T]> 
Decodable for Span			impl Decodable for Span 
Default for Generics			impl Default for Generics 
Default for P			impl<T> Default for P<[T]> 
DelimToken			pub enum DelimToken 
Delimited			impl Delimited 
Delimited			pub struct Delimited 
Deprecation			pub struct Deprecation 
Deref for InternedString			impl Deref for InternedString 
Deref for P			impl<T> Deref for P<T> 
Deref for P			impl<T> Deref for P<[T]> 
Deref for RcStr			impl Deref for RcStr 
Destination			enum Destination 
Destination			impl Destination 
Diagnostic			impl<'a> Diagnostic<'a> 
Diagnostic			struct Diagnostic<'a> 
DiagnosticBuilder			impl<'a> DiagnosticBuilder<'a> 
DiagnosticBuilder			pub struct DiagnosticBuilder<'a> 
DiagnosticCode			impl DiagnosticCode 
DiagnosticCode			struct DiagnosticCode 
DiagnosticSpan			impl DiagnosticSpan 
DiagnosticSpan			struct DiagnosticSpan 
Display for P			impl<T: Display> Display for P<T> 
DistinctSources			pub struct DistinctSources 
Drop for DiagnosticBuilder			impl<'a> Drop for DiagnosticBuilder<'a> 
DummyResult			impl DummyResult 
DummyResult			pub struct DummyResult 
Emitter			pub trait Emitter 
Emitter for BasicEmitter			impl Emitter for BasicEmitter 
Emitter for EmitterWriter			impl Emitter for EmitterWriter 
Emitter for JsonEmitter			impl Emitter for JsonEmitter 
EmitterWriter			impl EmitterWriter 
EmitterWriter			pub struct EmitterWriter 
Encodable for BytePos			impl Encodable for BytePos 
Encodable for FileMap			impl Encodable for FileMap 
Encodable for Ident			impl Encodable for Ident 
Encodable for InternedString			impl Encodable for InternedString 
Encodable for Name			impl Encodable for Name 
Encodable for P			impl<T: Encodable> Encodable for P<T> 
Encodable for P			impl<T: Encodable> Encodable for P<[T]> 
Encodable for Span			impl Encodable for Span 
Entries			              struct Entries;
EntryPointCleaner			struct EntryPointCleaner 
EntryPointType			pub enum EntryPointType 
EnumDef			pub struct EnumDef 
Eq for RcStr			impl Eq for RcStr {}
Eq for Span			impl Eq for Span {}
ErrorInfo			pub struct ErrorInfo 
ErrorLocation			impl ErrorLocation 
ErrorLocation			pub struct ErrorLocation 
ErrorMetadata			pub struct ErrorMetadata 
ExpandResult			    struct ExpandResult<'a> 
ExpansionConfig			impl<'feat> ExpansionConfig<'feat> 
ExpansionConfig			pub struct ExpansionConfig<'feat> 
ExplicitBug			pub struct ExplicitBug;
ExplicitSelf_			pub enum ExplicitSelf_ 
ExpnFormat			pub enum ExpnFormat 
ExpnId			impl ExpnId 
ExpnId			pub struct ExpnId(u32);
ExpnInfo			pub struct ExpnInfo 
Expr			impl Expr 
Expr			pub struct Expr 
Expr_			pub enum Expr_ 
ExtCtxt			impl<'a> ExtCtxt<'a> 
ExtCtxt			pub struct ExtCtxt<'a> 
ExtParseUtils			    pub trait ExtParseUtils 
ExtParseUtils for ExtCtxt			    impl<'a> ExtParseUtils for ExtCtxt<'a> 
Extend for SmallVector			impl<T> Extend<T> for SmallVector<T> 
FatalError			pub struct FatalError;
Features			impl Features 
Features			pub struct Features 
Field			pub struct Field 
FieldPat			pub struct FieldPat 
FileLines			pub struct FileLines 
FileLoader			pub trait FileLoader 
FileLoader for RealFileLoader			impl FileLoader for RealFileLoader 
FileMap			impl FileMap 
FileMap			pub struct FileMap 
FileMapAndBytePos			pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }
FileMapAndLine			pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: usize }
FirstSets			impl FirstSets 
FirstSets			struct FirstSets 
Fixity			pub enum Fixity 
FloatTy			impl FloatTy 
FloatTy			pub enum FloatTy 
FnDecl			pub struct FnDecl 
FnKind			pub enum FnKind<'a> 
Folder			pub trait Folder : Sized 
Folder for IdentRenamer			impl<'a> Folder for IdentRenamer<'a> 
Folder for MacroExpander			impl<'a, 'b> Folder for MacroExpander<'a, 'b> 
Folder for Marker			impl Folder for Marker 
Folder for PatIdentRenamer			impl<'a> Folder for PatIdentRenamer<'a> 
Folder for ToZzIdentFolder			    impl Folder for ToZzIdentFolder 
ForeignItem			pub struct ForeignItem 
ForeignItem_			impl ForeignItem_ 
ForeignItem_			pub enum ForeignItem_ 
ForeignMod			pub struct ForeignMod 
From			impl From<Option<ThinAttributes>> for LhsExpr 
From			impl From<P<Expr>> for LhsExpr 
From			impl<T> From<Vec<T>> for P<[T]> 
FromIterator for P			impl<T> FromIterator<T> for P<[T]> 
FromIterator for SmallVector			impl<T> FromIterator<T> for SmallVector<T> 
FromStr for Mode			impl FromStr for Mode 
FunctionRetTy			impl FunctionRetTy 
FunctionRetTy			pub enum FunctionRetTy 
GateIssue			pub enum GateIssue 
GatedCfg			impl GatedCfg 
GatedCfg			pub struct GatedCfg 
GatedCfgAttr			impl GatedCfgAttr 
GatedCfgAttr			pub enum GatedCfgAttr 
Generics			impl Generics 
Generics			pub struct Generics 
GetConsoleMode			        fn GetConsoleMode(hConsoleHandle: HANDLE,
GetStdHandle			        fn GetStdHandle(which: DWORD) -> HANDLE;
Handler			impl Handler 
Handler			pub struct Handler 
HasTestSignature			enum HasTestSignature 
Hash for Ident			impl Hash for Ident 
IdRange			impl IdRange 
IdRange			pub struct IdRange 
IdRangeComputingVisitor			impl IdRangeComputingVisitor 
IdRangeComputingVisitor			pub struct IdRangeComputingVisitor 
IdVisitingOperation			pub trait IdVisitingOperation 
IdVisitingOperation for IdRangeComputingVisitor			impl IdVisitingOperation for IdRangeComputingVisitor 
IdVisitor			impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> 
IdVisitor			pub struct IdVisitor<'a, O:'a> 
Ident			impl Ident 
Ident			pub struct Ident 
IdentFinder			    struct IdentFinder 
IdentMacroExpander			pub trait IdentMacroExpander 
IdentMacroExpander for F			impl<F> IdentMacroExpander for F
IdentRenamer			pub struct IdentRenamer<'a> 
IdentStyle			pub enum IdentStyle 
ImplItem			pub struct ImplItem 
ImplItemKind			pub enum ImplItemKind 
ImplPolarity			pub enum ImplPolarity 
InlineAsm			pub struct InlineAsm 
InlineAsmOutput			pub struct InlineAsmOutput 
InlineAttr			pub enum InlineAttr 
IntSign			pub trait IntSign 
IntTy			impl IntTy 
IntTy			pub enum IntTy 
IntType			impl IntType 
IntType			pub enum IntType 
InternedString			impl InternedString 
InternedString			pub struct InternedString 
Interner			impl<T: Eq + Hash + Clone + 'static> Interner<T> 
Interner			pub struct Interner<T> 
Into			impl<T> Into<Vec<T>> for P<[T]> 
IntoIter			pub struct IntoIter<T> 
IntoIterRepr			enum IntoIterRepr<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a P<[T]> 
IntoIterator for P			impl<T> IntoIterator for P<[T]> 
IntoIterator for SmallVector			impl<T> IntoIterator for SmallVector<T> 
Item			impl Item 
Item			pub struct Item 
Item_			impl Item_ 
Item_			pub enum Item_ 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
JsonEmitter			impl JsonEmitter 
JsonEmitter			pub struct JsonEmitter 
Keyword			        impl Keyword 
Keyword			        pub enum Keyword 
KleeneOp			pub enum KleeneOp 
Level			impl Level 
Level			pub enum Level 
LhsExpr			pub enum LhsExpr 
Lifetime			pub struct Lifetime 
LifetimeDef			pub struct LifetimeDef 
LineInfo			pub struct LineInfo 
Lit			impl Lit 
Lit			pub enum Lit 
LitIntType			pub enum LitIntType 
Lit_			impl Lit_ 
Lit_			pub enum Lit_ 
Literal			pub struct Literal 
Loc			pub struct Loc 
LocWithOpt			pub struct LocWithOpt 
Local			impl Local 
Local			pub struct Local 
LockstepIterSize			enum LockstepIterSize 
MacEager			        impl MacEager 
MacEager			        pub struct MacEager 
MacResult			pub trait MacResult 
MacResult for DummyResult			impl MacResult for DummyResult 
MacResult for MacEager			impl MacResult for MacEager 
MacResult for ParserAnyMacro			impl<'a> MacResult for ParserAnyMacro<'a> 
MacStmtStyle			pub enum MacStmtStyle 
Mac_			pub struct Mac_ 
MacroDef			pub struct MacroDef 
MacroExpander			impl<'a, 'b> MacroExpander<'a, 'b> 
MacroExpander			pub struct MacroExpander<'a, 'b:'a> 
MacroExterminator			struct MacroExterminator<'a>
MacroRulesMacroExpander			struct MacroRulesMacroExpander 
MacroVisitor			struct MacroVisitor<'a> 
MalformedCodemapPositions			pub struct MalformedCodemapPositions 
MapChainFrame			struct MapChainFrame 
Marker			struct Marker { mark: Mrk }
MatcherPos			pub struct MatcherPos 
MatcherTtFrame			struct MatcherTtFrame 
MetaItem_			pub enum MetaItem_ 
MethodSig			pub struct MethodSig 
Mod			pub struct Mod 
Mode			enum Mode 
ModulePath			pub struct ModulePath 
ModulePathError			pub struct ModulePathError 
ModulePathSuccess			pub struct ModulePathSuccess 
MoveMap			impl<T> MoveMap<T> for ::ptr::P<[T]> 
MoveMap			pub trait MoveMap<T>: Sized 
MoveMap for SmallVector			impl<T> MoveMap<T> for SmallVector<T> 
MoveMap for Vec			impl<T> MoveMap<T> for Vec<T> 
MultiByteChar			pub struct MultiByteChar 
MultiItemDecorator			pub trait MultiItemDecorator 
MultiItemDecorator for F			impl<F> MultiItemDecorator for F
MultiItemModifier			pub trait MultiItemModifier 
MultiItemModifier for F			impl<F> MultiItemModifier for F
MutTy			pub struct MutTy 
Mutability			pub enum Mutability 
Name			impl Name 
Name			pub struct Name(pub u32);
NameAndSpan			impl NameAndSpan 
NameAndSpan			pub struct NameAndSpan 
NamedMatch			pub enum NamedMatch 
NoAnn			pub struct NoAnn;
NodeCounter			impl NodeCounter 
NodeCounter			pub struct NodeCounter 
NodeIdAssigner			pub trait NodeIdAssigner 
Nonterminal			pub enum Nonterminal 
ObsoleteSyntax			pub enum ObsoleteSyntax 
OnFail			impl OnFail 
OnFail			struct OnFail 
OnFailAction			enum OnFailAction { Warn, Error, DoNothing }
Ord for GatedCfgAttr			impl Ord for GatedCfgAttr 
Ord for RcStr			impl Ord for RcStr 
Os			pub enum Os 
P			impl<T: 'static> P<T> 
P			impl<T> P<[T]> 
P			pub fn P<T: 'static>(value: T) -> P<T> 
P			pub struct P<T: ?Sized> 
ParenthesizedParameterData			pub struct ParenthesizedParameterData 
ParsePub			pub enum ParsePub 
ParseResult			pub enum ParseResult<T> 
ParseSess			impl ParseSess 
ParseSess			pub struct ParseSess 
Parser			impl<'a> Parser<'a> 
Parser			impl<'a> Parser<'a> 
Parser			pub struct Parser<'a> 
ParserAnyMacro			impl<'a> ParserAnyMacro<'a> 
ParserAnyMacro			struct ParserAnyMacro<'a> 
ParserObsoleteMethods			pub trait ParserObsoleteMethods 
ParserObsoleteMethods for parser			impl<'a> ParserObsoleteMethods for parser::Parser<'a> 
PartialEq			impl<'a> PartialEq<InternedString> for &'a str 
PartialEq for Ident			impl PartialEq for Ident 
PartialEq for InternedString			impl<'a> PartialEq<&'a str> for InternedString 
PartialEq for MetaItem_			impl PartialEq for MetaItem_ 
PartialEq for Span			impl PartialEq for Span 
PartialOrd for GatedCfgAttr			impl PartialOrd for GatedCfgAttr 
Pat			pub struct Pat 
PatIdentFinder			struct PatIdentFinder 
PatIdentRenamer			pub struct PatIdentRenamer<'a> 
PatIdentVisitor			        struct PatIdentVisitor 
Pat_			pub enum Pat_ 
Path			pub struct Path 
PathExprFinderContext			    struct PathExprFinderContext 
PathListItem_			impl PathListItem_ 
PathListItem_			pub enum PathListItem_ 
PathParameters			impl PathParameters 
PathParameters			pub enum PathParameters 
PathParsingMode			pub enum PathParsingMode 
PathSegment			pub struct PathSegment 
PolyTraitRef			pub struct PolyTraitRef 
Pos			pub trait Pos 
Pos for BytePos			impl Pos for BytePos 
Pos for CharPos			impl Pos for CharPos 
PostExpansionVisitor			impl<'a> PostExpansionVisitor<'a> 
PostExpansionVisitor			struct PostExpansionVisitor<'a> 
PpAnn			pub trait PpAnn 
PpAnn for NoAnn			impl PpAnn for NoAnn {}
PreludeInjector			struct PreludeInjector 
PrimTy			pub enum PrimTy 
PrintStackBreak			pub enum PrintStackBreak 
PrintStackElem			pub struct PrintStackElem 
PrintState			pub trait PrintState<'a> 
PrintState for State			impl<'a> PrintState<'a> for State<'a> 
Printer			impl<'a> Printer<'a> 
Printer			pub struct Printer<'a> 
QSelf			pub struct QSelf 
RcStr			impl RcStr 
RcStr			pub struct RcStr 
Reader			pub trait Reader 
Reader for StringReader			impl<'a> Reader for StringReader<'a> 
Reader for TtReader			impl<'a> Reader for TtReader<'a> 
RealFileLoader			pub struct RealFileLoader;
Registry			impl Registry 
Registry			pub struct Registry 
RenderSpan			impl RenderSpan 
RenderSpan			pub enum RenderSpan 
ReprAttr			impl ReprAttr 
ReprAttr			pub enum ReprAttr 
RustcDeprecation			pub struct RustcDeprecation 
SCTable			pub struct SCTable 
SeqSep			pub struct SeqSep 
SequenceRepetition			pub struct SequenceRepetition 
ShouldPanic			enum ShouldPanic 
ShowSpanVisitor			struct ShowSpanVisitor<'a> 
Sign			impl Sign 
Sign			pub enum Sign 
Sink			        struct Sink(Arc<Mutex<Vec<u8>>>);
SmallVector			impl<T> SmallVector<T> 
SmallVector			pub struct SmallVector<T> 
SmallVectorRepr			enum SmallVectorRepr<T> 
Span			impl Span 
Span			pub struct Span 
SpanLinesError			pub enum SpanLinesError 
SpanSnippetError			pub enum SpanSnippetError 
Spanned			pub struct Spanned<T> 
SpecialMacroVar			impl SpecialMacroVar 
SpecialMacroVar			pub enum SpecialMacroVar 
Stability			pub struct Stability 
StabilityLevel			impl StabilityLevel 
StabilityLevel			pub enum StabilityLevel 
State			impl<'a> State<'a> 
State			pub struct State<'a> 
Status			enum Status 
StmtExprAttrFeatureVisitor			struct StmtExprAttrFeatureVisitor<'a, 'b> 
Stmt_			impl Stmt_ 
Stmt_			pub enum Stmt_ 
StrInterner			impl StrInterner 
StrInterner			pub struct StrInterner 
StrStyle			pub enum StrStyle 
StringReader			impl<'a> StringReader<'a> 
StringReader			pub struct StringReader<'a> 
StructFieldKind			impl StructFieldKind 
StructFieldKind			pub enum StructFieldKind 
StructField_			impl StructField_ 
StructField_			pub struct StructField_ 
Sub for BytePos			impl Sub for BytePos 
Sub for CharPos			impl Sub for CharPos 
SubDiagnostic			struct SubDiagnostic 
SyntaxContext			pub struct SyntaxContext(pub u32);
SyntaxContext_			pub enum SyntaxContext_ 
SyntaxEnv			impl SyntaxEnv 
SyntaxEnv			pub struct SyntaxEnv 
SyntaxExtension			pub enum SyntaxExtension 
TTMacroExpander			pub trait TTMacroExpander 
TTMacroExpander for F			impl<F> TTMacroExpander for F
TTMacroExpander for MacroRulesMacroExpander			impl TTMacroExpander for MacroRulesMacroExpander 
Test			struct Test 
TestCtxt			struct TestCtxt<'a> 
TestHarnessGenerator			struct TestHarnessGenerator<'a> 
TestSC			    enum TestSC 
ThinAttributesExt			pub trait ThinAttributesExt 
ThinAttributesExt for ThinAttributes			impl ThinAttributesExt for ThinAttributes 
ToTokens			            impl ToTokens for 
ToTokens			            impl ToTokens for [
ToTokens			    impl ToTokens for () 
ToTokens			    pub trait ToTokens 
ToTokens for Option			    impl<T: ToTokens> ToTokens for Option<T> 
ToTokens for P			    impl ToTokens for P<ast::Block> 
ToTokens for P			    impl ToTokens for P<ast::Expr> 
ToTokens for P			    impl ToTokens for P<ast::ImplItem> 
ToTokens for P			    impl ToTokens for P<ast::Item> 
ToTokens for P			    impl ToTokens for P<ast::MetaItem> 
ToTokens for P			    impl ToTokens for P<ast::Pat> 
ToTokens for P			    impl ToTokens for P<ast::Stmt> 
ToTokens for P			    impl ToTokens for P<ast::TraitItem> 
ToTokens for Spanned			    impl<T: ToTokens> ToTokens for Spanned<T> 
ToTokens for TokenTree			    impl ToTokens for TokenTree 
ToTokens for Vec			    impl<T: ToTokens> ToTokens for Vec<T> 
ToTokens for ast			    impl ToTokens for ast::Arg 
ToTokens for ast			    impl ToTokens for ast::Arm 
ToTokens for ast			    impl ToTokens for ast::Attribute 
ToTokens for ast			    impl ToTokens for ast::Block 
ToTokens for ast			    impl ToTokens for ast::Generics 
ToTokens for ast			    impl ToTokens for ast::Ident 
ToTokens for ast			    impl ToTokens for ast::Lit 
ToTokens for ast			    impl ToTokens for ast::Path 
ToTokens for ast			    impl ToTokens for ast::Ty 
ToTokens for ast			    impl ToTokens for ast::WhereClause 
ToTokens for bool			    impl ToTokens for bool 
ToTokens for char			    impl ToTokens for char 
ToTokens for str			    impl ToTokens for str 
ToZzIdentFolder			    struct ToZzIdentFolder;
Token			impl Token 
Token			pub enum Token 
Token			impl Token 
Token			pub enum Token 
TokenAndSpan			pub struct TokenAndSpan 
TokenSet			impl TokenSet 
TokenSet			struct TokenSet 
TokenTree			impl TokenTree 
TokenTree			pub enum TokenTree 
TokenTreeOrTokenTreeVec			enum TokenTreeOrTokenTreeVec 
TokenTreeOrTokenTreeVec			impl TokenTreeOrTokenTreeVec 
TokenType			impl TokenType 
TokenType			pub enum TokenType 
TraitBoundModifier			pub enum TraitBoundModifier 
TraitItem			pub struct TraitItem 
TraitItem_			pub enum TraitItem_ 
TraitRef			pub struct TraitRef 
TtFrame			struct TtFrame 
TtReader			pub struct TtReader<'a> 
Ty			pub struct Ty 
TyParam			pub struct TyParam 
TyParamBound			pub enum TyParamBound 
Ty_			pub enum Ty_ 
TypeBinding			pub struct TypeBinding 
UintTy			impl UintTy 
UintTy			pub enum UintTy 
UnOp			impl UnOp 
UnOp			pub enum UnOp 
UnsafeSource			pub enum UnsafeSource 
Unsafety			pub enum Unsafety 
UnstableFeatures			pub enum UnstableFeatures 
VariantData			impl VariantData 
VariantData			pub enum VariantData 
Variant_			pub struct Variant_ 
ViewPath_			pub enum ViewPath_ 
Visibility			impl Visibility 
Visibility			pub enum Visibility 
Visitor			pub trait Visitor<'v> : Sized 
Visitor for IdVisitor			impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> 
Visitor for IdentFinder			    impl<'v> Visitor<'v> for IdentFinder 
Visitor for MacroExterminator			impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> 
Visitor for MacroVisitor			impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> 
Visitor for NodeCounter			impl<'v> Visitor<'v> for NodeCounter 
Visitor for PatIdentFinder			impl<'v> Visitor<'v> for PatIdentFinder 
Visitor for PathExprFinderContext			    impl<'v> Visitor<'v> for PathExprFinderContext 
Visitor for PostExpansionVisitor			impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> 
Visitor for ShowSpanVisitor			impl<'a, 'v> Visitor<'v> for ShowSpanVisitor<'a> 
WhereBoundPredicate			pub struct WhereBoundPredicate 
WhereClause			pub struct WhereClause 
WhereEqPredicate			pub struct WhereEqPredicate 
WherePredicate			pub enum WherePredicate 
WhereRegionPredicate			pub struct WhereRegionPredicate 
WithAttrs			pub trait WithAttrs 
WithAttrs for P			impl WithAttrs for P<Decl> 
WithAttrs for P			impl WithAttrs for P<Expr> 
WithAttrs for P			impl WithAttrs for P<Item> 
WithAttrs for P			impl WithAttrs for P<Local> 
WithAttrs for P			impl WithAttrs for P<Stmt> 
Write for Destination			impl Write for Destination 
Write for Sink			        impl Write for Sink 
__test			mod __test 
a			              fn a(){g!(z)}",
abi			pub mod abi;
abort_if_errors			    pub fn abort_if_errors(&self) 
abort_if_errors			fn abort_if_errors<'a, T>(result: PResult<'a, T>, p: &Parser) -> T 
abort_if_errors			    pub fn abort_if_errors(&self) 
add			    pub fn add(&mut self, id: NodeId) 
add			    fn add(self, rhs: BytePos) -> BytePos 
add			    fn add(self, rhs: CharPos) -> CharPos 
add			    fn add(self, other: LockstepIterSize) -> LockstepIterSize 
add_all			    fn add_all(&mut self, other: &Self) 
add_one			    fn add_one(&mut self, tok: (Span, Token)) 
add_one_maybe			    fn add_one_maybe(&mut self, tok: (Span, Token)) 
advance_left			    pub fn advance_left(&mut self) -> io::Result<()> 
advance_right			    pub fn advance_right(&mut self) 
advance_token			    fn advance_token(&mut self) 
all_names			pub fn all_names() -> Vec<&'static str> 
all_whitespace			fn all_whitespace(s: &str, col: CharPos) -> Option<usize> 
and_then			    pub fn and_then<U, F>(self, f: F) -> U where
any			    pub fn any(sp: Span) -> Box<MacResult+'static> 
append			    fn append(mut self, attrs: Self) -> Self;
append			    fn append(self, attrs: ThinAttributes) -> Self 
apply_mark			pub fn apply_mark(m: Mrk, ctxt: SyntaxContext) -> SyntaxContext 
apply_mark_internal			fn apply_mark_internal(m: Mrk, ctxt: SyntaxContext, table: &SCTable) -> SyntaxContext 
apply_rename			pub fn apply_rename(id: Ident, to:Name,
apply_rename_internal			fn apply_rename_internal(id: Ident,
apply_renames			pub fn apply_renames(renames: &RenameList, ctxt: SyntaxContext) -> SyntaxContext 
arg			    fn arg(&self, span: Span, ident: ast::Ident, ty: P<ast::Ty>) -> ast::Arg 
arg			    fn arg(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> ast::Arg;
arg_to_string			pub fn arg_to_string(arg: &ast::Arg) -> String 
arm			    fn arm(&self, _span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm 
arm			    fn arm(&self, span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm;
arm_to_string			pub fn arm_to_string(arm: &ast::Arm) -> String 
arm_unreachable			    fn arm_unreachable(&self, span: Span) -> ast::Arm 
arm_unreachable			    fn arm_unreachable(&self, span: Span) -> ast::Arm;
as_attr_slice			    fn as_attr_slice(&self) -> &[Attribute] 
as_attr_slice			    fn as_attr_slice(&self) -> &[Attribute];
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [T] 
as_slice			    pub fn as_slice(&self) -> &[T] 
as_str			    pub fn as_str(self) -> token::InternedString 
as_str			    pub fn as_str(self) -> &'static str 
assert_encodable			        fn assert_encodable<T: serialize::Encodable>() {}
ast			pub mod ast;
ast_util			pub mod ast_util;
attr			pub mod attr;
attr			pub mod attr;
attr_to_string			pub fn attr_to_string(attr: &ast::Attribute) -> String 
attribute			    fn attribute(&self, sp: Span, mi: P<ast::MetaItem>) -> ast::Attribute 
attribute			    fn attribute(&self, sp: Span, mi: P<ast::MetaItem>) -> ast::Attribute;
attribute_to_string			pub fn attribute_to_string(attr: &ast::Attribute) -> String 
attrs			    pub fn attrs(&self) -> &[Attribute] 
attrs			    pub fn attrs(&self) -> &[ast::Attribute] 
automatic_renaming			    fn automatic_renaming () 
backtrace			    pub fn backtrace(&self) -> ExpnId { self.backtrace }
base			    pub mod base;
base::MacResult for ExpandResult			    impl<'a> base::MacResult for ExpandResult<'a> 
basic			    pub fn basic() -> JsonEmitter 
bclose			    pub fn bclose(&mut self, span: codemap::Span) -> io::Result<()> 
bclose_			    pub fn bclose_(&mut self, span: codemap::Span,
bclose_maybe_open			    pub fn bclose_maybe_open(&mut self, span: codemap::Span,
bindings			    pub fn bindings(&self) -> Vec<&P<TypeBinding>> 
binop			    fn binop(&mut self, op: token::BinOpToken) -> token::Token 
binop_to_string			pub fn binop_to_string(op: BinOpToken) -> &'static str 
bit_width			    pub fn bit_width(&self) -> Option<usize> 
bit_width			    pub fn bit_width(&self) -> usize 
block			    fn block(&self, span: Span, stmts: Vec<P<ast::Stmt>>,
block_all			    fn block_all(&self, span: Span,
block_all			    fn block_all(&self,
block_expr			    fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> 
block_expr			    fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block>;
block_to_string			pub fn block_to_string(blk: &ast::Block) -> String 
bopen			    pub fn bopen(&mut self) -> io::Result<()> 
borrow			    fn borrow(&self) -> &str 
bounds_to_string			pub fn bounds_to_string(bounds: &[ast::TyParamBound]) -> String 
boxes			    fn boxes(&mut self) -> &mut Vec<pp::Breaks> 
boxes			    fn boxes(&mut self) -> &mut Vec<pp::Breaks>;
break_offset			pub fn break_offset(p: &mut Printer, n: usize, off: isize) -> io::Result<()> 
break_offset_if_not_bol			    pub fn break_offset_if_not_bol(&mut self, n: usize,
bt_pop			    pub fn bt_pop(&mut self) 
bt_push			    pub fn bt_push(&mut self, ei: ExpnInfo) 
buf_str			pub fn buf_str(toks: &[Token],
buffer_length			    pub fn buffer_length(&mut self) -> isize 
bug			    pub fn bug(&self, msg: &str) -> ! 
bug			    pub fn bug(&self, msg: &str) -> ! 
bug			    pub fn bug(&self, m: &str) -> ! 
build			    pub mod build;
build_recur			        fn build_recur(sets: &mut FirstSets, tts: &[TokenTree]) -> TokenSet 
builtin_normal_expander			    fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension 
bump			    pub fn bump(&mut self) 
bump			    pub fn bump(&mut self) 
bump_and_get			    pub fn bump_and_get(&mut self) -> token::Token 
bump_err_count			    pub fn bump_err_count(&self) 
byte_lit			pub fn byte_lit(lit: &str) -> (u8, usize) 
byte_offset			    fn byte_offset(&self, pos: BytePos) -> BytePos 
byte_str_lit			pub fn byte_str_lit(lit: &str) -> Rc<Vec<u8>> 
bytepos_to_file_charpos			    pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos 
call_site			    pub fn call_site(&self) -> Span 
can_be_followed_by_any			fn can_be_followed_by_any(frag: &str) -> bool 
can_begin_expr			    pub fn can_begin_expr(&self) -> bool 
cancel			    pub fn cancel(&mut self) 
cancel			    pub fn cancel(&mut self, err: &mut DiagnosticBuilder) 
cancelled			    pub fn cancelled(&self) -> bool 
cbox			pub fn cbox(p: &mut Printer, indent: usize) -> io::Result<()> 
cbox			    pub fn cbox(&mut self, u: usize) -> io::Result<()> 
cfg			    pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }
cfg_matches			pub fn cfg_matches<T: CfgDiag>(cfgs: &[P<MetaItem>],
char_at			pub fn char_at(s: &str, byte: usize) -> char 
char_lit			pub fn char_lit(lit: &str) -> (char, isize) 
character_a			    fn character_a() 
character_escaped			    fn character_escaped() 
character_space			    fn character_space() 
check			    pub fn check(&mut self, tok: &token::Token) -> bool 
check_and_emit			    fn check_and_emit(&self,
check_and_emit			    pub fn check_and_emit(&self,
check_asts_encodable			    fn check_asts_encodable() 
check_attribute			    fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) 
check_crate			pub fn check_crate(cm: &CodeMap, span_handler: &Handler, krate: &ast::Crate,
check_crate_inner			fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,
check_crate_macros			pub fn check_crate_macros(cm: &CodeMap, span_handler: &Handler, krate: &ast::Crate)
check_expr_bin_needs_paren			    pub fn check_expr_bin_needs_paren(&mut self, sub_expr: &ast::Expr,
check_float_base			    fn check_float_base(&mut self, start_bpos: BytePos, last_bpos: BytePos, base: usize) 
check_for_box_syntax			pub fn check_for_box_syntax(f: Option<&Features>, diag: &Handler, span: Span) 
check_for_erroneous_unit_struct_expecting			    pub fn check_for_erroneous_unit_struct_expecting(&mut self,
check_for_gated_stmt_expr_attributes			fn check_for_gated_stmt_expr_attributes(krate: &ast::Crate,
check_for_macros			pub fn check_for_macros(sess: &parse::ParseSess, krate: &ast::Crate) 
check_for_placement_in			pub fn check_for_placement_in(f: Option<&Features>, diag: &Handler, span: Span) 
check_for_pushpop_syntax			pub fn check_for_pushpop_syntax(f: Option<&Features>, diag: &Handler, span: Span) 
check_for_substitution			pub fn check_for_substitution<'a>(reader: &StringReader<'a>,
check_keyword			    pub fn check_keyword(&mut self, kw: keywords::Keyword) -> bool 
check_lhs_nt_follows			fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &TokenTree, sp: Span) 
check_matcher			fn check_matcher(cx: &mut ExtCtxt, matcher: &[TokenTree]) 
check_matcher_core			fn check_matcher_core(cx: &mut ExtCtxt,
check_matcher_new			fn check_matcher_new(cx: &mut ExtCtxt, matcher: &[TokenTree], on_fail: &mut OnFail) 
check_matcher_old			fn check_matcher_old<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token, on_fail: &mut OnFail)
check_name			    fn check_name(&self, name: &str) -> bool 
check_no_chained_comparison			    fn check_no_chained_comparison(&mut self, lhs: &Expr, outer_op: &AssocOp) 
check_reserved_keywords			    pub fn check_reserved_keywords(&mut self) 
check_rhs			fn check_rhs(cx: &mut ExtCtxt, rhs: &TokenTree) -> bool 
check_stack			    pub fn check_stack(&mut self, k: isize) 
check_stream			    pub fn check_stream(&mut self) -> io::Result<()> 
check_strict_keywords			    pub fn check_strict_keywords(&mut self) 
check_tokenization			    fn check_tokenization(mut string_reader: StringReader, expected: Vec<token::Token>) 
check_unknown_macro_variable			    pub fn check_unknown_macro_variable(&mut self) 
check_zero_tts			pub fn check_zero_tts(cx: &ExtCtxt,
classify			pub mod classify;
clear			    pub fn clear(&self) 
clear_tables			pub fn clear_tables() 
clone			    fn clone(&self) -> P<T> 
clone			    fn clone(&self) -> P<[T]> 
close_token			    pub fn close_token(&self) -> token::Token 
close_tt			    pub fn close_tt(&self) -> TokenTree 
closure_arg_hygiene			    fn closure_arg_hygiene()
cmp			    fn cmp(&self, other: &GatedCfgAttr) -> cmp::Ordering 
cmp			    fn cmp(&self, other: &RcStr) -> Ordering 
code			    pub fn code(&mut self, s: String) -> &mut Self 
codemap			    pub fn codemap(&self) -> &'a CodeMap { self.parse_sess.codemap() }
codemap			pub mod codemap;
codemap			    pub fn codemap(&self) -> &CodeMap 
color			    fn color(self) -> term::color::Color 
commasep			    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], mut op: F) -> io::Result<()>
commasep_cmnt			    pub fn commasep_cmnt<T, F, G>(&mut self,
commasep_exprs			    pub fn commasep_exprs(&mut self, b: Breaks,
comments			pub mod comments;
comments			    fn comments(&mut self) -> &mut Option<Vec<comments::Comment>> 
comments			    fn comments(&mut self) -> &mut Option<Vec<comments::Comment>>;
commit_expr			    pub fn commit_expr(&mut self, e: &Expr, edible: &[token::Token],
commit_expr_expecting			    pub fn commit_expr_expecting(&mut self, e: &Expr, edible: token::Token) -> PResult<'a, ()> 
commit_stmt			    pub fn commit_stmt(&mut self, edible: &[token::Token],
commit_stmt_expecting			    pub fn commit_stmt_expecting(&mut self, edible: token::Token) -> PResult<'a, ()> 
common			pub mod common;
compile			pub fn compile<'cx>(cx: &'cx mut ExtCtxt,
complain_if_pub_macro			    fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) 
compute_id_range_for_fn_body			pub fn compute_id_range_for_fn_body(fk: FnKind,
config			pub mod config;
consume_comment			fn consume_comment(rdr: &mut StringReader, code_to_the_left: bool, comments: &mut Vec<Comment>) 
consume_non_eol_whitespace			    fn consume_non_eol_whitespace(&mut self) 
consume_whitespace			    fn consume_whitespace(&mut self) 
consume_whitespace_counting_blank_lines			fn consume_whitespace_counting_blank_lines(rdr: &mut StringReader, comments: &mut Vec<Comment>) 
contains			pub fn contains(haystack: &[P<MetaItem>], needle: &MetaItem) -> bool 
contains			    pub fn contains(self, other: Span) -> bool 
contains_macro_use			fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool 
contains_name			pub fn contains_name<AM: AttrMetaMethods>(metas: &[AM], name: &str) -> bool 
count_lines			    fn count_lines(&self) -> usize 
count_lines			    pub fn count_lines(&self) -> usize 
count_names			pub fn count_names(ms: &[TokenTree]) -> usize 
crate_bindings			    fn crate_bindings(the_crate : &ast::Crate) -> Vec<ast::Ident> 
crate_bindings_test			    fn crate_bindings_test()
crate_idents			    fn crate_idents(the_crate: &ast::Crate) -> Vec<ast::Ident> 
crate_varrefs			    fn crate_varrefs(the_crate : &ast::Crate) -> Vec<ast::Path> 
crlf_comments			    fn crlf_comments() 
cur_cmnt_and_lit			    fn cur_cmnt_and_lit(&mut self) -> &mut CurrentCommentAndLiteral 
cur_cmnt_and_lit			    fn cur_cmnt_and_lit(&mut self) -> &mut CurrentCommentAndLiteral;
curr_is			    pub fn curr_is(&self, c: char) -> bool 
custom_emit			    fn custom_emit(&mut self, _: RenderSpan, _: &str, _: Level) 
custom_emit			    fn custom_emit(&mut self, sp: RenderSpan, msg: &str, lvl: Level);
custom_emit			    fn custom_emit(&mut self,
custom_emit			    fn custom_emit(&mut self, sp: RenderSpan, msg: &str, level: Level) 
custom_emit			    pub fn custom_emit(&self, sp: RenderSpan, msg: &str, lvl: Level) 
data			    pub fn data(&self) -> &'static AbiData 
dcparsing_2			    fn dcparsing_2() 
dcparsing_3			    fn dcparsing_3() 
dcparsing_4			    fn dcparsing_4() 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Ident, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Name, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<BytePos, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<FileMap, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<P<T>, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<P<[T]>, D::Error> 
default			    fn default() ->  Generics 
default			    pub fn default(crate_name: String) -> ExpansionConfig<'static> 
default			    fn default() -> P<[T]> 
default_span_debug			fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result 
default_submod_path			    pub fn default_submod_path(id: ast::Ident, dir_path: &Path, codemap: &CodeMap) -> ModulePath
delay_span_bug			    pub fn delay_span_bug(&self, sp: Span, msg: &str) 
deref			    fn deref(&self) -> &str { &*self.string }
deref			    fn deref(&self) -> &[T] 
deref			    fn deref<'a>(&'a self) -> &'a T 
deref			    fn deref(&self) -> &str { &self.string[..] }
description			    fn description(&self) -> &str 
descriptive_variant			    pub fn descriptive_variant(&self) -> &str 
diagnostic			    pub fn diagnostic(&self) -> &'a errors::Handler 
diagnostics			pub mod diagnostics 
display_sctable			pub fn display_sctable(table: &SCTable) 
do_nothing			    fn do_nothing() -> OnFail { OnFail { saw_failure: false, action: OnFailAction::DoNothing } }
doc_comment_style			pub fn doc_comment_style(comment: &str) -> ast::AttrStyle 
doublecolonparsing			    fn doublecolonparsing() 
drop			    fn drop(&mut self) 
dummy_spanned			pub fn dummy_spanned<T>(t: T) -> Spanned<T> 
eat			    fn eat<'a, I: Iterator<Item=(usize, u8)>>(it: &mut iter::Peekable<I>) 
eat			    fn eat<'a>(it: &mut iter::Peekable<str::CharIndices<'a>>) 
eat			    pub fn eat(&mut self, tok: &token::Token) -> bool 
eat_keyword			    pub fn eat_keyword(&mut self, kw: keywords::Keyword) -> bool 
eat_keyword_noexpect			    pub fn eat_keyword_noexpect(&mut self, kw: keywords::Keyword) -> bool 
eat_lt			    fn eat_lt(&mut self) -> bool 
emit			    fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, lvl: Level);
emit			    fn emit(&mut self,
emit			    fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, level: Level) 
emit			    pub fn emit(&mut self) 
emit			    pub fn emit(&self,
emit_			    fn emit_(&mut self,
emit_error			    fn emit_error<F>(&mut self, _: F) where F: FnMut(&Handler) 
emit_error			    fn emit_error<F>(&mut self, f: F) where F: FnMut(&Handler);
emit_error			    fn emit_error<F>(&mut self, mut f: F) where F: FnMut(&Handler) 
emit_feature_err			pub fn emit_feature_err(diag: &Handler, feature: &str, span: Span, issue: GateIssue,
emit_struct			    fn emit_struct(&mut self, db: &DiagnosticBuilder) 
emit_struct			    fn emit_struct(&mut self, db: &DiagnosticBuilder) 
emit_with_code			    pub fn emit_with_code(&self,
emitter			pub mod emitter;
empty			    pub fn empty(&self) -> bool 
empty			    fn empty() -> Self { TokenSet { tokens: Vec::new(), maybe_empty: true } }
empty			    pub fn empty() -> P<[T]> 
enable_allow_internal_unstable			        fn enable_allow_internal_unstable = allow_internal_unstable,
enable_asm			        fn enable_asm = allow_asm,
enable_concat_idents			        fn enable_concat_idents = allow_concat_idents,
enable_custom_derive			        fn enable_custom_derive = allow_custom_derive,
enable_feature			    fn enable_feature(&mut self, feature: &'static str) 
enable_log_syntax			        fn enable_log_syntax = allow_log_syntax,
enable_pushpop_unsafe			        fn enable_pushpop_unsafe = allow_pushpop_unsafe,
enable_quotes			        fn enable_quotes = allow_quote,
enable_trace_macros			        fn enable_trace_macros = allow_trace_macros,
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
end			pub fn end(p: &mut Printer) -> io::Result<()> 
end			    fn end(&mut self) -> io::Result<()> 
end_highlight_lines			    fn end_highlight_lines(&mut self,
ensure_complete_parse			    fn ensure_complete_parse(&self, allow_semi: bool, context: &str) 
entry			pub mod entry;
entry_point_type			pub fn entry_point_type(item: &Item, depth: usize) -> EntryPointType 
eof			pub fn eof(p: &mut Printer) -> io::Result<()> 
eq			    fn eq(&self, other: &Ident) -> bool 
eq			    fn eq(&self, other: &MetaItem_) -> bool 
eq			    fn eq(&self, other: &Span) -> bool 
eq			    fn eq(&self, other: & &'a str) -> bool 
eq			    fn eq(&self, other: &InternedString) -> bool 
err			    pub fn err(&self, msg: &str) 
err			    fn err(&self, &str);
err			    fn err(&self, m: &str) 
err_count			    pub fn err_count(&self) -> usize 
err_span			    pub fn err_span(&self, sp: Span, m: &str) 
err_span_			    fn err_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) 
err_span_char			    fn err_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) 
error			    fn error() -> OnFail { OnFail { saw_failure: false, action: OnFailAction::Error } }
error::Error for ExplicitBug			impl error::Error for ExplicitBug 
error::Error for FatalError			impl error::Error for FatalError 
errors			pub mod errors;
esc			    fn esc(len: usize, lit: &str) -> Option<(char, isize)> 
eval_src_mod			    fn eval_src_mod(&mut self,
eval_src_mod_from_path			    fn eval_src_mod_from_path(&mut self,
expand			    fn expand(&self,
expand			    fn expand<'cx>(&self,
expand			    fn expand<'cx>(&self,
expand			    pub mod expand;
expand_and_rename_fn_decl_and_block			fn expand_and_rename_fn_decl_and_block(fn_decl: P<ast::FnDecl>, block: P<ast::Block>,
expand_and_rename_method			fn expand_and_rename_method(sig: ast::MethodSig, body: P<ast::Block>,
expand_annotatable			fn expand_annotatable(a: Annotatable,
expand_arm			fn expand_arm(arm: ast::Arm, fld: &mut MacroExpander) -> ast::Arm 
expand_block			pub fn expand_block(blk: P<Block>, fld: &mut MacroExpander) -> P<Block> 
expand_block_elts			pub fn expand_block_elts(b: P<Block>, fld: &mut MacroExpander) -> P<Block> 
expand_build_diagnostic_array			pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,
expand_column			pub fn expand_column(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_crate			pub fn expand_crate(mut cx: ExtCtxt,
expand_crate_str			    fn expand_crate_str(crate_str: String) -> ast::Crate 
expand_decorators			fn expand_decorators(a: Annotatable,
expand_diagnostic_used			pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,
expand_expr			pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> 
expand_file			pub fn expand_file(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_impl_item			fn expand_impl_item(ii: P<ast::ImplItem>, fld: &mut MacroExpander)
expand_include			pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_include_bytes			pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_include_str			pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_item			pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)
expand_item_mac			pub fn expand_item_mac(it: P<ast::Item>,
expand_item_multi_modifier			fn expand_item_multi_modifier(mut it: Annotatable,
expand_item_underscore			fn expand_item_underscore(item: ast::Item_, fld: &mut MacroExpander) -> ast::Item_ 
expand_line			pub fn expand_line(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_loop_block			fn expand_loop_block(loop_block: P<Block>,
expand_mac_invoc			fn expand_mac_invoc<T, F, G>(mac: ast::Mac,
expand_mod			pub fn expand_mod(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_non_macro_stmt			fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroExpander)
expand_parse_call			fn expand_parse_call(cx: &ExtCtxt,
expand_pat			fn expand_pat(p: P<ast::Pat>, fld: &mut MacroExpander) -> P<ast::Pat> 
expand_quote_arg			pub fn expand_quote_arg(cx: &mut ExtCtxt,
expand_quote_arm			pub fn expand_quote_arm(cx: &mut ExtCtxt,
expand_quote_attr			pub fn expand_quote_attr(cx: &mut ExtCtxt,
expand_quote_block			pub fn expand_quote_block(cx: &mut ExtCtxt,
expand_quote_expr			pub fn expand_quote_expr<'cx>(cx: &'cx mut ExtCtxt,
expand_quote_item			pub fn expand_quote_item<'cx>(cx: &mut ExtCtxt,
expand_quote_matcher			pub fn expand_quote_matcher(cx: &mut ExtCtxt,
expand_quote_meta_item			pub fn expand_quote_meta_item(cx: &mut ExtCtxt,
expand_quote_pat			pub fn expand_quote_pat<'cx>(cx: &'cx mut ExtCtxt,
expand_quote_path			pub fn expand_quote_path(cx: &mut ExtCtxt,
expand_quote_stmt			pub fn expand_quote_stmt(cx: &mut ExtCtxt,
expand_quote_tokens			pub fn expand_quote_tokens<'cx>(cx: &'cx mut ExtCtxt,
expand_quote_ty			pub fn expand_quote_ty(cx: &mut ExtCtxt,
expand_register_diagnostic			pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,
expand_stmt			fn expand_stmt(stmt: P<Stmt>, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> 
expand_stringify			pub fn expand_stringify(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])
expand_tts			fn expand_tts(cx: &ExtCtxt, sp: Span, tts: &[TokenTree])
expand_type			pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> 
expand_wrapper			fn expand_wrapper(cx: &ExtCtxt,
expander			    pub fn expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> 
expansion_cause			    pub fn expansion_cause(&self) -> Span 
expect			pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T where
expect			    pub fn expect(&mut self, t: &token::Token) -> PResult<'a,  ()> 
expect_and			    fn expect_and(&mut self) -> PResult<'a, ()> 
expect_gt			    pub fn expect_gt(&mut self) -> PResult<'a, ()> 
expect_impl_item			    pub fn expect_impl_item(self) -> P<ast::ImplItem> 
expect_item			    pub fn expect_item(self) -> P<ast::Item> 
expect_keyword			    pub fn expect_keyword(&mut self, kw: keywords::Keyword) -> PResult<'a, ()> 
expect_lt			    fn expect_lt(&mut self) -> PResult<'a, ()> 
expect_no_suffix			    pub fn expect_no_suffix(&self, sp: Span, kind: &str, suffix: Option<ast::Name>) 
expect_one			    pub fn expect_one(self, err: &'static str) -> T 
expect_one_of			    pub fn expect_one_of(&mut self,
expect_open_delim			    fn expect_open_delim(&mut self) -> PResult<'a, token::DelimToken> 
expect_self_ident			    fn expect_self_ident(&mut self) -> PResult<'a, ast::Ident> 
expect_self_type_ident			    fn expect_self_type_ident(&mut self) -> PResult<'a, ast::Ident> 
expect_trait_item			    pub fn expect_trait_item(self) -> P<ast::TraitItem> 
expected_item_err			    fn expected_item_err(&self, attrs: &[Attribute]) 
explicit_self_to_string			pub fn explicit_self_to_string(explicit_self: &ast::ExplicitSelf_) -> String 
expr			    pub fn expr(sp: Span) -> Box<MacResult+'static> 
expr			    fn expr(&self, span: Span, node: ast::Expr_) -> P<ast::Expr> 
expr			    fn expr(&self, span: Span, node: ast::Expr_) -> P<ast::Expr>;
expr_addr_of			    fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> 
expr_addr_of			    fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;
expr_binary			    fn expr_binary(&self, sp: Span, op: ast::BinOp_,
expr_block			    fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> 
expr_block			    fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr>;
expr_bool			    fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> 
expr_bool			    fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;
expr_break			    fn expr_break(&self, sp: Span) -> P<ast::Expr> 
expr_break			    fn expr_break(&self, sp: Span) -> P<ast::Expr>;
expr_call			    fn expr_call(&self, span: Span, expr: P<ast::Expr>, args: Vec<P<ast::Expr>>) -> P<ast::Expr> 
expr_call			    fn expr_call(&self, span: Span, expr: P<ast::Expr>, args: Vec<P<ast::Expr>>) -> P<ast::Expr>;
expr_call_global			    fn expr_call_global(&self, sp: Span, fn_path: Vec<ast::Ident> ,
expr_call_global			    fn expr_call_global(&self, sp: Span, fn_path: Vec<ast::Ident>,
expr_call_ident			    fn expr_call_ident(&self, span: Span, id: ast::Ident, args: Vec<P<ast::Expr>>) -> P<ast::Expr>;
expr_call_ident			    fn expr_call_ident(&self, span: Span, id: ast::Ident,
expr_cast			    fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr> 
expr_cast			    fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr>;
expr_deref			    fn expr_deref(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> 
expr_deref			    fn expr_deref(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;
expr_err			    fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> 
expr_err			    fn expr_err(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Expr>;
expr_fail			    fn expr_fail(&self, span: Span, msg: InternedString) -> P<ast::Expr> 
expr_fail			    fn expr_fail(&self, span: Span, msg: InternedString) -> P<ast::Expr>;
expr_field_access			    fn expr_field_access(&self, sp: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> 
expr_field_access			    fn expr_field_access(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr>;
expr_ident			    fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr> 
expr_ident			    fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr>;
expr_if			    fn expr_if(&self, span: Span, cond: P<ast::Expr>,
expr_if			    fn expr_if(&self, span: Span,
expr_in_cfg			fn expr_in_cfg<F>(cx: &mut Context<F>, expr: &ast::Expr) -> bool where
expr_is_complete			    fn expr_is_complete(&mut self, e: &Expr) -> bool 
expr_is_simple_block			pub fn expr_is_simple_block(e: &ast::Expr) -> bool 
expr_isize			    fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> 
expr_isize			    fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr>;
expr_lit			    fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr> 
expr_lit			    fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr>;
expr_loop			    fn expr_loop(&self, span: Span, block: P<ast::Block>) -> P<ast::Expr> 
expr_loop			    fn expr_loop(&self, span: Span, block: P<ast::Block>) -> P<ast::Expr>;
expr_match			    fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm> ) -> P<ast::Expr>;
expr_match			    fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> 
expr_method_call			    fn expr_method_call(&self, span: Span,
expr_mk_token			fn expr_mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> P<ast::Expr> 
expr_mut_addr_of			    fn expr_mut_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> 
expr_mut_addr_of			    fn expr_mut_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr>;
expr_none			    fn expr_none(&self, sp: Span) -> P<ast::Expr> 
expr_none			    fn expr_none(&self, sp: Span) -> P<ast::Expr>;
expr_ok			    fn expr_ok(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> 
expr_ok			    fn expr_ok(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Expr>;
expr_path			    fn expr_path(&self, path: ast::Path) -> P<ast::Expr> 
expr_path			    fn expr_path(&self, path: ast::Path) -> P<ast::Expr>;
expr_qpath			    fn expr_qpath(&self, span: Span, qself: ast::QSelf, path: ast::Path) -> P<ast::Expr> 
expr_qpath			    fn expr_qpath(&self, span: Span, qself: ast::QSelf, path: ast::Path) -> P<ast::Expr>;
expr_requires_semi_to_be_stmt			pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool 
expr_self			    fn expr_self(&self, span: Span) -> P<ast::Expr> 
expr_self			    fn expr_self(&self, span: Span) -> P<ast::Expr>;
expr_some			    fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> 
expr_some			    fn expr_some(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr>;
expr_str			    fn expr_str(&self, sp: Span, s: InternedString) -> P<ast::Expr> 
expr_str			    fn expr_str(&self, sp: Span, s: InternedString) -> P<ast::Expr>;
expr_struct			    fn expr_struct(&self, span: Span, path: ast::Path, fields: Vec<ast::Field>) -> P<ast::Expr> 
expr_struct			    fn expr_struct(&self, span: Span, path: ast::Path, fields: Vec<ast::Field>) -> P<ast::Expr>;
expr_struct_ident			    fn expr_struct_ident(&self, span: Span, id: ast::Ident,
expr_struct_ident			    fn expr_struct_ident(&self, span: Span,
expr_to_string			pub fn expr_to_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)
expr_to_string			pub fn expr_to_string(e: &ast::Expr) -> String 
expr_try			    fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> 
expr_try			    fn expr_try(&self, span: Span, head: P<ast::Expr>) -> P<ast::Expr>;
expr_tup_field_access			    fn expr_tup_field_access(&self, sp: Span, expr: P<ast::Expr>, idx: usize) -> P<ast::Expr> 
expr_tup_field_access			    fn expr_tup_field_access(&self, sp: Span, expr: P<ast::Expr>,
expr_tuple			    fn expr_tuple(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> 
expr_tuple			    fn expr_tuple(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr>;
expr_u32			    fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> 
expr_u32			    fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr>;
expr_u8			    fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> 
expr_u8			    fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;
expr_unary			    fn expr_unary(&self, sp: Span, op: ast::UnOp, e: P<ast::Expr>) -> P<ast::Expr> 
expr_unary			    fn expr_unary(&self, sp: Span, op: ast::UnOp, e: P<ast::Expr>) -> P<ast::Expr>;
expr_unreachable			    fn expr_unreachable(&self, span: Span) -> P<ast::Expr> 
expr_unreachable			    fn expr_unreachable(&self, span: Span) -> P<ast::Expr>;
expr_usize			    fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> 
expr_usize			    fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;
expr_vec			    fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> 
expr_vec			    fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr>;
expr_vec_ng			    fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> 
expr_vec_ng			    fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr>;
expr_vec_slice			    fn expr_vec_slice(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> 
expr_vec_slice			    fn expr_vec_slice(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr>;
ext			pub mod ext 
extend			    fn extend<I: IntoIterator<Item=T>>(&mut self, iter: I) 
f			            fn f(){(|x : i32| {(inject_x!() + x)})(3);}",
f			            fn f(){A.thirteen;}".to_string());
f			            fn f(zz: i32) {foo!(zz);}".to_string()
f			        fn f(
fake_print_crate			    fn fake_print_crate(s: &mut pprust::State,
fatal			    pub fn fatal(&self, msg: &str) -> FatalError 
fatal			    fn fatal(&self, &str) -> FatalError;
fatal			    fn fatal(&self, m: &str) -> FatalError 
fatal			    pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> 
fatal_span			    pub fn fatal_span(&self, sp: Span, m: &str) -> FatalError 
fatal_span_			    fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> FatalError 
fatal_span_char			    fn fatal_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) -> FatalError 
fatal_span_verbose			    fn fatal_span_verbose(&self, from_pos: BytePos, to_pos: BytePos, mut m: String) -> FatalError 
feature_gate			pub mod feature_gate;
field_imm			    fn field_imm(&self, span: Span, name: Ident, e: P<ast::Expr>) -> ast::Field 
field_imm			    fn field_imm(&self, span: Span, name: Ident, e: P<ast::Expr>) -> ast::Field;
fields			    pub fn fields(&self) -> &[StructField] 
file_exists			    fn file_exists(&self, path: &Path) -> bool 
file_exists			    fn file_exists(&self, path: &Path) -> bool;
file_exists			    pub fn file_exists(&self, path: &Path) -> bool 
file_to_filemap			fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)
fileline_help			    pub fn fileline_help(&mut self ,
fileline_note			    pub fn fileline_note(&mut self ,
fileline_warn			    pub fn fileline_warn(&mut self ,
filemap_to_parser			pub fn filemap_to_parser<'a>(sess: &'a ParseSess,
filemap_to_tts			pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)
filter_foreign_item			fn filter_foreign_item<F>(cx: &mut Context<F>,
filtered_float_lit			fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,
find			    pub fn find(&self, k: Name) -> Option<Rc<SyntaxExtension>> 
find			    pub fn find<Q: ?Sized>(&self, val: &Q) -> Option<Name>
find_best_match_for_name			pub fn find_best_match_for_name<'a, T>(iter_names: T,
find_crate_name			pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> 
find_deprecation			pub fn find_deprecation(diagnostic: &Handler, attrs: &[Attribute],
find_deprecation_generic			fn find_deprecation_generic<'a, I>(diagnostic: &Handler,
find_description			    pub fn find_description(&self, code: &str) -> Option<&'static str> 
find_escape_frame			    fn find_escape_frame(&mut self) -> &mut MapChainFrame 
find_export_name_attr			pub fn find_export_name_attr(diag: &Handler, attrs: &[Attribute]) -> Option<InternedString> 
find_inline_attr			pub fn find_inline_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> InlineAttr 
find_lang_feature_issue			fn find_lang_feature_issue(feature: &str) -> Option<u32> 
find_repr_attrs			pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr> 
find_stability			pub fn find_stability(diagnostic: &Handler, attrs: &[Attribute],
find_stability_generic			fn find_stability_generic<'a, I>(diagnostic: &Handler,
first			    fn first(&self, tts: &[TokenTree]) -> TokenSet 
first_attr_value_str_by_name			pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: &str)
fixity			    pub fn fixity(&self) -> Fixity 
flag_gated			    fn flag_gated<F>(&mut self, _: F) where F: FnMut(&mut Vec<GatedCfgAttr>) {}
flag_gated			    fn flag_gated<F>(&mut self, f: F) where F: FnMut(&mut Vec<GatedCfgAttr>);
flag_gated			    fn flag_gated<F>(&mut self, mut f: F) where F: FnMut(&mut Vec<GatedCfgAttr>) 
float_lit			pub fn float_lit(s: &str, suffix: Option<InternedString>,
flush			            fn flush(&mut self) -> io::Result<()> { Ok(()) }
flush			    fn flush(&mut self) -> io::Result<()> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for DiagnosticBuilder			impl<'a> fmt::Debug for DiagnosticBuilder<'a> 
fmt::Debug for Expr			impl fmt::Debug for Expr 
fmt::Debug for FileMap			impl fmt::Debug for FileMap 
fmt::Debug for FloatTy			impl fmt::Debug for FloatTy 
fmt::Debug for Ident			impl fmt::Debug for Ident 
fmt::Debug for ImplPolarity			impl fmt::Debug for ImplPolarity 
fmt::Debug for IntTy			impl fmt::Debug for IntTy 
fmt::Debug for InternedString			impl fmt::Debug for InternedString 
fmt::Debug for Lifetime			impl fmt::Debug for Lifetime 
fmt::Debug for Name			impl fmt::Debug for Name 
fmt::Debug for Nonterminal			impl fmt::Debug for Nonterminal 
fmt::Debug for P			impl<T:fmt::Debug> fmt::Debug for P<[T]> 
fmt::Debug for Pat			impl fmt::Debug for Pat 
fmt::Debug for Path			impl fmt::Debug for Path 
fmt::Debug for RcStr			impl fmt::Debug for RcStr 
fmt::Debug for Span			impl fmt::Debug for Span 
fmt::Debug for Stmt			impl fmt::Debug for Stmt 
fmt::Debug for Ty			impl fmt::Debug for Ty 
fmt::Debug for UintTy			impl fmt::Debug for UintTy 
fmt::Display for Abi			impl fmt::Display for Abi 
fmt::Display for ExplicitBug			impl fmt::Display for ExplicitBug 
fmt::Display for FatalError			impl fmt::Display for FatalError 
fmt::Display for FloatTy			impl fmt::Display for FloatTy 
fmt::Display for Ident			impl fmt::Display for Ident 
fmt::Display for IntTy			impl fmt::Display for IntTy 
fmt::Display for InternedString			impl fmt::Display for InternedString 
fmt::Display for Level			impl fmt::Display for Level 
fmt::Display for Name			impl fmt::Display for Name 
fmt::Display for Os			impl fmt::Display for Os 
fmt::Display for Path			impl fmt::Display for Path 
fmt::Display for RcStr			impl fmt::Display for RcStr 
fmt::Display for UintTy			impl fmt::Display for UintTy 
fmt::Display for Unsafety			impl fmt::Display for Unsafety 
fmt::Pointer for P			impl<T> fmt::Pointer for P<T> 
fmt_in_macro_used_inside_module_macro			    fn fmt_in_macro_used_inside_module_macro() 
fn_block_to_string			pub fn fn_block_to_string(p: &ast::FnDecl) -> String 
fn_decl			    fn fn_decl(&self, inputs: Vec<ast::Arg> , output: P<ast::Ty>) -> P<ast::FnDecl>;
fn_decl			    fn fn_decl(&self, inputs: Vec<ast::Arg>, output: P<ast::Ty>) -> P<ast::FnDecl> 
fn_decl_arg_bindings			fn fn_decl_arg_bindings(fn_decl: &ast::FnDecl) -> Vec<ast::Ident> 
fold			pub mod fold;
fold::Folder for CfgAttrFolder			impl<'a, T: CfgDiag> fold::Folder for CfgAttrFolder<'a, T> 
fold::Folder for Context			impl<'a, F> fold::Folder for Context<'a, F> where F: FnMut(&[ast::Attribute]) -> bool 
fold::Folder for CrateInjector			impl fold::Folder for CrateInjector 
fold::Folder for EntryPointCleaner			impl fold::Folder for EntryPointCleaner 
fold::Folder for PreludeInjector			impl fold::Folder for PreludeInjector 
fold::Folder for TestHarnessGenerator			impl<'a> fold::Folder for TestHarnessGenerator<'a> 
fold_angle_bracketed_parameter_data			    fn fold_angle_bracketed_parameter_data(&mut self, p: AngleBracketedParameterData)
fold_arg			    fn fold_arg(&mut self, a: Arg) -> Arg 
fold_arm			    fn fold_arm(&mut self, arm: ast::Arm) -> ast::Arm 
fold_arm			    fn fold_arm(&mut self, a: Arm) -> Arm 
fold_attribute			    fn fold_attribute(&mut self, attr: ast::Attribute) -> Option<ast::Attribute> 
fold_attribute			    fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> 
fold_attrs			    pub fn fold_attrs(self, attrs: Vec<ast::Attribute>) -> Annotatable 
fold_attrs			pub fn fold_attrs<T: Folder>(attrs: Vec<Attribute>, fld: &mut T) -> Vec<Attribute> 
fold_block			    fn fold_block(&mut self, block: P<Block>) -> P<Block> 
fold_block			    fn fold_block(&mut self, b: P<Block>) -> P<Block> 
fold_bounds			    fn fold_bounds(&mut self, b: TyParamBounds)
fold_crate			    fn fold_crate(&mut self, c: Crate) -> Crate 
fold_crate			    fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate 
fold_crate			    fn fold_crate(&mut self, c: ast::Crate) -> ast::Crate 
fold_decl			    fn fold_decl(&mut self, d: P<Decl>) -> SmallVector<P<Decl>> 
fold_explicit_self			    fn fold_explicit_self(&mut self, es: ExplicitSelf) -> ExplicitSelf 
fold_explicit_self_underscore			    fn fold_explicit_self_underscore(&mut self, es: ExplicitSelf_) -> ExplicitSelf_ 
fold_expr			    fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> 
fold_expr			fn fold_expr<F>(cx: &mut Context<F>, expr: P<ast::Expr>) -> P<ast::Expr> where
fold_expr			    fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> 
fold_expr			    fn fold_expr(&mut self, e: P<Expr>) -> P<Expr> 
fold_exprs			    fn fold_exprs(&mut self, es: Vec<P<Expr>>) -> Vec<P<Expr>> 
fold_field			    fn fold_field(&mut self, field: Field) -> Field 
fold_fn_decl			    fn fold_fn_decl(&mut self, d: P<FnDecl>) -> P<FnDecl> 
fold_foreign_item			    fn fold_foreign_item(&mut self, ni: P<ForeignItem>) -> P<ForeignItem> 
fold_foreign_mod			    fn fold_foreign_mod(&mut self, foreign_mod: ast::ForeignMod) -> ast::ForeignMod 
fold_foreign_mod			fn fold_foreign_mod<F>(cx: &mut Context<F>,
fold_foreign_mod			    fn fold_foreign_mod(&mut self, nm: ForeignMod) -> ForeignMod 
fold_generics			    fn fold_generics(&mut self, generics: Generics) -> Generics 
fold_ident			    fn fold_ident(&mut self, id: Ident) -> Ident 
fold_ident			        fn fold_ident(&mut self, _: ast::Ident) -> ast::Ident 
fold_ident			    fn fold_ident(&mut self, i: Ident) -> Ident 
fold_impl_item			    fn fold_impl_item(&mut self, i: P<ast::ImplItem>) -> SmallVector<P<ast::ImplItem>> 
fold_impl_item			    fn fold_impl_item(&mut self, i: P<ImplItem>) -> SmallVector<P<ImplItem>> 
fold_interpolated			    fn fold_interpolated(&mut self, nt: token::Nonterminal) -> token::Nonterminal 
fold_item			    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> 
fold_item			fn fold_item<F>(cx: &mut Context<F>, item: P<ast::Item>) -> SmallVector<P<ast::Item>> where
fold_item			    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> 
fold_item			    fn fold_item(&mut self, i: P<Item>) -> SmallVector<P<Item>> 
fold_item			    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> 
fold_item			    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVector<P<ast::Item>> 
fold_item_simple			    fn fold_item_simple(&mut self, i: Item) -> Item 
fold_item_underscore			    fn fold_item_underscore(&mut self, item: ast::Item_) -> ast::Item_ 
fold_item_underscore			fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_ where
fold_item_underscore			    fn fold_item_underscore(&mut self, item: ast::Item_) -> ast::Item_ 
fold_item_underscore			    fn fold_item_underscore(&mut self, i: Item_) -> Item_ 
fold_lifetime			    fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime 
fold_lifetime_def			    fn fold_lifetime_def(&mut self, l: LifetimeDef) -> LifetimeDef 
fold_lifetime_defs			    fn fold_lifetime_defs(&mut self, lts: Vec<LifetimeDef>) -> Vec<LifetimeDef> 
fold_lifetimes			    fn fold_lifetimes(&mut self, lts: Vec<Lifetime>) -> Vec<Lifetime> 
fold_local			    fn fold_local(&mut self, l: P<Local>) -> P<Local> 
fold_mac			    fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac 
fold_mac			    fn fold_mac(&mut self, Spanned {node, span}: ast::Mac) -> ast::Mac 
fold_mac			    fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac 
fold_mac			        fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac 
fold_mac			    fn fold_mac(&mut self, _mac: Mac) -> Mac 
fold_meta_item			    fn fold_meta_item(&mut self, meta_item: P<MetaItem>) -> P<MetaItem> 
fold_meta_items			    fn fold_meta_items(&mut self, meta_items: Vec<P<MetaItem>>) -> Vec<P<MetaItem>> 
fold_mod			    fn fold_mod(&mut self, m: Mod) -> Mod 
fold_mod			    fn fold_mod(&mut self, mut mod_: ast::Mod) -> ast::Mod 
fold_mod			    fn fold_mod(&mut self, m: ast::Mod) -> ast::Mod 
fold_mt			    fn fold_mt(&mut self, mt: MutTy) -> MutTy 
fold_opt_bounds			    fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>)
fold_opt_expr			    fn fold_opt_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> 
fold_opt_expr			fn fold_opt_expr<F>(cx: &mut Context<F>, expr: P<ast::Expr>) -> Option<P<ast::Expr>>
fold_opt_expr			    fn fold_opt_expr(&mut self, e: P<Expr>) -> Option<P<Expr>> 
fold_opt_lifetime			    fn fold_opt_lifetime(&mut self, o_lt: Option<Lifetime>) -> Option<Lifetime> 
fold_parenthesized_parameter_data			    fn fold_parenthesized_parameter_data(&mut self, p: ParenthesizedParameterData)
fold_pat			    fn fold_pat(&mut self, pat: P<ast::Pat>) -> P<ast::Pat> 
fold_pat			    fn fold_pat(&mut self, p: P<Pat>) -> P<Pat> 
fold_path			    fn fold_path(&mut self, p: Path) -> Path 
fold_path_parameters			    fn fold_path_parameters(&mut self, p: PathParameters) -> PathParameters 
fold_poly_trait_ref			    fn fold_poly_trait_ref(&mut self, p: PolyTraitRef) -> PolyTraitRef 
fold_stmt			    fn fold_stmt(&mut self, stmt: P<ast::Stmt>) -> SmallVector<P<ast::Stmt>> 
fold_stmt			fn fold_stmt<F>(cx: &mut Context<F>, stmt: P<ast::Stmt>) -> SmallVector<P<ast::Stmt>>
fold_stmt			    fn fold_stmt(&mut self, stmt: P<ast::Stmt>) -> SmallVector<P<ast::Stmt>> 
fold_stmt			    fn fold_stmt(&mut self, s: P<Stmt>) -> SmallVector<P<Stmt>> 
fold_struct			fn fold_struct<F>(cx: &mut Context<F>, vdata: ast::VariantData) -> ast::VariantData where
fold_struct_field			    fn fold_struct_field(&mut self, sf: StructField) -> StructField 
fold_thin_attrs			pub fn fold_thin_attrs<T: Folder>(attrs: ThinAttributes, fld: &mut T) -> ThinAttributes 
fold_token			    fn fold_token(&mut self, t: token::Token) -> token::Token 
fold_trait_item			    fn fold_trait_item(&mut self, i: P<ast::TraitItem>) -> SmallVector<P<ast::TraitItem>> 
fold_trait_item			    fn fold_trait_item(&mut self, i: P<TraitItem>) -> SmallVector<P<TraitItem>> 
fold_trait_ref			    fn fold_trait_ref(&mut self, p: TraitRef) -> TraitRef 
fold_tt			    fn fold_tt(&mut self, tt: &TokenTree) -> TokenTree 
fold_tts			    fn fold_tts(&mut self, tts: &[TokenTree]) -> Vec<TokenTree> 
fold_ty			    fn fold_ty(&mut self, ty: P<ast::Ty>) -> P<ast::Ty> 
fold_ty			    fn fold_ty(&mut self, t: P<Ty>) -> P<Ty> 
fold_ty_binding			    fn fold_ty_binding(&mut self, t: P<TypeBinding>) -> P<TypeBinding> 
fold_ty_param			    fn fold_ty_param(&mut self, tp: TyParam) -> TyParam 
fold_ty_param_bound			    fn fold_ty_param_bound(&mut self, tpb: TyParamBound) -> TyParamBound 
fold_ty_params			    fn fold_ty_params(&mut self, tps: P<[TyParam]>) -> P<[TyParam]> 
fold_usize			    fn fold_usize(&mut self, i: usize) -> usize 
fold_variant			    fn fold_variant(&mut self, v: P<Variant>) -> P<Variant> 
fold_variant_data			    fn fold_variant_data(&mut self, vdata: VariantData) -> VariantData 
fold_view_path			    fn fold_view_path(&mut self, view_path: P<ViewPath>) -> P<ViewPath> 
fold_where_clause			    fn fold_where_clause(&mut self, where_clause: WhereClause)
fold_where_predicate			    fn fold_where_predicate(&mut self, where_predicate: WherePredicate)
forbid_lifetime			    fn forbid_lifetime(&mut self) -> PResult<'a, ()> 
foreign_item_in_cfg			fn foreign_item_in_cfg<F>(cx: &mut Context<F>, item: &ast::ForeignItem) -> bool where
frag_can_be_followed_by_any			fn frag_can_be_followed_by_any(frag: &str) -> bool 
fresh_mark			pub fn fresh_mark() -> ast::Mrk 
fresh_name			pub fn fresh_name(src: ast::Ident) -> ast::Name 
from			    fn from(expr: P<Expr>) -> Self 
from			    fn from(o: Option<ThinAttributes>) -> Self 
from			    fn from(v: Vec<T>) -> Self 
from_ast_binop			    pub fn from_ast_binop(op: ast::BinOp_) -> Self 
from_diagnostic_builder			    fn from_diagnostic_builder<'c>(db: &'c DiagnosticBuilder,
from_iter			    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> P<[T]> 
from_iter			    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> SmallVector<T> 
from_render_span			    fn from_render_span(span: &RenderSpan, je: &JsonEmitter) -> DiagnosticSpan 
from_render_span			    fn from_render_span(span: &RenderSpan,
from_span			    pub fn from_span(ecx: &ExtCtxt, sp: Span) -> ErrorLocation 
from_span			    fn from_span(span: Span, je: &JsonEmitter) -> DiagnosticSpan 
from_stderr			    fn from_stderr() -> Destination 
from_str			    fn from_str(s: &str) -> Result<Mode, ()> 
from_sub_diagnostic			    fn from_sub_diagnostic<'c>(db: &'c SubDiagnostic, je: &JsonEmitter) -> Diagnostic<'c> 
from_token			    pub fn from_token(t: &Token) -> Option<AssocOp> 
from_u32			    pub fn from_u32(id: u32) -> ExpnId 
from_usize			    fn from_usize(n: usize) -> BytePos { BytePos(n as u32) }
from_usize			    fn from_usize(n: usize) -> CharPos { CharPos(n) }
from_usize			    fn from_usize(n: usize) -> Self;
from_vec			    pub fn from_vec(v: Vec<T>) -> P<[T]> 
fun_to_string			pub fn fun_to_string(decl: &ast::FnDecl,
gate			    pub fn gate(cfg: &ast::MetaItem) -> Option<GatedCfg> 
gate_feature			    fn gate_feature(&self, feature: &str, span: Span, explain: &str) 
gather_comments_and_literals			pub fn gather_comments_and_literals(span_diagnostic: &errors::Handler,
generate_test_harness			fn generate_test_harness(sess: &ParseSess,
generic_extension			fn generic_extension<'cx>(cx: &'cx ExtCtxt,
generics_to_string			pub fn generics_to_string(generics: &ast::Generics) -> String 
gensym			pub fn gensym(s: &str) -> ast::Name 
gensym			    pub fn gensym(&self, val: &str) -> Name 
gensym			    pub fn gensym(&self, val: T) -> Name 
gensym_copy			    pub fn gensym_copy(&self, idx : Name) -> Name 
gensym_ident			pub fn gensym_ident(s: &str) -> ast::Ident 
get			    pub fn get(&self, idx: Name) -> RcStr 
get			    pub fn get(&self, idx: Name) -> T 
get			    pub fn get(&self, idx: usize) -> &T 
get_exprs_from_tts			pub fn get_exprs_from_tts(cx: &mut ExtCtxt,
get_filemap			    pub fn get_filemap(&self, filename: &str) -> Rc<FileMap> 
get_ident_interner			pub fn get_ident_interner() -> Rc<IdentInterner> 
get_lifetime			    pub fn get_lifetime(&mut self) -> ast::Ident 
get_line			    pub fn get_line(&self, line_number: usize) -> Option<&str> 
get_metadata_dir			pub fn get_metadata_dir(prefix: &str) -> PathBuf 
get_metadata_path			fn get_metadata_path(directory: PathBuf, name: &str) -> PathBuf 
get_single_str_from_tts			pub fn get_single_str_from_tts(cx: &mut ExtCtxt,
get_span			    pub fn get_span(&self) -> Span 
get_spans_of_pat_idents			    fn get_spans_of_pat_idents(src: &str) -> Vec<Span> 
get_top			    pub fn get_top(&mut self) -> PrintStackElem 
get_tt			    pub fn get_tt(&self, index: usize) -> TokenTree 
get_tt			    fn get_tt(&self, index: usize) -> TokenTree 
handle_expression_like_statement			    fn handle_expression_like_statement(
hardbreak			pub fn hardbreak(p: &mut Printer) -> io::Result<()> 
hardbreak_if_not_bol			    fn hardbreak_if_not_bol(&mut self) -> io::Result<()> 
hardbreak_tok			pub fn hardbreak_tok() -> Token 
hardbreak_tok_offset			pub fn hardbreak_tok_offset(off: isize) -> Token 
has_errors			    pub fn has_errors(&self) -> bool 
has_feature			    fn has_feature(&self, feature: &str) -> bool 
has_legal_fragment_specifier			fn has_legal_fragment_specifier(tok: &Token) -> Result<(), String> 
has_lifetimes			    pub fn has_lifetimes(&self) -> bool 
has_test_signature			    fn has_test_signature(i: &ast::Item) -> HasTestSignature 
has_test_signature			    fn has_test_signature(i: &ast::Item) -> bool 
has_types			    pub fn has_types(&self) -> bool 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hashing_tests			    fn hashing_tests () 
head			    pub fn head(&mut self, w: &str) -> io::Result<()> 
help			    pub fn help(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  
highlight_lines			    fn highlight_lines(&mut self,
highlight_suggestion			    fn highlight_suggestion(&mut self,
horizontal_trim			    fn horizontal_trim(lines: Vec<String>) -> Vec<String> 
huge_word			pub fn huge_word(p: &mut Printer, wrd: &str) -> io::Result<()> 
i1			    fn i1 () 
i3			    fn i3 () 
ibox			pub fn ibox(p: &mut Printer, indent: usize) -> io::Result<()> 
ibox			    fn ibox(&mut self, u: usize) -> io::Result<()> 
id			    pub fn id(&self) -> NodeId 
id			    pub fn id(&self) -> Option<NodeId> 
id			    fn id(n: u32, s: SyntaxContext) -> Ident 
id_ext			fn id_ext(str: &str) -> ast::Ident 
id_to_interned_str			    pub fn id_to_interned_str(&mut self, id: Ident) -> InternedString 
ident			    pub fn ident(&self) -> Option<Ident> 
ident_continue			fn ident_continue(c: Option<char>) -> bool 
ident_of			    pub fn ident_of(&self, st: &str) -> ast::Ident 
ident_renamer_test			    fn ident_renamer_test () 
ident_start			fn ident_start(c: Option<char>) -> bool 
ident_to_pat			pub fn ident_to_pat(id: NodeId, s: Span, i: Ident) -> P<Pat> 
ident_to_path			pub fn ident_to_path(s: Span, identifier: Ident) -> Path 
ident_to_segment			    fn ident_to_segment(id: Ident) -> PathSegment 
ident_to_string			pub fn ident_to_string(id: ast::Ident) -> String 
ids_ext			fn ids_ext(strs: Vec<String> ) -> Vec<ast::Ident> 
idx_push			fn idx_push<T>(vec: &mut Vec<T>, val: T) -> u32 
ignored_span			fn ignored_span(sess: &ParseSess, sp: Span) -> Span 
ignored_span			fn ignored_span(cx: &TestCtxt, sp: Span) -> Span 
impl_item_to_string			pub fn impl_item_to_string(i: &ast::ImplItem) -> String 
impl_pretty_name			pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident 
in_cbox			    pub fn in_cbox(&self) -> bool 
in_cfg			fn in_cfg<T: CfgDiag>(cfg: &[P<ast::MetaItem>],
in_range			fn in_range(c: Option<char>, lo: char, hi: char) -> bool 
indent			    pub fn indent(&mut self, amount: isize) 
index			    pub fn index(&self) -> usize 
indices_are_correct			fn indices_are_correct() 
info			    pub fn info(&mut self) -> &mut BlockInfo 
inherit_from			    pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility 
init_code_map			    fn init_code_map() -> CodeMap 
init_code_map_mbc			    fn init_code_map_mbc() -> CodeMap 
init_expansion_chain			    fn init_expansion_chain(cm: &CodeMap) -> Span 
initial_matcher_pos			pub fn initial_matcher_pos(ms: Rc<Vec<TokenTree>>, sep: Option<Token>, lo: BytePos)
initial_syntax_expander_table			fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)
insert			    pub fn insert(&mut self, k: Name, v: SyntaxExtension) 
insert_macro			    pub fn insert_macro(&mut self, def: ast::MacroDef) 
int_type_of_word			fn int_type_of_word(s: &str) -> Option<IntType> 
integer_lit			pub fn integer_lit(s: &str,
intern			pub fn intern(s: &str) -> ast::Name 
intern			    pub fn intern(&self, val: &str) -> Name 
intern			    pub fn intern(&self, val: T) -> Name 
intern_and_get_ident			pub fn intern_and_get_ident(s: &str) -> InternedString 
interner			    pub mod interner;
interner_tests			    fn interner_tests () 
into			    fn into(self) -> Vec<T> 
into_attr_vec			    fn into_attr_vec(self) -> Vec<Attribute> 
into_attr_vec			    fn into_attr_vec(self) -> Vec<Attribute>;
into_iter			    fn into_iter(self) -> Self::IntoIter 
into_iter			    fn into_iter(self) -> Self::IntoIter 
into_thin_attrs			    fn into_thin_attrs(self) -> ThinAttributes 
into_thin_attrs			    fn into_thin_attrs(self) -> ThinAttributes;
into_u32			    pub fn into_u32(self) -> u32 
into_vec			    pub fn into_vec(self) -> Vec<T> 
inty			                   fn inty() -> i32 { z!() }".to_string();
is_any_keyword			    pub fn is_any_keyword(&self) -> bool 
is_assign_like			    pub fn is_assign_like(&self) -> bool 
is_at_start_of_range_notation_rhs			    fn is_at_start_of_range_notation_rhs(&self) -> bool 
is_begin			    fn is_begin(&mut self) -> bool 
is_bench_fn			fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool 
is_block_doc_comment			pub fn is_block_doc_comment(s: &str) -> bool 
is_bol			    fn is_bol(&mut self) -> bool 
is_by_value			    pub fn is_by_value(&self) -> bool 
is_by_value			    pub fn is_by_value(u: UnOp) -> bool 
is_cfg			fn is_cfg(attr: &ast::Attribute) -> bool 
is_comparison			    pub fn is_comparison(&self) -> bool 
is_comparison			    pub fn is_comparison(&self) -> bool 
is_const_item			    pub fn is_const_item(&mut self) -> bool 
is_dec_digit			fn is_dec_digit(c: Option<char>) -> bool 
is_doc_comment			pub fn is_doc_comment(s: &str) -> bool 
is_doc_comment			pub fn is_doc_comment(s: &str) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_end			    fn is_end(&mut self) -> bool 
is_eof			    fn is_eof(&self) -> bool 
is_eof			    fn is_eof(&self) -> bool;
is_eof			    pub fn is_eof(&self) -> bool 
is_fatal			    pub fn is_fatal(&self) -> bool 
is_ffi_safe			    fn is_ffi_safe(self) -> bool 
is_ffi_safe			    pub fn is_ffi_safe(&self) -> bool 
is_hardbreak_tok			    pub fn is_hardbreak_tok(&self) -> bool 
is_ident			    pub fn is_ident(&self) -> bool 
is_ignored			fn is_ignored(i: &ast::Item) -> bool 
is_imported			    pub fn is_imported(&self) -> bool 
is_in_follow			fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> 
is_keyword			    pub fn is_keyword(&self, kw: keywords::Keyword) -> bool 
is_keyword_allow_following_colon			    pub fn is_keyword_allow_following_colon(&self, kw: keywords::Keyword) -> bool 
is_legal_fragment_specifier			fn is_legal_fragment_specifier(frag: &str) -> bool 
is_lifetime			    pub fn is_lifetime(&self) -> bool 
is_like_gt			    pub fn is_like_gt(&self) -> bool 
is_lit			    pub fn is_lit(&self) -> bool 
is_lt_parameterized			    pub fn is_lt_parameterized(&self) -> bool 
is_mutability			    pub fn is_mutability(&self) -> bool 
is_named_argument			    pub fn is_named_argument(&mut self) -> bool 
is_parameterized			    pub fn is_parameterized(&self) -> bool 
is_path			pub fn is_path(e: P<Expr>) -> bool 
is_path			    pub fn is_path(&self) -> bool 
is_path_start			    fn is_path_start(&self) -> bool 
is_plain_ident			    pub fn is_plain_ident(&self) -> bool 
is_plain_ident_or_underscore			fn is_plain_ident_or_underscore(t: &token::Token) -> bool 
is_real_file			    pub fn is_real_file(&self) -> bool 
is_reserved_keyword			    pub fn is_reserved_keyword(&self) -> bool 
is_self_ident			    fn is_self_ident(&mut self) -> bool 
is_self_type_ident			    fn is_self_type_ident(&mut self) -> bool 
is_shift			    pub fn is_shift(&self) -> bool 
is_signed			    pub fn is_signed(self) -> bool 
is_stable			    pub fn is_stable(&self) -> bool { if let Stable {..} = *self { true } else { false }}
is_str			    pub fn is_str(&self) -> bool 
is_strict_keyword			    pub fn is_strict_keyword(&self) -> bool 
is_struct			    pub fn is_struct(&self) -> bool 
is_test_crate			fn is_test_crate(krate: &ast::Crate) -> bool 
is_test_fn			fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool 
is_tuple			    pub fn is_tuple(&self) -> bool 
is_type_parameterized			    pub fn is_type_parameterized(&self) -> bool 
is_unit			    pub fn is_unit(&self) -> bool 
is_unnamed			    pub fn is_unnamed(&self) -> bool 
is_unstable			    pub fn is_unstable(&self) -> bool { if let Unstable {..} = *self { true } else { false }}
is_used			pub fn is_used(attr: &Attribute) -> bool 
is_whitespace			pub fn is_whitespace(c: Option<char>) -> bool 
is_whitespace			pub fn is_whitespace(c: char) -> bool 
issue_6994			    fn issue_6994()
issue_8062			    fn issue_8062()
issue_9383			    fn issue_9383()
issue_9384			    fn issue_9384()
item			    fn item(&self, span: Span, name: Ident,
item			    fn item(&self, span: Span,
item_const			    fn item_const(&self,
item_enum			    fn item_enum(&self, span: Span, name: Ident, enum_def: ast::EnumDef) -> P<ast::Item>;
item_enum			    fn item_enum(&self, span: Span, name: Ident,
item_enum_poly			    fn item_enum_poly(&self, span: Span, name: Ident,
item_enum_poly			    fn item_enum_poly(&self,
item_fn			    fn item_fn(&self,
item_fn_poly			    fn item_fn_poly(&self,
item_in_cfg			fn item_in_cfg<F>(cx: &mut Context<F>, item: &ast::Item) -> bool where
item_macro_workaround			    fn item_macro_workaround()
item_mod			    fn item_mod(&self, span: Span, inner_span: Span, name: Ident,
item_mod			    fn item_mod(&self, span: Span, inner_span: Span,
item_static			    fn item_static(&self,
item_struct			    fn item_struct(&self, span: Span, name: Ident, struct_def: ast::VariantData) -> P<ast::Item>;
item_struct			    fn item_struct(&self, span: Span, name: Ident,
item_struct_poly			    fn item_struct_poly(&self, span: Span, name: Ident,
item_struct_poly			    fn item_struct_poly(&self,
item_to_string			pub fn item_to_string(i: &ast::Item) -> String 
item_ty			    fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> P<ast::Item> 
item_ty			    fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> P<ast::Item>;
item_ty_poly			    fn item_ty_poly(&self, span: Span, name: Ident, ty: P<ast::Ty>,
item_ty_poly			    fn item_ty_poly(&self,
item_use			    fn item_use(&self, sp: Span,
item_use_glob			    fn item_use_glob(&self, sp: Span,
item_use_list			    fn item_use_list(&self, sp: Span, vis: ast::Visibility,
item_use_simple			    fn item_use_simple(&self, sp: Span, vis: ast::Visibility, path: ast::Path) -> P<ast::Item> 
item_use_simple			    fn item_use_simple(&self, sp: Span, vis: ast::Visibility, path: ast::Path) -> P<ast::Item>;
item_use_simple_			    fn item_use_simple_(&self, sp: Span, vis: ast::Visibility,
json			pub mod json;
keywords			    pub mod keywords 
lambda			    fn lambda(&self, span: Span, ids: Vec<ast::Ident> , blk: P<ast::Block>) -> P<ast::Expr>;
lambda			    fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr> 
lambda0			    fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr> 
lambda0			    fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr>;
lambda1			    fn lambda1(&self, span: Span, blk: P<ast::Block>, ident: ast::Ident) -> P<ast::Expr> 
lambda1			    fn lambda1(&self, span: Span, blk: P<ast::Block>, ident: ast::Ident) -> P<ast::Expr>;
lambda_expr			    fn lambda_expr(&self, span: Span, ids: Vec<ast::Ident> , blk: P<ast::Expr>) -> P<ast::Expr>;
lambda_expr			    fn lambda_expr(&self, span: Span, ids: Vec<ast::Ident>,
lambda_expr_0			    fn lambda_expr_0(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Expr> 
lambda_expr_0			    fn lambda_expr_0(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Expr>;
lambda_expr_1			    fn lambda_expr_1(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr> 
lambda_expr_1			    fn lambda_expr_1(&self, span: Span, expr: P<ast::Expr>, ident: ast::Ident) -> P<ast::Expr>;
lambda_fn_decl			    fn lambda_fn_decl(&self, span: Span,
lambda_stmts			    fn lambda_stmts(&self, span: Span, ids: Vec<ast::Ident>,
lambda_stmts			    fn lambda_stmts(&self,
lambda_stmts_0			    fn lambda_stmts_0(&self, span: Span, stmts: Vec<P<ast::Stmt>>) -> P<ast::Expr> 
lambda_stmts_0			    fn lambda_stmts_0(&self, span: Span, stmts: Vec<P<ast::Stmt>>) -> P<ast::Expr>;
lambda_stmts_1			    fn lambda_stmts_1(&self, span: Span, stmts: Vec<P<ast::Stmt>>,
last_meta_item_value_str_by_name			pub fn last_meta_item_value_str_by_name(items: &[P<MetaItem>], name: &str)
last_token			    pub fn last_token(&mut self) -> Token 
lazy			    pub fn lazy(&self) -> bool 
len			    pub fn len(&self) -> usize 
len			    fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
lev_distance			    pub mod lev_distance;
lev_distance			pub fn lev_distance(a: &str, b: &str) -> usize 
lexer			pub mod lexer;
lifetime			    fn lifetime(&self, span: Span, ident: ast::Name) -> ast::Lifetime;
lifetime			    fn lifetime(&self, span: Span, name: ast::Name) -> ast::Lifetime 
lifetime_def			    fn lifetime_def(&self,
lifetime_name			    fn lifetime_name() 
lifetime_to_string			pub fn lifetime_to_string(e: &ast::Lifetime) -> String 
lifetimes			    pub fn lifetimes(&self) -> Vec<&Lifetime> 
line_doc_comments			    fn line_doc_comments() 
lit_from_token			    pub fn lit_from_token(&self, tok: &token::Token) -> PResult<'a, Lit_> 
lit_to_string			pub fn lit_to_string(l: &ast::Lit) -> String 
literal_suffixes			    fn literal_suffixes() 
literals			    fn literals(&self) -> &Option<Vec<comments::Literal>> 
literals			    fn literals(&self) -> &Option<Vec<comments::Literal>>;
load_file			    pub fn load_file(&self, path: &Path) -> io::Result<Rc<FileMap>> 
lockstep_iter_size			fn lockstep_iter_size(t: &TokenTree, r: &TtReader) -> LockstepIterSize 
look_ahead			    pub fn look_ahead<R, F>(&mut self, distance: usize, f: F) -> R where
looks_like_width_suffix			fn looks_like_width_suffix(first_chars: &[char], s: &str) -> bool 
lookup			pub fn lookup(name: &str) -> Option<Abi> 
lookup_Rust			fn lookup_Rust() 
lookup_baz			fn lookup_baz() 
lookup_byte_offset			    pub fn lookup_byte_offset(&self, bpos: BytePos) -> FileMapAndBytePos 
lookup_cdecl			fn lookup_cdecl() 
lookup_char_pos			    pub fn lookup_char_pos(&self, pos: BytePos) -> Loc 
lookup_char_pos_adj			    pub fn lookup_char_pos_adj(&self, pos: BytePos) -> LocWithOpt 
lookup_cur_matched			fn lookup_cur_matched(r: &TtReader, name: Ident) -> Option<Rc<NamedMatch>> 
lookup_cur_matched_by_matched			fn lookup_cur_matched_by_matched(r: &TtReader, start: Rc<NamedMatch>) -> Rc<NamedMatch> 
lookup_filemap_idx			    fn lookup_filemap_idx(&self, pos: BytePos) -> usize 
lookup_line			    fn lookup_line(&self, pos: BytePos) -> Result<FileMapAndLine, Rc<FileMap>> 
mac_to_string			pub fn mac_to_string(arg: &ast::Mac) -> String 
macro_in_method_posn			    fn macro_in_method_posn()
macro_parser			        pub mod macro_parser;
macro_rules			        pub mod macro_rules;
macros			    pub mod macros;
main			                  fn main() -> i32 {user!(z)}",
main			              fn main() { let outer!(g) = 13; g;}",
main			  fn main() 
make_expr			    fn make_expr(self: Box<DummyResult>) -> Option<P<ast::Expr>> 
make_expr			    fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> 
make_expr			        fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> 
make_expr			    fn make_expr(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Expr>> 
make_impl_items			    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::ImplItem>>> 
make_impl_items			    fn make_impl_items(self: Box<Self>) -> Option<SmallVector<P<ast::ImplItem>>> 
make_impl_items			    fn make_impl_items(self: Box<ParserAnyMacro<'a>>)
make_items			    fn make_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Item>>> 
make_items			    fn make_items(self: Box<Self>) -> Option<SmallVector<P<ast::Item>>> 
make_items			        fn make_items(mut self: Box<ExpandResult<'a>>)
make_items			    fn make_items(self: Box<ParserAnyMacro<'a>>) -> Option<SmallVector<P<ast::Item>>> 
make_pat			    fn make_pat(self: Box<DummyResult>) -> Option<P<ast::Pat>> 
make_pat			    fn make_pat(self: Box<Self>) -> Option<P<ast::Pat>> 
make_pat			    fn make_pat(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Pat>> 
make_stmts			    fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Stmt>>> 
make_stmts			    fn make_stmts(self: Box<Self>) -> Option<SmallVector<P<ast::Stmt>>> 
make_stmts			    fn make_stmts(self: Box<ParserAnyMacro<'a>>)
make_ty			    fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> 
make_ty			    fn make_ty(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Ty>> 
many			    pub fn many(vs: Vec<T>) -> SmallVector<T> 
map			    pub fn map<F>(mut self, f: F) -> P<T> where
map			    pub fn map<U, F: FnMut(&T) -> U>(&self, f: F) -> P<[U]> 
map_item_or			    pub fn map_item_or<F, G>(self, mut f: F, mut or: G) -> Annotatable
map_opt_string			    fn map_opt_string(s: Option<String>, je: &JsonEmitter) -> Option<DiagnosticCode> 
map_thin_attrs			    fn map_thin_attrs<F>(self, f: F) -> Self
mark_expr			fn mark_expr(expr: P<ast::Expr>, m: Mrk) -> P<ast::Expr> 
mark_ident			    fn mark_ident(id : ast::Ident, m : ast::Mrk) -> ast::Ident 
mark_impl_item			fn mark_impl_item(ii: P<ast::ImplItem>, m: Mrk) -> P<ast::ImplItem> 
mark_item			fn mark_item(expr: P<ast::Item>, m: Mrk) -> P<ast::Item> 
mark_pat			fn mark_pat(pat: P<ast::Pat>, m: Mrk) -> P<ast::Pat> 
mark_stmt			fn mark_stmt(stmt: P<ast::Stmt>, m: Mrk) -> P<ast::Stmt> 
mark_tts			fn mark_tts(tts: &[TokenTree], m: Mrk) -> Vec<TokenTree> 
mark_ty			fn mark_ty(ty: P<ast::Ty>, m: Mrk) -> P<ast::Ty> 
mark_used			pub fn mark_used(attr: &Attribute) 
marksof			pub fn marksof(ctxt: SyntaxContext, stopname: Name) -> Vec<Mrk> 
marksof_internal			fn marksof_internal(ctxt: SyntaxContext,
match_callees			    fn match_callees(&self, sp_a: &Span, sp_b: &Span) -> bool 
matches_codepattern			pub fn matches_codepattern(a : &str, b : &str) -> bool 
max			    pub fn max() -> IdRange 
maybe_aborted			pub fn maybe_aborted<T>(result: T, p: Parser) -> T 
maybe_append			fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)
maybe_inject_crates_ref			pub fn maybe_inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>)
maybe_inject_prelude			pub fn maybe_inject_prelude(sess: &ParseSess, krate: ast::Crate) -> ast::Crate 
maybe_parse_borrowed_explicit_self			        fn maybe_parse_borrowed_explicit_self<'b>(this: &mut Parser<'b>)
maybe_parse_fixed_length_of_vec			    pub fn maybe_parse_fixed_length_of_vec(&mut self) -> PResult<'a, Option<P<ast::Expr>>> 
maybe_print_comment			    fn maybe_print_comment(&mut self, pos: BytePos) -> io::Result<()> 
maybe_print_trailing_comment			    pub fn maybe_print_trailing_comment(&mut self, span: codemap::Span,
maybe_stage_features			fn maybe_stage_features(span_handler: &Handler, krate: &ast::Crate,
meta			    fn meta(&self) -> &MetaItem 
meta			    fn meta(&self) -> &MetaItem;
meta_item_list			    fn meta_item_list(&self) -> Option<&[P<MetaItem>]> 
meta_item_list			    fn meta_item_list(&self) -> Option<&[P<MetaItem>]>;
meta_item_to_string			pub fn meta_item_to_string(mi: &ast::MetaItem) -> String 
meta_list			    fn meta_list(&self,
meta_name_value			    fn meta_name_value(&self,
meta_word			    fn meta_word(&self, sp: Span, w: InternedString) -> P<ast::MetaItem> 
meta_word			    fn meta_word(&self, sp: Span, w: InternedString) -> P<ast::MetaItem>;
metadata			    pub mod metadata;
method_arg_hygiene			    fn method_arg_hygiene()
method_arg_hygiene_2			    fn method_arg_hygiene_2()
mk_assign_op			    pub fn mk_assign_op(&mut self, binop: ast::BinOp,
mk_ast_path			fn mk_ast_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> 
mk_attr_id			pub fn mk_attr_id() -> AttrId 
mk_attr_inner			pub fn mk_attr_inner(id: AttrId, item: P<MetaItem>) -> Attribute 
mk_attr_outer			pub fn mk_attr_outer(id: AttrId, item: P<MetaItem>) -> Attribute 
mk_binary			    pub fn mk_binary(&mut self, binop: ast::BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ast::Expr_ 
mk_binop			fn mk_binop(cx: &ExtCtxt, sp: Span, bop: token::BinOpToken) -> P<ast::Expr> 
mk_call			    pub fn mk_call(&mut self, f: P<Expr>, args: Vec<P<Expr>>) -> ast::Expr_ 
mk_delim			fn mk_delim(cx: &ExtCtxt, sp: Span, delim: token::DelimToken) -> P<ast::Expr> 
mk_expr			    pub fn mk_expr(&mut self, lo: BytePos, hi: BytePos,
mk_field			    pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::Expr_ 
mk_fresh_ident_interner			    fn mk_fresh_ident_interner() -> IdentInterner 
mk_ident			fn mk_ident(cx: &ExtCtxt, sp: Span, ident: ast::Ident) -> P<ast::Expr> 
mk_ident			    fn mk_ident(id: &str, style: token::IdentStyle) -> token::Token 
mk_index			    pub fn mk_index(&mut self, expr: P<Expr>, idx: P<Expr>) -> ast::Expr_ 
mk_item			    fn mk_item(&mut self, lo: BytePos, hi: BytePos, ident: Ident,
mk_list_item			pub fn mk_list_item(name: InternedString, items: Vec<P<MetaItem>>) -> P<MetaItem> 
mk_lit_u32			    pub fn mk_lit_u32(&mut self, i: u32, attrs: ThinAttributes) -> P<Expr> 
mk_mac_expr			    pub fn mk_mac_expr(&mut self, lo: BytePos, hi: BytePos,
mk_main			fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> 
mk_method_call			    fn mk_method_call(&mut self,
mk_name			fn mk_name(cx: &ExtCtxt, sp: Span, ident: ast::Ident) -> P<ast::Expr> 
mk_name_value_item			pub fn mk_name_value_item(name: InternedString, value: ast::Lit)
mk_name_value_item_str			pub fn mk_name_value_item_str(name: InternedString, value: InternedString)
mk_parser_path			fn mk_parser_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> 
mk_printer			pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> 
mk_range			    pub fn mk_range(&mut self,
mk_reexport_mod			fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,
mk_sh			    fn mk_sh(cm: Rc<CodeMap>) -> errors::Handler 
mk_sp			pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span 
mk_std			fn mk_std(cx: &TestCtxt) -> P<ast::Item> 
mk_stmts_let			fn mk_stmts_let(cx: &ExtCtxt, sp: Span) -> Vec<P<ast::Stmt>> 
mk_substr_filename			    pub fn mk_substr_filename(&self, sp: Span) -> String 
mk_sugared_doc_attr			pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos,
mk_test_desc_and_fn_rec			fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> 
mk_test_descs			fn mk_test_descs(cx: &TestCtxt) -> P<ast::Expr> 
mk_test_module			fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) 
mk_tests			fn mk_tests(cx: &TestCtxt) -> P<ast::Item> 
mk_token_path			fn mk_token_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> 
mk_tt_path			fn mk_tt_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> 
mk_tup_field			    pub fn mk_tup_field(&mut self, expr: P<Expr>, idx: codemap::Spanned<usize>) -> ast::Expr_ 
mk_unary			    pub fn mk_unary(&mut self, unop: ast::UnOp, expr: P<Expr>) -> ast::Expr_ 
mk_word_item			pub fn mk_word_item(name: InternedString) -> P<MetaItem> 
mod_path			    pub fn mod_path(&self) -> Vec<ast::Ident> 
mod_pop			    pub fn mod_pop(&mut self) { self.mod_path.pop().unwrap(); }
mod_push			    pub fn mod_push(&mut self, i: ast::Ident) { self.mod_path.push(i); }
modify_for_testing			pub fn modify_for_testing(sess: &ParseSess,
move_flat_map			    fn move_flat_map<F, I>(mut self, mut f: F) -> Self
move_flat_map			    fn move_flat_map<F, I>(self, f: F) -> Self
move_flat_map			    fn move_flat_map<F, I>(self, mut f: F) -> Self
move_iter			    pub fn move_iter(self) -> vec::IntoIter<T> 
move_map			    pub mod move_map;
move_map			    fn move_map<F>(self, mut f: F) -> Self where F: FnMut(T) -> T 
mtwt			    pub mod mtwt;
mtwt_eq			    pub fn mtwt_eq(&self, other : &Token) -> bool 
mtwt_resolve_test			    fn mtwt_resolve_test()
n_rec			    fn n_rec(p_s: &ParseSess, m: &TokenTree, res: &[Rc<NamedMatch>],
name			    pub fn name(&self) -> &'static str 
name			    pub fn name(&self) -> Option<Ident> 
name			    fn name(&self) -> InternedString { (**self).name() }
name			    fn name(&self) -> InternedString { self.meta().name() }
name			    fn name(&self) -> InternedString 
name			    fn name(&self) -> InternedString;
name			    pub fn name(&self) -> Name 
name_from			    pub fn name_from(&self, start: BytePos) -> ast::Name 
name_from_to			    pub fn name_from_to(&self, start: BytePos, end: BytePos) -> ast::Name 
name_of			    pub fn name_of(&self, st: &str) -> ast::Name 
nameize			pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])
nbsp			    fn nbsp(&mut self) -> io::Result<()> { word(self.writer(), " ") }
ne			    fn ne(&self, other: &Span) -> bool { !(*self).eq(other) }
ne			    fn ne(&self, other: & &'a str) -> bool 
ne			    fn ne(&self, other: &InternedString) -> bool 
needs_parentheses			fn needs_parentheses(expr: &ast::Expr) -> bool 
nested_block_comments			    fn nested_block_comments() 
new			    pub fn new(name: Name, ctxt: SyntaxContext) -> Ident 
new			    pub fn new<T: IntSign>(n: T) -> Sign 
new			    pub fn new() -> IdRangeComputingVisitor 
new			    pub fn new() -> CodeMap 
new			    pub fn new(descriptions: &[(&'static str, &'static str)]) -> Registry 
new			    pub fn new(dst: Box<Write + Send>,
new			    fn new(span: Option<Span>,
new			    fn new(emitter: &'a RefCell<Box<Emitter>>,
new			    fn new() -> SyntaxEnv 
new			    pub fn new() -> BlockInfo 
new			    pub fn new(parse_sess: &'a parse::ParseSess, cfg: ast::CrateConfig,
new			    pub fn new(cx: &'a mut ExtCtxt<'b>) -> MacroExpander<'a, 'b> 
new			    fn new(tts: &[TokenTree]) -> FirstSets 
new			    pub fn new() -> Features 
new			    pub fn new<'b>(span_diagnostic: &'b Handler,
new			    pub fn new() -> ParseSess 
new			    pub fn new(sess: &'a ParseSess,
new			    pub fn new(string: &'static str) -> InternedString 
new			    pub fn new(cm: &'a CodeMap,
new			    pub fn new() -> P<[T]> 
new			    pub fn new() -> Interner<T> 
new			    pub fn new() -> StrInterner 
new			    pub fn new(string: &str) -> RcStr 
new			    pub fn new() -> NodeCounter 
new_filemap			    pub fn new_filemap(&self, filename: FileName, mut src: String) -> Rc<FileMap> 
new_filemap_and_lines			    pub fn new_filemap_and_lines(&self, filename: &str, src: &str) -> Rc<FileMap> 
new_from_input			    pub fn new_from_input(cm: &'a CodeMap,
new_from_name			    pub fn new_from_name(name: ast::Name) -> InternedString 
new_from_rc_str			    fn new_from_rc_str(string: RcStr) -> InternedString 
new_id			    fn new_id(&mut self, i: NodeId) -> NodeId 
new_imported_filemap			    pub fn new_imported_filemap(&self,
new_parser_from_file			pub fn new_parser_from_file<'a>(sess: &'a ParseSess,
new_parser_from_source_str			pub fn new_parser_from_source_str<'a>(sess: &'a ParseSess,
new_parser_from_tts			    pub fn new_parser_from_tts(&self, tts: &[ast::TokenTree])
new_parser_from_tts			pub fn new_parser_from_tts<'a>(sess: &'a ParseSess,
new_raw			    pub fn new_raw<'b>(span_diagnostic: &'b Handler,
new_resolves_test			    fn new_resolves_test() 
new_sctable_internal			fn new_sctable_internal() -> SCTable 
new_self			    pub fn new_self(span: Span, mutability: Mutability, self_ident: Ident) -> Arg 
new_span			    fn new_span(&mut self, span: Span) -> Span 
new_span			fn new_span(cx: &ExtCtxt, sp: Span) -> Span 
new_span			    fn new_span(&mut self, sp: Span) -> Span 
new_sub_parser_from_file			pub fn new_sub_parser_from_file<'a>(sess: &'a ParseSess,
new_tt_reader			pub fn new_tt_reader<'a>(sp_diag: &'a Handler,
new_tt_reader_with_doc_flag			pub fn new_tt_reader_with_doc_flag<'a>(sp_diag: &'a Handler,
next			    fn next(&mut self) -> Option<T> 
next_comment			    fn next_comment(&mut self) -> Option<comments::Comment> 
next_line			    pub fn next_line(&self, pos: BytePos) 
next_lit			    fn next_lit(&mut self, pos: BytePos) -> Option<comments::Literal> 
next_node_id			    fn next_node_id(&self) -> NodeId;
next_start_pos			    fn next_start_pos(&self) -> usize 
next_token			    fn next_token(&mut self) -> TokenAndSpan 
next_token			    fn next_token(&mut self) -> TokenAndSpan;
next_token_inner			    fn next_token_inner(&mut self) -> token::Token 
nextch			    pub fn nextch(&self) -> Option<char> 
nextch_is			    pub fn nextch_is(&self, c: char) -> bool 
nextnextch			    pub fn nextnextch(&self) -> Option<char> 
nextnextch_is			    pub fn nextnextch_is(&self, c: char) -> bool 
no_core			pub fn no_core(krate: &ast::Crate) -> bool 
no_prelude			fn no_prelude(attrs: &[ast::Attribute]) -> bool 
no_std			pub fn no_std(krate: &ast::Crate) -> bool 
node_count			    pub mod node_count;
node_survives_cfg			fn node_survives_cfg(attrs: &[ast::Attribute],
none			    pub fn none() -> PathParameters 
noop_fold_angle_bracketed_parameter_data			pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedParameterData,
noop_fold_arg			pub fn noop_fold_arg<T: Folder>(Arg {id, pat, ty}: Arg, fld: &mut T) -> Arg 
noop_fold_arm			pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm, fld: &mut T) -> Arm 
noop_fold_attribute			pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Option<Attribute> 
noop_fold_block			pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> 
noop_fold_bounds			fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T)
noop_fold_crate			pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, config, mut exported_macros, span}: Crate,
noop_fold_decl			pub fn noop_fold_decl<T: Folder>(d: P<Decl>, fld: &mut T) -> SmallVector<P<Decl>> 
noop_fold_explicit_self			pub fn noop_fold_explicit_self<T: Folder>(Spanned {span, node}: ExplicitSelf, fld: &mut T)
noop_fold_explicit_self_underscore			pub fn noop_fold_explicit_self_underscore<T: Folder>(es: ExplicitSelf_, fld: &mut T)
noop_fold_expr			pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mut T) -> Expr 
noop_fold_exprs			pub fn noop_fold_exprs<T: Folder>(es: Vec<P<Expr>>, folder: &mut T) -> Vec<P<Expr>> 
noop_fold_field			pub fn noop_fold_field<T: Folder>(Field {ident, expr, span}: Field, folder: &mut T) -> Field 
noop_fold_fn_decl			pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> 
noop_fold_foreign_item			pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) -> P<ForeignItem> 
noop_fold_foreign_mod			pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,
noop_fold_generics			pub fn noop_fold_generics<T: Folder>(Generics {ty_params, lifetimes, where_clause}: Generics,
noop_fold_ident			pub fn noop_fold_ident<T: Folder>(i: Ident, _: &mut T) -> Ident 
noop_fold_impl_item			pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T)
noop_fold_interpolated			pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)
noop_fold_item			pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> SmallVector<P<Item>> 
noop_fold_item_simple			pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}: Item,
noop_fold_item_underscore			pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ 
noop_fold_lifetime			pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime 
noop_fold_lifetime_def			pub fn noop_fold_lifetime_def<T: Folder>(l: LifetimeDef, fld: &mut T)
noop_fold_lifetime_defs			pub fn noop_fold_lifetime_defs<T: Folder>(lts: Vec<LifetimeDef>, fld: &mut T)
noop_fold_lifetimes			pub fn noop_fold_lifetimes<T: Folder>(lts: Vec<Lifetime>, fld: &mut T) -> Vec<Lifetime> 
noop_fold_local			pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> 
noop_fold_mac			pub fn noop_fold_mac<T: Folder>(Spanned {node, span}: Mac, fld: &mut T) -> Mac 
noop_fold_meta_item			pub fn noop_fold_meta_item<T: Folder>(mi: P<MetaItem>, fld: &mut T) -> P<MetaItem> 
noop_fold_meta_items			pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<P<MetaItem>>, fld: &mut T)
noop_fold_method_sig			pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig 
noop_fold_mod			pub fn noop_fold_mod<T: Folder>(Mod {inner, items}: Mod, folder: &mut T) -> Mod 
noop_fold_mt			pub fn noop_fold_mt<T: Folder>(MutTy {ty, mutbl}: MutTy, folder: &mut T) -> MutTy 
noop_fold_opt_bounds			pub fn noop_fold_opt_bounds<T: Folder>(b: Option<TyParamBounds>, folder: &mut T)
noop_fold_opt_expr			pub fn noop_fold_opt_expr<T: Folder>(e: P<Expr>, folder: &mut T) -> Option<P<Expr>> 
noop_fold_opt_lifetime			pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: Option<Lifetime>, fld: &mut T)
noop_fold_parenthesized_parameter_data			pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedParameterData,
noop_fold_pat			pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> 
noop_fold_path			pub fn noop_fold_path<T: Folder>(Path {global, segments, span}: Path, fld: &mut T) -> Path 
noop_fold_path_parameters			pub fn noop_fold_path_parameters<T: Folder>(path_parameters: PathParameters, fld: &mut T)
noop_fold_poly_trait_ref			pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> PolyTraitRef 
noop_fold_stmt			pub fn noop_fold_stmt<T: Folder>(Spanned {node, span}: Stmt, folder: &mut T)
noop_fold_struct_field			pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField 
noop_fold_token			pub fn noop_fold_token<T: Folder>(t: token::Token, fld: &mut T) -> token::Token 
noop_fold_trait_item			pub fn noop_fold_trait_item<T: Folder>(i: P<TraitItem>, folder: &mut T)
noop_fold_trait_ref			pub fn noop_fold_trait_ref<T: Folder>(p: TraitRef, fld: &mut T) -> TraitRef 
noop_fold_tt			pub fn noop_fold_tt<T: Folder>(tt: &TokenTree, fld: &mut T) -> TokenTree 
noop_fold_tts			pub fn noop_fold_tts<T: Folder>(tts: &[TokenTree], fld: &mut T) -> Vec<TokenTree> 
noop_fold_ty			pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> 
noop_fold_ty_binding			pub fn noop_fold_ty_binding<T: Folder>(b: P<TypeBinding>, fld: &mut T) -> P<TypeBinding> 
noop_fold_ty_param			pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam 
noop_fold_ty_param_bound			pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)
noop_fold_ty_params			pub fn noop_fold_ty_params<T: Folder>(tps: P<[TyParam]>, fld: &mut T)
noop_fold_usize			pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize 
noop_fold_variant			pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> 
noop_fold_variant_data			pub fn noop_fold_variant_data<T: Folder>(vdata: VariantData, fld: &mut T) -> VariantData 
noop_fold_view_path			pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<ViewPath> 
noop_fold_where_clause			pub fn noop_fold_where_clause<T: Folder>(
noop_fold_where_predicate			pub fn noop_fold_where_predicate<T: Folder>(
nospan			fn nospan<T>(t: T) -> codemap::Spanned<T> 
note			    pub fn note(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  
note_without_error			    pub fn note_without_error(&self, msg: &str) 
obsolete			pub mod obsolete;
obsolete			    fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) 
obsolete			    fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax);
one			    pub fn one(v: T) -> SmallVector<T> 
open_token			    pub fn open_token(&self) -> token::Token 
open_tt			    pub fn open_tt(&self) -> TokenTree 
or			                                                           struct or unit enum variant")
original_sp			pub fn original_sp(cm: &CodeMap, sp: Span, enclosing_sp: Span) -> Span 
original_span			    pub fn original_span(&self) -> Span 
outer_mark			pub fn outer_mark(ctxt: SyntaxContext) -> Mrk 
output_metadata			pub fn output_metadata(ecx: &ExtCtxt, prefix: &str, name: &str, err_map: &ErrorMap)
owned_slice			pub mod owned_slice;
parse			    pub fn parse(cx: &base::ExtCtxt, mtch: &[TokenTree], tts: &[TokenTree])
parse			pub fn parse(sess: &ParseSess,
parse			pub mod parse;
parse_all_token_trees			    pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> 
parse_arg			    pub fn parse_arg(&mut self) -> PResult<'a, Arg> 
parse_arg_general			    pub fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> 
parse_arg_panic			pub fn parse_arg_panic(parser: &mut Parser) -> Arg 
parse_arguments_to_quote			fn parse_arguments_to_quote(cx: &ExtCtxt, tts: &[TokenTree])
parse_arm			    pub fn parse_arm(&mut self) -> PResult<'a, Arm> 
parse_arm_panic			pub fn parse_arm_panic(parser: &mut Parser) -> Arm 
parse_assoc_expr			    pub fn parse_assoc_expr(&mut self,
parse_assoc_expr_with			    pub fn parse_assoc_expr_with(&mut self,
parse_attribute			    pub fn parse_attribute(&mut self, permit_inner: bool) -> PResult<'a, ast::Attribute> 
parse_attribute_panic			pub fn parse_attribute_panic(parser: &mut Parser, permit_inner: bool) -> ast::Attribute 
parse_block			    pub fn parse_block(&mut self) -> PResult<'a, P<Block>> 
parse_block_expr			    pub fn parse_block_expr(&mut self, lo: BytePos, blk_mode: BlockCheckMode,
parse_block_panic			pub fn parse_block_panic(parser: &mut Parser) -> P<Block> 
parse_block_tail			    fn parse_block_tail(&mut self, lo: BytePos, s: BlockCheckMode) -> PResult<'a, P<Block>> 
parse_borrowed_pointee			    pub fn parse_borrowed_pointee(&mut self) -> PResult<'a, Ty_> 
parse_bottom_expr			    fn parse_bottom_expr(&mut self) -> PResult<'a, P<Expr>> 
parse_colon_then_ty_param_bounds			    fn parse_colon_then_ty_param_bounds(&mut self,
parse_crate_attrs_from_file			pub fn parse_crate_attrs_from_file(
parse_crate_attrs_from_source_str			pub fn parse_crate_attrs_from_source_str(name: String,
parse_crate_from_file			pub fn parse_crate_from_file(
parse_crate_from_source_str			pub fn parse_crate_from_source_str(name: String,
parse_crate_mod			    pub fn parse_crate_mod(&mut self) -> PResult<'a, Crate> 
parse_dot_or_call_expr			    pub fn parse_dot_or_call_expr(&mut self,
parse_dot_or_call_expr_with			    pub fn parse_dot_or_call_expr_with(&mut self,
parse_dot_or_call_expr_with_			    fn parse_dot_or_call_expr_with_(&mut self, e0: P<Expr>) -> PResult<'a, P<Expr>> 
parse_else_expr			    pub fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> 
parse_enum_def			    fn parse_enum_def(&mut self, _generics: &ast::Generics) -> PResult<'a, EnumDef> 
parse_enum_variant_seq			    pub fn parse_enum_variant_seq<T, F>(&mut self,
parse_expr			        fn parse_expr(&self, s: String) -> P<ast::Expr> 
parse_expr			        fn parse_expr(&self, s: String) -> P<ast::Expr>;
parse_expr			    pub fn parse_expr(&mut self) -> PResult<'a, P<Expr>> 
parse_expr_from_source_str			pub fn parse_expr_from_source_str(name: String,
parse_expr_panic			pub fn parse_expr_panic(parser: &mut Parser) -> P<Expr> 
parse_expr_res			    pub fn parse_expr_res(&mut self, r: Restrictions,
parse_field			    pub fn parse_field(&mut self) -> PResult<'a, Field> 
parse_fn_args			    fn parse_fn_args(&mut self, named_args: bool, allow_variadic: bool)
parse_fn_block_arg			    pub fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> 
parse_fn_block_decl			    fn parse_fn_block_decl(&mut self) -> PResult<'a, P<FnDecl>> 
parse_fn_decl			    pub fn parse_fn_decl(&mut self, allow_variadic: bool) -> PResult<'a, P<FnDecl>> 
parse_fn_decl_with_self			    fn parse_fn_decl_with_self<F>(&mut self,
parse_fn_front_matter			    pub fn parse_fn_front_matter(&mut self)
parse_fn_header			    fn parse_fn_header(&mut self) -> PResult<'a, (Ident, ast::Generics)> 
parse_for_expr			    pub fn parse_for_expr(&mut self, opt_ident: Option<ast::Ident>,
parse_for_in_type			    pub fn parse_for_in_type(&mut self) -> PResult<'a, Ty_> 
parse_foreign_item			    fn parse_foreign_item(&mut self) -> PResult<'a, Option<P<ForeignItem>>> 
parse_generic_values_after_lt			    fn parse_generic_values_after_lt(&mut self) -> PResult<'a, (Vec<ast::Lifetime>,
parse_generics			    pub fn parse_generics(&mut self) -> PResult<'a, ast::Generics> 
parse_ident			    pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> 
parse_ident_or_self_type			    pub fn parse_ident_or_self_type(&mut self) -> PResult<'a, ast::Ident> 
parse_if_expr			    pub fn parse_if_expr(&mut self, attrs: ThinAttributes) -> PResult<'a, P<Expr>> 
parse_if_let_expr			    pub fn parse_if_let_expr(&mut self, attrs: ThinAttributes)
parse_impl_item			    pub fn parse_impl_item(&mut self) -> PResult<'a, P<ImplItem>> 
parse_impl_method			    fn parse_impl_method(&mut self, vis: Visibility)
parse_initializer			    fn parse_initializer(&mut self) -> PResult<'a, Option<P<Expr>>> 
parse_inner_attributes			    pub fn parse_inner_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> 
parse_inner_attrs_and_block			    fn parse_inner_attrs_and_block(&mut self) -> PResult<'a, (Vec<Attribute>, P<Block>)> 
parse_item			        fn parse_item(&self, s: String) -> P<ast::Item> 
parse_item			        fn parse_item(&self, s: String) -> P<ast::Item>;
parse_item			    pub fn parse_item(&mut self) -> PResult<'a, Option<P<Item>>> 
parse_item_			    fn parse_item_(&mut self, attrs: Vec<Attribute>,
parse_item_const			    fn parse_item_const(&mut self, m: Option<Mutability>) -> PResult<'a, ItemInfo> 
parse_item_enum			    fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> 
parse_item_extern_crate			    fn parse_item_extern_crate(&mut self,
parse_item_fn			    fn parse_item_fn(&mut self,
parse_item_foreign_fn			    fn parse_item_foreign_fn(&mut self, vis: ast::Visibility, lo: BytePos,
parse_item_foreign_mod			    fn parse_item_foreign_mod(&mut self,
parse_item_foreign_static			    fn parse_item_foreign_static(&mut self, vis: ast::Visibility, lo: BytePos,
parse_item_from_source_str			pub fn parse_item_from_source_str(name: String,
parse_item_impl			    fn parse_item_impl(&mut self, unsafety: ast::Unsafety) -> PResult<'a, ItemInfo> 
parse_item_mod			    fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> 
parse_item_panic			pub fn parse_item_panic(parser: &mut Parser) -> Option<P<Item>> 
parse_item_struct			    fn parse_item_struct(&mut self) -> PResult<'a, ItemInfo> 
parse_item_trait			    fn parse_item_trait(&mut self, unsafety: Unsafety) -> PResult<'a, ItemInfo> 
parse_item_type			    fn parse_item_type(&mut self) -> PResult<'a, ItemInfo> 
parse_kleene_op			        fn parse_kleene_op<'a>(parser: &mut Parser<'a>) -> PResult<'a,  Option<ast::KleeneOp>> 
parse_lambda_expr			    pub fn parse_lambda_expr(&mut self, lo: BytePos,
parse_late_bound_lifetime_defs			    fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<ast::LifetimeDef>> 
parse_let			    fn parse_let(&mut self, attrs: ThinAttributes) -> PResult<'a, P<Decl>> 
parse_lifetime			    pub fn parse_lifetime(&mut self) -> PResult<'a, ast::Lifetime> 
parse_lifetime_defs			    pub fn parse_lifetime_defs(&mut self) -> PResult<'a, Vec<ast::LifetimeDef>> 
parse_lifetimes			    pub fn parse_lifetimes(&mut self, sep: token::Token) -> PResult<'a, Vec<ast::Lifetime>> 
parse_lit			    pub fn parse_lit(&mut self) -> PResult<'a, Lit> 
parse_local			    fn parse_local(&mut self, attrs: ThinAttributes) -> PResult<'a, P<Local>> 
parse_loop_expr			    pub fn parse_loop_expr(&mut self, opt_ident: Option<ast::Ident>,
parse_macro_use_or_failure			    fn parse_macro_use_or_failure(
parse_match_expr			    fn parse_match_expr(&mut self, attrs: ThinAttributes) -> PResult<'a, P<Expr>> 
parse_meta_from_source_str			pub fn parse_meta_from_source_str(name: String,
parse_meta_item			    pub fn parse_meta_item(&mut self) -> PResult<'a, P<ast::MetaItem>> 
parse_meta_item_panic			pub fn parse_meta_item_panic(parser: &mut Parser) -> P<ast::MetaItem> 
parse_meta_seq			    fn parse_meta_seq(&mut self) -> PResult<'a, Vec<P<ast::MetaItem>>> 
parse_mod_items			    fn parse_mod_items(&mut self, term: &token::Token, inner_lo: BytePos) -> PResult<'a, Mod> 
parse_mt			    pub fn parse_mt(&mut self) -> PResult<'a, MutTy> 
parse_mutability			    pub fn parse_mutability(&mut self) -> PResult<'a, Mutability> 
parse_name_and_ty			    fn parse_name_and_ty(&mut self, pr: Visibility,
parse_non_delim_tt_tok			        fn parse_non_delim_tt_tok<'b>(p: &mut Parser<'b>) -> PResult<'b,  TokenTree> 
parse_nt			pub fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal 
parse_obsolete_closure_kind			    pub fn parse_obsolete_closure_kind(&mut self) -> PResult<'a, ()> 
parse_opt_abi			    fn parse_opt_abi(&mut self) -> PResult<'a, Option<abi::Abi>> 
parse_opt_lifetime			    pub fn parse_opt_lifetime(&mut self) -> PResult<'a, Option<ast::Lifetime>> 
parse_optional_str			    pub fn parse_optional_str(&mut self)
parse_or_use_outer_attributes			    fn parse_or_use_outer_attributes(&mut self,
parse_outer_attributes			    pub fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> 
parse_pat			    pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> 
parse_pat_fields			    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<codemap::Spanned<ast::FieldPat>> , bool)> 
parse_pat_ident			    fn parse_pat_ident(&mut self,
parse_pat_literal_maybe_minus			    pub fn parse_pat_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> 
parse_pat_panic			pub fn parse_pat_panic(parser: &mut Parser) -> P<Pat> 
parse_pat_range_end			    fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> 
parse_pat_tuple_elements			    fn parse_pat_tuple_elements(&mut self) -> PResult<'a, Vec<P<Pat>>> 
parse_pat_vec_elements			    fn parse_pat_vec_elements(
parse_path			    pub fn parse_path(&mut self, mode: PathParsingMode) -> PResult<'a, ast::Path> 
parse_path_list_item			    pub fn parse_path_list_item(&mut self) -> PResult<'a, ast::PathListItem> 
parse_path_panic			pub fn parse_path_panic(parser: &mut Parser, mode: PathParsingMode) -> ast::Path 
parse_path_segments_with_colons			    pub fn parse_path_segments_with_colons(&mut self) -> PResult<'a, Vec<ast::PathSegment>> 
parse_path_segments_without_colons			    pub fn parse_path_segments_without_colons(&mut self) -> PResult<'a, Vec<ast::PathSegment>> 
parse_path_segments_without_types			    pub fn parse_path_segments_without_types(&mut self) -> PResult<'a, Vec<ast::PathSegment>> 
parse_pats			    fn parse_pats(&mut self) -> PResult<'a, Vec<P<Pat>>> 
parse_poly_trait_ref			    fn parse_poly_trait_ref(&mut self) -> PResult<'a, PolyTraitRef> 
parse_prefix_expr			    pub fn parse_prefix_expr(&mut self,
parse_prefix_range_expr			    fn parse_prefix_range_expr(&mut self,
parse_ptr			    pub fn parse_ptr(&mut self) -> PResult<'a, MutTy> 
parse_qualified_path			    pub fn parse_qualified_path(&mut self, mode: PathParsingMode)
parse_record_struct_body			    pub fn parse_record_struct_body(&mut self,
parse_rename			    fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> 
parse_ret_ty			    pub fn parse_ret_ty(&mut self) -> PResult<'a, FunctionRetTy> 
parse_sep_and_kleene_op			    pub fn parse_sep_and_kleene_op(&mut self)
parse_seq			    pub fn parse_seq<T, F>(&mut self,
parse_seq_to_before_end			    pub fn parse_seq_to_before_end<T, F>(&mut self,
parse_seq_to_before_gt			    pub fn parse_seq_to_before_gt<T, F>(&mut self,
parse_seq_to_before_gt_or_return			    pub fn parse_seq_to_before_gt_or_return<T, F>(&mut self,
parse_seq_to_end			    pub fn parse_seq_to_end<T, F>(&mut self,
parse_seq_to_gt			    pub fn parse_seq_to_gt<T, F>(&mut self,
parse_seq_to_gt_or_return			    pub fn parse_seq_to_gt_or_return<T, F>(&mut self,
parse_sess			    pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }
parse_single_struct_field			    pub fn parse_single_struct_field(&mut self,
parse_stmt			        fn parse_stmt(&self, s: String) -> P<ast::Stmt> 
parse_stmt			        fn parse_stmt(&self, s: String) -> P<ast::Stmt>;
parse_stmt			    pub fn parse_stmt(&mut self) -> PResult<'a, Option<P<Stmt>>> 
parse_stmt_			    fn parse_stmt_(&mut self) -> PResult<'a, Option<Stmt>> 
parse_stmt_from_source_str			pub fn parse_stmt_from_source_str(name: String,
parse_stmt_panic			pub fn parse_stmt_panic(parser: &mut Parser) -> Option<P<Stmt>> 
parse_str			    pub fn parse_str(&mut self) -> PResult<'a, (InternedString, StrStyle)> 
parse_struct_decl_field			    fn parse_struct_decl_field(&mut self, parse_pub: ParsePub) -> PResult<'a, StructField> 
parse_token_tree			    pub fn parse_token_tree(&mut self) -> PResult<'a, TokenTree> 
parse_trait_items			    pub fn parse_trait_items(&mut self) -> PResult<'a,  Vec<P<TraitItem>>> 
parse_trait_ref			    fn parse_trait_ref(&mut self) -> PResult<'a, TraitRef> 
parse_tts			        fn parse_tts(&self, s: String) -> Vec<TokenTree> 
parse_tts			        fn parse_tts(&self, s: String) -> Vec<TokenTree>;
parse_tts_from_source_str			pub fn parse_tts_from_source_str(name: String,
parse_tuple_struct_body			    pub fn parse_tuple_struct_body(&mut self,
parse_ty			    pub fn parse_ty(&mut self) -> PResult<'a, P<Ty>> 
parse_ty_bare_fn			    pub fn parse_ty_bare_fn(&mut self, lifetime_defs: Vec<ast::LifetimeDef>) -> PResult<'a, Ty_> 
parse_ty_panic			pub fn parse_ty_panic(parser: &mut Parser) -> P<Ty> 
parse_ty_param			    fn parse_ty_param(&mut self) -> PResult<'a, TyParam> 
parse_ty_param_bounds			    fn parse_ty_param_bounds(&mut self,
parse_ty_path			    pub fn parse_ty_path(&mut self) -> PResult<'a, Ty_> 
parse_ty_sum			    pub fn parse_ty_sum(&mut self) -> PResult<'a, P<Ty>> 
parse_unquoted			    fn parse_unquoted(&mut self) -> PResult<'a, TokenTree> 
parse_unsafety			    pub fn parse_unsafety(&mut self) -> PResult<'a, Unsafety> 
parse_unspanned_seq			    pub fn parse_unspanned_seq<T, F>(&mut self,
parse_view_path			    fn parse_view_path(&mut self) -> PResult<'a, P<ViewPath>> 
parse_visibility			    fn parse_visibility(&mut self) -> PResult<'a, Visibility> 
parse_where_clause			    pub fn parse_where_clause(&mut self) -> PResult<'a, ast::WhereClause> 
parse_while_expr			    pub fn parse_while_expr(&mut self, opt_ident: Option<ast::Ident>,
parse_while_let_expr			    pub fn parse_while_let_expr(&mut self, opt_ident: Option<ast::Ident>,
parser			    pub mod parser;
parser			pub mod parser;
parser_done			    fn parser_done(p: Parser)
parser_testing			    pub mod parser_testing;
partial_cmp			    fn partial_cmp(&self, other: &GatedCfgAttr) -> Option<cmp::Ordering> 
pat			    fn pat(&self, span: Span, pat: ast::Pat_) -> P<ast::Pat> 
pat			    fn pat(&self, span: Span, pat: ast::Pat_) -> P<ast::Pat>;
pat_enum			    fn pat_enum(&self, span: Span, path: ast::Path, subpats: Vec<P<ast::Pat>> ) -> P<ast::Pat>;
pat_enum			    fn pat_enum(&self, span: Span, path: ast::Path, subpats: Vec<P<ast::Pat>>) -> P<ast::Pat> 
pat_err			    fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> 
pat_err			    fn pat_err(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat>;
pat_expand_issue_15221			    fn pat_expand_issue_15221()
pat_ident			    fn pat_ident(&self, span: Span, ident: ast::Ident) -> P<ast::Pat> 
pat_ident			    fn pat_ident(&self, span: Span, ident: ast::Ident) -> P<ast::Pat>;
pat_ident_binding_mode			    fn pat_ident_binding_mode(&self,
pat_ident_renamer_test			    fn pat_ident_renamer_test () 
pat_idents			    fn pat_idents()
pat_is_ident			pub fn pat_is_ident(pat: P<ast::Pat>) -> bool 
pat_lit			    fn pat_lit(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Pat> 
pat_lit			    fn pat_lit(&self, span: Span, expr: P<ast::Expr>) -> P<ast::Pat>;
pat_none			    fn pat_none(&self, span: Span) -> P<ast::Pat> 
pat_none			    fn pat_none(&self, span: Span) -> P<ast::Pat>;
pat_ok			    fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> 
pat_ok			    fn pat_ok(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat>;
pat_some			    fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> 
pat_some			    fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat>;
pat_struct			    fn pat_struct(&self, span: Span,
pat_to_string			pub fn pat_to_string(pat: &ast::Pat) -> String 
pat_tuple			    fn pat_tuple(&self, span: Span, pats: Vec<P<ast::Pat>>) -> P<ast::Pat> 
pat_tuple			    fn pat_tuple(&self, span: Span, pats: Vec<P<ast::Pat>>) -> P<ast::Pat>;
pat_wild			    fn pat_wild(&self, span: Span) -> P<ast::Pat> 
pat_wild			    fn pat_wild(&self, span: Span) -> P<ast::Pat>;
path			    fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path 
path			    fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path;
path_all			    fn path_all(&self, sp: Span,
path_all			    fn path_all(&self,
path_global			    fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path 
path_global			    fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path;
path_ident			    fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path 
path_ident			    fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path;
path_name_eq			pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool 
path_name_i			pub fn path_name_i(idents: &[Ident]) -> String 
path_node			fn path_node(ids: Vec<ast::Ident> ) -> ast::Path 
path_to_ident			pub fn path_to_ident(path: &Path) -> Option<Ident> 
path_to_string			pub fn path_to_string(p: &ast::Path) -> String 
pattern_bindings			fn pattern_bindings(pat: &ast::Pat) -> Vec<ast::Ident> 
pclose			    fn pclose(&mut self) -> io::Result<()> { word(self.writer(), ")") }
peek			    fn peek(&self) -> TokenAndSpan 
peek			    fn peek(&self) -> TokenAndSpan;
peek_node_id			    fn peek_node_id(&self) -> NodeId;
peeking_at_comment			    fn peeking_at_comment(&self) -> bool 
plugin			    pub mod plugin;
poly_trait_ref			    fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef 
poly_trait_ref			    fn poly_trait_ref(&self, span: Span, path: ast::Path) -> ast::PolyTraitRef;
pop			    pub fn pop(&mut self) -> Option<T> 
pop_frame			    pub fn pop_frame(&mut self) 
pop_mod_path			    fn pop_mod_path(&mut self) 
popen			    fn popen(&mut self) -> io::Result<()> { word(self.writer(), "(") }
post			    fn post(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> { Ok(()) }
pp			    pub mod pp;
pprust			    pub mod pprust;
pre			    fn pre(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> { Ok(()) }
precedence			    pub fn precedence(&self) -> usize 
prefill			    pub fn prefill(init: &[&str]) -> StrInterner 
prefill			    pub fn prefill(init: &[T]) -> Interner<T> 
prepend			    fn prepend(mut self, attrs: Self) -> Self;
prepend			    fn prepend(self, attrs: ThinAttributes) -> Self 
pretty_print			    pub fn pretty_print(&mut self, token: Token) -> io::Result<()> 
print			pub mod print 
print			    pub fn print(&mut self, token: Token, l: isize) -> io::Result<()> 
print_arg			    pub fn print_arg(&mut self, input: &ast::Arg) -> io::Result<()> 
print_arm			    fn print_arm(&mut self, arm: &ast::Arm) -> io::Result<()> 
print_associated_const			    fn print_associated_const(&mut self,
print_associated_type			    fn print_associated_type(&mut self,
print_attribute			    fn print_attribute(&mut self, attr: &ast::Attribute) -> io::Result<()> 
print_attribute_inline			    fn print_attribute_inline(&mut self, attr: &ast::Attribute,
print_block			    pub fn print_block(&mut self, blk: &ast::Block) -> io::Result<()> 
print_block_maybe_unclosed			    pub fn print_block_maybe_unclosed(&mut self,
print_block_unclosed			    pub fn print_block_unclosed(&mut self, blk: &ast::Block) -> io::Result<()> 
print_block_unclosed_indent			    pub fn print_block_unclosed_indent(&mut self, blk: &ast::Block,
print_block_unclosed_with_attrs			    pub fn print_block_unclosed_with_attrs(&mut self, blk: &ast::Block,
print_block_with_attrs			    pub fn print_block_with_attrs(&mut self,
print_bounds			    pub fn print_bounds(&mut self,
print_call_post			    fn print_call_post(&mut self, args: &[P<ast::Expr>]) -> io::Result<()> 
print_capture_clause			    pub fn print_capture_clause(&mut self, capture_clause: ast::CaptureClause)
print_comment			    fn print_comment(&mut self,
print_crate			pub fn print_crate<'a>(cm: &'a CodeMap,
print_decl			    pub fn print_decl(&mut self, decl: &ast::Decl) -> io::Result<()> 
print_diagnostic			fn print_diagnostic(dst: &mut Destination,
print_either_attributes			    fn print_either_attributes(&mut self,
print_else			    fn print_else(&mut self, els: Option<&ast::Expr>) -> io::Result<()> 
print_enum_def			    pub fn print_enum_def(&mut self, enum_definition: &ast::EnumDef,
print_explicit_self			    fn print_explicit_self(&mut self,
print_expr			    pub fn print_expr(&mut self, expr: &ast::Expr) -> io::Result<()> 
print_expr_addr_of			    fn print_expr_addr_of(&mut self,
print_expr_binary			    fn print_expr_binary(&mut self,
print_expr_call			    fn print_expr_call(&mut self,
print_expr_in_place			    fn print_expr_in_place(&mut self,
print_expr_maybe_paren			    pub fn print_expr_maybe_paren(&mut self, expr: &ast::Expr) -> io::Result<()> 
print_expr_method_call			    fn print_expr_method_call(&mut self,
print_expr_outer_attr_style			    fn print_expr_outer_attr_style(&mut self,
print_expr_repeat			    fn print_expr_repeat(&mut self,
print_expr_struct			    fn print_expr_struct(&mut self,
print_expr_tup			    fn print_expr_tup(&mut self, exprs: &[P<ast::Expr>],
print_expr_unary			    fn print_expr_unary(&mut self,
print_expr_vec			    fn print_expr_vec(&mut self, exprs: &[P<ast::Expr>],
print_extern_opt_abi			    pub fn print_extern_opt_abi(&mut self,
print_fn			    pub fn print_fn(&mut self,
print_fn_args			    pub fn print_fn_args(&mut self, decl: &ast::FnDecl,
print_fn_args_and_ret			    pub fn print_fn_args_and_ret(&mut self, decl: &ast::FnDecl,
print_fn_block_args			    pub fn print_fn_block_args(
print_fn_header_info			    pub fn print_fn_header_info(&mut self,
print_fn_output			    pub fn print_fn_output(&mut self, decl: &ast::FnDecl) -> io::Result<()> 
print_for_decl			    pub fn print_for_decl(&mut self, loc: &ast::Local,
print_foreign_item			    pub fn print_foreign_item(&mut self,
print_foreign_mod			    pub fn print_foreign_mod(&mut self, nmod: &ast::ForeignMod,
print_formal_lifetime_list			    fn print_formal_lifetime_list(&mut self, lifetimes: &[ast::LifetimeDef]) -> io::Result<()> 
print_generics			    pub fn print_generics(&mut self,
print_ident			    pub fn print_ident(&mut self, ident: ast::Ident) -> io::Result<()> 
print_if			    pub fn print_if(&mut self, test: &ast::Expr, blk: &ast::Block,
print_if_let			    pub fn print_if_let(&mut self, pat: &ast::Pat, expr: &ast::Expr, blk: &ast::Block,
print_impl_item			    pub fn print_impl_item(&mut self, ii: &ast::ImplItem) -> io::Result<()> 
print_inner_attributes			    fn print_inner_attributes(&mut self,
print_inner_attributes_inline			    fn print_inner_attributes_inline(&mut self,
print_inner_attributes_no_trailing_hardbreak			    fn print_inner_attributes_no_trailing_hardbreak(&mut self,
print_item			    pub fn print_item(&mut self, item: &ast::Item) -> io::Result<()> 
print_lifetime			    pub fn print_lifetime(&mut self,
print_lifetime_def			    pub fn print_lifetime_def(&mut self,
print_literal			    fn print_literal(&mut self, lit: &ast::Lit) -> io::Result<()> 
print_local_decl			    pub fn print_local_decl(&mut self, loc: &ast::Local) -> io::Result<()> 
print_mac			    pub fn print_mac(&mut self, m: &ast::Mac, delim: token::DelimToken)
print_macro_backtrace			    fn print_macro_backtrace(&mut self,
print_maybe_styled			    fn print_maybe_styled(&mut self,
print_meta_item			    fn print_meta_item(&mut self, item: &ast::MetaItem) -> io::Result<()> 
print_method_sig			    pub fn print_method_sig(&mut self,
print_mod			    pub fn print_mod(&mut self, _mod: &ast::Mod,
print_mt			    pub fn print_mt(&mut self, mt: &ast::MutTy) -> io::Result<()> 
print_mutability			    pub fn print_mutability(&mut self,
print_name			    pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> 
print_newline			    pub fn print_newline(&mut self, amount: isize) -> io::Result<()> 
print_opt_abi_and_extern_if_nondefault			    pub fn print_opt_abi_and_extern_if_nondefault(&mut self,
print_opt_lifetime			    pub fn print_opt_lifetime(&mut self,
print_outer_attributes			    fn print_outer_attributes(&mut self,
print_outer_attributes_inline			    fn print_outer_attributes_inline(&mut self,
print_pat			    pub fn print_pat(&mut self, pat: &ast::Pat) -> io::Result<()> 
print_path			    fn print_path(&mut self,
print_path_parameters			    fn print_path_parameters(&mut self,
print_poly_trait_ref			    fn print_poly_trait_ref(&mut self, t: &ast::PolyTraitRef) -> io::Result<()> 
print_qpath			    fn print_qpath(&mut self,
print_remaining_comments			    pub fn print_remaining_comments(&mut self) -> io::Result<()> 
print_stmt			    pub fn print_stmt(&mut self, st: &ast::Stmt) -> io::Result<()> 
print_str			    pub fn print_str(&mut self, s: &str) -> io::Result<()> 
print_string			    fn print_string(&mut self, st: &str,
print_struct			    pub fn print_struct(&mut self,
print_trait_item			    pub fn print_trait_item(&mut self, ti: &ast::TraitItem)
print_trait_ref			    fn print_trait_ref(&mut self, t: &ast::TraitRef) -> io::Result<()> 
print_tt			    pub fn print_tt(&mut self, tt: &ast::TokenTree) -> io::Result<()> 
print_tts			    pub fn print_tts(&mut self, tts: &[ast::TokenTree]) -> io::Result<()> 
print_ty_fn			    pub fn print_ty_fn(&mut self,
print_ty_param			    pub fn print_ty_param(&mut self, param: &ast::TyParam) -> io::Result<()> 
print_type			    pub fn print_type(&mut self, ty: &ast::Ty) -> io::Result<()> 
print_unsafety			    pub fn print_unsafety(&mut self, s: ast::Unsafety) -> io::Result<()> 
print_usize			    pub fn print_usize(&mut self, i: usize) -> io::Result<()> 
print_variant			    pub fn print_variant(&mut self, v: &ast::Variant) -> io::Result<()> 
print_variants			    pub fn print_variants(&mut self,
print_view_path			    pub fn print_view_path(&mut self, vp: &ast::ViewPath) -> io::Result<()> 
print_visibility			    pub fn print_visibility(&mut self, vis: ast::Visibility) -> io::Result<()> 
print_where_clause			    pub fn print_where_clause(&mut self, where_clause: &ast::WhereClause)
process_cfg_attr			fn process_cfg_attr(diagnostic: &Handler, krate: ast::Crate,
ptr			pub mod ptr;
push			    pub fn push(&mut self, v: T) 
push_all			    pub fn push_all(&mut self, other: SmallVector<T>) 
push_blank_line_comment			fn push_blank_line_comment(rdr: &StringReader, comments: &mut Vec<Comment>) 
push_frame			    pub fn push_frame(&mut self) 
push_mod_path			    fn push_mod_path(&mut self, id: Ident, attrs: &[Attribute]) 
q			              fn q(x: i32) { bad_macro!(x); }",
qpath			    fn qpath(&self, self_type: P<ast::Ty>,
qpath			    fn qpath(&self,
qpath_all			    fn qpath_all(&self, self_type: P<ast::Ty>,
qpath_all			    fn qpath_all(&self,
quote			    pub mod quote;
raw_expr			    pub fn raw_expr(sp: Span) -> P<ast::Expr> 
raw_pat			    pub fn raw_pat(sp: Span) -> ast::Pat 
raw_str_lit			pub fn raw_str_lit(lit: &str) -> String 
raw_string			    fn raw_string() 
raw_ty			    pub fn raw_ty(sp: Span) -> P<ast::Ty> 
rbox			pub fn rbox(p: &mut Printer, indent: usize, b: Breaks) -> io::Result<()> 
rbox			    fn rbox(&mut self, u: usize, b: pp::Breaks) -> io::Result<()> 
react			    fn react(&mut self, cx: &mut ExtCtxt, sp: Span, msg: &str) 
read_block_comment			fn read_block_comment(rdr: &mut StringReader,
read_file			    fn read_file(&self, path: &Path) -> io::Result<String> 
read_file			    fn read_file(&self, path: &Path) -> io::Result<String>;
read_line_comments			fn read_line_comments(rdr: &mut StringReader,
read_one_line_comment			    fn read_one_line_comment(&mut self) -> String 
read_shebang_comment			fn read_shebang_comment(rdr: &mut StringReader,
read_to_eol			    fn read_to_eol(&mut self) -> String 
real_token			    fn real_token(&mut self) -> TokenAndSpan 
record_expansion			    pub fn record_expansion(&self, expn_info: ExpnInfo) -> ExpnId 
record_multibyte_char			    pub fn record_multibyte_char(&self, pos: BytePos, bytes: usize) 
ref_slice			fn ref_slice<A>(s: &A) -> &[A] { use std::slice::from_raw_parts; unsafe { from_raw_parts(s, 1) } }
refold_test_sc			    fn refold_test_sc(mut sc: SyntaxContext, table : &SCTable) -> Vec<TestSC> 
registry			    pub mod registry;
rename			    pub fn rename(&self) -> Option<Ident> 
rename_in_scope			fn rename_in_scope<X, F>(pats: Vec<P<ast::Pat>>,
repeat			fn repeat(s: &str, n: usize) -> String { iter::repeat(s).take(n).collect() }
replace_last_token			    pub fn replace_last_token(&mut self, t: Token) 
replace_token			    pub fn replace_token(&mut self,
replace_with			    fn replace_with(&mut self, tok: (Span, Token)) 
replace_with_irrelevant			    fn replace_with_irrelevant(&mut self) 
report			    fn report(&mut self,
requests_inline			pub fn requests_inline(attrs: &[Attribute]) -> bool 
require_unique_names			pub fn require_unique_names(diagnostic: &Handler, metas: &[P<MetaItem>]) 
res_rel_file			fn res_rel_file(cx: &mut ExtCtxt, sp: codemap::Span, arg: &Path) -> PathBuf 
reset			    pub fn reset(&self, other: StrInterner) 
reset_ident_interner			pub fn reset_ident_interner() 
reset_tables			pub fn reset_tables() 
resolve			pub fn resolve(id: Ident) -> Name 
resolve_internal			fn resolve_internal(id: Ident,
resolve_table_hashing_tests			    fn resolve_table_hashing_tests() 
resolve_tests			    fn resolve_tests () 
respan			pub fn respan<T>(sp: Span, t: T) -> Spanned<T> 
result			    pub fn result(&self) -> IdRange 
rt			pub mod rt 
run			pub fn run(span_diagnostic: &errors::Handler,
run_renaming_test			    fn run_renaming_test(t: &RenamingTest, test_idx: usize) 
rust_printer			pub fn rust_printer<'a>(writer: Box<Write+'a>) -> State<'a> 
rust_printer_annotated			pub fn rust_printer_annotated<'a>(writer: Box<Write+'a>,
scan_block_comment			    fn scan_block_comment(&mut self) -> Option<TokenAndSpan> 
scan_byte			    fn scan_byte(&mut self) -> token::Lit 
scan_byte_escape			    fn scan_byte_escape(&mut self, delim: char, below_0x7f_only: bool) -> bool 
scan_byte_string			    fn scan_byte_string(&mut self) -> token::Lit 
scan_char_or_byte			    fn scan_char_or_byte(&mut self,
scan_comment			    fn scan_comment(&mut self) -> Option<TokenAndSpan> 
scan_digits			    fn scan_digits(&mut self, real_radix: u32, scan_radix: u32) -> usize 
scan_float_exponent			    fn scan_float_exponent(&mut self) 
scan_for_non_ws_or_end			fn scan_for_non_ws_or_end(a : &str, idx: usize) -> usize 
scan_hex_digits			    fn scan_hex_digits(&mut self, n_digits: usize, delim: char, below_0x7f_only: bool) -> bool 
scan_number			    fn scan_number(&mut self, c: char) -> token::Lit 
scan_optional_raw_name			    fn scan_optional_raw_name(&mut self) -> Option<ast::Name> 
scan_pop			    pub fn scan_pop(&mut self) -> usize 
scan_pop_bottom			    pub fn scan_pop_bottom(&mut self) -> usize 
scan_push			    pub fn scan_push(&mut self, x: usize) 
scan_raw_byte_string			    fn scan_raw_byte_string(&mut self) -> token::Lit 
scan_top			    pub fn scan_top(&mut self) -> usize 
scan_unicode_escape			    fn scan_unicode_escape(&mut self, delim: char) -> bool 
scan_whitespace_or_comment			    fn scan_whitespace_or_comment(&mut self) -> Option<TokenAndSpan> 
segments_name_eq			pub fn segments_name_eq(a : &[ast::PathSegment], b : &[ast::PathSegment]) -> bool 
seq_sep_none			pub fn seq_sep_none() -> SeqSep 
seq_sep_trailing_allowed			pub fn seq_sep_trailing_allowed(t: token::Token) -> SeqSep 
set_trace_macros			    pub fn set_trace_macros(&mut self, x: bool) 
setup			    fn setup<'a>(cm: &CodeMap,
short_name			    pub fn short_name(&self) -> &'static str 
should_panic			fn should_panic(i: &ast::Item) -> ShouldPanic 
show_span			pub mod show_span;
sign			        fn sign(&self) -> Sign 
sign			    fn sign(&self) -> Sign;
singleton			    fn singleton(tok: (Span, Token)) -> Self 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
small_vector			    pub mod small_vector;
sort_meta_items			pub fn sort_meta_items(items: Vec<P<MetaItem>>) -> Vec<P<MetaItem>> 
source_util			    pub mod source_util;
sp			    fn sp(a: u32, b: u32) -> Span 
space			pub fn space(p: &mut Printer) -> io::Result<()> 
space_if_not_bol			    fn space_if_not_bol(&mut self) -> io::Result<()> 
spaces			pub fn spaces(p: &mut Printer, n: usize) -> io::Result<()> 
span			    pub fn span(&self) -> Span 
span			    fn span(&self) -> Span { (**self).span() }
span			    fn span(&self) -> Span { self.meta().span }
span			    fn span(&self) -> Span { self.span }
span			    fn span(&self) -> Span;
span			    fn span(&self) -> Span 
span			    pub fn span(&mut self, sp: Span) -> &mut Self 
span_allows_unstable			    pub fn span_allows_unstable(&self, span: Span) -> bool 
span_bug			    pub fn span_bug(&self, sp: Span, msg: &str) -> ! 
span_bug			    pub fn span_bug(&self, sp: Span, msg: &str) -> ! 
span_bug			    pub fn span_bug(&self, sp: Span, m: &str) -> ! 
span_bug_no_panic			    pub fn span_bug_no_panic(&self, sp: Span, msg: &str) 
span_end_note			    pub fn span_end_note(&mut self ,
span_err			    pub fn span_err(&self, sp: Span, msg: &str) 
span_err			    pub fn span_err(&self, sp: Span, msg: &str) 
span_err			    pub fn span_err(&self, sp: Span, m: &str) 
span_err_with_code			    pub fn span_err_with_code(&self, sp: Span, msg: &str, code: &str) 
span_fatal			    pub fn span_fatal(&self, sp: Span, msg: &str) -> FatalError 
span_fatal			    pub fn span_fatal(&self, sp: Span, msg: &str) -> ! 
span_fatal			    pub fn span_fatal(&self, sp: Span, m: &str) -> DiagnosticBuilder<'a> 
span_fatal_help			    pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> DiagnosticBuilder<'a> 
span_fatal_with_code			    pub fn span_fatal_with_code(&self, sp: Span, msg: &str, code: &str) -> FatalError 
span_from_selection			    fn span_from_selection(input: &str, selection: &str) -> Span 
span_help			    pub fn span_help(&mut self ,
span_note			    pub fn span_note(&mut self ,
span_note_without_error			    pub fn span_note_without_error(&self, sp: Span, msg: &str) 
span_suggestion			    pub fn span_suggestion(&mut self ,
span_to_expanded_string			    pub fn span_to_expanded_string(&self, sp: Span) -> String 
span_to_expanded_string_internal			    fn span_to_expanded_string_internal(&self, sp:Span, indent: &str) -> String 
span_to_filename			    pub fn span_to_filename(&self, sp: Span) -> FileName 
span_to_lines			    pub fn span_to_lines(&self, sp: Span) -> FileLinesResult 
span_to_snippet			    pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> 
span_to_snippet_and_lines_spanning_multiple_lines			    fn span_to_snippet_and_lines_spanning_multiple_lines() 
span_to_string			    pub fn span_to_string(&self, sp: Span) -> String 
span_unimpl			    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! 
span_unimpl			    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! 
span_warn			    pub fn span_warn(&mut self,
span_warn			    pub fn span_warn(&self, sp: Span, msg: &str) 
span_warn			    pub fn span_warn(&self, sp: Span, msg: &str) 
span_warn			    pub fn span_warn(&self, sp: Span, m: &str) 
span_warn_with_code			    pub fn span_warn_with_code(&self, sp: Span, msg: &str, code: &str) 
spanned			pub fn spanned<T>(lo: BytePos, hi: BytePos, t: T) -> Spanned<T> 
special_idents			    pub mod special_idents 
special_names			    pub mod special_names 
statements_mk_tt			fn statements_mk_tt(cx: &ExtCtxt, tt: &TokenTree, matcher: bool) -> Vec<P<ast::Stmt>> 
statements_mk_tts			fn statements_mk_tts(cx: &ExtCtxt, tts: &[TokenTree], matcher: bool) -> Vec<P<ast::Stmt>> 
std_inject			pub mod std_inject;
std_path			    pub fn std_path(&self, components: &[&str]) -> Vec<ast::Ident> 
stderr			    pub fn stderr(color_config: ColorConfig) -> BasicEmitter 
stderr			    pub fn stderr(color_config: ColorConfig,
stderr			    pub fn stderr(registry: Option<Registry>,
stderr_isatty			fn stderr_isatty() -> bool 
stmt_ends_with_semi			pub fn stmt_ends_with_semi(stmt: &ast::Stmt_) -> bool 
stmt_expr			    fn stmt_expr(&self, expr: P<ast::Expr>) -> P<ast::Stmt> 
stmt_expr			    fn stmt_expr(&self, expr: P<ast::Expr>) -> P<ast::Stmt>;
stmt_in_cfg			fn stmt_in_cfg<F>(cx: &mut Context<F>, stmt: &ast::Stmt) -> bool where
stmt_item			    fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> P<ast::Stmt> 
stmt_item			    fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> P<ast::Stmt>;
stmt_let			    fn stmt_let(&self, sp: Span, mutbl: bool, ident: ast::Ident, ex: P<ast::Expr>) -> P<ast::Stmt>;
stmt_let			    fn stmt_let(&self, sp: Span, mutbl: bool, ident: ast::Ident,
stmt_let_typed			    fn stmt_let_typed(&self,
stmt_to_string			pub fn stmt_to_string(stmt: &ast::Stmt) -> String 
str			pub mod str;
str_lit			pub fn str_lit(lit: &str) -> String 
str_to_ident			pub fn str_to_ident(s: &str) -> ast::Ident 
string_interner_tests			    fn string_interner_tests() 
string_to_crate			pub fn string_to_crate (source_str : String) -> ast::Crate 
string_to_expr			pub fn string_to_expr (source_str : String) -> P<ast::Expr> 
string_to_item			pub fn string_to_item (source_str : String) -> Option<P<ast::Item>> 
string_to_parser			pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> 
string_to_pat			pub fn string_to_pat(source_str: String) -> P<ast::Pat> 
string_to_stmt			pub fn string_to_stmt(source_str : String) -> Option<P<ast::Stmt>> 
string_to_tts			pub fn string_to_tts(source_str: String) -> Vec<ast::TokenTree> 
string_to_tts_1			    fn string_to_tts_1() 
string_to_tts_macro			    fn string_to_tts_macro () 
strip_doc_comment_decoration			pub fn strip_doc_comment_decoration(comment: &str) -> String 
strip_items			pub fn strip_items<'a, F>(diagnostic: &'a Handler,
strip_test_functions			fn strip_test_functions(diagnostic: &errors::Handler, krate: ast::Crate)
strip_unconfigured_items			pub fn strip_unconfigured_items(diagnostic: &Handler, krate: ast::Crate,
strs_to_idents			pub fn strs_to_idents(ids: Vec<&str> ) -> Vec<ast::Ident> 
struct_dummy			    pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> 
struct_err			    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> 
struct_err_span_char			    fn struct_err_span_char(&self,
struct_fatal			    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> 
struct_fatal_span_char			    fn struct_fatal_span_char(&self,
struct_field_visibility			pub fn struct_field_visibility(field: ast::StructField) -> Visibility 
struct_span_err			    pub fn struct_span_err<'a>(&'a self,
struct_span_err			    pub fn struct_span_err(&self,
struct_span_err_with_code			    pub fn struct_span_err_with_code<'a>(&'a self,
struct_span_fatal			    pub fn struct_span_fatal<'a>(&'a self,
struct_span_fatal			    pub fn struct_span_fatal(&self,
struct_span_fatal_with_code			    pub fn struct_span_fatal_with_code<'a>(&'a self,
struct_span_warn			    pub fn struct_span_warn<'a>(&'a self,
struct_span_warn			    pub fn struct_span_warn(&self,
struct_span_warn_with_code			    pub fn struct_span_warn_with_code<'a>(&'a self,
struct_warn			    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> 
sub			    fn sub(self, rhs: BytePos) -> BytePos 
sub			    fn sub(self, rhs: CharPos) -> CharPos 
sub			    fn sub(&mut self,
submod_path			    fn submod_path(&mut self,
submod_path_from_attr			    pub fn submod_path_from_attr(attrs: &[ast::Attribute], dir_path: &Path) -> Option<PathBuf> 
substitute_dummy			    pub fn substitute_dummy(self, other: Span) -> Span 
suggest_macro_name			    pub fn suggest_macro_name(&mut self,
syntax			mod syntax 
syntax			pub mod syntax 
synth_comment			    pub fn synth_comment(&mut self, text: String) -> io::Result<()> 
t1			    fn t1 () 
t1			    fn t1() 
t10			    fn t10() 
t11			    fn t11() 
t12			    fn t12() 
t2			    fn t2 () 
t3			    fn t3() 
t4			    fn t4() 
t5			    fn t5() 
t6			    fn t6() 
t7			    fn t7() 
t8			    fn t8() 
t9			    fn t9() 
test			mod test 
test			pub mod test;
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
this_token_to_string			    pub fn this_token_to_string(&self) -> String 
to_ast_binop			    pub fn to_ast_binop(&self) -> Option<ast::BinOp_> 
to_binop			    pub fn to_binop(&self) -> Option<ast::BinOp_> 
to_name			            pub fn to_name(&self) -> ast::Name 
to_str			    fn to_str(self) -> &'static str 
to_string			    pub fn to_string(&self) -> &'static str 
to_string			    pub fn to_string(op: UnOp) -> &'static str 
to_string			    fn to_string(&self) -> String 
to_string			pub fn to_string<F>(f: F) -> String where
to_tokens			                fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> 
to_tokens			        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> 
to_tokens			        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree>;
to_tokens			        fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> 
to_usize			    fn to_usize(&self) -> usize { let BytePos(n) = *self; n as usize }
to_usize			    fn to_usize(&self) -> usize { let CharPos(n) = *self; n }
to_usize			    fn to_usize(&self) -> usize;
tok_str			pub fn tok_str(token: &Token) -> String 
token			pub mod token;
token_can_be_followed_by_any			fn token_can_be_followed_by_any(tok: &Token) -> bool 
token_is_bare_fn_keyword			    pub fn token_is_bare_fn_keyword(&mut self) -> bool 
token_name_eq			pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool 
token_to_string			    pub fn token_to_string(token: &token::Token) -> String 
token_to_string			pub fn token_to_string(tok: &Token) -> String 
tokens_to_string			        fn tokens_to_string(tokens: &[TokenType]) -> String 
trace_macros			    pub fn trace_macros(&self) -> bool 
trait_item_to_string			pub fn trait_item_to_string(i: &ast::TraitItem) -> String 
trait_ref			    fn trait_ref(&self, path: ast::Path) -> ast::TraitRef 
trait_ref			    fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;
transcribe			        pub mod transcribe;
translate_crlf			    fn translate_crlf<'b>(&self, start: BytePos, s: &'b str, errmsg: &'b str) -> Cow<'b, str> 
translate_crlf_			        fn translate_crlf_(rdr: &StringReader,
trim_whitespace_prefix_and_push_line			fn trim_whitespace_prefix_and_push_line(lines: &mut Vec<String>, s: String, col: CharPos) 
tt			    pub mod tt 
tt_next_token			pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan 
tt_to_string			pub fn tt_to_string(tt: &ast::TokenTree) -> String 
ttdelim_span			    fn ttdelim_span() 
tts_to_parser			pub fn tts_to_parser<'a>(sess: &'a ParseSess,
tts_to_string			pub fn tts_to_string(tts: &[ast::TokenTree]) -> String 
ty			    fn ty(&self, span: Span, ty: ast::Ty_) -> P<ast::Ty> 
ty			    fn ty(&self, span: Span, ty: ast::Ty_) -> P<ast::Ty>;
ty_ident			    fn ty_ident(&self, span: Span, ident: ast::Ident)
ty_ident			    fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;
ty_infer			    fn ty_infer(&self, sp: Span) -> P<ast::Ty>;
ty_infer			    fn ty_infer(&self, span: Span) -> P<ast::Ty> 
ty_max			    pub fn ty_max(&self) -> u64 
ty_mt			    fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy 
ty_mt			    fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;
ty_option			    fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty> 
ty_option			    fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty>;
ty_path			    fn ty_path(&self, ast::Path) -> P<ast::Ty>;
ty_path			    fn ty_path(&self, path: ast::Path) -> P<ast::Ty> 
ty_ptr			    fn ty_ptr(&self, span: Span,
ty_ptr			    fn ty_ptr(&self,
ty_rptr			    fn ty_rptr(&self, span: Span,
ty_rptr			    fn ty_rptr(&self,
ty_sum			    fn ty_sum(&self, ast::Path, ast::TyParamBounds) -> P<ast::Ty>;
ty_sum			    fn ty_sum(&self, path: ast::Path, bounds: ast::TyParamBounds) -> P<ast::Ty> 
ty_to_string			    pub fn ty_to_string(&self) -> &'static str 
ty_to_string			pub fn ty_to_string(ty: &ast::Ty) -> String 
ty_vars			    fn ty_vars(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> ;
ty_vars			    fn ty_vars(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> 
ty_vars_global			    fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> ;
ty_vars_global			    fn ty_vars_global(&self, ty_params: &P<[ast::TyParam]>) -> Vec<P<ast::Ty>> 
typaram			    fn typaram(&self,
typarambound			    fn typarambound(&self, path: ast::Path) -> ast::TyParamBound 
typarambound			    fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;
types			    pub fn types(&self) -> Vec<&P<Ty>> 
unexpected			    pub fn unexpected<T>(&mut self) -> PResult<'a, T> 
unexpected_last			    pub fn unexpected_last<T>(&self, t: &token::Token) -> PResult<'a, T> 
unfold_marks			    fn unfold_marks(mrks: Vec<Mrk> , tail: SyntaxContext, table: &SCTable)
unfold_test_sc			    fn unfold_test_sc(tscs : Vec<TestSC> , tail: SyntaxContext, table: &SCTable)
unicode_chars			mod unicode_chars;
unimpl			    pub fn unimpl(&self, msg: &str) -> ! 
update			    fn update<F>(&mut self, f: F)
use_color			    fn use_color(&self) -> bool 
util			pub mod util 
val_to_string			    pub fn val_to_string(&self, val: i64) -> String 
val_to_string			    pub fn val_to_string(&self, val: u64) -> String 
value_str			    fn value_str(&self) -> Option<InternedString> { (**self).value_str() }
value_str			    fn value_str(&self) -> Option<InternedString> 
value_str			    fn value_str(&self) -> Option<InternedString>;
variant			    fn variant(&self, span: Span, name: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant 
variant			    fn variant(&self, span: Span, name: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant;
variant_to_string			pub fn variant_to_string(var: &ast::Variant) -> String 
vertical_trim			    fn vertical_trim(lines: Vec<String>) -> Vec<String> 
visibility			    pub fn visibility(&self) -> Visibility 
visibility_qualified			pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String 
visit			pub mod visit;
visit::Visitor for StmtExprAttrFeatureVisitor			impl<'v, 'a, 'b> visit::Visitor<'v> for StmtExprAttrFeatureVisitor<'a, 'b> 
visit_arm			    fn visit_arm(&mut self, a: &'v ast::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'v Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'v Arm) { walk_arm(self, a) }
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) 
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) 
visit_attribute			    fn visit_attribute(&mut self, attr: &'v ast::Attribute) 
visit_attribute			    fn visit_attribute(&mut self, attr: &ast::Attribute) 
visit_attribute			    fn visit_attribute(&mut self, _attr: &'v Attribute) 
visit_attribute			    fn visit_attribute(&mut self, _attr: &'v Attribute) {}
visit_block			    fn visit_block(&mut self, block: &Block) 
visit_block			    fn visit_block(&mut self, b: &'v Block) 
visit_block			    fn visit_block(&mut self, b: &'v Block) { walk_block(self, b) }
visit_decl			    fn visit_decl(&mut self, d: &'v Decl) 
visit_decl			    fn visit_decl(&mut self, d: &'v Decl) { walk_decl(self, d) }
visit_enum_def			    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,
visit_enum_def			    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,
visit_explicit_self			    fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) 
visit_explicit_self			    fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) 
visit_expr			    fn visit_expr(&mut self, expression: &Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'v ast::Expr) 
visit_expr			        fn visit_expr(&mut self, expr: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'v Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'v Expr) { walk_expr(self, ex) }
visit_expr_post			    fn visit_expr_post(&mut self, _ex: &'v Expr) { }
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v ForeignItem) { walk_foreign_item(self, i) }
visit_generics			    fn visit_generics(&mut self, generics: &Generics) 
visit_generics			    fn visit_generics(&mut self, g: &'v Generics) 
visit_generics			    fn visit_generics(&mut self, g: &'v Generics) { walk_generics(self, g) }
visit_generics_helper			    fn visit_generics_helper(&mut self, generics: &Generics) 
visit_id			    fn visit_id(&mut self, id: NodeId) 
visit_id			    fn visit_id(&mut self, node_id: NodeId);
visit_ident			        fn visit_ident(&mut self, _: codemap::Span, id: ast::Ident)
visit_ident			    fn visit_ident(&mut self, span: Span, ident: Ident) 
visit_ident			    fn visit_ident(&mut self, span: Span, ident: Ident) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ImplItem) { walk_impl_item(self, ii) }
visit_item			    fn visit_item(&mut self, item: &Item) 
visit_item			    fn visit_item(&mut self, i: &'v ast::Item) 
visit_item			    fn visit_item(&mut self, i: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &'v Item) 
visit_item			    fn visit_item(&mut self, i: &'v Item) { walk_item(self, i) }
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, def: &LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) 
visit_local			    fn visit_local(&mut self, local: &Local) 
visit_local			    fn visit_local(&mut self, l: &'v Local) 
visit_local			    fn visit_local(&mut self, l: &'v Local) { walk_local(self, l) }
visit_mac			    fn visit_mac(&mut self, mac: &'v ast::Mac) 
visit_mac			    fn visit_mac(&mut self, mac: &ast::Mac) 
visit_mac			    fn visit_mac(&mut self, mac: &ast::Mac) 
visit_mac			    fn visit_mac(&mut self, mac: &ast::Mac) 
visit_mac			    fn visit_mac(&mut self, _mac: &'v Mac) 
visit_mac			    fn visit_mac(&mut self, _mac: &'v Mac) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) 
visit_mod			    fn visit_mod(&mut self,
visit_mod			    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) 
visit_mod			    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }
visit_name			    fn visit_name(&mut self, sp: Span, name: ast::Name) 
visit_name			    fn visit_name(&mut self, _span: Span, _name: Name) 
visit_pat			    fn visit_pat(&mut self, pattern: &Pat) 
visit_pat			    fn visit_pat(&mut self, pattern: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, pattern: &ast::Pat) 
visit_pat			            fn visit_pat(&mut self, p: &'v ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'v Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'v Pat) { walk_pat(self, p) }
visit_path			    fn visit_path(&mut self, path: &'v Path, _id: NodeId) 
visit_path			    fn visit_path(&mut self, path: &'v Path, _id: NodeId) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) 
visit_path_parameters			    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) 
visit_path_parameters			    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) 
visit_path_segment			    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) 
visit_stmt			    fn visit_stmt(&mut self, statement: &Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'v ast::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'v Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'v Stmt) { walk_stmt(self, s) }
visit_struct_field			    fn visit_struct_field(&mut self, struct_field: &StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v ast::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v StructField) { walk_struct_field(self, s) }
visit_trait_item			    fn visit_trait_item(&mut self, ti: &ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v TraitItem) { walk_trait_item(self, ti) }
visit_trait_ref			    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) 
visit_trait_ref			    fn visit_trait_ref(&mut self, t: &'v TraitRef) 
visit_trait_ref			    fn visit_trait_ref(&mut self, t: &'v TraitRef) { walk_trait_ref(self, t) }
visit_ty			    fn visit_ty(&mut self, typ: &Ty) 
visit_ty			    fn visit_ty(&mut self, t: &ast::Ty) 
visit_ty			    fn visit_ty(&mut self, t: &'v Ty) 
visit_ty			    fn visit_ty(&mut self, t: &'v Ty) { walk_ty(self, t) }
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) 
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) 
visit_variant			    fn visit_variant(&mut self, v: &'v ast::Variant,
visit_variant			    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) 
visit_variant			    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) 
visit_variant_data			    fn visit_variant_data(&mut self,
visit_variant_data			    fn visit_variant_data(&mut self, s: &'v ast::VariantData, _: ast::Ident,
visit_variant_data			    fn visit_variant_data(&mut self, s: &'v VariantData, _: Ident,
visit_variant_data			    fn visit_variant_data(&mut self, s: &'v VariantData, _: Ident,
walk_arm			pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) 
walk_assoc_type_binding			pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,
walk_block			pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) 
walk_crate			pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) 
walk_decl			pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) 
walk_enum_def			pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,
walk_explicit_self			pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V,
walk_expr			pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) 
walk_fn			pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,
walk_fn_decl			pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) 
walk_fn_kind			pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V,
walk_fn_ret_ty			pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy) 
walk_foreign_item			pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,
walk_generics			pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) 
walk_ident			pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, ident: Ident) 
walk_impl_item			pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) 
walk_item			pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) 
walk_lifetime			pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) 
walk_lifetime_def			pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V,
walk_local			pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) 
walk_mac			pub fn walk_mac<'v, V: Visitor<'v>>(_: &mut V, _: &'v Mac) 
walk_macro_def			pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) 
walk_mod			pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod) 
walk_opt_ident			pub fn walk_opt_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_ident: Option<Ident>) 
walk_opt_name			pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) 
walk_pat			pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) 
walk_path			pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) 
walk_path_list_item			pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V, prefix: &'v Path,
walk_path_parameters			pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,
walk_path_segment			pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,
walk_poly_trait_ref			pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,
walk_stmt			pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) 
walk_struct_def			pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,
walk_struct_field			pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,
walk_trait_item			pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) 
walk_trait_ref			pub fn walk_trait_ref<'v,V>(visitor: &mut V,
walk_ty			pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) 
walk_ty_param_bound			pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,
walk_variant			pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,
warn			    pub fn warn(&mut self, msg: &str) -> &mut DiagnosticBuilder<'a>  
warn			    pub fn warn(&self, msg: &str) 
warn			    fn warn() -> OnFail { OnFail { saw_failure: false, action: OnFailAction::Warn } }
warn			    pub fn warn(&self, m: &str) 
wb			    fn wb() -> c_int { O_WRONLY as c_int }
wb			    fn wb() -> c_int 
where_clause_to_string			pub fn where_clause_to_string(i: &ast::WhereClause) -> String 
with_attrs			    fn with_attrs(self, attrs: ThinAttributes) -> Self 
with_attrs			    fn with_attrs(self, attrs: ThinAttributes) -> Self;
with_desugared_doc			    fn with_desugared_doc<T, F>(&self, f: F) -> T where
with_emitter			    pub fn with_emitter(can_emit_warnings: bool,
with_empty_ctxt			    pub fn with_empty_ctxt(name: Name) -> Ident 
with_error_checking_parse			fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F) -> T where
with_expn_info			    pub fn with_expn_info<T, F>(&self, id: ExpnId, f: F) -> T where
with_file_loader			    pub fn with_file_loader(file_loader: Box<FileLoader>) -> CodeMap 
with_registered_diagnostics			fn with_registered_diagnostics<T, F>(f: F) -> T where
with_res			    pub fn with_res<F>(&mut self, r: Restrictions, f: F) -> PResult<'a, P<Expr>>
with_resolve_table_mut			fn with_resolve_table_mut<T, F>(op: F) -> T where
with_sctable			pub fn with_sctable<T, F>(op: F) -> T where
with_span_handler			    pub fn with_span_handler(handler: Handler, code_map: Rc<CodeMap>) -> ParseSess 
with_str_from			    pub fn with_str_from<T, F>(&self, start: BytePos, f: F) -> T
with_str_from_to			    fn with_str_from_to<T, F>(&self, start: BytePos, end: BytePos, f: F) -> T
with_tty_emitter			    pub fn with_tty_emitter(color_config: ColorConfig,
word			pub fn word(p: &mut Printer, wrd: &str) -> io::Result<()> 
word_nbsp			    pub fn word_nbsp(&mut self, w: &str) -> io::Result<()> 
word_space			    fn word_space(&mut self, w: &str) -> io::Result<()> 
write			            fn write(&mut self, data: &[u8]) -> io::Result<usize> 
write			    fn write(&mut self, bytes: &[u8]) -> io::Result<usize> 
writer			    fn writer(&mut self) -> &mut pp::Printer<'a> 
writer			    fn writer(&mut self) -> &mut pp::Printer<'a>;
xor_push			fn xor_push(marks: &mut Vec<Mrk>, mark: Mrk) 
xorpush_test			    fn xorpush_test () 
z			              fn z() {match 8 {x => bad_macro!(x)}}",
zero			    pub fn zero() -> SmallVector<T> 
zero_word			pub fn zero_word(p: &mut Printer, wrd: &str) -> io::Result<()> 
zerobreak			pub fn zerobreak(p: &mut Printer) -> io::Result<()> 
