AstValidator			impl<'a> AstValidator<'a> 
AstValidator			struct AstValidator<'a> 
Bar			impl Bar {}
Bar			pub impl Bar {} \/\/ error: unnecessary visibility qualifier
Bar			struct Bar;
CheckCrateVisitor			impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> 
CheckCrateVisitor			struct CheckCrateVisitor<'a, 'tcx: 'a> 
CheckCrateVisitor			struct CheckCrateVisitor<'a, 'hir: 'a> 
CheckItemRecursionVisitor			impl<'a, 'b: 'a, 'hir: 'b> CheckItemRecursionVisitor<'a, 'b, 'hir> 
CheckItemRecursionVisitor			struct CheckItemRecursionVisitor<'a, 'b: 'a, 'hir: 'b> 
CheckLoopVisitor			impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> 
CheckLoopVisitor			struct CheckLoopVisitor<'a, 'hir: 'a> 
CheckNoAsm			struct CheckNoAsm<'a> 
Context			enum Context 
Foo			trait Foo 
Foo for Bar			impl Foo for Bar 
Foo for Bar			pub impl Foo for Bar { \/\/ error: unnecessary visibility qualifier
Id			enum Id 
LoopKind			enum LoopKind 
LoopKind			impl LoopKind 
NodeData			struct NodeData 
NodeData			struct NodeData 
SomeStruct			struct SomeStruct 
StatCollector			impl<'k> StatCollector<'k> 
StatCollector			struct StatCollector<'k> 
StatCollector			impl<'a, 'tcx> StatCollector<'a, 'tcx> 
StatCollector			struct StatCollector<'a, 'tcx: 'a> 
Visitor for AstValidator			impl<'a> Visitor<'a> for AstValidator<'a> 
Visitor for CheckCrateVisitor			impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> 
Visitor for CheckCrateVisitor			impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> 
Visitor for CheckItemRecursionVisitor			impl<'a, 'b: 'a, 'hir: 'b> Visitor<'hir> for CheckItemRecursionVisitor<'a, 'b, 'hir> 
Visitor for CheckLoopVisitor			impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> 
Visitor for CheckNoAsm			impl<'a> Visitor<'a> for CheckNoAsm<'a> 
add_type			    fn add_type(&mut self, ty: Ty<'gcx>) 
ast_validation			pub mod ast_validation;
ast_visit::Visitor for StatCollector			impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> 
borrow			    fn borrow(&mut self,
check_adjustments			fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) 
check_const_eval			    fn check_const_eval(&self, expr: &'gcx hir::Expr) 
check_crate			pub fn check_crate(session: &Session, krate: &Crate) 
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_crate			pub fn check_crate(sess: &Session, map: &Map) 
check_crate			pub fn check_crate(sess: &Session, krate: &ast::Crate) 
check_crate			pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>)
check_decl_no_pat			    fn check_decl_no_pat<ReportFn: Fn(Span, bool)>(&self, decl: &FnDecl, report_err: ReportFn) 
check_expr			fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node_ty: Ty<'tcx>) 
check_expr_within_pat			    fn check_expr_within_pat(&self, expr: &Expr, allow_paths: bool) 
check_label			    fn check_label(&self, label: Ident, span: Span) 
check_trait_fn_not_const			    fn check_trait_fn_not_const(&self, constness: Spanned<Constness>) 
consts			pub mod consts;
consume			    fn consume(&mut self,
consume_pat			    fn consume_pat(&mut self, _consume_pat: &hir::Pat, _cmt: mc::cmt, _mode: euv::ConsumeMode) {}
decl_without_init			    fn decl_without_init(&mut self, _id: ast::NodeId, _span: Span) {}
diagnostics			pub mod diagnostics;
emit_unlabled_cf_in_while_condition			    fn emit_unlabled_cf_in_while_condition(&mut self, span: Span, cf_type: &str) 
err_handler			    fn err_handler(&self) -> &errors::Handler 
euv::Delegate for CheckCrateVisitor			impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> 
foo			    fn foo((a, b): (u32, u32)); \/\/ error: patterns aren't allowed in foreign
foo			    fn foo() {}
foo			    fn foo();
foo			    fn foo(a: (u32, u32)); \/\/ ok!
foo			    fn foo(s: SomeStruct); \/\/ ok!
foo			    pub fn foo() {} \/\/ error: unnecessary visibility qualifier
handle_const_fn_call			    fn handle_const_fn_call(&mut self, def_id: DefId, ret_ty: Ty<'gcx>) 
hir_stats			pub mod hir_stats;
hir_visit::Visitor for StatCollector			impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> 
invalid_visibility			    fn invalid_visibility(&self, vis: &Visibility, span: Span, note: Option<&str>) 
loops			pub mod loops;
matched_pat			    fn matched_pat(&mut self, _: &hir::Pat, _: mc::cmt, _: euv::MatchMode) {}
mir_stats			pub mod mir_stats;
mir_visit::Visitor for StatCollector			impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> 
mutate			    fn mutate(&mut self,
name			    fn name(self) -> &'static str 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'v> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> 
new			    fn new(v: &'a mut CheckCrateVisitor<'b, 'hir>) -> Self 
no_asm			pub mod no_asm;
no_questions_in_bounds			    fn no_questions_in_bounds(&self, bounds: &TyParamBounds, where_: &str, is_trait: bool) 
populate_enum_discriminants			    fn populate_enum_discriminants(&mut self, enum_definition: &'hir hir::EnumDef) 
print			    fn print(&self, title: &str) 
print			    fn print(&self, title: &str) 
print_ast_stats			pub fn print_ast_stats<'v>(krate: &'v ast::Crate, title: &str) 
print_hir_stats			pub fn print_hir_stats(krate: &hir::Crate) 
print_mir_stats			pub fn print_mir_stats<'tcx, 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, title: &str) 
record			    fn record<T>(&mut self, label: &'static str, id: Id, node: &T) 
record			    fn record<T>(&mut self, label: &'static str, node: &T) 
record_with_size			    fn record_with_size(&mut self, label: &'static str, node_size: usize) 
require_loop			    fn require_loop(&self, name: &str, span: Span) 
some_func			fn some_func() 
static_recursion			pub mod static_recursion;
visit_arm			    fn visit_arm(&mut self, a: &'v ast::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'v hir::Arm) 
visit_assert_message			    fn visit_assert_message(&mut self,
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'v ast::TypeBinding) 
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding) 
visit_attribute			    fn visit_attribute(&mut self, attr: &'v ast::Attribute) 
visit_basic_block_data			    fn visit_basic_block_data(&mut self,
visit_block			    fn visit_block(&mut self, b: &'v ast::Block) 
visit_block			    fn visit_block(&mut self, b: &'v hir::Block) 
visit_closure_substs			    fn visit_closure_substs(&mut self,
visit_const_usize			    fn visit_const_usize(&mut self,
visit_const_val			    fn visit_const_val(&mut self,
visit_constant			    fn visit_constant(&mut self,
visit_decl			    fn visit_decl(&mut self, d: &'v hir::Decl) 
visit_enum_def			    fn visit_enum_def(&mut self,
visit_expr			    fn visit_expr(&mut self, expr: &'a Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'v ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'v hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &'hir hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &'a ast::Expr) 
visit_fn			    fn visit_fn(&mut self,
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &'a ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, g: &'a Generics) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, i: &'hir hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'hir hir::ImplItem) 
visit_item			    fn visit_item(&mut self, item: &'a Item) 
visit_item			    fn visit_item(&mut self, i: &'v ast::Item) 
visit_item			    fn visit_item(&mut self, i: &'v hir::Item) 
visit_item			    fn visit_item(&mut self, i: &'hir hir::Item) 
visit_item			    fn visit_item(&mut self, it: &'hir hir::Item) 
visit_lifetime			    fn visit_lifetime(&mut self, lt: &'a Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'v ast::Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lifetime: &'v ast::LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lifetime: &'v hir::LifetimeDef) 
visit_literal			    fn visit_literal(&mut self,
visit_local			    fn visit_local(&mut self, l: &'v ast::Local) 
visit_local			    fn visit_local(&mut self, l: &'v hir::Local) 
visit_local_decl			    fn visit_local_decl(&mut self,
visit_lvalue			    fn visit_lvalue(&mut self,
visit_mac			    fn visit_mac(&mut self, mac: &'v ast::Mac) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef) 
visit_mir			    fn visit_mir(&mut self, mir: &Mir<'tcx>) 
visit_mod			    fn visit_mod(&mut self, m: &'v ast::Mod, _s: Span, _a: &[ast::Attribute], _n: NodeId) 
visit_mod			    fn visit_mod(&mut self, m: &'v hir::Mod, _s: Span, n: NodeId) 
visit_nested_body			    fn visit_nested_body(&mut self, body_id: hir::BodyId) 
visit_nested_impl_item			    fn visit_nested_impl_item(&mut self, impl_item_id: hir::ImplItemId) 
visit_nested_item			    fn visit_nested_item(&mut self, id: hir::ItemId) 
visit_nested_trait_item			    fn visit_nested_trait_item(&mut self, trait_item_id: hir::TraitItemId) 
visit_operand			    fn visit_operand(&mut self,
visit_pat			    fn visit_pat(&mut self, pat: &'a Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'tcx hir::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'v ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'v hir::Pat) 
visit_path			    fn visit_path(&mut self, path: &'a Path, _: NodeId) 
visit_path			    fn visit_path(&mut self, path: &'v hir::Path, _id: NodeId) 
visit_path			    fn visit_path(&mut self, path: &'hir hir::Path, _: ast::NodeId) 
visit_path_list_item			    fn visit_path_list_item(&mut self,
visit_path_segment			    fn visit_path_segment(&mut self,
visit_projection			    fn visit_projection(&mut self,
visit_projection_elem			    fn visit_projection_elem(&mut self,
visit_qpath			    fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) 
visit_rvalue			    fn visit_rvalue(&mut self,
visit_source_info			    fn visit_source_info(&mut self,
visit_statement			    fn visit_statement(&mut self,
visit_stmt			    fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'v ast::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'v hir::Stmt) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v ast::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v hir::StructField) 
visit_terminator			    fn visit_terminator(&mut self,
visit_terminator_kind			    fn visit_terminator_kind(&mut self,
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'hir hir::TraitItem) 
visit_ty			    fn visit_ty(&mut self, ty: &'a Ty) 
visit_ty			    fn visit_ty(&mut self, t: &'v ast::Ty) 
visit_ty			    fn visit_ty(&mut self, t: &'v hir::Ty) 
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'v ast::TyParamBound) 
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'v hir::TyParamBound) 
visit_variant			    fn visit_variant(&mut self,
visit_variant			    fn visit_variant(&mut self,
visit_vis			    fn visit_vis(&mut self, vis: &'a Visibility) 
visit_visibility_scope			    fn visit_visibility_scope(&mut self,
visit_visibility_scope_data			    fn visit_visibility_scope_data(&mut self,
visit_where_predicate			    fn visit_where_predicate(&mut self, predicate: &'v hir::WherePredicate) 
with_context			    fn with_context<F>(&mut self, cx: Context, f: F)
with_item_id_pushed			    fn with_item_id_pushed<F>(&mut self, id: ast::NodeId, f: F, span: Span)
