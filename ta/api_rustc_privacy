Bar			    pub struct Bar(u32); \/\/ we set the Bar type public
Bar			    pub struct Bar; \/\/ error: visibility has no effect inside functions
Bar			    struct Bar(u32);
Bar			impl Bar {}
Bar			mod Bar 
Bar			pub impl Bar {} \/\/ error: unnecessary visibility qualifier
Bar			pub trait Bar : Foo {} \/\/ error: private trait in public interface
Bar			pub trait Bar : Foo {} \/\/ ok!
Bar			struct Bar;
Bar2			pub struct Bar2<T: Foo>(pub T); \/\/ ok!
Bar2			pub struct Bar2<T: Foo>(pub T); \/\/ same error
EmbargoVisitor			impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> 
EmbargoVisitor			struct EmbargoVisitor<'a, 'tcx: 'a> 
Foo			    impl Foo 
Foo			    pub struct Foo 
Foo			    pub struct Foo(isize);
Foo			    pub struct Foo(pub isize); \/\/ we set its field to public
Foo			enum Foo 
Foo			mod Foo 
Foo			pub enum Foo 
Foo			pub trait Foo { \/\/ we set the Foo trait public
Foo			trait Foo 
Foo for Bar			pub impl Foo for Bar { \/\/ error: unnecessary visibility qualifier
Foo for Bar			pub impl Foo for Bar 
ObsoleteCheckTypeForPrivatenessVisitor			struct ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b: 'a, 'tcx: 'b> 
ObsoleteVisiblePrivateTypesVisitor			impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> 
ObsoleteVisiblePrivateTypesVisitor			struct ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx: 'a> 
PrivacyVisitor			impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> 
PrivacyVisitor			struct PrivacyVisitor<'a, 'tcx: 'a> 
PrivateItemsInPublicInterfacesVisitor			impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> 
PrivateItemsInPublicInterfacesVisitor			struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> 
ReachEverythingInTheInterfaceVisitor			impl<'b, 'a, 'tcx: 'a> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> 
ReachEverythingInTheInterfaceVisitor			struct ReachEverythingInTheInterfaceVisitor<'b, 'a: 'b, 'tcx: 'a> 
SanePrivacyVisitor			impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> 
SanePrivacyVisitor			struct SanePrivacyVisitor<'a, 'tcx: 'a> 
SearchInterfaceForPrivateItemsVisitor			impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> 
SearchInterfaceForPrivateItemsVisitor			struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> 
Visitor for EmbargoVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> 
Visitor for ObsoleteCheckTypeForPrivatenessVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> 
Visitor for ObsoleteVisiblePrivateTypesVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> 
Visitor for PrivacyVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> 
Visitor for PrivateItemsInPublicInterfacesVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> 
Visitor for ReachEverythingInTheInterfaceVisitor			impl<'b, 'a, 'tcx: 'a, 'v> Visitor<'v> for ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> 
Visitor for SanePrivacyVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> 
Visitor for SearchInterfaceForPrivateItemsVisitor			impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> 
bar			    pub fn bar() -> Bar { \/\/ error: private type in public interface
bar			    pub fn bar() -> Bar { \/\/ ok!
bar			mod bar 
check_crate			pub fn check_crate(tcx: &TyCtxt, export_map: &def::ExportMap) -> AccessLevels 
check_field			    fn check_field(&mut self, span: Span, def: ty::AdtDef<'tcx>, field: ty::FieldDef<'tcx>) 
check_method			    fn check_method(&mut self, span: Span, method_def_id: DefId) 
check_sane_privacy			    fn check_sane_privacy(&self, item: &hir::Item) 
check_ty_param_bound			    fn check_ty_param_bound(&mut self,
diagnostics			pub mod diagnostics;
dummy			    fn dummy(&self) { }
foo			    fn foo();
foo			    pub fn foo() {} \/\/ error: unnecessary visibility qualifier
foo			    pub fn foo() {}
foo			fn foo() 
foo			pub fn foo<T: Foo> (t: T) {} \/\/ ok!
foo			pub fn foo<T: Foo> (t: T) {} \/\/ same error
get			    fn get(&self, id: ast::NodeId) -> Option<AccessLevel> 
item_is_accessible			    fn item_is_accessible(&self, did: DefId) -> bool 
item_is_public			    fn item_is_public(&self, id: &ast::NodeId, vis: &hir::Visibility) -> bool 
new			        pub fn new() -> Foo { \/\/ we create a method to instantiate `Foo`
new			        pub fn new(x: isize) -> Foo 
new			    fn new(tcx: &'a TyCtxt<'tcx>, old_error_set: &'a NodeSet) -> Self 
path_is_private_type			    fn path_is_private_type(&self, path_id: ast::NodeId) -> bool 
reach			    fn reach<'b>(&'b mut self) -> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> 
reach_aliased_type			    fn reach_aliased_type(&mut self, item: &hir::Item, path: &hir::Path) 
substituted_alias_visibility			    fn substituted_alias_visibility(&self, item: &hir::Item, path: &hir::Path)
trait_is_public			    fn trait_is_public(&self, trait_id: ast::NodeId) -> bool 
trait_level			    fn trait_level(&self, trait_ref: &hir::TraitRef) -> Option<AccessLevel> 
trait_ref_visibility			    fn trait_ref_visibility(&self, trait_ref: &hir::TraitRef) -> ty::Visibility 
ty_level			    fn ty_level(&self, ty: &hir::Ty) -> Option<AccessLevel> 
ty_visibility			    fn ty_visibility(&self, ty: &hir::Ty) -> ty::Visibility 
update			    fn update(&mut self, id: ast::NodeId, level: Option<AccessLevel>) -> Option<AccessLevel> 
visit_block			    fn visit_block(&mut self, _: &hir::Block) {}
visit_block			    fn visit_block(&mut self, b: &'v hir::Block) 
visit_expr			    fn visit_expr(&mut self, _: &hir::Expr) {}
visit_expr			    fn visit_expr(&mut self, expr: &hir::Expr) 
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, item: &hir::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, generics: &hir::Generics) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_macro_def			    fn visit_macro_def(&mut self, md: &'v hir::MacroDef) 
visit_mod			    fn visit_mod(&mut self, m: &hir::Mod, _sp: Span, id: ast::NodeId) 
visit_nested_item			    fn visit_nested_item(&mut self, item: hir::ItemId) 
visit_pat			    fn visit_pat(&mut self, _: &hir::Pat) {}
visit_pat			    fn visit_pat(&mut self, pattern: &hir::Pat) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &hir::StructField) 
visit_trait_ref			    fn visit_trait_ref(&mut self, trait_ref: &hir::TraitRef) 
visit_ty			    fn visit_ty(&mut self, t: &hir::Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &hir::Ty) 
visit_variant			    fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics, item_id: ast::NodeId) 
