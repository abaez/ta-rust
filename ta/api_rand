::Rng for MyRng			    impl<R: rand::Rng> ::Rng for MyRng<R> 
AsciiGenerator			pub struct AsciiGenerator<'a, R: 'a> 
ChaChaRng			impl ChaChaRng 
ChaChaRng			pub struct ChaChaRng 
ChiSquared			impl ChiSquared 
ChiSquared			pub struct ChiSquared 
ChiSquaredRepr			enum ChiSquaredRepr 
Clone for Isaac64Rng			impl Clone for Isaac64Rng 
Clone for IsaacRng			impl Clone for IsaacRng 
Closed01			pub struct Closed01<F>(pub F);
ConstRand			    struct ConstRand(usize);
Counter			    struct Counter 
CountingRng			    struct CountingRng 
Default for Counter			    impl Default for Counter 
Default for ReseedWithDefault			impl Default for ReseedWithDefault 
Exp			impl Exp 
Exp			pub struct Exp 
Exp1			pub struct Exp1(pub f64);
FisherF			impl FisherF 
FisherF			pub struct FisherF 
FloatMath			trait FloatMath: Sized 
FloatMath for f64			impl FloatMath for f64 
Gamma			impl Gamma 
Gamma			pub struct Gamma 
GammaLargeShape			impl GammaLargeShape 
GammaLargeShape			struct GammaLargeShape 
GammaRepr			enum GammaRepr 
GammaSmallShape			impl GammaSmallShape 
GammaSmallShape			struct GammaSmallShape 
Generator			pub struct Generator<'a, T, R: 'a> 
IndependentSample			pub trait IndependentSample<Support>: Sample<Support> 
IndependentSample for ChiSquared			impl IndependentSample<f64> for ChiSquared 
IndependentSample for Exp			impl IndependentSample<f64> for Exp 
IndependentSample for FisherF			impl IndependentSample<f64> for FisherF 
IndependentSample for Gamma			impl IndependentSample<f64> for Gamma 
IndependentSample for GammaLargeShape			impl IndependentSample<f64> for GammaLargeShape 
IndependentSample for GammaSmallShape			impl IndependentSample<f64> for GammaSmallShape 
IndependentSample for LogNormal			impl IndependentSample<f64> for LogNormal 
IndependentSample for Normal			impl IndependentSample<f64> for Normal 
IndependentSample for RandSample			impl<Sup: Rand> IndependentSample<Sup> for RandSample<Sup> 
IndependentSample for Range			impl<Sup: SampleRange> IndependentSample<Sup> for Range<Sup> 
IndependentSample for StudentT			impl IndependentSample<f64> for StudentT 
IndependentSample for WeightedChoice			impl<'a, T: Clone> IndependentSample<T> for WeightedChoice<'a, T> 
Isaac64Rng			impl Isaac64Rng 
Isaac64Rng			pub struct Isaac64Rng 
IsaacRng			impl IsaacRng 
IsaacRng			pub struct IsaacRng 
Iterator for AsciiGenerator			impl<'a, R: Rng> Iterator for AsciiGenerator<'a, R> 
Iterator for Generator			impl<'a, T: Rand, R: Rng> Iterator for Generator<'a, T, R> 
LogNormal			impl LogNormal 
LogNormal			pub struct LogNormal 
MyRng			    pub struct MyRng<R> 
Normal			impl Normal 
Normal			pub struct Normal 
Open01			pub struct Open01<F>(pub F);
Rand			pub trait Rand: Sized 
Rand			            impl Rand for 
Rand			impl Rand for () 
Rand for ChaChaRng			impl Rand for ChaChaRng 
Rand for Closed01			            impl Rand for Closed01<
Rand for ConstRand			    impl Rand for ConstRand 
Rand for Exp1			impl Rand for Exp1 
Rand for Isaac64Rng			impl Rand for Isaac64Rng 
Rand for IsaacRng			impl Rand for IsaacRng 
Rand for Open01			            impl Rand for Open01<
Rand for Option			impl<T: Rand> Rand for Option<T> 
Rand for StandardNormal			impl Rand for StandardNormal 
Rand for XorShiftRng			impl Rand for XorShiftRng 
Rand for bool			impl Rand for bool 
Rand for char			impl Rand for char 
Rand for i16			impl Rand for i16 
Rand for i32			impl Rand for i32 
Rand for i64			impl Rand for i64 
Rand for i8			impl Rand for i8 
Rand for isize			impl Rand for isize 
Rand for u16			impl Rand for u16 
Rand for u32			impl Rand for u32 
Rand for u64			impl Rand for u64 
Rand for u8			impl Rand for u8 
Rand for usize			impl Rand for usize 
RandSample			impl<Sup> RandSample<Sup> 
RandSample			pub struct RandSample<Sup> 
Range			impl<X: SampleRange + PartialOrd> Range<X> 
Range			pub struct Range<X> 
ReseedWithDefault			pub struct ReseedWithDefault;
Reseeder			pub trait Reseeder<R> 
Reseeder for ReseedWithDefault			impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault 
ReseedingRng			pub struct ReseedingRng<R, Rsdr> 
Rng			pub trait Rng: Sized 
Rng for ChaChaRng			impl Rng for ChaChaRng 
Rng for Counter			    impl Rng for Counter 
Rng for CountingRng			    impl Rng for CountingRng 
Rng for Isaac64Rng			impl Rng for Isaac64Rng 
Rng for IsaacRng			impl Rng for IsaacRng 
Rng for XorShiftRng			impl Rng for XorShiftRng 
Sample			pub trait Sample<Support> 
Sample for ChiSquared			impl Sample<f64> for ChiSquared 
Sample for Exp			impl Sample<f64> for Exp 
Sample for FisherF			impl Sample<f64> for FisherF 
Sample for Gamma			impl Sample<f64> for Gamma 
Sample for GammaLargeShape			impl Sample<f64> for GammaLargeShape 
Sample for GammaSmallShape			impl Sample<f64> for GammaSmallShape 
Sample for LogNormal			impl Sample<f64> for LogNormal 
Sample for Normal			impl Sample<f64> for Normal 
Sample for RandSample			impl<Sup: Rand> Sample<Sup> for RandSample<Sup> 
Sample for Range			impl<Sup: SampleRange> Sample<Sup> for Range<Sup> 
Sample for StudentT			impl Sample<f64> for StudentT 
Sample for WeightedChoice			impl<'a, T: Clone> Sample<T> for WeightedChoice<'a, T> 
SampleRange			        impl SampleRange for 
SampleRange			pub trait SampleRange: Sized 
SeedableRng			pub trait SeedableRng<Seed>: Rng 
SeedableRng for ChaChaRng			impl<'a> SeedableRng<&'a [u32]> for ChaChaRng 
SeedableRng for Counter			    impl SeedableRng<u32> for Counter 
SeedableRng for Isaac64Rng			impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng 
SeedableRng for IsaacRng			impl<'a> SeedableRng<&'a [u32]> for IsaacRng 
SeedableRng for XorShiftRng			impl SeedableRng<[u32; 4]> for XorShiftRng 
StandardNormal			pub struct StandardNormal(pub f64);
StudentT			impl StudentT 
StudentT			pub struct StudentT 
Weighted			pub struct Weighted<T> 
WeightedChoice			impl<'a, T: Clone> WeightedChoice<'a, T> 
WeightedChoice			pub struct WeightedChoice<'a, T: 'a> 
XorShiftRng			impl XorShiftRng 
XorShiftRng			pub struct XorShiftRng 
bench			mod bench 
bench			mod bench 
bench			mod bench 
bench_gamma_large_shape			    fn bench_gamma_large_shape(b: &mut Bencher) 
bench_gamma_small_shape			    fn bench_gamma_small_shape(b: &mut Bencher) 
chacha			pub mod chacha;
choose			    fn choose<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> 
clone			    fn clone(&self) -> Isaac64Rng 
clone			    fn clone(&self) -> IsaacRng 
construct_range			            fn construct_range(low: 
construct_range			    fn construct_range(low: Self, high: Self) -> Range<Self>;
core			fn core(output: &mut [u32; STATE_WORDS], input: &[u32; STATE_WORDS]) 
default			        fn default() -> Counter 
default			    fn default() -> ReseedWithDefault 
distributions			pub mod distributions;
exp			    fn exp(self) -> Self;
exp			    fn exp(self) -> f64 
exponential			pub mod exponential;
fill_bytes			    fn fill_bytes(&mut self, dest: &mut [u8]) 
fill_bytes			    fn fill_bytes(&mut self, dest: &mut [u8]) 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for AsciiGenerator			impl<'a, R: fmt::Debug> fmt::Debug for AsciiGenerator<'a, R> 
fmt::Debug for ChaChaRng			impl fmt::Debug for ChaChaRng 
fmt::Debug for ChiSquared			impl fmt::Debug for ChiSquared 
fmt::Debug for Closed01			impl<F: fmt::Debug> fmt::Debug for Closed01<F> 
fmt::Debug for Exp			impl fmt::Debug for Exp 
fmt::Debug for Exp1			impl fmt::Debug for Exp1 
fmt::Debug for FisherF			impl fmt::Debug for FisherF 
fmt::Debug for Gamma			impl fmt::Debug for Gamma 
fmt::Debug for Generator			impl<'a, T, R: fmt::Debug> fmt::Debug for Generator<'a, T, R> 
fmt::Debug for Isaac64Rng			impl fmt::Debug for Isaac64Rng 
fmt::Debug for IsaacRng			impl fmt::Debug for IsaacRng 
fmt::Debug for LogNormal			impl fmt::Debug for LogNormal 
fmt::Debug for Normal			impl fmt::Debug for Normal 
fmt::Debug for Open01			impl<F: fmt::Debug> fmt::Debug for Open01<F> 
fmt::Debug for RandSample			impl<Sup> fmt::Debug for RandSample<Sup> 
fmt::Debug for Range			impl<X: fmt::Debug> fmt::Debug for Range<X> 
fmt::Debug for ReseedingRng			impl<R: fmt::Debug, Rsdr: fmt::Debug> fmt::Debug for ReseedingRng<R, Rsdr> 
fmt::Debug for StandardNormal			impl fmt::Debug for StandardNormal 
fmt::Debug for StudentT			impl fmt::Debug for StudentT 
fmt::Debug for Weighted			impl<T: fmt::Debug> fmt::Debug for Weighted<T> 
fmt::Debug for WeightedChoice			impl<'a, T: fmt::Debug> fmt::Debug for WeightedChoice<'a, T> 
from_seed			    fn from_seed(seed: &'a [u32]) -> ChaChaRng 
from_seed			    fn from_seed(seed: &'a [u32]) -> IsaacRng 
from_seed			    fn from_seed(seed: &'a [u64]) -> Isaac64Rng 
from_seed			    fn from_seed(seed: Seed) -> Self;
from_seed			    fn from_seed(seed: [u32; 4]) -> XorShiftRng 
from_seed			        fn from_seed(seed: u32) -> Counter 
from_seed		dr, seed): (Rsdr, S)) -> ReseedingRng<R, Rsdr> 
gamma			pub mod gamma;
gen			    fn gen<T: Rand>(&mut self) -> T 
gen_ascii_chars			    fn gen_ascii_chars<'a>(&'a mut self) -> AsciiGenerator<'a, Self> 
gen_iter			    fn gen_iter<'a, T: Rand>(&'a mut self) -> Generator<'a, T, Self> 
gen_range			    fn gen_range<T: PartialOrd + SampleRange>(&mut self, low: T, high: T) -> T 
gen_weighted_bool			    fn gen_weighted_bool(&mut self, n: usize) -> bool 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, _: &mut R) -> Support;
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> T 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup 
init			    fn init(&mut self, key: &[u32; KEY_WORDS]) 
init		l: bool) 
isaac			    fn isaac(&mut self) 
isaac			pub mod isaac;
isaac64			    fn isaac64(&mut self) 
ln			    fn ln(self) -> Self;
ln			    fn ln(self) -> f64 
new			    pub fn new(lambda: f64) -> Exp 
new			    pub fn new(k: f64) -> ChiSquared 
new			    pub fn new(m: f64, n: f64) -> FisherF 
new			    pub fn new(n: f64) -> StudentT 
new			    pub fn new(shape: f64, scale: f64) -> Gamma 
new			    pub fn new() -> RandSample<Sup> 
new			    pub fn new(items: &'a mut [Weighted<T>]) -> WeightedChoice<'a, T> 
new			    pub fn new(mean: f64, std_dev: f64) -> LogNormal 
new			    pub fn new(mean: f64, std_dev: f64) -> Normal 
new			    pub fn new(low: X, high: X) -> Range<X> 
new			    pub fn new(rng: R, generation_threshold: usize, reseeder: Rsdr) -> ReseedingRng<R, Rsdr> 
new_raw			    fn new_raw(shape: f64, scale: f64) -> GammaLargeShape 
new_raw			    fn new_raw(shape: f64, scale: f64) -> GammaSmallShape 
new_unseeded			    pub fn new_unseeded() -> ChaChaRng 
new_unseeded			    pub fn new_unseeded() -> Isaac64Rng 
new_unseeded			    pub fn new_unseeded() -> IsaacRng 
new_unseeded			    pub fn new_unseeded() -> XorShiftRng 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<char> 
next_f32			    fn next_f32(&mut self) -> f32 
next_f64			    fn next_f64(&mut self) -> f64 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32;
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u64			        fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
normal			pub mod normal;
pdf			        fn pdf(x: f64) -> f64 
pdf			        fn pdf(x: f64) -> f64 
powf			    fn powf(self, n: Self) -> Self;
powf			    fn powf(self, n: f64) -> f64 
rand			    fn rand<R: Rng>(other: &mut R) -> ChaChaRng 
rand			    fn rand<R: Rng>(rng: &mut R) -> Exp1 
rand			        fn rand<R: Rng>(_: &mut R) -> ConstRand 
rand			    fn rand<R: Rng>(rng: &mut R) -> StandardNormal 
rand			    fn rand<R: Rng>(other: &mut R) -> Isaac64Rng 
rand			    fn rand<R: Rng>(other: &mut R) -> IsaacRng 
rand			    fn rand<R: Rng>(rng: &mut R) -> Self;
rand			    fn rand<R: Rng>(rng: &mut R) -> XorShiftRng 
rand			                fn rand<R: Rng>(rng: &mut R) -> 
rand			                fn rand<R: Rng>(rng: &mut R) -> Closed01<
rand			                fn rand<R: Rng>(rng: &mut R) -> Open01<
rand			            fn rand<R: Rng>(_rng: &mut R) -> ( 
rand			    fn rand<R: Rng>(_: &mut R) -> () 
rand			    fn rand<R: Rng>(rng: &mut R) -> Option<T> 
rand			    fn rand<R: Rng>(rng: &mut R) -> bool 
rand			    fn rand<R: Rng>(rng: &mut R) -> char 
rand			    fn rand<R: Rng>(rng: &mut R) -> i16 
rand			    fn rand<R: Rng>(rng: &mut R) -> i32 
rand			    fn rand<R: Rng>(rng: &mut R) -> i64 
rand			    fn rand<R: Rng>(rng: &mut R) -> i8 
rand			    fn rand<R: Rng>(rng: &mut R) -> isize 
rand			    fn rand<R: Rng>(rng: &mut R) -> u16 
rand			    fn rand<R: Rng>(rng: &mut R) -> u32 
rand			    fn rand<R: Rng>(rng: &mut R) -> u64 
rand			    fn rand<R: Rng>(rng: &mut R) -> u8 
rand			    fn rand<R: Rng>(rng: &mut R) -> usize 
rand_exp			    fn rand_exp(b: &mut Bencher) 
rand_impls			mod rand_impls;
rand_normal			    fn rand_normal(b: &mut Bencher) 
range			pub mod range;
reseed			    fn reseed(&mut self, seed: &'a [u32]) 
reseed			    fn reseed(&mut self, seed: &'a [u32]) 
reseed			    fn reseed(&mut self, seed: &'a [u64]) 
reseed			    fn reseed(&mut self, _: Seed);
reseed			    fn reseed(&mut self, seed: [u32; 4]) 
reseed			        fn reseed(&mut self, seed: u32) 
reseed		dr, seed): (Rsdr, S)) 
reseed			    fn reseed(&mut self, rng: &mut R) 
reseed			    fn reseed(&mut self, rng: &mut R);
reseed_if_necessary			    pub fn reseed_if_necessary(&mut self) 
reseeding			pub mod reseeding;
rng			    pub fn rng() -> MyRng<rand::ThreadRng> 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Support;
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> T 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup 
sample_range			            fn sample_range<R: Rng>(r: &Range<
sample_range			    fn sample_range<R: Rng>(r: &Range<Self>, rng: &mut R) -> Self;
set_counter			    pub fn set_counter(&mut self, counter_low: u64, counter_high: u64) 
shuffle			    fn shuffle<T>(&mut self, values: &mut [T]) 
sqrt			    fn sqrt(self) -> Self;
sqrt			    fn sqrt(self) -> f64 
test			mod test 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
update			    fn update(&mut self) 
weak_rng			    pub fn weak_rng() -> MyRng<rand::ThreadRng> 
zero_case			        fn zero_case<R: Rng>(rng: &mut R, _u: f64) -> f64 
zero_case			        fn zero_case<R: Rng>(rng: &mut R, u: f64) -> f64 
ziggurat			fn ziggurat<R: Rng, P, Z>(rng: &mut R,
ziggurat_tables			mod ziggurat_tables;
