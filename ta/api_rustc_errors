Annotation			impl Annotation 
Annotation			pub struct Annotation 
AnnotationType			pub enum AnnotationType 
BufferedWriter			impl BufferedWriter 
BufferedWriter			pub struct BufferedWriter 
CloseHandle			        fn CloseHandle(hObject: HANDLE) -> BOOL;
CodeMapper			pub trait CodeMapper 
CodeSuggestion			impl CodeSuggestion 
CodeSuggestion			pub struct CodeSuggestion 
ColorConfig			impl ColorConfig 
ColorConfig			pub enum ColorConfig 
CreateMutexA			        fn CreateMutexA(lpMutexAttributes: LPSECURITY_ATTRIBUTES,
Debug for DiagnosticBuilder			impl<'a> Debug for DiagnosticBuilder<'a> 
Deref for DiagnosticBuilder			impl<'a> Deref for DiagnosticBuilder<'a> 
DerefMut for DiagnosticBuilder			impl<'a> DerefMut for DiagnosticBuilder<'a> 
Destination			impl Destination 
Destination			pub enum Destination 
Diagnostic			impl Diagnostic 
Diagnostic			pub struct Diagnostic 
DiagnosticBuilder			impl<'a> DiagnosticBuilder<'a> 
DiagnosticBuilder			pub struct DiagnosticBuilder<'a> 
DiagnosticStyledString			impl DiagnosticStyledString 
DiagnosticStyledString			pub struct DiagnosticStyledString(pub Vec<StringPart>);
Drop for DiagnosticBuilder			impl<'a> Drop for DiagnosticBuilder<'a> 
Drop for Guard			    impl Drop for Guard 
Drop for Handle			    impl Drop for Handle 
Emitter			pub trait Emitter 
Emitter for EmitterWriter			impl Emitter for EmitterWriter 
EmitterWriter			impl EmitterWriter 
EmitterWriter			pub struct EmitterWriter 
ExplicitBug			pub struct ExplicitBug;
FatalError			pub struct FatalError;
FileInfo			pub struct FileInfo 
FileWithAnnotatedLines			struct FileWithAnnotatedLines 
GetConsoleMode			        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: *mut DWORD) -> BOOL;
GetStdHandle			        fn GetStdHandle(which: DWORD) -> HANDLE;
Guard			    struct Guard(Handle);
Handle			    struct Handle(HANDLE);
Handler			impl Handler 
Handler			pub struct Handler 
Level			impl Level 
Level			pub enum Level 
Line			pub struct Line 
MultilineAnnotation			impl MultilineAnnotation 
MultilineAnnotation			pub struct MultilineAnnotation 
Registry			impl Registry 
Registry			pub struct Registry 
ReleaseMutex			        fn ReleaseMutex(hMutex: HANDLE) -> BOOL;
RenderSpan			pub enum RenderSpan 
SnippetData			pub struct SnippetData 
StringPart			impl StringPart 
StringPart			pub enum StringPart 
Style			pub enum Style 
StyledBuffer			impl StyledBuffer 
StyledBuffer			pub struct StyledBuffer 
StyledString			pub struct StyledString 
SubDiagnostic			impl SubDiagnostic 
SubDiagnostic			pub struct SubDiagnostic 
Substitution			pub struct Substitution 
WaitForSingleObject			        fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;
Write for BufferedWriter			impl Write for BufferedWriter 
Write for Destination			impl Write for Destination 
_new			    fn _new() -> BufferedWriter 
abort_if_errors			    pub fn abort_if_errors(&self) 
acquire_global_lock			pub fn acquire_global_lock(_name: &str) -> Box<Any> 
acquire_global_lock			pub fn acquire_global_lock(name: &str) -> Box<Any> 
add_annotation_to_file			        fn add_annotation_to_file(file_vec: &mut Vec<FileWithAnnotatedLines>,
append			    pub fn append(&mut self, line: usize, string: &str, style: Style) 
apply_style			    fn apply_style(&mut self, lvl: Level, style: Style) -> io::Result<()> 
as_end			    pub fn as_end(&self) -> Annotation 
as_line			    pub fn as_line(&self) -> Annotation 
as_start			    pub fn as_start(&self) -> Annotation 
bug			    pub fn bug(&self, msg: &str) -> ! 
bump_err_count			    pub fn bump_err_count(&self) 
call_span_if_macro			    fn call_span_if_macro(&self, sp: Span) -> Span;
cancel			    pub fn cancel(&mut self) 
cancel			    pub fn cancel(&self, err: &mut DiagnosticBuilder) 
cancelled			    pub fn cancelled(&self) -> bool 
code			    pub fn code(&mut self, s: String) -> &mut Self 
color			    pub fn color(self) -> term::color::Color 
content			    pub fn content(&self) -> String 
copy_details_not_message			    pub fn copy_details_not_message(&mut self, from: &Diagnostic) 
copy_tabs			    pub fn copy_tabs(&mut self, row: usize) 
delay_span_bug			    pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
deref			    fn deref(&self) -> &Diagnostic 
deref_mut			    fn deref_mut(&mut self) -> &mut Diagnostic 
description			    fn description(&self) -> &str 
diagnostic			pub mod diagnostic;
diagnostic_builder			pub mod diagnostic_builder;
draw_col_separator			fn draw_col_separator(buffer: &mut StyledBuffer, line: usize, col: usize) 
draw_col_separator_no_space			fn draw_col_separator_no_space(buffer: &mut StyledBuffer, line: usize, col: usize) 
draw_col_separator_no_space_with_style			fn draw_col_separator_no_space_with_style(buffer: &mut StyledBuffer,
draw_multiline_line			fn draw_multiline_line(buffer: &mut StyledBuffer,
draw_note_separator			fn draw_note_separator(buffer: &mut StyledBuffer, line: usize, col: usize) 
draw_range			fn draw_range(buffer: &mut StyledBuffer, symbol: char, line: usize,
drop			    fn drop(&mut self) 
drop			        fn drop(&mut self) 
emit			    pub fn emit(&mut self) 
emit			    fn emit(&mut self, db: &DiagnosticBuilder) 
emit			    fn emit(&mut self, db: &DiagnosticBuilder);
emit			    pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) 
emit_message_default			    fn emit_message_default(&mut self,
emit_messages_default			    fn emit_messages_default(&mut self,
emit_suggestion_default			    fn emit_suggestion_default(&mut self,
emit_to_destination			fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,
emit_with_code			    pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: &str, lvl: Level) 
emitter			pub mod emitter;
ensure_filemap_source_present			    fn ensure_filemap_source_present(&self, file_map: Rc<FileMap>) -> bool;
ensure_lines			    fn ensure_lines(&mut self, line: usize) 
err			    pub fn err(&self, msg: &str) 
err_count			    pub fn err_count(&self) -> usize 
error::Error for ExplicitBug			impl error::Error for ExplicitBug 
error::Error for FatalError			impl error::Error for FatalError 
expect			pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T
fatal			    pub fn fatal(&self, msg: &str) -> FatalError 
find_description			    pub fn find_description(&self, code: &str) -> Option<&'static str> 
fix_multispan_in_std_macros			    fn fix_multispan_in_std_macros(&mut self, span: &mut MultiSpan) -> bool 
fix_multispans_in_std_macros			    fn fix_multispans_in_std_macros(&mut self,
flush			    fn flush(&mut self) -> io::Result<()> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for ExplicitBug			impl fmt::Display for ExplicitBug 
fmt::Display for FatalError			impl fmt::Display for FatalError 
fmt::Display for Level			impl fmt::Display for Level 
from_stderr			    fn from_stderr() -> Destination 
get_max_line_num			    fn get_max_line_num(&mut self, span: &MultiSpan, children: &Vec<SubDiagnostic>) -> usize 
get_multispan_max_line_num			    fn get_multispan_max_line_num(&mut self, msp: &MultiSpan) -> usize 
has_errors			    pub fn has_errors(&self) -> bool 
has_label			    pub fn has_label(&self) -> bool 
help			    pub fn help(&mut self , msg: &str) -> &mut Self 
highlighted			    pub fn highlighted<S: Into<String>>(t: S) -> DiagnosticStyledString 
highlighted_note			    pub fn highlighted_note(&mut self, msg: Vec<(String, Style)>) -> &mut Self 
increase_depth			    pub fn increase_depth(&mut self) 
into_diagnostic			    pub fn into_diagnostic(mut self) -> Diagnostic 
is_fatal			    pub fn is_fatal(&self) -> bool 
is_line			    pub fn is_line(&self) -> bool 
is_multiline			    pub fn is_multiline(&self) -> bool 
len			    pub fn len(&self) -> usize 
level			    pub fn level(&self) -> Level 
lock			mod lock;
lookup_char_pos			    fn lookup_char_pos(&self, pos: BytePos) -> Loc;
merge_spans			    fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;
message			    pub fn message(&self) -> String 
msg_to_buffer			    fn msg_to_buffer(&self,
mut_span_err			    pub fn mut_span_err<'a, S: Into<MultiSpan>>(&'a self,
new			    pub fn new() -> DiagnosticStyledString 
new			    pub fn new(level: Level, message: &str) -> Self 
new			    pub fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> 
new			    pub fn new(dst: Box<Write + Send>, code_map: Option<Rc<CodeMapper>>) -> EmitterWriter 
new			    pub fn new(descriptions: &[(&'static str, &'static str)]) -> Registry 
new			    pub fn new() -> StyledBuffer 
new_with_code			    pub fn new_with_code(level: Level, code: Option<String>, message: &str) -> Self 
new_with_code			    pub fn new_with_code(handler: &'a Handler,
normal			    pub fn normal<S: Into<String>>(t: S) -> DiagnosticStyledString 
note			    pub fn note(&mut self, msg: &str) -> &mut Self 
note_expected_found			    pub fn note_expected_found(&mut self,
note_expected_found_extra			    pub fn note_expected_found_extra(&mut self,
note_trait_signature			    pub fn note_trait_signature(&mut self, name: String, signature: String) -> &mut Self 
note_without_error			    pub fn note_without_error(&self, msg: &str) 
num_lines			    pub fn num_lines(&self) -> usize 
num_overlap			fn num_overlap(a_start: usize, a_end: usize, b_start: usize, b_end:usize, inclusive: bool) -> bool 
overlaps			fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool 
panic_if_treat_err_as_bug			    fn panic_if_treat_err_as_bug(&self) 
prepend			    pub fn prepend(&mut self, line: usize, string: &str, style: Style) 
preprocess_annotations			    fn preprocess_annotations(&mut self, msp: &MultiSpan) -> Vec<FileWithAnnotatedLines> 
push_highlighted			    pub fn push_highlighted<S: Into<String>>(&mut self, t: S) 
push_normal			    pub fn push_normal<S: Into<String>>(&mut self, t: S) 
push_trailing			        fn push_trailing(buf: &mut String,
putc			    pub fn putc(&mut self, line: usize, col: usize, chr: char, style: Style) 
puts			    pub fn puts(&mut self, line: usize, col: usize, string: &str, style: Style) 
registry			pub mod registry;
render			    pub fn render(&mut self) -> Vec<Vec<StyledString>> 
render_source_line			    fn render_source_line(&self,
reset_attrs			    fn reset_attrs(&mut self) -> io::Result<()> 
set_continue_after_error			    pub fn set_continue_after_error(&self, continue_after_error: bool) 
set_message			    pub fn set_message(&mut self, message: &str) 
set_span			    pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self 
snippet			mod snippet;
span_bug			    pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! 
span_bug_no_panic			    pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_err			    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_err_with_code			    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) 
span_fatal			    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError 
span_fatal_with_code			    pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self,
span_help			    pub fn span_help<S: Into<MultiSpan>>(&mut self,
span_label			    pub fn span_label<T: Into<String>>(&mut self, span: Span, label: T) -> &mut Self 
span_label			    pub fn span_label<T: Into<String>>(&mut self, span: Span, label: T) -> &mut Self 
span_note			    pub fn span_note<S: Into<MultiSpan>>(&mut self,
span_note_diag			    pub fn span_note_diag<'a>(&'a self,
span_note_without_error			    pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_suggestion			    pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self 
span_suggestions			    pub fn span_suggestions(&mut self, sp: Span, msg: &str, suggestions: Vec<String>) -> &mut Self 
span_to_filename			    fn span_to_filename(&self, sp: Span) -> FileName;
span_to_lines			    fn span_to_lines(&self, sp: Span) -> FileLinesResult;
span_to_string			    fn span_to_string(&self, sp: Span) -> String;
span_unimpl			    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! 
span_warn			    pub fn span_warn<S: Into<MultiSpan>>(&mut self,
span_warn			    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_warn_with_code			    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) 
splice_lines			    pub fn splice_lines(&self, cm: &CodeMapper) -> Vec<(String, bool)> 
start_attr			    fn start_attr(&mut self, attr: term::Attr) -> io::Result<()> 
stderr			    pub fn stderr(color_config: ColorConfig, code_map: Option<Rc<CodeMapper>>) -> EmitterWriter 
stderr_isatty			fn stderr_isatty() -> bool 
struct_dummy			    pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> 
struct_err			    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> 
struct_err_with_code			    pub fn struct_err_with_code<'a>(&'a self, msg: &str, code: &str) -> DiagnosticBuilder<'a> 
struct_fatal			    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> 
struct_span_err			    pub fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,
struct_span_err_with_code			    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,
struct_span_fatal			    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,
struct_span_fatal_with_code			    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,
struct_span_warn			    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,
struct_span_warn_with_code			    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,
struct_warn			    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> 
style_or_override			        fn style_or_override(style: Style, override_style: Option<Style>) -> Style 
styled_buffer			mod styled_buffer;
styled_message			    pub fn styled_message(&self) -> &Vec<(String, Style)> 
sub			    fn sub(&mut self,
sub_with_highlights			    fn sub_with_highlights(&mut self,
substitution_spans			    pub fn substitution_spans<'a>(&'a self) -> impl Iterator<Item = Span> + 'a 
substitutions			    fn substitutions(&self) -> usize 
takes_space			    pub fn takes_space(&self) -> bool 
to_str			    pub fn to_str(self) -> &'static str 
unimpl			    pub fn unimpl(&self, msg: &str) -> ! 
use_color			    fn use_color(&self) -> bool 
warn			    pub fn warn(&mut self, msg: &str) -> &mut Self 
warn			    pub fn warn(&self, msg: &str) 
with_emitter			    pub fn with_emitter(can_emit_warnings: bool,
with_tty_emitter			    pub fn with_tty_emitter(color_config: ColorConfig,
write			    fn write(&mut self, buf: &[u8]) -> io::Result<usize> 
write			    fn write(&mut self, bytes: &[u8]) -> io::Result<usize> 
