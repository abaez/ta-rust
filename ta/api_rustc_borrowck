AliasableViolationKind			pub enum AliasableViolationKind 
AnalysisData			pub struct AnalysisData<'a, 'tcx: 'a> 
AssignDataFlowOperator			pub struct AssignDataFlowOperator;
Assignment			pub struct Assignment 
Batcave			struct Batcave 
BckError			pub struct BckError<'tcx> 
BitwiseOperator for AssignDataFlowOperator			impl BitwiseOperator for AssignDataFlowOperator 
BitwiseOperator for LoanDataFlowOperator			impl BitwiseOperator for LoanDataFlowOperator 
BitwiseOperator for MoveDataFlowOperator			impl BitwiseOperator for MoveDataFlowOperator 
BorrowckCtxt			impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> 
BorrowckCtxt			pub struct BorrowckCtxt<'a, 'tcx: 'a> 
CheckLoanCtxt			impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> 
CheckLoanCtxt			struct CheckLoanCtxt<'a, 'tcx: 'a> 
Clone for MovePathIndex			impl Clone for MovePathIndex 
DataFlowOperator for AssignDataFlowOperator			impl DataFlowOperator for AssignDataFlowOperator 
DataFlowOperator for LoanDataFlowOperator			impl DataFlowOperator for LoanDataFlowOperator 
DataFlowOperator for MoveDataFlowOperator			impl DataFlowOperator for MoveDataFlowOperator 
DataflowLabeller			impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> 
DataflowLabeller			pub struct DataflowLabeller<'a, 'tcx: 'a> 
Drop for DropEnum			impl Drop for DropEnum 
Drop for DropStruct			impl Drop for DropStruct 
Drop for Foo			impl Drop for Foo 
DropEnum			enum DropEnum 
DropStruct			struct DropStruct 
FancyNum			struct FancyNum 
FlowedMoveData			impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> 
FlowedMoveData			pub struct FlowedMoveData<'a, 'tcx: 'a> 
Foo			struct Foo 
Foo			struct Foo<'a> 
GatherLoanCtxt			impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> 
GatherLoanCtxt			struct GatherLoanCtxt<'a, 'tcx: 'a> 
GatherMoveInfo			struct GatherMoveInfo<'tcx> 
GroupedMoveErrors			pub struct GroupedMoveErrors<'tcx> 
GuaranteeLifetimeContext			impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> 
GuaranteeLifetimeContext			struct GuaranteeLifetimeContext<'a, 'tcx: 'a> 
Hash for LoanPath			impl<'tcx> Hash for LoanPath<'tcx> 
InteriorKind			pub enum InteriorKind 
Loan			impl<'tcx> Loan<'tcx> 
Loan			pub struct Loan<'tcx> 
LoanDataFlowOperator			pub struct LoanDataFlowOperator;
LoanPath			impl<'a, 'tcx> LoanPath<'tcx> 
LoanPath			impl<'tcx> LoanPath<'tcx> 
LoanPath			pub struct LoanPath<'tcx> 
LoanPathElem			pub enum LoanPathElem<'tcx> 
LoanPathKind			pub enum LoanPathKind<'tcx> 
Move			pub struct Move 
MoveData			impl<'a, 'tcx> MoveData<'tcx> 
MoveData			pub struct MoveData<'tcx> 
MoveDataFlowOperator			pub struct MoveDataFlowOperator;
MoveError			impl<'tcx> MoveError<'tcx> 
MoveError			pub struct MoveError<'tcx> 
MoveErrorCollector			impl<'tcx> MoveErrorCollector<'tcx> 
MoveErrorCollector			pub struct MoveErrorCollector<'tcx> 
MoveIndex			impl MoveIndex 
MoveIndex			pub struct MoveIndex(usize);
MoveKind			pub enum MoveKind 
MovePath			pub struct MovePath<'tcx> 
MovePathIndex			impl MovePathIndex 
MovePathIndex			pub struct MovePathIndex(usize);
MovePlace			pub struct MovePlace<'tcx> 
MovedValueUseKind			pub enum MovedValueUseKind 
MyStruct			struct MyStruct { s: u32 }
NonCopy			struct NonCopy;
PartialEq for LoanPath			impl<'tcx> PartialEq for LoanPath<'tcx> 
PatternSource			pub enum PatternSource<'tcx> 
RestrictionResult			pub enum RestrictionResult<'tcx> 
RestrictionsContext			impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> 
RestrictionsContext			struct RestrictionsContext<'a, 'tcx: 'a> 
TheDarkKnight			impl TheDarkKnight 
TheDarkKnight			struct TheDarkKnight;
ToInteriorKind			trait ToInteriorKind { fn cleaned(self) -> InteriorKind; }
ToInteriorKind for mc			impl ToInteriorKind for mc::InteriorKind 
UseError			enum UseError<'tcx> 
Value			struct Value {}
Variant			impl Variant 
Variant			pub enum Variant 
VariantMatch			pub struct VariantMatch 
add_assignment			    pub fn add_assignment(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_assignment_helper			    fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_error			    pub fn add_error(&mut self, error: MoveError<'tcx>) 
add_existing_base_paths			    fn add_existing_base_paths(&self, lp: &Rc<LoanPath<'tcx>>,
add_gen_kills			    fn add_gen_kills(&self,
add_move			    pub fn add_move(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_move_helper			    fn add_move_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_variant_match			    pub fn add_variant_match(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
analyze_restrictions_on_use			    pub fn analyze_restrictions_on_use(&self,
append_autoderefd_loan_path_to_string			    pub fn append_autoderefd_loan_path_to_string(&self,
append_loan_path_to_string			    pub fn append_loan_path_to_string(&self,
append_to_grouped_errors			    fn append_to_grouped_errors<'tcx>(grouped_errors: &mut Vec<GroupedMoveErrors<'tcx>>,
bar			fn bar(x: &mut i32) {}
bckerr_code			pub enum bckerr_code<'tcx> 
bckerr_to_diag			    fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> 
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrowck			fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) 
borrowck			mod borrowck;
build_borrowck_dataflow_data			fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,
build_borrowck_dataflow_data_for_fn			pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(
build_set			    fn build_set<O:DataFlowOperator, F>(&self,
check			    fn check(&self, cmt: &mc::cmt<'tcx>, discr_scope: Option<ast::NodeId>) -> R 
check_aliasability			fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_and_get_illegal_move_origin			fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_assignment			    fn check_assignment(&self,
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_for_conflicting_loans			    pub fn check_for_conflicting_loans(&self, node: ast::NodeId) 
check_for_copy_of_frozen_path			    fn check_for_copy_of_frozen_path(&self,
check_for_move_of_borrowed_path			    fn check_for_move_of_borrowed_path(&self,
check_if_assigned_path_is_moved			    fn check_if_assigned_path_is_moved(&self,
check_if_path_is_moved			    fn check_if_path_is_moved(&self,
check_loans			pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_loans			pub mod check_loans;
check_mutability			fn check_mutability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_scope			    fn check_scope(&self, max_scope: ty::Region<'tcx>) -> R 
cleaned			    fn cleaned(self) -> InteriorKind 
clone			    fn clone(&self) -> MovePathIndex 
closure_to_block			pub fn closure_to_block(closure_id: ast::NodeId,
cmt_to_path_or_string			    pub fn cmt_to_path_or_string(&self, cmt: &mc::cmt<'tcx>) -> String 
cmt_to_string			    pub fn cmt_to_string(&self, cmt: &mc::cmt_<'tcx>) -> String 
common			    fn common(&self, other: &LoanPath<'tcx>) -> Option<LoanPath<'tcx>> 
compatible_borrow_kinds			fn compatible_borrow_kinds(borrow_kind1: ty::BorrowKind,
compute_gen_scope			    pub fn compute_gen_scope(&self,
compute_kill_scope			    pub fn compute_kill_scope(&self, loan_scope: region::CodeExtent, lp: &LoanPath<'tcx>)
compute_restrictions			pub fn compute_restrictions<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
consume			    fn consume(&mut self,
consume			    fn consume(&mut self,
consume_common			    fn consume_common(&self,
consume_pat			    fn consume_pat(&mut self,
consume_pat			    fn consume_pat(&mut self,
dataflow_assigns_for			    fn dataflow_assigns_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String 
dataflow_for			    fn dataflow_for(&self, e: EntryOrExit, n: &Node<'a>) -> String 
dataflow_for_variant			    fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node, v: Variant) -> String 
dataflow_loans_for			    fn dataflow_loans_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String 
dataflow_moves_for			    fn dataflow_moves_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String 
decl_without_init			    fn decl_without_init(&mut self, _id: ast::NodeId, _span: Span) { }
decl_without_init			    fn decl_without_init(&mut self, id: ast::NodeId, _span: Span) 
depth			    fn depth(&self) -> usize 
diagnostics			pub mod diagnostics;
dot::GraphWalk for DataflowLabeller			impl<'a, 'tcx> dot::GraphWalk<'a> for DataflowLabeller<'a, 'tcx> 
dot::Labeller for DataflowLabeller			impl<'a, 'tcx> dot::Labeller<'a> for DataflowLabeller<'a, 'tcx> 
drop			    fn drop(&mut self) { \/* ... *\/ }
drop			    fn drop(&mut self) 
each_applicable_move			    fn each_applicable_move<F>(&self, index0: MovePathIndex, mut f: F) -> bool where
each_assignment_of			    pub fn each_assignment_of<F>(&self,
each_base_path			    fn each_base_path<F>(&self, index: MovePathIndex, mut f: F) -> bool where
each_extending_path			    fn each_extending_path<F>(&self, index: MovePathIndex, mut f: F) -> bool where
each_extending_path_			    fn each_extending_path_<F>(&self, index: MovePathIndex, f: &mut F) -> bool where
each_in_scope_loan			    pub fn each_in_scope_loan<F>(&self, scope: region::CodeExtent, mut op: F) -> bool where
each_in_scope_loan_affecting_path			    fn each_in_scope_loan_affecting_path<F>(&self,
each_issued_loan			    pub fn each_issued_loan<F>(&self, node: ast::NodeId, mut op: F) -> bool where
each_move_of			    pub fn each_move_of<F>(&self,
eat			fn eat(val: &Value) {}
eat			fn eat(val: Value) {}
edge_label			    fn edge_label(&'a self, e: &Edge<'a>) -> dot::LabelText<'a> { self.inner.edge_label(e) }
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.inner.edges() }
eq			    fn eq(&self, that: &LoanPath<'tcx>) -> bool 
euv::Delegate for CheckLoanCtxt			impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> 
euv::Delegate for GatherLoanCtxt			impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> 
existing_base_paths			    fn existing_base_paths(&self, lp: &Rc<LoanPath<'tcx>>)
existing_move_path			    fn existing_move_path(&self, lp: &Rc<LoanPath<'tcx>>)
extend			    fn extend(&self,
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for InteriorKind			impl<'tcx> fmt::Debug for InteriorKind 
fmt::Debug for Loan			impl<'tcx> fmt::Debug for Loan<'tcx> 
fmt::Debug for LoanPath			impl<'tcx> fmt::Debug for LoanPath<'tcx> 
fmt::Display for LoanPath			impl<'tcx> fmt::Display for LoanPath<'tcx> 
foo			fn foo() -> Box<Fn(u32) -> u32> 
foo			fn foo() 
foo			fn foo(a: &mut i32) 
foo			fn foo<F: Fn()>(f: F) { }
foo			fn foo<F: FnMut()>(f: F) { }
gather_assignment			pub fn gather_assignment<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_decl			pub fn gather_decl<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_loans			pub mod gather_loans;
gather_loans_in_fn			pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_match_variant			pub fn gather_match_variant<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_move			fn gather_move<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_move_from_expr			pub fn gather_move_from_expr<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_move_from_pat			pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_moves			mod gather_moves;
get			    fn get(&self) -> usize 
get_pattern_source			fn get_pattern_source<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &Pat) -> PatternSource<'tcx> 
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { self.inner.graph_id() }
graphviz			pub mod graphviz;
group_errors_with_same_origin			fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)
guarantee_assignment_valid			    fn guarantee_assignment_valid(&mut self,
guarantee_lifetime			pub fn guarantee_lifetime<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
guarantee_valid			    fn guarantee_valid(&mut self,
has_fork			    fn has_fork(&self, other: &LoanPath<'tcx>) -> bool 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
helper			    fn helper<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> Option<&'a LoanPath<'tcx>> 
helper			    fn helper<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Option<Rc<LoanPath<'tcx>>> 
initial_value			    fn initial_value(&self) -> bool 
initial_value			    fn initial_value(&self) -> bool 
inside_closure			fn inside_closure(x: &mut i32) 
inside_closure			fn inside_closure(x: &mut i32) {}
is_subregion_of			    pub fn is_subregion_of(&self,
is_var_path			    fn is_var_path(&self, index: MovePathIndex) -> bool 
join			    fn join(&self, succ: usize, pred: usize) -> usize 
join			    fn join(&self, succ: usize, pred: usize) -> usize 
kill_moves			    fn kill_moves(&self,
kill_scope			    pub fn kill_scope(&self, bccx: &BorrowckCtxt<'a, 'tcx>) -> region::CodeExtent 
kind_of_move_of_path			    pub fn kind_of_move_of_path(&self,
lifetime			mod lifetime;
loan_path			    pub fn loan_path(&self) -> Rc<LoanPath<'tcx>> 
loan_path_is_precise			fn loan_path_is_precise(loan_path: &LoanPath) -> bool 
loan_path_to_string			    pub fn loan_path_to_string(&self, loan_path: &LoanPath<'tcx>) -> String 
loans_generated_by			    pub fn loans_generated_by(&self, node: ast::NodeId) -> Vec<usize> 
local_binding_mode			    fn local_binding_mode(&self, node_id: ast::NodeId) -> hir::BindingMode 
local_ty			    fn local_ty(&self, node_id: ast::NodeId) -> (Option<&hir::Ty>, bool) 
main			fn main() 
mark_loan_path_as_mutated			    pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath) 
matched_pat			    fn matched_pat(&mut self,
matched_pat			    fn matched_pat(&mut self,
move_data			pub mod move_data;
move_error			mod move_error;
move_next_move			    fn move_next_move(&self, index: MoveIndex) -> MoveIndex 
move_path			    pub fn move_path(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
mut_addr			fn mut_addr() 
mutable			fn mutable() 
mutate			    fn mutate(&mut self,
mutate			    fn mutate(&mut self,
new			    pub fn new() -> MoveErrorCollector<'tcx> 
new			    fn new(kind: LoanPathKind<'tcx>, ty: ty::Ty<'tcx>) -> LoanPath<'tcx> 
new			    pub fn new() -> MoveData<'tcx> 
new			    pub fn new(move_data: MoveData<'tcx>,
node_id			    fn node_id(&'a self, n: &Node<'a>) -> dot::Id<'a> { self.inner.node_id(n) }
node_label			    fn node_label(&'a self, n: &Node<'a>) -> dot::LabelText<'a> 
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.inner.nodes() }
note_and_explain_bckerr			    fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>) 
note_and_explain_mutbl_error			    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder, err: &BckError<'tcx>,
note_immutability_blame			    fn note_immutability_blame(&self,
note_move_destination			fn note_move_destination(mut err: DiagnosticBuilder,
nothing_is_true			    fn nothing_is_true(&self) {} \/\/ First case, we don't take ownership
nothing_is_true			    fn nothing_is_true(self) {}
opt_loan_path			pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> 
outside_closure			fn outside_closure(x: &mut i32) 
outside_closure			fn outside_closure(x: &mut i32) {}
owned_ptr_base_path			fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<'tcx> 
owned_ptr_base_path_rc			fn owned_ptr_base_path_rc<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Rc<LoanPath<'tcx>> 
path_first_child			    fn path_first_child(&self, index: MovePathIndex) -> MovePathIndex 
path_first_move			    fn path_first_move(&self, index: MovePathIndex) -> MoveIndex 
path_loan_path			    pub fn path_loan_path(&self, index: MovePathIndex) -> Rc<LoanPath<'tcx>> 
path_next_sibling			    fn path_next_sibling(&self, index: MovePathIndex) -> MovePathIndex 
path_parent			    fn path_parent(&self, index: MovePathIndex) -> MovePathIndex 
print_fancy_ref			fn print_fancy_ref(fancy_ref: &FancyNum)
provide			pub fn provide(providers: &mut Providers) 
region_end_span			    fn region_end_span(&self, region: ty::Region<'tcx>) -> Option<Span> 
report			    pub fn report(&self, err: BckError<'tcx>) 
report_aliasability_violation			    pub fn report_aliasability_violation(&self,
report_cannot_move_out_of			fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
report_error			    fn report_error(&self, code: bckerr_code<'tcx>) 
report_error_if_loan_conflicts_with_restriction			    pub fn report_error_if_loan_conflicts_with_restriction(&self,
report_error_if_loans_conflict			    pub fn report_error_if_loans_conflict(&self,
report_illegal_mutation			    pub fn report_illegal_mutation(&self,
report_move_errors			fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &Vec<MoveError<'tcx>>) 
report_out_of_scope_escaping_closure_capture			    fn report_out_of_scope_escaping_closure_capture(&self,
report_partial_reinitialization_of_uninitialized_structure			    pub fn report_partial_reinitialization_of_uninitialized_structure(
report_potential_errors			    pub fn report_potential_errors(&self) 
report_potential_errors			    pub fn report_potential_errors<'a>(&self, bccx: &BorrowckCtxt<'a, 'tcx>) 
report_reassigned_immutable_variable			    pub fn report_reassigned_immutable_variable(&self,
report_use_of_moved_value			    pub fn report_use_of_moved_value(&self,
restrict			    fn restrict(&self,
restrictions			mod restrictions;
scope			    fn scope(&self, cmt: &mc::cmt<'tcx>) -> ty::Region<'tcx> 
set_path_first_child			    fn set_path_first_child(&self,
set_path_first_move			    fn set_path_first_move(&self,
short_name			    pub fn short_name(&self) -> &'static str 
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.source(edge) }
span_err			    pub fn span_err(&self, s: Span, m: &str) 
span_err_with_code			    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, s: S, msg: &str, code: &str) 
statement_scope_span			fn statement_scope_span(tcx: TyCtxt, region: ty::Region) -> Option<Span> 
struct_span_err			    pub fn struct_span_err<S: Into<MultiSpan>>(&self, s: S, m: &str)
struct_span_err_with_code			    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,
suggest_mut_for_immutable			    fn suggest_mut_for_immutable(&self, pty: &hir::Ty, is_implicit_self: bool) -> Option<String> 
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.target(edge) }
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.bccx.tcx }
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.bccx.tcx }
to_type			    fn to_type(&self) -> ty::Ty<'tcx> { self.ty }
with_move_info			    pub fn with_move_info(move_from: mc::cmt<'tcx>,
you_know_nothing			fn you_know_nothing(jon_snow: &mut i32) 
