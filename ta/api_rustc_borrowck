AbstractOperand			pub struct AbstractOperand;
AliasableViolationKind			pub enum AliasableViolationKind 
AllSets			impl<E:Idx> AllSets<E> 
AllSets			pub struct AllSets<E: Idx> 
AnalysisData			pub struct AnalysisData<'a, 'tcx: 'a> 
AssignDataFlowOperator			pub struct AssignDataFlowOperator;
Assignment			pub struct Assignment 
Batcave			struct Batcave 
BckError			pub struct BckError<'tcx> 
BitDenotation			pub trait BitDenotation 
BitDenotation for DefinitelyInitializedLvals			impl<'a, 'tcx> BitDenotation for DefinitelyInitializedLvals<'a, 'tcx> 
BitDenotation for MaybeInitializedLvals			impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> 
BitDenotation for MaybeUninitializedLvals			impl<'a, 'tcx> BitDenotation for MaybeUninitializedLvals<'a, 'tcx> 
BitDenotation for MovingOutStatements			impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> 
Bits			impl<E:Idx> Bits<E> 
Bits			struct Bits<E:Idx> 
BitwiseOperator for AssignDataFlowOperator			impl BitwiseOperator for AssignDataFlowOperator 
BitwiseOperator for DefinitelyInitializedLvals			impl<'a, 'tcx> BitwiseOperator for DefinitelyInitializedLvals<'a, 'tcx> 
BitwiseOperator for LoanDataFlowOperator			impl BitwiseOperator for LoanDataFlowOperator 
BitwiseOperator for MaybeInitializedLvals			impl<'a, 'tcx> BitwiseOperator for MaybeInitializedLvals<'a, 'tcx> 
BitwiseOperator for MaybeUninitializedLvals			impl<'a, 'tcx> BitwiseOperator for MaybeUninitializedLvals<'a, 'tcx> 
BitwiseOperator for MoveDataFlowOperator			impl BitwiseOperator for MoveDataFlowOperator 
BitwiseOperator for MovingOutStatements			impl<'a, 'tcx> BitwiseOperator for MovingOutStatements<'a, 'tcx> 
BlockSets			impl<'a, E:Idx> BlockSets<'a, E> 
BlockSets			pub struct BlockSets<'a, E: Idx> 
BorrowStats			struct BorrowStats 
BorrowckCtxt			impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> 
BorrowckCtxt			pub struct BorrowckCtxt<'a, 'tcx: 'a> 
CheckLoanCtxt			impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> 
CheckLoanCtxt			struct CheckLoanCtxt<'a, 'tcx: 'a> 
Clone for Bits			impl<E:Idx> Clone for Bits<E> 
Clone for MovePathIndex			impl Clone for MovePathIndex 
DataFlowOperator for AssignDataFlowOperator			impl DataFlowOperator for AssignDataFlowOperator 
DataFlowOperator for LoanDataFlowOperator			impl DataFlowOperator for LoanDataFlowOperator 
DataFlowOperator for MoveDataFlowOperator			impl DataFlowOperator for MoveDataFlowOperator 
Dataflow			pub trait Dataflow<BD: BitDenotation> 
Dataflow for MirBorrowckCtxtPreDataflow			impl<'a, 'tcx: 'a, BD> Dataflow<BD> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>
DataflowAnalysis			impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>
DataflowAnalysis			impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>
DataflowAnalysis			impl<'a, 'tcx: 'a, O> DataflowAnalysis<'a, 'tcx, O>
DataflowAnalysis			pub struct DataflowAnalysis<'a, 'tcx: 'a, O>
DataflowLabeller			impl<'a, 'tcx> DataflowLabeller<'a, 'tcx> 
DataflowLabeller			pub struct DataflowLabeller<'a, 'tcx: 'a> 
DataflowOperator			pub trait DataflowOperator: BitwiseOperator 
DataflowOperator for DefinitelyInitializedLvals			impl<'a, 'tcx> DataflowOperator for DefinitelyInitializedLvals<'a, 'tcx> 
DataflowOperator for MaybeInitializedLvals			impl<'a, 'tcx> DataflowOperator for MaybeInitializedLvals<'a, 'tcx> 
DataflowOperator for MaybeUninitializedLvals			impl<'a, 'tcx> DataflowOperator for MaybeUninitializedLvals<'a, 'tcx> 
DataflowOperator for MovingOutStatements			impl<'a, 'tcx> DataflowOperator for MovingOutStatements<'a, 'tcx> 
DataflowResults			impl<O: BitDenotation> DataflowResults<O> 
DataflowResults			pub struct DataflowResults<O>(DataflowState<O>) where O: BitDenotation;
DataflowState			impl<O: BitDenotation> DataflowState<O> 
DataflowState			pub struct DataflowState<O: BitDenotation>
DefinitelyInitializedLvals			impl<'a, 'tcx: 'a> DefinitelyInitializedLvals<'a, 'tcx> 
DefinitelyInitializedLvals			impl<'a, 'tcx> DefinitelyInitializedLvals<'a, 'tcx> 
DefinitelyInitializedLvals			pub struct DefinitelyInitializedLvals<'a, 'tcx: 'a> 
Drop for DropEnum			impl Drop for DropEnum 
Drop for DropStruct			impl Drop for DropStruct 
DropCtxt			struct DropCtxt<'a, 'tcx: 'a> 
DropEnum			enum DropEnum 
DropFlagState			enum DropFlagState 
DropFlagState			impl DropFlagState 
DropStruct			struct DropStruct 
Edge			pub struct Edge { source: BasicBlock, index: usize }
ElaborateDrops			pub struct ElaborateDrops;
ElaborateDropsCtxt			impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> 
ElaborateDropsCtxt			struct ElaborateDropsCtxt<'a, 'tcx: 'a> 
FancyNum			struct FancyNum 
FlowedMoveData			impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> 
FlowedMoveData			pub struct FlowedMoveData<'a, 'tcx: 'a> 
Foo			struct Foo 
Fragment			enum Fragment 
Fragment			impl Fragment 
FragmentSets			impl FragmentSets 
FragmentSets			pub struct FragmentSets 
GatherLoanCtxt			impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> 
GatherLoanCtxt			struct GatherLoanCtxt<'a, 'tcx: 'a> 
GatherMoveInfo			struct GatherMoveInfo<'tcx> 
Graph			struct Graph<'a, 'tcx, MWF:'a, P> where
GroupedMoveErrors			pub struct GroupedMoveErrors<'tcx> 
GuaranteeLifetimeContext			impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> 
GuaranteeLifetimeContext			struct GuaranteeLifetimeContext<'a, 'tcx: 'a> 
Hash for LoanPath			impl<'tcx> Hash for LoanPath<'tcx> 
Idx			            impl Idx for 
Index for LocationMap			impl<T> Index<Location> for LocationMap<T> 
IndexMut for LocationMap			impl<T> IndexMut<Location> for LocationMap<T> 
InitializationData			impl InitializationData 
InitializationData			struct InitializationData 
InteriorKind			pub enum InteriorKind 
Lift			pub trait Lift 
Lift for LvalueElem			impl<'tcx> Lift for LvalueElem<'tcx> 
Lift for Operand			impl<'tcx> Lift for Operand<'tcx> 
Loan			impl<'tcx> Loan<'tcx> 
Loan			pub struct Loan<'tcx> 
LoanDataFlowOperator			pub struct LoanDataFlowOperator;
LoanPath			impl<'a, 'tcx> LoanPath<'tcx> 
LoanPath			impl<'tcx> LoanPath<'tcx> 
LoanPath			pub struct LoanPath<'tcx> 
LoanPathElem			pub enum LoanPathElem<'tcx> 
LoanPathKind			pub enum LoanPathKind<'tcx> 
LocationMap			impl<T> LocationMap<T> where T: Default + Clone 
LocationMap			pub struct LocationMap<T> 
LookupResult			pub enum LookupResult 
MaybeInitializedLvals			impl<'a, 'tcx: 'a> MaybeInitializedLvals<'a, 'tcx> 
MaybeInitializedLvals			impl<'a, 'tcx> MaybeInitializedLvals<'a, 'tcx> 
MaybeInitializedLvals			pub struct MaybeInitializedLvals<'a, 'tcx: 'a> 
MaybeUninitializedLvals			impl<'a, 'tcx: 'a> MaybeUninitializedLvals<'a, 'tcx> 
MaybeUninitializedLvals			impl<'a, 'tcx> MaybeUninitializedLvals<'a, 'tcx> 
MaybeUninitializedLvals			pub struct MaybeUninitializedLvals<'a, 'tcx: 'a> 
MirBorrowckCtxt			impl<'b, 'a: 'b, 'tcx: 'a> MirBorrowckCtxt<'b, 'a, 'tcx> 
MirBorrowckCtxt			pub struct MirBorrowckCtxt<'b, 'a: 'b, 'tcx: 'a> 
MirBorrowckCtxtPreDataflow			impl<'a, 'tcx: 'a, BD> MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>
MirBorrowckCtxtPreDataflow			pub struct MirBorrowckCtxtPreDataflow<'a, 'tcx: 'a, BD>
MirPass for ElaborateDrops			impl<'tcx> MirPass<'tcx> for ElaborateDrops 
MirPatch			impl<'tcx> MirPatch<'tcx> 
MirPatch			pub struct MirPatch<'tcx> 
MirWithFlowState			pub trait MirWithFlowState<'tcx> 
MirWithFlowState for MirBorrowckCtxtPreDataflow			impl<'a, 'tcx: 'a, BD> MirWithFlowState<'tcx> for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>
Move			pub struct Move 
MoveData			impl<'a, 'tcx> MoveData<'tcx> 
MoveData			pub struct MoveData<'tcx> 
MoveData			impl<'a, 'tcx> MoveData<'tcx> 
MoveData			pub struct MoveData<'tcx> 
MoveDataBuilder			impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> 
MoveDataBuilder			struct MoveDataBuilder<'a, 'tcx: 'a> 
MoveDataFlowOperator			pub struct MoveDataFlowOperator;
MoveDataParamEnv			pub struct MoveDataParamEnv<'tcx> 
MoveError			impl<'tcx> MoveError<'tcx> 
MoveError			pub struct MoveError<'tcx> 
MoveErrorCollector			impl<'tcx> MoveErrorCollector<'tcx> 
MoveErrorCollector			pub struct MoveErrorCollector<'tcx> 
MoveIndex			impl MoveIndex 
MoveIndex			pub struct MoveIndex(usize);
MoveKind			pub enum MoveKind 
MoveOut			pub struct MoveOut 
MovePath			pub struct MovePath<'tcx> 
MovePath			pub struct MovePath<'tcx> 
MovePathError			pub enum MovePathError 
MovePathIndex			impl MovePathIndex 
MovePathIndex			pub struct MovePathIndex(usize);
MovePathLookup			impl<'tcx> MovePathLookup<'tcx> 
MovePathLookup			pub struct MovePathLookup<'tcx> 
MoveSpanAndPath			pub struct MoveSpanAndPath 
MovedValueUseKind			pub enum MovedValueUseKind 
MovingOutStatements			pub struct MovingOutStatements<'a, 'tcx: 'a> 
MyStruct			struct MyStruct { s: u32 }
NonCopy			struct NonCopy;
PartialEq for LoanPath			impl<'tcx> PartialEq for LoanPath<'tcx> 
Pass for ElaborateDrops			impl Pass for ElaborateDrops {}
PropagationContext			impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>
PropagationContext			struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O>
RestrictionResult			pub enum RestrictionResult<'tcx> 
RestrictionsContext			impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> 
RestrictionsContext			struct RestrictionsContext<'a, 'tcx: 'a> 
StaticInitializerCtxt			struct StaticInitializerCtxt<'a, 'tcx: 'a> 
TheDarkKnight			impl TheDarkKnight 
TheDarkKnight			struct TheDarkKnight;
ToInteriorKind			trait ToInteriorKind { fn cleaned(self) -> InteriorKind; }
ToInteriorKind for mc			impl ToInteriorKind for mc::InteriorKind 
UseError			enum UseError<'tcx> 
Value			struct Value {}
Variant			impl Variant 
Variant			pub enum Variant 
VariantMatch			pub struct VariantMatch 
Visitor for BorrowckCtxt			impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> 
Visitor for StaticInitializerCtxt			impl<'a, 'tcx> Visitor<'tcx> for StaticInitializerCtxt<'a, 'tcx> 
abs_domain			mod abs_domain;
add_assign			    pub fn add_assign(&mut self, loc: Location, lv: Lvalue<'tcx>, rv: Rvalue<'tcx>) 
add_assignment			    pub fn add_assignment(&mut self, path_index: MovePathIndex) 
add_assignment			    pub fn add_assignment(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_assignment_helper			    fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_error			    pub fn add_error(&mut self, error: MoveError<'tcx>) 
add_existing_base_paths			    fn add_existing_base_paths(&self, lp: &Rc<LoanPath<'tcx>>,
add_fragment_sibling_core			fn add_fragment_sibling_core<'a, 'tcx>(this: &MoveData<'tcx>,
add_fragment_siblings			fn add_fragment_siblings<'a, 'tcx>(this: &MoveData<'tcx>,
add_fragment_siblings_for_extension			fn add_fragment_siblings_for_extension<'a, 'tcx>(this: &MoveData<'tcx>,
add_gen_kills			    fn add_gen_kills(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_move			    pub fn add_move(&mut self, path_index: MovePathIndex) 
add_move			    pub fn add_move(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_move_helper			    fn add_move_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
add_statement			    pub fn add_statement(&mut self, loc: Location, stmt: StatementKind<'tcx>) 
add_variant_match			    pub fn add_variant_match(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
analysis_ctxt			    fn analysis_ctxt(&self) -> &<Self::BD as BitDenotation>::Ctxt;
analysis_ctxt			    fn analysis_ctxt(&self) -> &BD::Ctxt { &self.flow_state.ctxt }
analyze_restrictions_on_use			    pub fn analyze_restrictions_on_use(&self,
append_autoderefd_loan_path_to_string			    pub fn append_autoderefd_loan_path_to_string(&self,
append_loan_path_to_string			    pub fn append_loan_path_to_string(&self,
append_to_grouped_errors			    fn append_to_grouped_errors<'tcx>(grouped_errors: &mut Vec<GroupedMoveErrors<'tcx>>,
apply			    pub fn apply(self, mir: &mut Mir<'tcx>) 
apply_location			    fn apply_location<'a,'tcx>(&mut self,
assigned_leaf_paths			    pub fn assigned_leaf_paths(&self) -> &[MovePathIndex] 
bar			fn bar(x: &mut i32) {}
bckerr_code			pub enum bckerr_code<'tcx> 
bckerr_to_string			    pub fn bckerr_to_string(&self, err: &BckError<'tcx>) -> String 
bits_per_block			    fn bits_per_block(&self, ctxt: &Self::Ctxt) -> usize 
bits_per_block			    fn bits_per_block(&self, &Self::Ctxt) -> usize;
bits_per_block			    pub fn bits_per_block(&self) -> usize { self.bits_per_block }
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrowck			mod borrowck;
borrowck_fn			fn borrowck_fn<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,
borrowck_item			fn borrowck_item<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>, item: &'tcx hir::Item) 
borrowck_mir			pub fn borrowck_mir(bcx: &mut BorrowckCtxt,
bottom_value			    fn bottom_value() -> bool 
bottom_value			    fn bottom_value() -> bool;
box_free_block			    fn box_free_block<'a>(
build_borrowck_dataflow_data			fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,
build_borrowck_dataflow_data_for_fn			pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(
build_set			    fn build_set<O:DataFlowOperator, F>(&self,
build_sets			    fn build_sets(&mut self) 
build_unfragmented_map			pub fn build_unfragmented_map(this: &mut borrowck::BorrowckCtxt,
check			    fn check(&self, cmt: &mc::cmt<'tcx>, discr_scope: Option<ast::NodeId>) -> R 
check_aliasability			fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_and_get_illegal_move_origin			fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_assignment			    fn check_assignment(&self,
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_for_conflicting_loans			    pub fn check_for_conflicting_loans(&self, node: ast::NodeId) 
check_for_copy_of_frozen_path			    fn check_for_copy_of_frozen_path(&self,
check_for_move_of_borrowed_path			    fn check_for_move_of_borrowed_path(&self,
check_if_assigned_path_is_moved			    fn check_if_assigned_path_is_moved(&self,
check_if_path_is_moved			    fn check_if_path_is_moved(&self,
check_loans			pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_loans			pub mod check_loans;
check_mutability			fn check_mutability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
check_scope			    fn check_scope(&self, max_scope: &'tcx ty::Region) -> R 
chunked_present_left			        fn chunked_present_left<W:io::Write>(w: &mut W,
cleaned			    fn cleaned(self) -> InteriorKind 
clone			    fn clone(&self) -> Self { Bits { bits: self.bits.clone() } }
clone			    fn clone(&self) -> MovePathIndex 
closure_to_block			pub fn closure_to_block(closure_id: ast::NodeId,
cmt_to_path_or_string			    pub fn cmt_to_path_or_string(&self, cmt: &mc::cmt<'tcx>) -> String 
cmt_to_string			    pub fn cmt_to_string(&self, cmt: &mc::cmt_<'tcx>) -> String 
collect_drop_flags			    fn collect_drop_flags(&mut self)
common			    fn common(&self, other: &LoanPath<'tcx>) -> Option<LoanPath<'tcx>> 
compatible_borrow_kinds			fn compatible_borrow_kinds(borrow_kind1: ty::BorrowKind,
complete_drop			    fn complete_drop<'a>(
compute_gen_scope			    pub fn compute_gen_scope(&self,
compute_kill_scope			    pub fn compute_kill_scope(&self, loan_scope: region::CodeExtent, lp: &LoanPath<'tcx>)
compute_restrictions			pub fn compute_restrictions<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
conditional_drop			    fn conditional_drop<'a>(&mut self, c: &DropCtxt<'a, 'tcx>)
constant_bool			    fn constant_bool(&self, span: Span, val: bool) -> Rvalue<'tcx> 
consume			    fn consume(&mut self,
consume			    fn consume(&mut self,
consume_common			    fn consume_common(&self,
consume_pat			    fn consume_pat(&mut self,
consume_pat			    fn consume_pat(&mut self,
create_drop_flag			    fn create_drop_flag(&mut self, index: MovePathIndex) 
create_move_path			    fn create_move_path(&mut self, lval: &Lvalue<'tcx>) 
dataflow			    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD::Ctxt, BD::Idx) -> &Debug 
dataflow			    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD::Ctxt, BD::Idx) -> &Debug;
dataflow			mod dataflow;
dataflow_assigns_for			    fn dataflow_assigns_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String 
dataflow_for			    fn dataflow_for(&self, e: EntryOrExit, n: &Node<'a>) -> String 
dataflow_for_variant			    fn dataflow_for_variant(&self, e: EntryOrExit, n: &Node, v: Variant) -> String 
dataflow_loans_for			    fn dataflow_loans_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String 
dataflow_moves_for			    fn dataflow_moves_for(&self, e: EntryOrExit, cfgidx: CFGIndex) -> String 
dataflow_path			fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf 
decl_without_init			    fn decl_without_init(&mut self, _id: ast::NodeId, _span: Span) { }
decl_without_init			    fn decl_without_init(&mut self, id: ast::NodeId, span: Span) 
depth			    fn depth(&self) -> usize 
diagnostics			pub mod diagnostics;
do_dataflow			fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
dot::GraphWalk for DataflowLabeller			impl<'a, 'tcx> dot::GraphWalk<'a> for DataflowLabeller<'a, 'tcx> 
dot::GraphWalk for Graph			impl<'a, 'tcx, MWF, P> dot::GraphWalk<'a> for Graph<'a, 'tcx, MWF, P>
dot::Labeller for DataflowLabeller			impl<'a, 'tcx> dot::Labeller<'a> for DataflowLabeller<'a, 'tcx> 
dot::Labeller for Graph			impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>
drop			    fn drop(&mut self) 
drop_block			    fn drop_block<'a>(&mut self, c: &DropCtxt<'a, 'tcx>) -> BasicBlock 
drop_flag			    fn drop_flag(&mut self, index: MovePathIndex) -> Option<Lvalue<'tcx>> 
drop_flag_effects_for_function_entry			fn drop_flag_effects_for_function_entry<'a, 'tcx, F>(
drop_flag_effects_for_location			fn drop_flag_effects_for_location<'a, 'tcx, F>(
drop_flag_test_block			    fn drop_flag_test_block<'a>(&mut self,
drop_flag_test_block_with_succ			    fn drop_flag_test_block_with_succ<'a>(&mut self,
drop_flags_for_args			    fn drop_flags_for_args(&mut self) 
drop_flags_for_drop			    fn drop_flags_for_drop<'a>(&mut self,
drop_flags_for_fn_rets			    fn drop_flags_for_fn_rets(&mut self) 
drop_flags_for_locs			    fn drop_flags_for_locs(&mut self) 
drop_flags_on_init			    fn drop_flags_on_init(&mut self) 
drop_halfladder			    fn drop_halfladder<'a>(&mut self,
drop_ladder			    fn drop_ladder<'a>(&mut self,
each_applicable_move			    fn each_applicable_move<F>(&self, index0: MovePathIndex, mut f: F) -> bool where
each_assignment_of			    pub fn each_assignment_of<F>(&self,
each_base_path			    fn each_base_path<F>(&self, index: MovePathIndex, mut f: F) -> bool where
each_bit			    fn each_bit<F>(&self, ctxt: &O::Ctxt, words: &IdxSet<O::Idx>, mut f: F)
each_block			fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
each_extending_path			    fn each_extending_path<F>(&self, index: MovePathIndex, mut f: F) -> bool where
each_extending_path_			    fn each_extending_path_<F>(&self, index: MovePathIndex, f: &mut F) -> bool where
each_in_scope_loan			    pub fn each_in_scope_loan<F>(&self, scope: region::CodeExtent, mut op: F) -> bool where
each_in_scope_loan_affecting_path			    fn each_in_scope_loan_affecting_path<F>(&self,
each_issued_loan			    pub fn each_issued_loan<F>(&self, node: ast::NodeId, mut op: F) -> bool where
each_move_of			    pub fn each_move_of<F>(&self,
eat			fn eat(val: &Value) {}
eat			fn eat(val: Value) {}
edge_label			    fn edge_label(&'a self, e: &Edge<'a>) -> dot::LabelText<'a> { self.inner.edge_label(e) }
edges			    fn edges(&self) -> dot::Edges<Edge> 
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.inner.edges() }
elaborate			    fn elaborate(mut self) -> MirPatch<'tcx>
elaborate_drop			    fn elaborate_drop<'a>(&mut self, c: &DropCtxt<'a, 'tcx>, bb: BasicBlock) 
elaborate_drops			    fn elaborate_drops(&mut self)
elaborate_drops			pub mod elaborate_drops;
elaborate_replace			    fn elaborate_replace(
elaborated_drop_block			    fn elaborated_drop_block<'a>(&mut self, c: &DropCtxt<'a, 'tcx>) -> BasicBlock 
eq			    fn eq(&self, that: &LoanPath<'tcx>) -> bool 
euv::Delegate for CheckLoanCtxt			impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> 
euv::Delegate for GatherLoanCtxt			impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> 
existing_base_paths			    fn existing_base_paths(&self, lp: &Rc<LoanPath<'tcx>>)
existing_move_path			    fn existing_move_path(&self, lp: &Rc<LoanPath<'tcx>>)
extend			    fn extend(&self,
finalize			    fn finalize(self) -> MoveData<'tcx> 
find			    pub fn find(&self, lval: &Lvalue<'tcx>) -> LookupResult 
fixup_fragment_sets			pub fn fixup_fragment_sets<'a, 'tcx>(this: &MoveData<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) 
fixup_fragment_sets			    fn fixup_fragment_sets(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) 
flow_state			    fn flow_state(&self) -> &DataflowState<Self::BD> { &self.flow_state.flow_state }
flow_state			    fn flow_state(&self) -> &DataflowState<Self::BD>;
fmt			    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> 
fmt			                fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			            impl fmt::Debug for 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for InitializationData			impl fmt::Debug for InitializationData 
fmt::Debug for InteriorKind			impl<'tcx> fmt::Debug for InteriorKind 
fmt::Debug for Loan			impl<'tcx> fmt::Debug for Loan<'tcx> 
fmt::Debug for LoanPath			impl<'tcx> fmt::Debug for LoanPath<'tcx> 
fmt::Debug for MoveOut			impl fmt::Debug for MoveOut 
fmt::Debug for MovePath			impl<'tcx> fmt::Debug for MovePath<'tcx> 
fmt::Display for LoanPath			impl<'tcx> fmt::Display for LoanPath<'tcx> 
foo			fn foo() -> Box<Fn(u32) -> u32> 
foo			fn foo() 
foo			fn foo(a: &mut i32) 
foo			fn foo<F: Fn()>(f: F) { }
foo			fn foo<F: FnMut()>(f: F) { }
for_block			    pub fn for_block(&mut self, block_idx: usize) -> BlockSets<E> 
fragments			pub mod fragments;
gather_assignment			pub fn gather_assignment<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_decl			pub fn gather_decl<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_loans			pub mod gather_loans;
gather_loans_in_fn			pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_loans_in_static_initializer			pub fn gather_loans_in_static_initializer<'a, 'tcx>(bccx: &mut BorrowckCtxt<'a, 'tcx>,
gather_match_variant			pub fn gather_match_variant<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_move			fn gather_move<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_move			    fn gather_move(&mut self, loc: Location, lval: &Lvalue<'tcx>) 
gather_move_from_expr			pub fn gather_move_from_expr<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_move_from_pat			pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
gather_moves			mod gather_moves;
gather_moves			    pub fn gather_moves(mir: &Mir<'tcx>,
gather_moves			fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>,
gather_moves			mod gather_moves;
gather_operand			    fn gather_operand(&mut self, loc: Location, operand: &Operand<'tcx>) 
gather_rvalue			    fn gather_rvalue(&mut self, loc: Location, rvalue: &Rvalue<'tcx>) 
gather_statement			    fn gather_statement(&mut self, loc: Location, stmt: &Statement<'tcx>) 
gather_terminator			    fn gather_terminator(&mut self, loc: Location, term: &Terminator<'tcx>) 
gen			    fn gen(&mut self, e: &E) 
gen_set_for			    pub fn gen_set_for(&self, block_idx: usize) -> &IdxSet<E> 
get			    fn get(&self) -> usize 
graph_id			    fn graph_id(&self) -> dot::Id 
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { self.inner.graph_id() }
graphviz			mod graphviz;
graphviz			pub mod graphviz;
group_errors_with_same_origin			fn group_errors_with_same_origin<'tcx>(errors: &Vec<MoveError<'tcx>>)
guarantee_assignment_valid			    fn guarantee_assignment_valid(&mut self,
guarantee_lifetime			pub fn guarantee_lifetime<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
guarantee_valid			    fn guarantee_valid(&mut self,
has_fork			    fn has_fork(&self, other: &LoanPath<'tcx>) -> bool 
has_rustc_mir_with			fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem> 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
helper			    fn helper<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> Option<&'a LoanPath<'tcx>> 
helper			    fn helper<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Option<Rc<LoanPath<'tcx>>> 
impls			mod impls;
index			                fn index(self) -> usize 
index			    fn index(&self, index: Location) -> &Self::Output 
index_mut			    fn index_mut(&mut self, index: Location) -> &mut Self::Output 
indexes			mod indexes 
initial_value			    fn initial_value(&self) -> bool 
initial_value			    fn initial_value(&self) -> bool 
initialization_data_at			    fn initialization_data_at(&self, loc: Location) -> InitializationData 
inside_closure			fn inside_closure(x: &mut i32) 
inside_closure			fn inside_closure(x: &mut i32) {}
instrument_move_fragments			pub fn instrument_move_fragments<'a, 'tcx>(this: &MoveData<'tcx>,
interpret_set			    pub fn interpret_set<'c, P>(&self,
is_patched			    pub fn is_patched(&self, bb: BasicBlock) -> bool 
is_rustc_peek			fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_subregion_of			    pub fn is_subregion_of(&self, r_sub: &'tcx ty::Region, r_sup: &'tcx ty::Region)
is_terminal_path			    fn is_terminal_path<'a, 'tcx>(
is_var_path			    fn is_var_path(&self, index: MovePathIndex) -> bool 
join			    fn join(&self, pred1: usize, pred2: usize) -> usize 
join			    fn join(&self, succ: usize, pred: usize) -> usize 
join			    fn join(&self, succ: usize, pred: usize) -> usize 
kill			    fn kill(&mut self, e: &E) 
kill_moves			    fn kill_moves(&self,
kill_scope			    pub fn kill_scope(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> region::CodeExtent 
kill_set_for			    pub fn kill_set_for(&self, block_idx: usize) -> &IdxSet<E> 
kind_of_move_of_path			    pub fn kind_of_move_of_path(&self,
lifetime			mod lifetime;
lift			    fn lift(&self) -> Self::Abstract { AbstractOperand }
lift			    fn lift(&self) -> Self::Abstract 
lift			    fn lift(&self) -> Self::Abstract;
loan_path			    pub fn loan_path(&self) -> Rc<LoanPath<'tcx>> 
loan_path_is_precise			fn loan_path_is_precise(loan_path: &LoanPath) -> bool 
loan_path_repr			    fn loan_path_repr(&self, move_data: &MoveData) -> String 
loan_path_to_string			    pub fn loan_path_to_string(&self, loan_path: &LoanPath<'tcx>) -> String 
loan_path_user_string			    fn loan_path_user_string(&self, move_data: &MoveData) -> String 
loans_generated_by			    pub fn loans_generated_by(&self, node: ast::NodeId) -> Vec<usize> 
lookup_set_for			    fn lookup_set_for<'a>(&self, sets: &'a Bits<E>, block_idx: usize) -> &'a IdxSet<E> 
lvalue_contents_drop_state_cannot_differ			fn lvalue_contents_drop_state_cannot_differ<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
main			fn main() 
make_stat			    fn make_stat(bccx: &BorrowckCtxt, stat: usize) -> String 
mark_loan_path_as_mutated			    pub fn mark_loan_path_as_mutated(&self, loan_path: &LoanPath) 
matched_pat			    fn matched_pat(&mut self,
matched_pat			    fn matched_pat(&mut self,
mir			    fn mir(&self) -> &Mir<'tcx> { self.flow_state.mir() }
mir			    fn mir(&self) -> &Mir<'tcx>;
mir			    pub fn mir(&self) -> &'a Mir<'tcx> { self.mir }
mir			mod mir;
move_data			    fn move_data(&self) -> &'b MoveData<'tcx> { &self.env.move_data }
move_data			pub mod move_data;
move_error			mod move_error;
move_next_move			    fn move_next_move(&self, index: MoveIndex) -> MoveIndex 
move_path			    pub fn move_path(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
move_path_children_matching			fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,
move_path_for			    fn move_path_for(&mut self, lval: &Lvalue<'tcx>)
move_path_for_projection			    fn move_path_for_projection(&mut self,
move_path_index			    pub fn move_path_index(&self, move_data: &MoveData) -> MovePathIndex 
move_paths_for_fields			    fn move_paths_for_fields(&self,
moved_leaf_paths			    pub fn moved_leaf_paths(&self) -> &[MovePathIndex] 
must_complete_drop			    fn must_complete_drop<'a>(&self, c: &DropCtxt<'a, 'tcx>) -> bool 
mut_addr			fn mut_addr() 
mutable			fn mutable() 
mutate			    fn mutate(&mut self,
mutate			    fn mutate(&mut self,
name			    fn name() -> &'static str { "definite_init" }
name			    fn name() -> &'static str { "maybe_init" }
name			    fn name() -> &'static str { "maybe_uninit" }
name			    fn name() -> &'static str { "moving_out" }
name			    fn name() -> &'static str;
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
new			    pub fn new() -> FragmentSets 
new			    pub fn new() -> MoveErrorCollector<'tcx> 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &'a Mir<'tcx>) -> Self 
new			    fn new(bits: IdxSetBuf<E>) -> Self 
new			    pub fn new(_tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			                fn new(idx: usize) -> Self 
new			    fn new(mir: &'a Mir<'tcx>,
new			    fn new(mir: &Mir) -> Self 
new			    pub fn new(mir: &Mir<'tcx>) -> Self 
new			    fn new(kind: LoanPathKind<'tcx>, ty: ty::Ty<'tcx>) -> LoanPath<'tcx> 
new			    pub fn new() -> MoveData<'tcx> 
new			    pub fn new(move_data: MoveData<'tcx>,
new_block			    fn new_block<'a>(&mut self,
new_block			    pub fn new_block(&mut self, data: BasicBlockData<'tcx>) -> BasicBlock 
new_move_path			    fn new_move_path(move_paths: &mut IndexVec<MovePathIndex, MovePath<'tcx>>,
new_temp			    pub fn new_temp(&mut self, ty: Ty<'tcx>) -> Local 
node_id			    fn node_id(&self) -> NodeId { self.node_id }
node_id			    fn node_id(&self) -> NodeId;
node_id			    fn node_id(&self, n: &Node) -> dot::Id 
node_id			    fn node_id(&'a self, n: &Node<'a>) -> dot::Id<'a> { self.inner.node_id(n) }
node_label			    fn node_label(&self, n: &Node) -> dot::LabelText 
node_label			    fn node_label(&'a self, n: &Node<'a>) -> dot::LabelText<'a> 
node_shape			    fn node_shape(&self, _n: &Node) -> Option<dot::LabelText> 
nodes			    fn nodes(&self) -> dot::Nodes<Node> 
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.inner.nodes() }
non_member			    fn non_member(elem: MovePathIndex, set: &[MovePathIndex]) -> bool 
note_and_explain_bckerr			    pub fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>,
note_and_explain_mutbl_error			    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder, err: &BckError<'tcx>,
note_move_destination			fn note_move_destination(mut err: DiagnosticBuilder,
nothing_is_true			    fn nothing_is_true(&self) {} \/\/ First case, we don't take ownership
nothing_is_true			    fn nothing_is_true(self) {}
on_all_children_bits			    fn on_all_children_bits<'a, 'tcx, F>(
on_all_children_bits			fn on_all_children_bits<'a, 'tcx, F>(
on_entry_set_for			    pub fn on_entry_set_for(&self, block_idx: usize) -> &IdxSet<E> 
on_lookup_result_bits			fn on_lookup_result_bits<'a, 'tcx, F>(
open_drop			    fn open_drop<'a>(&mut self, c: &DropCtxt<'a, 'tcx>) -> BasicBlock 
open_drop_for_adt			    fn open_drop_for_adt<'a>(&mut self, c: &DropCtxt<'a, 'tcx>,
open_drop_for_box			    fn open_drop_for_box<'a>(&mut self, c: &DropCtxt<'a, 'tcx>, ty: Ty<'tcx>)
open_drop_for_tuple			    fn open_drop_for_tuple<'a>(&mut self, c: &DropCtxt<'a, 'tcx>, tys: &[Ty<'tcx>])
open_drop_for_variant			    fn open_drop_for_variant<'a>(&mut self,
opt_loan_path			pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> 
outgoing			fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> 
outside_closure			fn outside_closure(x: &mut i32) 
outside_closure			fn outside_closure(x: &mut i32) {}
owned_ptr_base_path			fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<'tcx> 
owned_ptr_base_path_rc			fn owned_ptr_base_path_rc<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Rc<LoanPath<'tcx>> 
param_env			    fn param_env(&self) -> &'b ty::ParameterEnvironment<'tcx> 
patch			mod patch;
patch_terminator			    pub fn patch_terminator(&mut self, block: BasicBlock, new: TerminatorKind<'tcx>) 
path_first_child			    fn path_first_child(&self, index: MovePathIndex) -> MovePathIndex 
path_first_move			    fn path_first_move(&self, index: MovePathIndex) -> MoveIndex 
path_loan_path			    pub fn path_loan_path(&self, index: MovePathIndex) -> Rc<LoanPath<'tcx>> 
path_needs_drop			    fn path_needs_drop(&self, path: MovePathIndex) -> bool
path_next_sibling			    fn path_next_sibling(&self, index: MovePathIndex) -> MovePathIndex 
path_parent			    fn path_parent(&self, index: MovePathIndex) -> MovePathIndex 
post_dataflow_instrumentation			    fn post_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>
pre_dataflow_instrumentation			    fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>
print_borrowck_graph_to			pub fn print_borrowck_graph_to<'a, 'tcx, BD, P>(
print_fancy_ref			fn print_fancy_ref(fancy_ref: &FancyNum)
process_basic_block			    fn process_basic_block(&mut self, bb: BasicBlock) 
process_statement			    fn process_statement(&mut self, bb: BasicBlock, stmt: &Statement<'tcx>) 
process_terminator			    fn process_terminator(&mut self, bb: BasicBlock, term: &Option<Terminator<'tcx>>) 
propagate			    fn propagate(&mut self) 
propagate_bits_into_entry_set_for			    fn propagate_bits_into_entry_set_for(&mut self,
propagate_bits_into_graph_successors_of			    fn propagate_bits_into_graph_successors_of(
propagate_call_return			    fn propagate_call_return(&self,
propagate_call_return			    fn propagate_call_return(&self,
region_end_span			    fn region_end_span(&self, region: &'tcx ty::Region) -> Option<Span> 
report			    pub fn report(&self, err: BckError<'tcx>) 
report_aliasability_violation			    pub fn report_aliasability_violation(&self,
report_cannot_move_out_of			fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
report_error			    fn report_error(&self, code: bckerr_code<'tcx>) 
report_error_if_loan_conflicts_with_restriction			    pub fn report_error_if_loan_conflicts_with_restriction(&self,
report_error_if_loans_conflict			    pub fn report_error_if_loans_conflict(&self,
report_illegal_mutation			    pub fn report_illegal_mutation(&self,
report_move_errors			fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,
report_out_of_scope_escaping_closure_capture			    fn report_out_of_scope_escaping_closure_capture(&self,
report_partial_reinitialization_of_uninitialized_structure			    pub fn report_partial_reinitialization_of_uninitialized_structure(
report_potential_errors			    pub fn report_potential_errors(&self) 
report_potential_errors			    pub fn report_potential_errors<'a>(&self, bccx: &BorrowckCtxt<'a, 'tcx>) 
report_reassigned_immutable_variable			    pub fn report_reassigned_immutable_variable(&self,
report_use_of_moved_value			    pub fn report_use_of_moved_value(&self,
reset			    fn reset(&mut self, bits: &mut IdxSet<BD::Idx>) 
restrict			    fn restrict(&self,
restrictions			mod restrictions;
results			    pub fn results(self) -> DataflowResults<O> 
resume_block			    pub fn resume_block(&self) -> BasicBlock 
run_pass			    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
sanity_check			mod sanity_check;
sanity_check_via_rustc_peek			pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
scope			    fn scope(&self, cmt: &mc::cmt<'tcx>) -> &'tcx ty::Region 
self			impl self::indexes::MoveOutIndex 
set_drop_flag			    fn set_drop_flag(&mut self, loc: Location, path: MovePathIndex, val: DropFlagState) 
set_path_first_child			    fn set_path_first_child(&self,
set_path_first_move			    fn set_path_first_move(&self,
sets			    pub fn sets(&self) -> &AllSets<O::Idx> 
short_name			    pub fn short_name(&self) -> &'static str 
source			    fn source(&self, edge: &Edge) -> Node 
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.source(edge) }
source_info_for_index			    pub fn source_info_for_index(data: &BasicBlockData, loc: Location) -> SourceInfo 
source_info_for_location			    pub fn source_info_for_location(&self, mir: &Mir, loc: Location) -> SourceInfo 
span_err			    pub fn span_err(&self, s: Span, m: &str) 
span_err_with_code			    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, s: S, msg: &str, code: &str) 
start_block_effect			    fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<MovePathIndex>) 
start_block_effect			    fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<MovePathIndex>)
start_block_effect			    fn start_block_effect(&self,_move_data: &Self::Ctxt, _sets: &mut BlockSets<MoveOutIndex>) 
start_block_effect			    fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets<Self::Idx>);
state			    fn state(&self, path: MovePathIndex) -> (bool, bool) 
statement_effect			    fn statement_effect(&self,
statement_effect			    fn statement_effect(&self,
statement_scope_span			fn statement_scope_span(tcx: TyCtxt, region: &ty::Region) -> Option<Span> 
struct_span_err			    pub fn struct_span_err<S: Into<MultiSpan>>(&self, s: S, m: &str)
struct_span_err_with_code			    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,
target			    fn target(&self, edge: &Edge) -> Node 
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.inner.target(edge) }
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.bccx.tcx }
tcx			    pub fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.bccx.tcx }
terminator_effect			    fn terminator_effect(&self,
terminator_effect			    fn terminator_effect(&self,
terminator_loc			    pub fn terminator_loc(&self, mir: &Mir<'tcx>, bb: BasicBlock) -> Location 
to_type			    fn to_type(&self) -> ty::Ty<'tcx> { self.ty }
unelaborated_free_block			    fn unelaborated_free_block<'a>(
update_bits			    fn update_bits(sets: &mut BlockSets<MovePathIndex>, path: MovePathIndex,
value			    fn value(self) -> bool 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx Expr) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) 
walk_cfg			    fn walk_cfg(&mut self, in_out: &mut IdxSet<BD::Idx>) 
with_move_info			    pub fn with_move_info(move_from: mc::cmt<'tcx>,
with_temp_region_map			    fn with_temp_region_map<F>(&mut self, id: ast::NodeId, f: F)
you_know_nothing			fn you_know_nothing(jon_snow: &mut i32) 
zero_to_one			fn zero_to_one(bitvec: &mut [usize], move_index: MoveOutIndex) 
