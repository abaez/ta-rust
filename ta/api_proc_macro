QDelimited			struct QDelimited 
QTT			enum QTT 
as_tt			    pub fn as_tt(t: Token) -> TokenTree 
build			pub mod build;
build_binop_tok			    pub fn build_binop_tok(bot: token::BinOpToken) -> TokenStream 
build_binopeq_tok			    pub fn build_binopeq_tok(bot: token::BinOpToken) -> TokenStream 
build_brace_delimited			pub fn build_brace_delimited(ts: TokenStream) -> TokenStream 
build_bracket_delimited			pub fn build_bracket_delimited(ts: TokenStream) -> TokenStream 
build_delim_tok			    pub fn build_delim_tok(dt: token::DelimToken) -> TokenStream 
build_delimited			pub fn build_delimited(ts: TokenStream, delim: token::DelimToken) -> TokenStream 
build_empty_args			pub fn build_empty_args() -> TokenStream 
build_fn_call			    pub fn build_fn_call(name: Ident, args: TokenStream) -> TokenStream 
build_let			    pub fn build_let(id: Ident, tts: TokenStream) -> TokenStream 
build_mac_call			    pub fn build_mac_call(name: Ident, args: TokenStream) -> TokenStream 
build_mod_call			    pub fn build_mod_call(ids: Vec<Ident>, args: TokenStream) -> TokenStream 
build_paren_delimited			pub fn build_paren_delimited(ts: TokenStream) -> TokenStream 
build_token_tt			    pub fn build_token_tt(t: Token) -> TokenStream 
build_vec			    pub fn build_vec(ts: TokenStream) -> TokenStream 
concat			pub fn concat(ts1: TokenStream, ts2: TokenStream) -> TokenStream 
convert_complex_tts			fn convert_complex_tts<'cx>(cx: &'cx mut ExtCtxt, tts: Vec<QTT>) -> (Bindings, TokenStream) 
emit_lit			    pub fn emit_lit(l: token::Lit, n: Option<ast::Name>) -> TokenStream 
emit_token			    pub fn emit_token(t: Token) -> TokenStream 
from_tokens			    pub fn from_tokens(tokens: Vec<Token>) -> TokenStream 
ident_eq			pub fn ident_eq(tident: &TokenTree, id: Ident) -> bool 
int_build			mod int_build 
intersperse			    pub fn intersperse<T>(vs: Vec<T>, t: T) -> Vec<T>
is_qquote			fn is_qquote(id: Ident) -> bool 
is_unquote			fn is_unquote(id: Ident) -> bool 
keyword_to_token_ident			pub fn keyword_to_token_ident(kw: keywords::Keyword) -> Token 
lex			pub fn lex(source_str: &str) -> TokenStream 
parse			pub mod parse;
plugin_registrar			pub fn plugin_registrar(reg: &mut Registry) 
prelude			pub mod prelude;
qquote			mod qquote;
qquote			pub fn qquote<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[TokenTree])
qquote_iter			fn qquote_iter<'cx>(cx: &'cx mut ExtCtxt, depth: i64, ts: TokenStream) -> (Bindings, Vec<QTT>) 
qquoter			fn qquoter<'cx>(cx: &'cx mut ExtCtxt, ts: TokenStream) -> TokenStream 
str_to_token_ident			pub fn str_to_token_ident(s: &str) -> Token 
unravel			fn unravel(binds: Bindings) -> TokenStream 
unravel_concats			fn unravel_concats(tss: Vec<TokenStream>) -> TokenStream 
