CONTEXT			pub enum CONTEXT {}
DISPATCHER_CONTEXT			pub struct DISPATCHER_CONTEXT 
DwarfReader			impl DwarfReader 
DwarfReader			pub struct DwarfReader 
EHAction			pub enum EHAction 
EHContext			pub struct EHContext<'a> 
EXCEPTION_DISPOSITION			pub enum EXCEPTION_DISPOSITION 
EXCEPTION_POINTERS			pub struct EXCEPTION_POINTERS 
EXCEPTION_RECORD			pub struct EXCEPTION_RECORD 
Exception			struct Exception 
PanicData			struct PanicData 
RUNTIME_FUNCTION			pub struct RUNTIME_FUNCTION 
RaiseException			    pub fn RaiseException(dwExceptionCode: DWORD,
RtlUnwindEx			    pub fn RtlUnwindEx(TargetFrame: LPVOID,
UNWIND_HISTORY_TABLE			pub enum UNWIND_HISTORY_TABLE {}
Unaligned			struct Unaligned<T>(T);
_CatchableType			pub struct _CatchableType 
_CatchableTypeArray			pub struct _CatchableTypeArray 
_CxxThrowException			    pub fn _CxxThrowException(pExceptionObject: *mut c_void, pThrowInfo: *mut u8);
_PMD			pub struct _PMD 
_ThrowInfo			pub struct _ThrowInfo 
_TypeDescriptor			pub struct _TypeDescriptor 
__deregister_frame_info			        fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);
__gnu_unwind_frame			        fn __gnu_unwind_frame(exception_object: *mut uw::_Unwind_Exception,
__register_frame_info			        fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);
cleanup			pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> 
cleanup			pub unsafe fn cleanup(payload: [u64; 2]) -> Box<Any + Send> 
cleanup			pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> 
continue_unwind			    unsafe fn continue_unwind(exception_object: *mut uw::_Unwind_Exception,
dwarf			mod dwarf;
dwarf_reader			fn dwarf_reader() 
eh			pub mod eh;
eh_frame_registry			pub mod eh_frame_registry 
exception_cleanup			    extern "C" fn exception_cleanup(_unwind_code: uw::_Unwind_Reason_Code,
find_eh_action			pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext) -> EHAction 
find_eh_action			unsafe fn find_eh_action(context: *mut uw::_Unwind_Context) -> EHAction 
find_landing_pad			unsafe fn find_landing_pad(dc: &c::DISPATCHER_CONTEXT) -> Option<usize> 
imp			mod imp;
imp			mod imp 
interpret_cs_action			fn interpret_cs_action(cs_action: u64, lpad: usize) -> EHAction 
new			    pub fn new(ptr: *const u8) -> DwarfReader 
panic			pub unsafe fn panic(data: Box<Any + Send>) -> u32 
panic			pub unsafe fn panic(data: Box<Any + Send>) -> u32 
panic			pub unsafe fn panic(data: Box<Any + Send>) -> u32 
payload			pub fn payload() -> *mut u8 
payload			pub fn payload() -> [u64; 2] 
payload			pub fn payload() -> *mut u8 
read			    pub unsafe fn read<T: Copy>(&mut self) -> T 
read_encoded_pointer			unsafe fn read_encoded_pointer(reader: &mut DwarfReader,
read_sleb128			    pub unsafe fn read_sleb128(&mut self) -> i64 
read_uleb128			    pub unsafe fn read_uleb128(&mut self) -> u64 
round_up			fn round_up(unrounded: usize, align: usize) -> usize 
rust_eh_personality			fn rust_eh_personality() 
rust_exception_class			fn rust_exception_class() -> uw::_Unwind_Exception_Class 
windows			mod windows;
