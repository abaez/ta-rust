AccessLevel			pub enum AccessLevel 
AccessLevels			impl<Id: Hash + Eq> AccessLevels<Id> 
AccessLevels			pub struct AccessLevels<Id = NodeId> 
Adjust			pub enum Adjust<'tcx> 
Adjustment			impl<'tcx> Adjustment<'tcx> 
Adjustment			pub struct Adjustment<'tcx> 
AdtDef			impl<'a, 'gcx, 'tcx> AdtDef 
AdtDef			pub struct AdtDef 
AdtKind			pub enum AdtKind { Struct, Union, Enum }
AggregateKind			pub enum AggregateKind<'tcx> 
Aliasability			pub enum Aliasability 
AliasableReason			pub enum AliasableReason 
Align			impl Align 
Align			pub struct Align 
AllCollector			    struct AllCollector 
Ancestors			impl<'a, 'gcx, 'tcx> Ancestors<'a> 
Ancestors			pub struct Ancestors<'a> 
AngleBracketedParameterData			impl AngleBracketedParameterData 
AngleBracketedParameterData			pub struct AngleBracketedParameterData 
AnnNode			pub enum AnnNode<'a> 
AnnotationKind			enum AnnotationKind 
Annotator			impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> 
Annotator			struct Annotator<'a, 'tcx: 'a> 
AnotherImpl			struct AnotherImpl;
Arg			impl Arg 
Arg			pub struct Arg 
Arm			pub struct Arm 
AssertMessage			pub enum AssertMessage<'tcx> 
AssociatedItem			impl AssociatedItem 
AssociatedItem			pub struct AssociatedItem 
AssociatedItemContainer			impl AssociatedItemContainer 
AssociatedItemContainer			pub enum AssociatedItemContainer 
AssociatedItemKind			pub enum AssociatedItemKind 
AssociatedKind			pub enum AssociatedKind 
AssociatedTypeNormalizer			impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> 
AssociatedTypeNormalizer			struct AssociatedTypeNormalizer<'a, 'b: 'a, 'gcx: 'b+'tcx, 'tcx: 'b> 
AutoBorrow			pub enum AutoBorrow<'tcx> 
Bar			struct Bar;
Bar			struct Bar<T>(T);
BareFnTy			pub struct BareFnTy 
BareFnTy			pub struct BareFnTy<'tcx> 
BasicBlockData			impl<'tcx> BasicBlockData<'tcx> 
BasicBlockData			pub struct BasicBlockData<'tcx> 
BinOp			impl BinOp 
BinOp			pub enum BinOp 
BinOp			impl BinOp 
BinOp			impl<'tcx> BinOp 
BinOp_			impl BinOp_ 
BinOp_			pub enum BinOp_ 
Binder			impl<'a, 'gcx, 'tcx> Binder<ExistentialPredicate<'tcx>> 
Binder			impl<'tcx> Binder<&'tcx Slice<ExistentialPredicate<'tcx>>> 
Binder			impl<T> Binder<T> 
Binder			pub struct Binder<T>(pub T);
BindingMode			pub enum BindingMode 
BitwiseOperator			pub trait BitwiseOperator 
BitwiseOperator for Subtract			impl BitwiseOperator for Subtract 
BitwiseOperator for Union			impl BitwiseOperator for Union 
Bivariate			impl<'combine, 'infcx, 'gcx, 'tcx> Bivariate<'combine, 'infcx, 'gcx, 'tcx> 
Bivariate			pub struct Bivariate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> 
Block			pub struct Block 
BlockCheckMode			pub enum BlockCheckMode 
BlockRemainder			pub struct BlockRemainder 
Borrow			impl<'tcx: 'lcx, 'lcx> Borrow<BareFnTy<'lcx>> for Interned<'tcx, BareFnTy<'tcx>> 
Borrow			impl<'tcx: 'lcx, 'lcx> Borrow<TypeVariants<'lcx>> for Interned<'tcx, TyS<'tcx>> 
Borrow			impl<'tcx: 'lcx, 'lcx> Borrow<[ExistentialPredicate<'lcx>]>
Borrow			impl<'tcx: 'lcx, 'lcx> Borrow<[Kind<'lcx>]> for Interned<'tcx, Substs<'tcx>> 
Borrow			impl<'tcx: 'lcx, 'lcx> Borrow<[Ty<'lcx>]> for Interned<'tcx, Slice<Ty<'tcx>>> 
Borrow for Interned			impl<'tcx> Borrow<Region> for Interned<'tcx, Region> 
BorrowKind			pub enum BorrowKind 
BorrowKind			impl BorrowKind 
BorrowKind			impl BorrowKind 
BorrowKind			pub enum BorrowKind 
BottomUpFolder			pub struct BottomUpFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a, F>
BoundRegion			pub enum BoundRegion 
BuiltinImplConditions			enum BuiltinImplConditions<'tcx> 
CFG			impl CFG 
CFG			pub struct CFG 
CFGBuilder			impl<'a, 'tcx> CFGBuilder<'a, 'tcx> 
CFGBuilder			struct CFGBuilder<'a, 'tcx: 'a> 
CFGEdgeData			pub struct CFGEdgeData 
CFGNodeData			impl CFGNodeData 
CFGNodeData			pub enum CFGNodeData 
CReaderCacheKey			pub struct CReaderCacheKey 
Cache			impl Cache 
Cache			pub struct Cache 
CallSiteScopeData			impl CallSiteScopeData 
CallSiteScopeData			pub struct CallSiteScopeData 
CaptureClause			pub enum CaptureClause 
CaptureInfo			struct CaptureInfo 
CastKind			pub enum CastKind 
CastKind			pub enum CastKind 
CastTy			impl<'tcx> CastTy<'tcx> 
CastTy			pub enum CastTy<'tcx> 
Categorization			pub enum Categorization<'tcx> 
Cause			pub enum Cause 
CheckAttrVisitor			impl<'a> CheckAttrVisitor<'a> 
CheckAttrVisitor			struct CheckAttrVisitor<'a> 
CheckLintNameResult			enum CheckLintNameResult 
Checker			struct Checker<'a, 'tcx: 'a> 
Children			impl<'a, 'gcx, 'tcx> Children 
Children			struct Children 
Clone for LiveNode			impl Clone for LiveNode 
Clone for MapEntry			impl<'ast> Clone for MapEntry<'ast> 
ClosureKind			impl<'a, 'tcx> ClosureKind 
ClosureKind			pub enum ClosureKind 
ClosureParts			impl<'a> ClosureParts<'a> 
ClosureParts			struct ClosureParts<'a> 
ClosureSubsts			impl<'a, 'gcx, 'acx, 'tcx> ClosureSubsts<'tcx> 
ClosureSubsts			pub struct ClosureSubsts<'tcx> 
ClosureTy			pub struct ClosureTy<'tcx> 
ClosureUpvar			pub struct ClosureUpvar<'tcx> 
Code			impl<'a> Code<'a> 
Code			pub enum Code<'a> 
CodeExtent			impl CodeExtent 
CodeExtent			pub struct CodeExtent(u32);
CodeExtentData			impl CodeExtentData 
CodeExtentData			pub enum CodeExtentData 
CodeStats			impl CodeStats 
CodeStats			pub struct CodeStats 
CollectPrivateImplItemsVisitor			struct CollectPrivateImplItemsVisitor<'a, 'tcx: 'a> 
Combine for RegionVidKey			impl Combine for RegionVidKey 
CombineFields			impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> 
CombineFields			pub struct CombineFields<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> 
CombineFields			impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> 
CombineMapType			pub enum CombineMapType 
CombinedSnapshot			pub struct CombinedSnapshot 
CommonTypes			impl<'tcx> CommonTypes<'tcx> 
CommonTypes			pub struct CommonTypes<'tcx> 
Component			pub enum Component<'tcx> 
Config			pub struct Config 
ConstVal			impl ConstVal 
ConstVal			pub enum ConstVal 
Constant			pub struct Constant<'tcx> 
Constness			pub enum Constness 
ConstrainedCollector			    struct ConstrainedCollector 
Constraint			pub enum Constraint<'tcx> 
ConstraintGraph			impl<'a, 'gcx, 'tcx> ConstraintGraph<'a, 'gcx, 'tcx> 
ConstraintGraph			struct ConstraintGraph<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
ConsumeMode			pub enum ConsumeMode 
Context			pub struct Context 
Context			impl<'a> Context<'a> 
Context			struct Context<'a> 
ControlFlowGraph for Mir			impl<'tcx> ControlFlowGraph for Mir<'tcx> 
CopyImplementationError			pub enum CopyImplementationError 
Crate			impl Crate 
Crate			pub struct Crate 
CrateAnalysis			pub struct CrateAnalysis<'tcx> 
CrateLoader			pub trait CrateLoader 
CrateNum			impl CrateNum 
CrateNum			pub struct CrateNum(u32);
CrateSource			pub struct CrateSource 
CrateStore			pub trait CrateStore<'tcx> 
CrateStore for DummyCrateStore			impl<'tcx> CrateStore<'tcx> for DummyCrateStore 
CrateType			pub enum CrateType 
CtorKind			impl CtorKind 
CtorKind			pub enum CtorKind 
CtxtArenas			impl<'tcx> CtxtArenas<'tcx> 
CtxtArenas			pub struct CtxtArenas<'tcx> 
CtxtInterners			impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> 
CtxtInterners			pub struct CtxtInterners<'tcx> 
CustomCoerceUnsized			pub enum CustomCoerceUnsized 
DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> 
DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> 
DataFlowContext			pub struct DataFlowContext<'a, 'tcx: 'a, O> 
DataFlowOperator			pub trait DataFlowOperator : BitwiseOperator 
DataTypeKind			pub enum DataTypeKind 
DeadVisitor			impl<'a, 'tcx> DeadVisitor<'a, 'tcx> 
DeadVisitor			struct DeadVisitor<'a, 'tcx: 'a> 
DebruijnIndex			impl DebruijnIndex 
DebruijnIndex			pub struct DebruijnIndex 
Debug			        impl Debug for 
Debug for Constant			impl<'tcx> Debug for Constant<'tcx> 
Debug for Literal			impl<'tcx> Debug for Literal<'tcx> 
Debug for Lvalue			impl<'tcx> Debug for Lvalue<'tcx> 
Debug for Operand			impl<'tcx> Debug for Operand<'tcx> 
Debug for Rvalue			impl<'tcx> Debug for Rvalue<'tcx> 
Debug for Statement			impl<'tcx> Debug for Statement<'tcx> 
Debug for TerminatorKind			impl<'tcx> Debug for TerminatorKind<'tcx> 
Debug for TypedConstVal			impl<'tcx> Debug for TypedConstVal<'tcx> 
DebugInfoLevel			pub enum DebugInfoLevel 
DebugStat			            struct DebugStat 
Decl_			impl Decl_ 
Decl_			pub enum Decl_ 
Decodable for Kind			impl<'tcx> Decodable for Kind<'tcx> 
Decodable for Svh			impl Decodable for Svh 
DeepVisitor			impl<'v, 'hir, V> DeepVisitor<'v, V>
DeepVisitor			pub struct DeepVisitor<'v, V: 'v> 
Def			impl Def 
Def			pub enum Def 
DefCollector			impl<'a> DefCollector<'a> 
DefCollector			pub struct DefCollector<'a> 
DefData			pub struct DefData 
DefId			impl DefId 
DefId			pub struct DefId 
DefIdMap			pub fn DefIdMap<T>() -> DefIdMap<T> { FxHashMap() }
DefIdSet			pub fn DefIdSet() -> DefIdSet { FxHashSet() }
DefIndex			impl DefIndex 
DefIndex			pub struct DefIndex(u32);
DefKey			pub struct DefKey 
DefPath			impl DefPath 
DefPath			pub struct DefPath 
DefPathData			impl DefPathData 
DefPathData			pub enum DefPathData 
DefRegion			pub enum DefRegion 
Default			pub struct Default<'tcx> 
Default for AccessLevels			impl<Id: Hash + Eq> Default for AccessLevels<Id> 
Default for ErrorOutputType			impl Default for ErrorOutputType 
Default for TargetDataLayout			impl Default for TargetDataLayout 
Defaultness			impl Defaultness 
Defaultness			pub enum Defaultness 
DeferredObligation			impl<'a, 'gcx, 'tcx> DeferredObligation<'tcx> 
DeferredObligation			pub struct DeferredObligation<'tcx> 
Definitions			impl Definitions 
Definitions			pub struct Definitions 
Delegate			struct Delegate<'tcx>(PhantomData<&'tcx ()>);
Delegate			pub trait Delegate<'tcx> 
DepGraph			impl DepGraph 
DepGraph			pub struct DepGraph 
DepGraphData			struct DepGraphData 
DepGraphEdges			impl<D: Clone + Debug + Eq + Hash> DepGraphEdges<D> 
DepGraphEdges			pub struct DepGraphEdges<D: Clone + Debug + Eq + Hash> 
DepGraphQuery			impl<D: Clone + Debug + Hash + Eq> DepGraphQuery<D> 
DepGraphQuery			pub struct DepGraphQuery<D: Clone + Debug + Hash + Eq> 
DepGraphThreadData			impl DepGraphThreadData 
DepGraphThreadData			pub struct DepGraphThreadData 
DepKind			impl DepKind 
DepKind			pub enum DepKind 
DepMessage			pub enum DepMessage 
DepNode			impl<D: Clone + Debug> DepNode<D> 
DepNode			pub enum DepNode<D: Clone + Debug> 
DepNodeFilter			impl DepNodeFilter 
DepNodeFilter			pub struct DepNodeFilter 
DepTask			impl<'graph> DepTask<'graph> 
DepTask			pub struct DepTask<'graph> 
DepTrackingHash			            impl DepTrackingHash for 
DepTrackingHash			    impl<T1, T2, T3> DepTrackingHash for (T1, T2, T3)
DepTrackingHash			    impl<T1, T2> DepTrackingHash for (T1, T2)
DepTrackingHash			    pub trait DepTrackingHash 
DepTrackingHash for SearchPaths			    impl DepTrackingHash for SearchPaths 
DepTrackingHash for Vec			            impl DepTrackingHash for Vec<
DepTrackingMap			impl<M: DepTrackingMapConfig> DepTrackingMap<M> 
DepTrackingMap			pub struct DepTrackingMap<M: DepTrackingMapConfig> 
DepTrackingMapConfig			pub trait DepTrackingMapConfig 
DepTrackingMapConfig			        impl<'tcx> DepTrackingMapConfig for 
DeprecationEntry			impl DeprecationEntry 
DeprecationEntry			pub struct DeprecationEntry 
Deref for Slice			impl<T> Deref for Slice<T> 
Deref for TyCtxt			impl<'a, 'gcx, 'tcx> Deref for TyCtxt<'a, 'gcx, 'tcx> 
DerivedObligationCause			pub struct DerivedObligationCause<'tcx> 
DisambiguatedDefPathData			pub struct DisambiguatedDefPathData 
Drop for DepTask			impl<'graph> Drop for DepTask<'graph> 
Drop for IgnoreTask			impl<'graph> Drop for IgnoreTask<'graph> 
Drop for Indenter			impl Drop for Indenter 
DtorKind			impl DtorKind 
DtorKind			pub enum DtorKind 
DummyCrateStore			pub struct DummyCrateStore;
EarlyBoundRegion			pub struct EarlyBoundRegion 
EarlyContext			impl<'a> EarlyContext<'a> 
EarlyContext			pub struct EarlyContext<'a> 
EarlyLint			pub struct EarlyLint 
EarlyLintPass			pub trait EarlyLintPass: LintPass 
Edge			enum Edge<'tcx> 
EdgeFilter			impl EdgeFilter 
EdgeFilter			pub struct EdgeFilter 
EffectCheckVisitor			impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> 
EffectCheckVisitor			struct EffectCheckVisitor<'a, 'tcx: 'a> 
Elaborator			impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> 
Elaborator			pub struct Elaborator<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
ElementKind			pub enum ElementKind 
Encodable for Kind			impl<'tcx> Encodable for Kind<'tcx> 
Encodable for Svh			impl Encodable for Svh 
Endian			pub enum Endian 
EntryContext			struct EntryContext<'a, 'tcx: 'a> 
EntryFnType			pub enum EntryFnType 
EntryOrExit			pub enum EntryOrExit 
EnumDef			pub struct EnumDef 
EnumerateAndAdjust			pub struct EnumerateAndAdjust<I> 
EnumerateAndAdjustIterator			pub trait EnumerateAndAdjustIterator 
EnumerateAndAdjustIterator for T			impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T 
Eq for AdtDef			impl Eq for AdtDef {}
Eq for Interned			        impl<
Eq for Interned			impl<'tcx, T: Eq> Eq for Interned<'tcx, Slice<T>> {}
Eq for Interned			impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
Eq for LintId			impl Eq for LintId { }
Eq for Slice			impl<T> Eq for Slice<T> {}
Eq for TyS			impl<'tcx> Eq for TyS<'tcx> {}
Equate			impl<'combine, 'infcx, 'gcx, 'tcx> Equate<'combine, 'infcx, 'gcx, 'tcx> 
Equate			pub struct Equate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> 
EquatePredicate			pub struct EquatePredicate<'tcx>(pub Ty<'tcx>, pub Ty<'tcx>); \/\/ `0 == 1`
ErrorOutputType			pub enum ErrorOutputType 
ErrorReported			pub struct ErrorReported;
EvaluatedCandidate			struct EvaluatedCandidate<'tcx> 
EvaluationCache			impl<'tcx> EvaluationCache<'tcx> 
EvaluationCache			pub struct EvaluationCache<'tcx> 
EvaluationResult			enum EvaluationResult 
EvaluationResult			impl EvaluationResult 
ExistentialPredicate			impl<'a, 'gcx, 'tcx> ExistentialPredicate<'tcx> 
ExistentialPredicate			pub enum ExistentialPredicate<'tcx> 
ExistentialProjection			impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> 
ExistentialProjection			pub struct ExistentialProjection<'tcx> 
ExistentialTraitRef			impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> 
ExistentialTraitRef			pub struct ExistentialTraitRef<'tcx> 
ExpectedFound			impl<T> ExpectedFound<T> 
ExpectedFound			pub struct ExpectedFound<T> 
Export			pub struct Export 
Expr			impl Expr 
Expr			pub struct Expr 
ExprId			impl ExprId 
ExprId			pub struct ExprId(NodeId);
ExprUseVisitor			impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> 
ExprUseVisitor			pub struct ExprUseVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
ExprVisitor			impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> 
ExprVisitor			struct ExprVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Expr_			pub enum Expr_ 
ExternCrate			pub struct ExternCrate 
Externs			impl Externs 
Externs			pub struct Externs(BTreeMap<String, BTreeSet<String>>);
Field			pub struct Field 
FieldDef			impl<'a, 'gcx, 'tcx> FieldDef 
FieldDef			pub struct FieldDef 
FieldInfo			pub struct FieldInfo 
FieldName			pub enum FieldName 
FieldPat			pub struct FieldPat 
FileMatch			pub enum FileMatch 
FileSearch			impl<'a> FileSearch<'a> 
FileSearch			pub struct FileSearch<'a> 
FilterToTraits			impl<I> FilterToTraits<I> 
FilterToTraits			pub struct FilterToTraits<I> 
FindLintError			enum FindLintError 
FixupError			pub enum FixupError 
FlagComputation			impl FlagComputation 
FlagComputation			pub struct FlagComputation 
FloatVid			pub struct FloatVid 
FnDecl			impl FnDecl 
FnDecl			pub struct FnDecl 
FnKind			impl<'a> FnKind<'a> 
FnKind			pub enum FnKind<'a> 
FnLikeNode			impl<'a> FnLikeNode<'a> 
FnLikeNode			pub struct FnLikeNode<'a> { node: map::Node<'a> }
FnParts			pub struct FnParts<'a> 
FnSig			impl<'tcx> FnSig<'tcx> 
FnSig			pub struct FnSig<'tcx> 
Foo			enum Foo {Bar, Baz}
Foo			impl Foo 
Foo			impl<'a> Foo<'a> 
Foo			impl<T> Foo<T> 
Foo			pub trait Foo 
Foo			struct Foo 
Foo			struct Foo {bar: bool, baz: bool}
Foo			struct Foo; \/\/ error: duplicate lang item found: `panic_fmt`
Foo			struct Foo;
Foo			struct Foo<'a, T: 'a> 
Foo			struct Foo<'a, T> 
Foo			struct Foo<'a> 
Foo			struct Foo<T: 'static> 
Foo			struct Foo<T> 
Foo			struct Foo<T>(Vec<T>);
Foo			trait Foo where Self: Sized 
Foo			trait Foo 
Foo			trait Foo {}
Foo for T			impl<T> Foo for T where Bar<T>: Foo {}
Foo for bool			impl Foo for bool 
Foo for i32			impl Foo for i32 
Foo for isize			impl Foo for isize 
ForeignItem			pub struct ForeignItem 
ForeignItem_			impl ForeignItem_ 
ForeignItem_			pub enum ForeignItem_ 
ForeignMod			pub struct ForeignMod 
Forest			impl Forest 
Forest			pub struct Forest 
ForestObligation for PendingPredicateObligation			impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> 
Formals			        struct Formals<'a> 
FragmentInfo			pub enum FragmentInfo 
FreeRegion			pub struct FreeRegion 
FreeRegionMap			impl FreeRegionMap 
FreeRegionMap			pub struct FreeRegionMap 
FreeRegionsFromSameFn			        impl FreeRegionsFromSameFn 
FreeRegionsFromSameFn			        struct FreeRegionsFromSameFn 
Freevar			pub struct Freevar 
FreshOrKept			enum FreshOrKept 
From			impl<'tcx> From<Ty<'tcx>> for Kind<'tcx> 
From for DataTypeKind			impl From<AdtKind> for DataTypeKind 
From for Kind			impl<'tcx> From<&'tcx ty::Region> for Kind<'tcx> 
FulfillProcessor			struct FulfillProcessor<'a, 'b: 'a, 'gcx: 'tcx, 'tcx: 'b> 
FulfillmentContext			impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> 
FulfillmentContext			pub struct FulfillmentContext<'tcx> 
FulfillmentError			impl<'tcx> FulfillmentError<'tcx> 
FulfillmentError			pub struct FulfillmentError<'tcx> 
FulfillmentErrorCode			pub enum FulfillmentErrorCode<'tcx> 
FullTypeResolver			struct FullTypeResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
FunctionRetTy			impl FunctionRetTy 
FunctionRetTy			pub enum FunctionRetTy 
FutureIncompatibleInfo			pub struct FutureIncompatibleInfo 
GatherLabels			    struct GatherLabels<'a> 
Generalizer			struct Generalizer<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> 
Generator			trait Generator 
Generator for AnotherImpl			impl Generator for AnotherImpl 
Generator for Impl			impl Generator for Impl 
GenericKind			impl<'a, 'gcx, 'tcx> GenericKind<'tcx> 
GenericKind			pub enum GenericKind<'tcx> 
GenericPredicates			impl<'a, 'gcx, 'tcx> GenericPredicates<'tcx> 
GenericPredicates			pub struct GenericPredicates<'tcx> 
Generics			impl Generics 
Generics			pub struct Generics 
Generics			impl<'tcx> Generics<'tcx> 
Generics			pub struct Generics<'tcx> 
GetCurrentProcess			        fn GetCurrentProcess() -> HANDLE;
GetProcessMemoryInfo			        fn GetProcessMemoryInfo(Process: HANDLE,
Glb			impl<'combine, 'infcx, 'gcx, 'tcx> Glb<'combine, 'infcx, 'gcx, 'tcx> 
Glb			pub struct Glb<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> 
GlobalCtxt			impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> 
GlobalCtxt			impl<'tcx> GlobalCtxt<'tcx> 
GlobalCtxt			pub struct GlobalCtxt<'tcx> 
GlobalFulfilledPredicates			impl<'a, 'gcx, 'tcx> GlobalFulfilledPredicates<'gcx> 
GlobalFulfilledPredicates			pub struct GlobalFulfilledPredicates<'tcx> 
Graph			impl<'a, 'gcx, 'tcx> Graph 
Graph			pub struct Graph 
GraphPredecessors for Mir			impl<'a, 'b> GraphPredecessors<'b> for Mir<'a> 
GraphSuccessors for Mir			impl<'a, 'b>  GraphSuccessors<'b> for Mir<'a> 
HardwiredLints			pub struct HardwiredLints;
HasEscapingRegionsVisitor			struct HasEscapingRegionsVisitor 
HasTypeFlagsVisitor			struct HasTypeFlagsVisitor 
Hash for AdtDef			impl Hash for AdtDef 
Hash for Interned			        impl<
Hash for Interned			impl<'tcx, T: Hash> Hash for Interned<'tcx, Slice<T>> 
Hash for Interned			impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> 
Hash for Slice			impl<T> Hash for Slice<T> 
Hash for Svh			impl Hash for Svh 
Hash for TyS			impl<'tcx> Hash for TyS<'tcx> 
HrMatchResult			pub struct HrMatchResult<U> 
IdIndex			impl IdIndex 
IdIndex			struct IdIndex 
IdRange			impl IdRange 
IdRange			pub struct IdRange 
IdRangeComputingVisitor			impl<'a, 'ast> IdRangeComputingVisitor<'a, 'ast> 
IdRangeComputingVisitor			pub struct IdRangeComputingVisitor<'a, 'ast: 'a> 
IdVisitor			struct IdVisitor<'a, 'b: 'a, 'tcx: 'a+'b> 
Idx			        impl Idx for 
Idx for CrateNum			impl Idx for CrateNum 
IgnoreTask			impl<'graph> IgnoreTask<'graph> 
IgnoreTask			pub struct IgnoreTask<'graph> 
Impl			struct Impl;
ImplHeader			impl<'a, 'gcx, 'tcx> ImplHeader<'tcx> 
ImplHeader			pub struct ImplHeader<'tcx> 
ImplItem			pub struct ImplItem 
ImplItemId			pub struct ImplItemId 
ImplItemKind			pub enum ImplItemKind 
ImplItemRef			pub struct ImplItemRef 
ImplPolarity			pub enum ImplPolarity 
ImpliedBound			pub enum ImpliedBound<'tcx> 
IncrCompSession			pub enum IncrCompSession 
Indenter			pub struct Indenter 
Index			trait Index<Idx> { \/* ... *\/ }
Index			impl<'a, 'tcx> Index<'tcx> 
Index			pub struct Index<'tcx> 
Index for DepTrackingMap			impl<'k, M: DepTrackingMapConfig> Index<&'k M::Key> for DepTrackingMap<M> 
Index for Mir			impl<'tcx> Index<BasicBlock> for Mir<'tcx> 
IndexMut for Mir			impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> 
InferCtxt			impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> 
InferCtxt			impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> 
InferCtxt			impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> 
InferCtxt			impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> 
InferCtxt			impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> 
InferCtxt			pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
InferCtxt			impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> 
InferCtxtBuilder			impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> 
InferCtxtBuilder			pub struct InferCtxtBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
InferIsLocal			struct InferIsLocal(bool);
InferOk			impl<'tcx, T> InferOk<'tcx, T> 
InferOk			pub struct InferOk<'tcx, T> 
InferTables			impl<'a, 'gcx, 'tcx> InferTables<'a, 'gcx, 'tcx> 
InferTables			pub enum InferTables<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
InferTy			pub enum InferTy 
InferredObligationsSnapshotVecDelegate			struct InferredObligationsSnapshotVecDelegate<'tcx> 
InlineAsm			pub struct InlineAsm 
InlineAsmOutput			pub struct InlineAsmOutput 
InlinedItem			impl InlinedItem 
InlinedItem			pub struct InlinedItem 
InlinedItemRef			impl<'a> InlinedItemRef<'a> 
InlinedItemRef			pub struct InlinedItemRef<'a> 
InlinedRootPath			pub struct InlinedRootPath 
Input			impl Input 
Input			pub enum Input 
Inserted			enum Inserted 
InstantiatedPredicates			impl<'tcx> InstantiatedPredicates<'tcx> 
InstantiatedPredicates			pub struct InstantiatedPredicates<'tcx> 
IntTy			pub enum IntTy 
IntTypeExt			pub trait IntTypeExt 
IntTypeExt for attr			impl IntTypeExt for attr::IntType 
IntVarValue			pub enum IntVarValue 
IntVid			pub struct IntVid 
Integer			impl Integer 
Integer			pub enum Integer 
InteriorKind			pub enum InteriorKind 
InteriorOffsetKind			pub enum InteriorOffsetKind 
InternAs			pub trait InternAs<T: ?Sized, R> 
InternAs for I			impl<I, T, R, E> InternAs<[T], R> for I
InternIteratorElement			pub trait InternIteratorElement<T, R>: Sized 
InternIteratorElement for Result			impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> 
InternIteratorElement for T			impl<T, R> InternIteratorElement<T, R> for T 
Interned			struct Interned<'tcx, T: 'tcx+?Sized>(&'tcx T);
IntoEarlyLint			pub trait IntoEarlyLint 
IntoEarlyLint for Diagnostic			impl IntoEarlyLint for Diagnostic 
IntoIterator			impl<'a, T> IntoIterator for &'a Slice<T> 
IrMaps			impl<'a, 'tcx> IrMaps<'a, 'tcx> 
IrMaps			struct IrMaps<'a, 'tcx: 'a> 
Issue32330			pub enum Issue32330 
Item			pub struct Item 
ItemFnParts			struct ItemFnParts<'a> 
ItemId			pub struct ItemId 
ItemLikeVisitor			pub trait ItemLikeVisitor<'hir> 
ItemLikeVisitor for CollectPrivateImplItemsVisitor			impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> 
ItemLikeVisitor for DeepVisitor			impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>
ItemLikeVisitor for EntryContext			impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> 
ItemLikeVisitor for LanguageItemCollector			impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> 
ItemLikeVisitor for LifeSeeder			impl<'v, 'k> ItemLikeVisitor<'v> for LifeSeeder<'k> 
ItemLikeVisitor for TrackingVisitor			    impl<'visit, 'tcx, F, V> ItemLikeVisitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>
ItemLowerer			        struct ItemLowerer<'lcx, 'interner: 'lcx> 
ItemPathBuffer			pub trait ItemPathBuffer 
ItemPathBuffer for LocalPathBuffer			impl ItemPathBuffer for LocalPathBuffer 
ItemSubsts			impl<'tcx> ItemSubsts<'tcx> 
ItemSubsts			pub struct ItemSubsts<'tcx> 
ItemVisitor			impl<'a, 'tcx> ItemVisitor<'a, 'tcx> 
ItemVisitor			struct ItemVisitor<'a, 'tcx: 'a> 
Item_			impl Item_ 
Item_			pub enum Item_ 
Iter			pub struct Iter<'a> 
Iterator			        impl Iterator<Item=ExistentialProjection<'tcx>> + 'a 
Iterator			        impl Iterator<Item=PolyExistentialProjection<'tcx>> + 'a 
Iterator			        impl Iterator<Item=Ty<'tcx>> + 'tcx
Iterator for Ancestors			impl<'a> Iterator for Ancestors<'a> 
Iterator for Elaborator			impl<'cx, 'gcx, 'tcx> Iterator for Elaborator<'cx, 'gcx, 'tcx> 
Iterator for EnumerateAndAdjust			impl<I> Iterator for EnumerateAndAdjust<I> where I: Iterator 
Iterator for Iter			impl<'a> Iterator for Iter<'a> 
Iterator for NodesMatchingSuffix			impl<'a, 'ast> Iterator for NodesMatchingSuffix<'a, 'ast> 
Iterator for Postorder			impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> 
Iterator for Preorder			impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> 
Iterator for ReversePostorder			impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> 
Iterator for SupertraitDefIds			impl<'cx, 'gcx, 'tcx> Iterator for SupertraitDefIds<'cx, 'gcx, 'tcx> 
Iterator for TraitObligationStackList			impl<'o,'tcx> Iterator for TraitObligationStackList<'o,'tcx>
Iterator for TypeWalker			impl<'tcx> Iterator for TypeWalker<'tcx> 
KillFrom			pub enum KillFrom 
Kind			impl<'tcx> Kind<'tcx> 
Kind			pub struct Kind<'tcx> 
Label			pub struct Label 
LabelledCFG			pub struct LabelledCFG<'a, 'ast: 'a> 
LangItem			    pub enum LangItem 
LanguageItemCollector			impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> 
LanguageItemCollector			struct LanguageItemCollector<'a, 'tcx: 'a> 
LanguageItems			impl LanguageItems 
LanguageItems			pub struct LanguageItems 
LateBoundRegionConversionTime			pub enum LateBoundRegionConversionTime 
LateBoundRegionsCollector			impl LateBoundRegionsCollector 
LateBoundRegionsCollector			struct LateBoundRegionsCollector 
LateContext			impl<'a, 'tcx> LateContext<'a, 'tcx> 
LateContext			pub struct LateContext<'a, 'tcx: 'a> 
LateLintPass			pub trait LateLintPass<'a, 'tcx>: LintPass 
LateLintPass for HardwiredLints			impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}
LatticeDir			impl<'combine, 'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx>
LatticeDir			pub trait LatticeDir<'f, 'gcx: 'f+'tcx, 'tcx: 'f> : TypeRelation<'f, 'gcx, 'tcx> 
LatticeDir			impl<'combine, 'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx>
Layout			impl<'a, 'gcx, 'tcx> Layout 
Layout			pub enum Layout 
LayoutError			pub enum LayoutError<'tcx> 
Level			impl Level 
Level			pub enum Level 
LibSource			impl LibSource 
LibSource			pub enum LibSource 
LifeGiver			impl LifeGiver 
LifeGiver			struct LifeGiver 
LifeSeeder			struct LifeSeeder<'k> 
Lifetime			pub struct Lifetime 
LifetimeContext			impl<'a, 'tcx> LifetimeContext<'a, 'tcx> 
LifetimeContext			struct LifetimeContext<'a, 'tcx: 'a> 
LifetimeDef			pub struct LifetimeDef 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a BareFnTy<'a> 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a Region 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a Slice<ExistentialPredicate<'a>> 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a Slice<Ty<'a>> 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> 
Lift			pub trait Lift<'tcx> 
Lift for Ty			impl<'a, 'tcx> Lift<'tcx> for Ty<'a> 
Lift for traits			impl<'a, 'tcx> Lift<'tcx> for traits::DeferredObligation<'a> 
Lift for traits			impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> 
Lift for traits			impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> 
Lift for traits			impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> 
Lift for traits			impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> 
Lift for traits			impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ClosureTy<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::EquatePredicate<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialTraitRef<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::FnSig<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ItemSubsts<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionTy<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::TraitRef<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> 
Lift for type_variable			impl<'a, 'tcx> Lift<'tcx> for type_variable::Default<'a> 
LinkMeta			pub struct LinkMeta 
LinkOrCopy			pub enum LinkOrCopy 
Linkage			pub enum Linkage 
LinkagePreference			pub enum LinkagePreference 
Lint			impl Lint 
Lint			pub struct Lint 
LintContext			pub trait LintContext<'tcx>: Sized 
LintContext for EarlyContext			impl<'a> LintContext<'a> for EarlyContext<'a> 
LintContext for LateContext			impl<'a, 'tcx> LintContext<'tcx> for LateContext<'a, 'tcx> 
LintId			impl LintId 
LintId			pub struct LintId 
LintPass			pub trait LintPass 
LintPass for HardwiredLints			impl LintPass for HardwiredLints 
LintSource			pub enum LintSource 
LintStore			impl LintStore 
LintStore			pub struct LintStore 
ListNode			struct ListNode 
Literal			pub enum Literal<'tcx> 
LiveNode			impl LiveNode 
LiveNode			struct LiveNode(usize);
LiveNodeKind			enum LiveNodeKind 
Liveness			impl<'a, 'tcx> Liveness<'a, 'tcx> 
Liveness			struct Liveness<'a, 'tcx: 'a> 
LoadedMacro			pub enum LoadedMacro 
LoanCause			pub enum LoanCause 
Local			pub struct Local 
LocalDecl			impl<'tcx> LocalDecl<'tcx> 
LocalDecl			pub struct LocalDecl<'tcx> 
LocalInfo			struct LocalInfo 
LocalKind			pub enum LocalKind 
LocalPathBuffer			impl LocalPathBuffer 
LocalPathBuffer			struct LocalPathBuffer 
Location			impl Location 
Location			pub struct Location 
LoopKind			enum LoopKind<'a> 
LoopScope			struct LoopScope 
LoopSource			pub enum LoopSource 
LoweringContext			impl<'a> LoweringContext<'a> 
LoweringContext			pub struct LoweringContext<'a> 
Lub			impl<'combine, 'infcx, 'gcx, 'tcx> Lub<'combine, 'infcx, 'gcx, 'tcx> 
Lub			pub struct Lub<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> 
Lvalue			impl<'tcx> Lvalue<'tcx> 
Lvalue			pub enum Lvalue<'tcx> 
Lvalue			impl<'tcx> Lvalue<'tcx> 
LvalueContext			impl<'tcx> LvalueContext<'tcx> 
LvalueContext			pub enum LvalueContext<'tcx> 
LvaluePreference			impl LvaluePreference 
LvaluePreference			pub enum LvaluePreference 
LvalueTy			impl<'a, 'gcx, 'tcx> LvalueTy<'tcx> 
LvalueTy			pub enum LvalueTy<'tcx> 
MacroDef			pub struct MacroDef 
MacroInvocationData			pub struct MacroInvocationData 
Map			impl<'ast> Map<'ast> 
Map			pub struct Map<'ast> 
MapEntry			impl<'ast> MapEntry<'ast> 
MapEntry			pub enum MapEntry<'ast> 
MarkSymbolVisitor			impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> 
MarkSymbolVisitor			struct MarkSymbolVisitor<'a, 'tcx: 'a> 
Match			impl<'a, 'gcx, 'tcx> Match<'a, 'gcx, 'tcx> 
Match			pub struct Match<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
MatchMode			pub enum MatchMode 
MatchSource			pub enum MatchSource 
MaybeFnLike			pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }
MaybeFnLike for ast			impl MaybeFnLike for ast::Expr 
MaybeFnLike for ast			impl MaybeFnLike for ast::Item 
MaybeFnLike for ast			impl MaybeFnLike for ast::TraitItem 
MemCategorizationContext			impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> 
MemCategorizationContext			pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
MemCategorizationOptions			pub struct MemCategorizationOptions 
MemoizationMap			pub trait MemoizationMap 
MemoizationMap for RefCell			impl<M: DepTrackingMapConfig> MemoizationMap for RefCell<DepTrackingMap<M>> 
MemoizationMap for RefCell			impl<K, V, S> MemoizationMap for RefCell<HashMap<K,V,S>>
MethodCall			impl MethodCall 
MethodCall			pub struct MethodCall 
MethodCallee			pub struct MethodCallee<'tcx> 
MethodMatchResult			impl MethodMatchResult 
MethodMatchResult			pub enum MethodMatchResult 
MethodMatchedData			pub enum MethodMatchedData 
MethodSig			pub struct MethodSig 
MethodViolationCode			pub enum MethodViolationCode 
Mir			impl<'tcx> Mir<'tcx> 
Mir			pub struct Mir<'tcx> 
MirMapPass			pub trait MirMapPass<'tcx>: Pass 
MirPass			pub trait MirPass<'tcx>: Pass 
MirPassHook			pub trait MirPassHook<'tcx>: Pass 
MirSource			impl<'a, 'tcx> MirSource 
MirSource			pub enum MirSource 
MismatchedProjectionTypes			pub struct MismatchedProjectionTypes<'tcx> 
MissingStabilityAnnotations			impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> 
MissingStabilityAnnotations			struct MissingStabilityAnnotations<'a, 'tcx: 'a> 
Mod			pub struct Mod 
MoveReason			pub enum MoveReason 
MutTy			pub struct MutTy 
Mutability			pub enum Mutability 
Mutability			pub enum Mutability 
MutabilityCategory			impl MutabilityCategory 
MutabilityCategory			pub enum MutabilityCategory 
MutateMode			pub enum MutateMode 
MyTransmutableType			trait MyTransmutableType 
MyTransmutableType for String			impl MyTransmutableType for String 
MyTransmutableType for u8			impl MyTransmutableType for u8 
Named			trait Named 
Named for ForeignItem			impl Named for ForeignItem { fn name(&self) -> Name { self.name } }
Named for ImplItem			impl Named for ImplItem { fn name(&self) -> Name { self.name } }
Named for Item			impl Named for Item { fn name(&self) -> Name { self.name } }
Named for Spanned			impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() } }
Named for StructField			impl Named for StructField { fn name(&self) -> Name { self.name } }
Named for TraitItem			impl Named for TraitItem { fn name(&self) -> Name { self.name } }
Named for Variant_			impl Named for Variant_ { fn name(&self) -> Name { self.name } }
NamedRegionMap			pub struct NamedRegionMap 
NativeLibrary			pub struct NativeLibrary 
NativeLibraryKind			pub enum NativeLibraryKind 
NestedVisitorMap			impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> 
NestedVisitorMap			pub enum NestedVisitorMap<'this, 'tcx: 'this> 
NoAnn			pub struct NoAnn;
Node			pub enum Node<'ast> 
Node			enum Node 
Node			impl<'a, 'gcx, 'tcx> Node 
Node			pub enum Node 
NodeCollector			impl<'ast> NodeCollector<'ast> 
NodeCollector			pub struct NodeCollector<'ast> 
NodeIdTree			pub trait NodeIdTree 
NodeIdTree for ast_map			impl<'a> NodeIdTree for ast_map::Map<'a> 
NodeItem			impl<T> NodeItem<T> 
NodeItem			pub struct NodeItem<T> 
NodeMap			pub fn NodeMap<T>() -> NodeMap<T> { FxHashMap() }
NodePrinter			pub trait NodePrinter 
NodePrinter for pprust			impl<'a> NodePrinter for pprust::State<'a> 
NodeSet			pub fn NodeSet() -> NodeSet { FxHashSet() }
NodesMatchingSuffix			impl<'a, 'ast> NodesMatchingSuffix<'a, 'ast> 
NodesMatchingSuffix			pub struct NodesMatchingSuffix<'a, 'ast:'a> 
Normalized			impl<'tcx,T> Normalized<'tcx,T> 
Normalized			pub struct Normalized<'tcx,T> 
Note			pub enum Note 
ObjectLifetimeDefault			pub enum ObjectLifetimeDefault<'tcx> 
ObjectSafetyViolation			pub enum ObjectSafetyViolation 
Obligation			impl<'tcx,O> Obligation<'tcx,O> 
Obligation			pub struct Obligation<'tcx, T> 
ObligationCause			impl<'tcx> ObligationCause<'tcx> 
ObligationCause			impl<'tcx> ObligationCause<'tcx> 
ObligationCause			pub struct ObligationCause<'tcx> 
ObligationCauseCode			pub enum ObligationCauseCode<'tcx> 
ObligationProcessor for FulfillProcessor			impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx, 'tcx> 
OpenNode			enum OpenNode 
Operand			pub enum Operand<'tcx> 
Operand			impl<'tcx> Operand<'tcx> 
OpportunisticTypeAndRegionResolver			impl<'a, 'gcx, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'gcx, 'tcx> 
OpportunisticTypeAndRegionResolver			pub struct OpportunisticTypeAndRegionResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
OpportunisticTypeResolver			impl<'a, 'gcx, 'tcx> OpportunisticTypeResolver<'a, 'gcx, 'tcx> 
OpportunisticTypeResolver			pub struct OpportunisticTypeResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
OptLevel			pub enum OptLevel 
OptionStability			pub enum OptionStability 
Options			        impl Options 
Options			        pub struct Options 
Options			    pub struct Options 
Options			impl Options 
Original			struct Original { kind: ShadowKind, span: Span }
OrphanCheckErr			pub enum OrphanCheckErr<'tcx> 
OutlivesPredicate			pub struct OutlivesPredicate<A,B>(pub A, pub B); \/\/ `A : B`
OutputFilenames			impl OutputFilenames 
OutputFilenames			pub struct OutputFilenames 
OutputType			impl OutputType 
OutputType			pub enum OutputType 
OutputTypes			impl OutputTypes 
OutputTypes			pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);
OverlapError			pub struct OverlapError 
OverloadedCallType			enum OverloadedCallType 
OverloadedCallType			impl OverloadedCallType 
PROCESS_MEMORY_COUNTERS			    struct PROCESS_MEMORY_COUNTERS 
ParamMode			enum ParamMode 
ParamToVarFolder			        struct ParamToVarFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
ParamTy			impl<'a, 'gcx, 'tcx> ParamTy 
ParamTy			pub struct ParamTy 
ParameterEnvironment			impl<'a, 'tcx> ParameterEnvironment<'tcx> 
ParameterEnvironment			pub struct ParameterEnvironment<'tcx> 
ParameterEnvironment			impl<'tcx> ParameterEnvironment<'tcx> 
ParameterOrigin			pub enum ParameterOrigin 
ParenthesizedParameterData			pub struct ParenthesizedParameterData 
PartialEq for AdtDef			impl PartialEq for AdtDef 
PartialEq for Interned			impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, Slice<T>> 
PartialEq for Interned			impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> 
PartialEq for LintId			impl PartialEq for LintId 
PartialEq for Slice			impl<T> PartialEq for Slice<T> 
PartialEq for TyS			impl<'tcx> PartialEq for TyS<'tcx> 
Pass			pub trait Pass 
PassArgs			enum PassArgs 
Passes			impl<'a, 'tcx> Passes 
Passes			pub struct Passes 
Passes			impl Passes 
Passes			pub enum Passes 
Pat			impl Pat 
Pat			pub struct Pat 
PatKind			pub enum PatKind 
Path			pub struct Path 
PathKind			pub enum PathKind 
PathParameters			impl PathParameters 
PathParameters			pub enum PathParameters 
PathResolution			impl PathResolution 
PathResolution			pub struct PathResolution 
PathSegment			impl PathSegment 
PathSegment			pub struct PathSegment 
PendingPredicateObligation			pub struct PendingPredicateObligation<'tcx> 
PerfStats			pub struct PerfStats 
PointerKind			pub enum PointerKind<'tcx> 
PolyExistentialProjection			impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> 
PolyExistentialTraitRef			impl<'tcx> PolyExistentialTraitRef<'tcx> 
PolyFnSig			impl<'tcx> PolyFnSig<'tcx> 
PolyProjectionPredicate			impl<'tcx> PolyProjectionPredicate<'tcx> 
PolyTraitPredicate			impl<'tcx> PolyTraitPredicate<'tcx> 
PolyTraitRef			pub struct PolyTraitRef 
PolyTraitRef			impl<'tcx> PolyTraitRef<'tcx> 
Postorder			impl<'a, 'tcx> Postorder<'a, 'tcx> 
Postorder			pub struct Postorder<'a, 'tcx: 'a> 
PpAnn			pub trait PpAnn 
PpAnn for NoAnn			impl PpAnn for NoAnn {}
Predicate			impl<'a, 'gcx, 'tcx> Predicate<'tcx> 
Predicate			impl<'tcx> Predicate<'tcx> 
Predicate			pub enum Predicate<'tcx> 
PredicateSet			impl<'a, 'gcx, 'tcx> PredicateSet<'a, 'gcx, 'tcx> 
PredicateSet			struct PredicateSet<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Preorder			impl<'a, 'tcx> Preorder<'a, 'tcx> 
Preorder			pub struct Preorder<'a, 'tcx: 'a> 
PrimTy			pub enum PrimTy 
Primitive			impl Primitive 
Primitive			pub enum Primitive 
Prince			struct Prince<'kiss, 'SnowWhite: 'kiss> { \/\/ You say here that 'kiss must live
Prince			struct Prince<'kiss, 'SnowWhite> 
PrintRequest			pub enum PrintRequest 
PrintState for State			impl<'a> PrintState<'a> for State<'a> 
ProcessedErrorOrigin			pub enum ProcessedErrorOrigin<'tcx> 
Progress			impl<'tcx> Progress<'tcx> 
Progress			struct Progress<'tcx> 
ProjectedTy			enum ProjectedTy<'tcx> 
Projection			pub struct Projection<'tcx, B, V> 
ProjectionCache			impl<'tcx> ProjectionCache<'tcx> 
ProjectionCache			pub struct ProjectionCache<'tcx> 
ProjectionCacheEntry			enum ProjectionCacheEntry<'tcx> 
ProjectionCacheSnapshot			pub struct ProjectionCacheSnapshot 
ProjectionElem			pub enum ProjectionElem<'tcx, V> 
ProjectionPredicate			pub struct ProjectionPredicate<'tcx> 
ProjectionTy			pub struct ProjectionTy<'tcx> 
ProjectionTyCandidate			enum ProjectionTyCandidate<'tcx> 
ProjectionTyCandidateSet			struct ProjectionTyCandidateSet<'tcx> 
ProjectionTyError			pub enum ProjectionTyError<'tcx> 
PropagationContext			impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> 
PropagationContext			struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O: 'a> 
QPath			pub enum QPath 
ReachableContext			impl<'a, 'tcx> ReachableContext<'a, 'tcx> 
ReachableContext			struct ReachableContext<'a, 'tcx: 'a> 
RebuildPathInfo			struct RebuildPathInfo<'a> 
Rebuilder			impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> 
Rebuilder			struct Rebuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Region			impl Region 
Region			pub enum Region 
RegionAndOrigin			struct RegionAndOrigin<'tcx> 
RegionEraser			        struct RegionEraser<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(TyCtxt<'a, 'gcx, 'tcx>);
RegionFolder			impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> 
RegionFolder			pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
RegionFudger			pub struct RegionFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
RegionMaps			impl RegionMaps 
RegionMaps			pub struct RegionMaps 
RegionObligation			pub struct RegionObligation<'tcx> 
RegionParameterDef			impl<'tcx> RegionParameterDef<'tcx> 
RegionParameterDef			pub struct RegionParameterDef<'tcx> 
RegionReplacer			impl<'a, 'gcx, 'tcx> RegionReplacer<'a, 'gcx, 'tcx> 
RegionReplacer			struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
RegionResolutionError			pub enum RegionResolutionError<'tcx> 
RegionResolutionVisitor			impl<'ast, 'a> RegionResolutionVisitor<'ast, 'a> 
RegionResolutionVisitor			struct RegionResolutionVisitor<'ast: 'a, 'a> 
RegionSnapshot			pub struct RegionSnapshot 
RegionVarBindings			impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> 
RegionVarBindings			pub struct RegionVarBindings<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
RegionVariableOrigin			impl RegionVariableOrigin 
RegionVariableOrigin			pub enum RegionVariableOrigin 
RegionVid			pub struct RegionVid 
RegionVidKey			pub struct RegionVidKey 
Relate			impl<'tcx> Relate<'tcx> for &'tcx Substs<'tcx> 
Relate			impl<'tcx> Relate<'tcx> for &'tcx ty::BareFnTy<'tcx> 
Relate			impl<'tcx> Relate<'tcx> for &'tcx ty::Region 
Relate			impl<'tcx> Relate<'tcx> for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> 
Relate			pub trait Relate<'tcx>: TypeFoldable<'tcx> 
Relate for Ty			impl<'tcx> Relate<'tcx> for Ty<'tcx> 
Relate for Vec			impl<'tcx> Relate<'tcx> for Vec<ty::PolyExistentialProjection<'tcx>> 
Relate for abi			impl<'tcx> Relate<'tcx> for abi::Abi 
Relate for ast			impl<'tcx> Relate<'tcx> for ast::Unsafety 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> 
Relate for ty			impl<'tcx> Relate<'tcx> for ty::TypeAndMut<'tcx> 
RelateResultCompare			pub trait RelateResultCompare<'tcx, T> 
RelateResultCompare for RelateResult			impl<'tcx, T:Clone + PartialEq> RelateResultCompare<'tcx, T> for RelateResult<'tcx, T> 
RelationDir			impl RelationDir 
RelationDir			pub enum RelationDir 
Representability			pub enum Representability 
Resolver			pub trait Resolver 
Reveal			pub enum Reveal 
ReversePostorder			impl<'a, 'tcx> ReversePostorder<'a, 'tcx> 
ReversePostorder			pub struct ReversePostorder<'a, 'tcx: 'a> 
RootMode			pub enum RootMode 
RootUnsafeContext			enum RootUnsafeContext 
RustcOptGroup			impl RustcOptGroup 
RustcOptGroup			pub struct RustcOptGroup 
Rvalue			pub enum Rvalue<'tcx> 
Rvalue			impl<'tcx> Rvalue<'tcx> 
SameRegions			impl SameRegions 
SameRegions			pub struct SameRegions 
ScopeChain			enum ScopeChain<'a> 
SearchPaths			impl SearchPaths 
SearchPaths			pub struct SearchPaths 
SelectionCache			impl<'tcx> SelectionCache<'tcx> 
SelectionCache			pub struct SelectionCache<'tcx> 
SelectionCandidate			enum SelectionCandidate<'tcx> 
SelectionCandidateSet			struct SelectionCandidateSet<'tcx> 
SelectionContext			impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> 
SelectionContext			pub struct SelectionContext<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> 
SelectionError			pub enum SelectionError<'tcx> 
SelfKind			pub enum SelfKind 
Session			impl Session 
Session			pub struct Session 
ShadowGraph			impl ShadowGraph 
ShadowGraph			pub struct ShadowGraph 
ShadowKind			enum ShadowKind { Label, Lifetime }
ShadowKind			impl ShadowKind 
Shadower			struct Shadower { kind: ShadowKind, span: Span }
SimplifiedType			pub enum SimplifiedType 
Size			impl Size 
Size			pub struct Size 
SizeKind			pub enum SizeKind { Exact, Min }
SizeSkeleton			impl<'a, 'gcx, 'tcx> SizeSkeleton<'gcx> 
SizeSkeleton			pub enum SizeSkeleton<'tcx> 
SkolemizedRegionVid			pub struct SkolemizedRegionVid 
Slice			impl<T> Slice<T> 
Slice			pub struct Slice<T>([T]);
Slice			impl<'tcx> Slice<ExistentialPredicate<'tcx>> 
Snapshot			pub struct Snapshot 
SnapshotVecDelegate for InferredObligationsSnapshotVecDelegate			impl<'tcx> SnapshotVecDelegate for InferredObligationsSnapshotVecDelegate<'tcx> 
SourceInfo			pub struct SourceInfo 
SpecializesCache			impl SpecializesCache 
SpecializesCache			pub struct SpecializesCache 
Specials			struct Specials 
StabilityLevel			impl StabilityLevel 
StabilityLevel			pub enum StabilityLevel 
State			impl<'a> State<'a> 
State			pub struct State<'a> 
Statement			impl<'tcx> Statement<'tcx> 
Statement			pub struct Statement<'tcx> 
StatementKind			pub enum StatementKind<'tcx> 
Stmt_			impl Stmt_ 
Stmt_			pub enum Stmt_ 
Struct			impl<'a, 'gcx, 'tcx> Struct 
Struct			pub struct Struct 
StructField			impl StructField 
StructField			pub struct StructField 
StructKind			enum StructKind 
Sub			impl<'combine, 'infcx, 'gcx, 'tcx> Sub<'combine, 'infcx, 'gcx, 'tcx> 
Sub			pub struct Sub<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> 
SubregionOrigin			impl<'tcx> SubregionOrigin<'tcx> 
SubregionOrigin			pub enum SubregionOrigin<'tcx> 
Subst			pub trait Subst<'tcx> : Sized 
SubstFolder			impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> 
SubstFolder			struct SubstFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Substs			impl<'a, 'gcx, 'tcx> Substs<'tcx> 
Subtract			struct Subtract;
Super			trait Super<A> 
Super			trait Super<A> {}
Super for Foo			impl Super<Foo> for Foo{}
SupertraitDefIds			pub struct SupertraitDefIds<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
Svh			impl Svh 
Svh			pub struct Svh 
TC			    mod TC 
Tables			impl<'a, 'gcx, 'tcx> Tables<'tcx> 
Tables			pub struct Tables<'tcx> 
TaintDirections			impl TaintDirections 
TaintDirections			pub struct TaintDirections 
TaintSet			impl<'a, 'gcx, 'tcx> TaintSet<'tcx> 
TaintSet			struct TaintSet<'tcx> 
Target			enum Target 
Target			impl Target 
TargetDataLayout			impl TargetDataLayout 
TargetDataLayout			pub struct TargetDataLayout 
TargetLint			enum TargetLint 
Terminator			impl<'tcx> Terminator<'tcx> 
Terminator			pub struct Terminator<'tcx> 
TerminatorKind			impl<'tcx> TerminatorKind<'tcx> 
TerminatorKind			pub enum TerminatorKind<'tcx> 
ThreadLocalGlobalCtxt			    enum ThreadLocalGlobalCtxt {}
ThreadLocalInterners			    enum ThreadLocalInterners {}
ToPolyTraitRef			pub trait ToPolyTraitRef<'tcx> 
ToPolyTraitRef for PolyProjectionPredicate			impl<'tcx> ToPolyTraitRef<'tcx> for PolyProjectionPredicate<'tcx> 
ToPolyTraitRef for PolyTraitPredicate			impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> 
ToPolyTraitRef for TraitRef			impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> 
ToPredicate			pub trait ToPredicate<'tcx> 
ToPredicate for PolyEquatePredicate			impl<'tcx> ToPredicate<'tcx> for PolyEquatePredicate<'tcx> 
ToPredicate for PolyProjectionPredicate			impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> 
ToPredicate for PolyRegionOutlivesPredicate			impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> 
ToPredicate for PolyTraitRef			impl<'tcx> ToPredicate<'tcx> for PolyTraitRef<'tcx> 
ToPredicate for PolyTypeOutlivesPredicate			impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> 
ToPredicate for TraitRef			impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> 
ToPrimitive			pub trait ToPrimitive 
ToPrimitive for i64			impl ToPrimitive for i64 
ToPrimitive for u64			impl ToPrimitive for u64 
ToType			pub trait ToType 
ToType for IntVarValue			impl ToType for IntVarValue 
ToType for ast			impl ToType for ast::FloatTy 
TrackMatchMode			enum TrackMatchMode 
TrackMatchMode			impl TrackMatchMode 
TrackingVisitor			    struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> 
Trait			trait Trait { type AssociatedType; }
Trait			trait Trait 
Trait			trait Trait: Super<Self> 
Trait for Foo			impl Trait for Foo {}
Trait for String			impl Trait for String 
Trait for i8			impl Trait for i8 { type AssociatedType = &'static str; }
Trait for u8			impl Trait for u8 
TraitBoundModifier			pub enum TraitBoundModifier 
TraitCandidate			pub struct TraitCandidate 
TraitDef			impl<'a, 'gcx, 'tcx> TraitDef 
TraitDef			pub struct TraitDef 
TraitErrorKey			impl<'a, 'gcx, 'tcx> TraitErrorKey<'tcx> 
TraitErrorKey			pub struct TraitErrorKey<'tcx> 
TraitItem			pub struct TraitItem 
TraitItem_			pub enum TraitItem_ 
TraitObligation			impl<'tcx> TraitObligation<'tcx> 
TraitObligation			impl<'tcx> TraitObligation<'tcx> 
TraitObligationStack			impl<'o,'tcx> TraitObligationStack<'o,'tcx> 
TraitObligationStack			struct TraitObligationStack<'prev, 'tcx: 'prev> 
TraitObligationStackList			impl<'o,'tcx> TraitObligationStackList<'o,'tcx> 
TraitObligationStackList			struct TraitObligationStackList<'o,'tcx:'o> 
TraitPredicate			impl<'tcx> TraitPredicate<'tcx> 
TraitPredicate			pub struct TraitPredicate<'tcx> 
TraitRef			pub struct TraitRef 
TraitRef			impl<'tcx> TraitRef<'tcx> 
TraitRef			pub struct TraitRef<'tcx> 
TransNormalize			pub trait TransNormalize<'gcx>: TypeFoldable<'gcx> 
TransNormalize for LvalueTy			impl<'gcx> TransNormalize<'gcx> for LvalueTy<'gcx> 
TupleArgumentsFlag			pub enum TupleArgumentsFlag { Yes, No }
TwoRegions			pub struct TwoRegions<'tcx> 
Ty			pub struct Ty 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'gcx> 
TyCtxt			impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			        impl<'a, 'gcx, 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> 
TyCtxt			pub struct TyCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyCtxt			impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> 
TyParam			pub struct TyParam 
TyParamBound			pub enum TyParamBound 
TyS			impl<'tcx> TyS<'tcx> 
TyS			pub struct TyS<'tcx> 
TyS			impl<'a, 'gcx, 'tcx> TyS<'tcx> 
TyVid			pub struct TyVid 
Ty_			pub enum Ty_ 
TypeAndMut			pub struct TypeAndMut<'tcx> 
TypeBinding			pub struct TypeBinding 
TypeContents			impl TypeContents 
TypeContents			pub struct TypeContents 
TypeError			pub enum TypeError<'tcx> 
TypeFoldable			pub trait TypeFoldable<'tcx>: fmt::Debug + Clone 
TypeFoldable			            impl<'tcx> TypeFoldable<'tcx> for 
TypeFoldable			impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::BareFnTy<'tcx> 
TypeFoldable			impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Region 
TypeFoldable			impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<Ty<'tcx>> 
TypeFoldable			impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> 
TypeFoldable			impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> 
TypeFoldable for Kind			impl<'tcx> TypeFoldable<'tcx> for Kind<'tcx> 
TypeFoldable for LvalueTy			impl<'tcx> TypeFoldable<'tcx> for LvalueTy<'tcx> 
TypeFoldable for Ty			impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> 
TypeFoldable for TypeTrace			impl<'tcx> TypeFoldable<'tcx> for TypeTrace<'tcx> 
TypeFoldable for ValuePairs			impl<'tcx> TypeFoldable<'tcx> for ValuePairs<'tcx> 
TypeFoldable for traits			impl<'tcx> TypeFoldable<'tcx> for traits::DeferredObligation<'tcx> 
TypeFoldable for traits			impl<'tcx> TypeFoldable<'tcx> for traits::DerivedObligationCause<'tcx> 
TypeFoldable for traits			impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCause<'tcx> 
TypeFoldable for traits			impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> 
TypeFoldable for ty			impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U>
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureSubsts<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialProjection<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialTraitRef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ImplHeader<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ItemSubsts<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoBorrow<'tcx> 
TypeFolder			pub trait TypeFolder<'gcx: 'tcx, 'tcx> : Sized 
TypeFolder for AssociatedTypeNormalizer			impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> 
TypeFolder for BottomUpFolder			impl<'a, 'gcx, 'tcx, F> TypeFolder<'gcx, 'tcx> for BottomUpFolder<'a, 'gcx, 'tcx, F>
TypeFolder for FullTypeResolver			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx> 
TypeFolder for OpportunisticTypeAndRegionResolver			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeAndRegionResolver<'a, 'gcx, 'tcx> 
TypeFolder for OpportunisticTypeResolver			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeResolver<'a, 'gcx, 'tcx> 
TypeFolder for ParamToVarFolder			        impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ParamToVarFolder<'a, 'gcx, 'tcx> 
TypeFolder for RegionEraser			        impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionEraser<'a, 'gcx, 'tcx> 
TypeFolder for RegionFolder			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> 
TypeFolder for RegionFudger			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFudger<'a, 'gcx, 'tcx> 
TypeFolder for RegionReplacer			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> 
TypeFolder for SubstFolder			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> 
TypeFolder for TypeFreshener			impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> 
TypeFreshener			impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> 
TypeFreshener			pub struct TypeFreshener<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
TypeIdHasher			impl<'a, 'gcx, 'tcx, W> TypeIdHasher<'a, 'gcx, 'tcx, W>
TypeIdHasher			pub struct TypeIdHasher<'a, 'gcx: 'a+'tcx, 'tcx: 'a, W> 
TypeParameterDef			pub struct TypeParameterDef<'tcx> 
TypeRelation			impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>
TypeRelation			impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>
TypeRelation			impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>
TypeRelation			impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>
TypeRelation			impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>
TypeRelation			pub trait TypeRelation<'a, 'gcx: 'a+'tcx, 'tcx: 'a> : Sized 
TypeRelation for Match			impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Match<'a, 'gcx, 'tcx> 
TypeSizeInfo			pub struct TypeSizeInfo 
TypeTrace			impl<'a, 'gcx, 'tcx> TypeTrace<'tcx> 
TypeTrace			pub struct TypeTrace<'tcx> 
TypeVariableData			struct TypeVariableData<'tcx> 
TypeVariableOrigin			pub enum TypeVariableOrigin 
TypeVariableTable			impl<'tcx> TypeVariableTable<'tcx> 
TypeVariableTable			pub struct TypeVariableTable<'tcx> 
TypeVariableValue			enum TypeVariableValue<'tcx> 
TypeVariants			pub enum TypeVariants<'tcx> 
TypeVisitor			pub trait TypeVisitor<'tcx> : Sized 
TypeVisitor for HasEscapingRegionsVisitor			impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor 
TypeVisitor for HasTypeFlagsVisitor			impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor 
TypeVisitor for LateBoundRegionsCollector			impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector 
TypeVisitor for TypeIdHasher			impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>
TypeWalker			impl<'tcx> TypeWalker<'tcx> 
TypeWalker			pub struct TypeWalker<'tcx> 
TypedConstVal			pub struct TypedConstVal<'tcx> 
UnOp			impl UnOp 
UnOp			pub enum UnOp 
UnOp			pub enum UnOp 
UnconstrainedNumeric			pub enum UnconstrainedNumeric 
UndoEntry			enum UndoEntry<'tcx> 
UndoLogEntry			pub enum UndoLogEntry<'tcx> 
UnifyKey for ty			impl UnifyKey for ty::FloatVid 
UnifyKey for ty			impl UnifyKey for ty::IntVid 
UnifyKey for ty			impl UnifyKey for ty::RegionVid 
UnifyKey for ty			impl UnifyKey for ty::TyVid 
Union			struct Union;
Union			impl<'a, 'gcx, 'tcx> Union 
Union			pub struct Union 
UnsafeContext			impl UnsafeContext 
UnsafeContext			struct UnsafeContext 
UnsafeGeneric			impl UnsafeGeneric 
UnsafeGeneric			pub enum UnsafeGeneric 
UnsafeSource			pub enum UnsafeSource 
Unsafety			pub enum Unsafety 
Upvar			pub struct Upvar 
UpvarBorrow			pub struct UpvarBorrow<'tcx> 
UpvarCapture			pub enum UpvarCapture<'tcx> 
UpvarDecl			pub struct UpvarDecl 
UpvarId			pub struct UpvarId 
UseKind			pub enum UseKind 
Users			struct Users 
ValuePairs			pub enum ValuePairs<'tcx> 
VarKind			enum VarKind 
VarValue			pub enum VarValue<'tcx> 
Variable			impl Variable 
Variable			struct Variable(usize);
Variance			pub enum Variance 
VariantData			impl VariantData 
VariantData			pub enum VariantData 
VariantDef			impl<'a, 'gcx, 'tcx> VariantDef 
VariantDef			pub struct VariantDef 
VariantInfo			pub struct VariantInfo 
Variant_			pub struct Variant_ 
Verify			pub struct Verify<'tcx> 
VerifyBound			impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> 
VerifyBound			pub enum VerifyBound<'tcx> 
Visibility			pub enum Visibility 
Visibility			impl Visibility 
Visibility			pub enum Visibility 
VisibilityScopeData			pub struct VisibilityScopeData 
Visitor			pub trait Visitor<'v> : Sized 
Visitor for AllCollector			    impl<'v> Visitor<'v> for AllCollector 
Visitor for Annotator			impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> 
Visitor for CheckAttrVisitor			impl<'a> Visitor<'a> for CheckAttrVisitor<'a> 
Visitor for Checker			impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> 
Visitor for ConstrainedCollector			    impl<'v> Visitor<'v> for ConstrainedCollector 
Visitor for Context			impl<'a, 'v> Visitor<'v> for Context<'a> 
Visitor for DeadVisitor			impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> 
Visitor for DefCollector			impl<'ast> Visitor<'ast> for DefCollector<'ast> 
Visitor for EffectCheckVisitor			impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> 
Visitor for ExprVisitor			impl<'a, 'gcx, 'tcx> Visitor<'gcx> for ExprVisitor<'a, 'gcx, 'tcx> 
Visitor for GatherLabels			    impl<'v, 'a> Visitor<'v> for GatherLabels<'a> 
Visitor for IdRangeComputingVisitor			impl<'a, 'ast> Visitor<'ast> for IdRangeComputingVisitor<'a, 'ast> 
Visitor for IrMaps			impl<'a, 'tcx> Visitor<'tcx> for IrMaps<'a, 'tcx> 
Visitor for ItemLowerer			        impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> 
Visitor for ItemVisitor			impl<'a, 'tcx> Visitor<'tcx> for ItemVisitor<'a, 'tcx> 
Visitor for LifetimeContext			impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> 
Visitor for Liveness			impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> 
Visitor for MarkSymbolVisitor			impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> 
Visitor for MissingStabilityAnnotations			impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> 
Visitor for NodeCollector			impl<'ast> Visitor<'ast> for NodeCollector<'ast> 
Visitor for ReachableContext			impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> 
Visitor for RegionResolutionVisitor			impl<'ast, 'a> Visitor<'ast> for RegionResolutionVisitor<'ast, 'a> 
Vtable			impl<'tcx, N> Vtable<'tcx, N> 
Vtable			pub enum Vtable<'tcx, N> 
VtableBuiltinData			pub struct VtableBuiltinData<N> 
VtableClosureData			pub struct VtableClosureData<'tcx, N> 
VtableDefaultImplData			pub struct VtableDefaultImplData<N> 
VtableFnPointerData			pub struct VtableFnPointerData<'tcx, N> 
VtableImplData			pub struct VtableImplData<'tcx, N> 
VtableObjectData			pub struct VtableObjectData<'tcx, N> 
WalkState			        struct WalkState<'tcx> 
Wedding			trait Wedding<'t>: 't { }
WfPredicates			impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> 
WfPredicates			struct WfPredicates<'a, 'gcx: 'a+'tcx, 'tcx: 'a> 
WhereBoundPredicate			pub struct WhereBoundPredicate 
WhereClause			pub struct WhereClause 
WhereEqPredicate			pub struct WhereEqPredicate 
WherePredicate			pub enum WherePredicate 
WhereRegionPredicate			pub struct WhereRegionPredicate 
WorkProduct			pub struct WorkProduct 
WorkProductId			pub struct WorkProductId(pub String);
X			struct X;
_match			pub mod _match;
a_is_expected			    fn a_is_expected(&self) -> bool { self.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { true } \/\/ irrelevant
a_is_expected			    fn a_is_expected(&self) -> bool;
abi			    pub fn abi(self) -> u64 
abi_align			    pub fn abi_align(self, align: Align) -> Size 
abort_if_errors			    pub fn abort_if_errors(&self) 
absolute_item_path_str			    pub fn absolute_item_path_str(self, def_id: DefId) -> String 
acc			    fn acc(&mut self, ln: LiveNode, var: Variable, acc: u32) 
accepts_all			    pub fn accepts_all(&self) -> bool 
access_path			    fn access_path(&mut self, id: NodeId, path: &hir::Path, succ: LiveNode, acc: u32)
activate_injected_dep			fn activate_injected_dep(injected: Option<CrateNum>,
add			    pub fn add(&mut self, id: NodeId) 
add_ast_node			    fn add_ast_node(&mut self, id: ast::NodeId, preds: &[CFGIndex]) -> CFGIndex 
add_bound_computation			    fn add_bound_computation(&mut self, computation: &FlagComputation) 
add_constraint			    fn add_constraint(&self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) 
add_contained_edge			    fn add_contained_edge(&mut self,
add_depth			    fn add_depth(&mut self, depth: u32) 
add_dummy_node			    fn add_dummy_node(&mut self, preds: &[CFGIndex]) -> CFGIndex 
add_edge			    fn add_edge(&mut self,
add_edge_from_current_node			    fn add_edge_from_current_node<OP>(&mut self,
add_edge_from_open_node			    fn add_edge_from_open_node<OP>(&mut self,
add_entries_from_fn_decl			    fn add_entries_from_fn_decl(index: &mut NodeMap<Vec<CFGIndex>>,
add_existential_projection			    fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection) 
add_exiting_edge			    fn add_exiting_edge(&mut self,
add_flags			    fn add_flags(&mut self, flags: TypeFlags) 
add_fn_sig			    fn add_fn_sig(&mut self, fn_sig: &ty::PolyFnSig) 
add_gen			    pub fn add_gen(&mut self, id: ast::NodeId, bit: usize) 
add_given			    pub fn add_given(&self,
add_given			    pub fn add_given(&self, sub: ty::FreeRegion, sup: ty::RegionVid) 
add_if_global			    fn add_if_global(&mut self, tcx: TyCtxt<'a, 'gcx, 'tcx>, key: &ty::Predicate<'tcx>) 
add_impl_for_specialization			    pub fn add_impl_for_specialization(&self,
add_kill			    pub fn add_kill(&mut self, kind: KillFrom, id: ast::NodeId, bit: usize) 
add_kills_from_flow_exits			    pub fn add_kills_from_flow_exits(&mut self, cfg: &cfg::CFG) 
add_library			fn add_library(sess: &session::Session,
add_lint			    pub fn add_lint<S: Into<MultiSpan>>(&self,
add_lint_diagnostic			    pub fn add_lint_diagnostic<M>(&self,
add_live_node			    fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode 
add_live_node_for_node			    fn add_live_node_for_node(&mut self, node_id: NodeId, lnk: LiveNodeKind) 
add_node			    fn add_node(&mut self, data: CFGNodeData, preds: &[CFGIndex]) -> CFGIndex 
add_path			    pub fn add_path(&mut self, path: &str, output: config::ErrorOutputType) 
add_projection_ty			    fn add_projection_ty(&mut self, projection_ty: &ty::ProjectionTy) 
add_region			    fn add_region(&mut self, r: &ty::Region) 
add_returning_edge			    fn add_returning_edge(&mut self,
add_scope_and_walk_fn			    fn add_scope_and_walk_fn(&mut self,
add_sty			    fn add_sty(&mut self, st: &ty::TypeVariants) 
add_substs			    fn add_substs(&mut self, substs: &Substs) 
add_ty			    fn add_ty(&mut self, ty: Ty) 
add_tys			    fn add_tys(&mut self, tys: &[Ty]) 
add_unreachable_node			    fn add_unreachable_node(&mut self) -> CFGIndex 
add_variable			    fn add_variable(&mut self, vk: VarKind) -> Variable 
add_verify			    fn add_verify(&self, verify: Verify<'tcx>) 
adjust_for_autoderef			    pub fn adjust_for_autoderef<F>(&'tcx self,
adjust_for_autoref			    pub fn adjust_for_autoref(&'tcx self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
adjustment			pub mod adjustment;
adjustments			    pub fn adjustments(&self) -> Ref<NodeMap<adjustment::Adjustment<'tcx>>> 
adt_def			    fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> &'tcx ty::AdtDef
adt_def			    fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> &'tcx ty::AdtDef;
adt_kind			    pub fn adt_kind(&self) -> AdtKind 
align			    pub fn align(&self, dl: &TargetDataLayout) -> Align 
align			    pub fn align(&self, dl: &TargetDataLayout)-> Align 
align			    pub fn align(self, dl: &TargetDataLayout) -> Align 
all_fields			    pub fn all_fields<'s>(&'s self) -> impl Iterator<Item = &'s FieldDef> 
alloc_adt_def			    pub fn alloc_adt_def(self,
alloc_generics			    pub fn alloc_generics(self, generics: ty::Generics<'gcx>)
alloc_mir			    pub fn alloc_mir(self, mir: Mir<'gcx>) -> &'gcx RefCell<Mir<'gcx>> 
alloc_trait_def			    pub fn alloc_trait_def(self, def: ty::TraitDef) -> &'gcx ty::TraitDef 
allow_internal_unstable			    fn allow_internal_unstable(&self, reason: &'static str, mut span: Span) -> Span 
ambiguous			    fn ambiguous(&mut self, key: ty::ProjectionTy<'tcx>) 
ancestors			pub fn ancestors<'a>(trait_def: &'a TraitDef, start_from_impl: DefId) -> Ancestors<'a> 
ancestors			    pub fn ancestors(&'a self, of_impl: DefId) -> specialization_graph::Ancestors<'a> 
ancestors_of			        fn ancestors_of<'a>(scope_map: &[CodeExtent],
and			    pub fn and(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> 
annotate			    fn annotate<F>(&mut self, id: NodeId, attrs: &[Attribute],
anonymize_late_bound_regions			    pub fn anonymize_late_bound_regions<T>(self, sig: &Binder<T>) -> Binder<T>
anonymize_predicate			fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
append_to_same_regions			        fn append_to_same_regions(same_regions: &mut Vec<SameRegions>,
apply_gen_kill			    fn apply_gen_kill(&self, cfgidx: CFGIndex, bits: &mut [usize]) 
apply_lang_items			        fn apply_lang_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
are_inner_types_recursive			        fn are_inner_types_recursive<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span,
arg_to_string			pub fn arg_to_string(arg: &hir::Arg) -> String 
args_iter			    pub fn args_iter(&self) -> impl Iterator<Item=Local> 
arm			    fn arm(&mut self, pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm 
arm_move_mode			    fn arm_move_mode(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &hir::Arm) -> TrackMatchMode 
arm_pats_bindings			    fn arm_pats_bindings<F>(&mut self, pat: Option<&hir::Pat>, f: F) where
arm_to_string			pub fn arm_to_string(arm: &hir::Arm) -> String 
as_deep_visitor			    fn as_deep_visitor<'s>(&'s mut self) -> DeepVisitor<'s, Self> 
as_failure_str			    fn as_failure_str(&self) -> &'static str 
as_interned_str			    pub fn as_interned_str(&self) -> InternedString 
as_local_node_id			    pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> 
as_local_node_id			    pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> 
as_opt_param_ty			    pub fn as_opt_param_ty(&self) -> Option<ty::ParamTy> 
as_predicate			    fn as_predicate(&self) -> &Self::Predicate { &self.obligation.predicate }
as_ref			    pub fn as_ref(&self) -> Binder<&T> 
as_region			    pub fn as_region(self) -> Option<&'tcx ty::Region> 
as_requirement_str			    fn as_requirement_str(&self) -> &'static str 
as_str			    pub fn as_str(self) -> &'static str 
as_str			    pub fn as_str(self) -> &'static str 
as_type			    pub fn as_type(self) -> Option<Ty<'tcx>> 
as_u32			    pub fn as_u32(&self) -> u32 
as_u64			    pub fn as_u64(&self) -> u64 
as_usize			    pub fn as_usize(&self) -> usize 
asm_comments			    pub fn asm_comments(&self) -> bool { self.opts.debugging_opts.asm_comments }
assemble_builtin_bound_candidates			    fn assemble_builtin_bound_candidates<'o>(&mut self,
assemble_candidates			    fn assemble_candidates<'o>(&mut self,
assemble_candidates_for_unsizing			    fn assemble_candidates_for_unsizing(&mut self,
assemble_candidates_from_caller_bounds			    fn assemble_candidates_from_caller_bounds<'o>(&mut self,
assemble_candidates_from_default_impls			    fn assemble_candidates_from_default_impls(&mut self,
assemble_candidates_from_impls			fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(
assemble_candidates_from_impls			    fn assemble_candidates_from_impls(&mut self,
assemble_candidates_from_object_ty			    fn assemble_candidates_from_object_ty(&mut self,
assemble_candidates_from_param_env			fn assemble_candidates_from_param_env<'cx, 'gcx, 'tcx>(
assemble_candidates_from_predicates			fn assemble_candidates_from_predicates<'cx, 'gcx, 'tcx, I>(
assemble_candidates_from_projected_tys			    fn assemble_candidates_from_projected_tys(&mut self,
assemble_candidates_from_trait_def			fn assemble_candidates_from_trait_def<'cx, 'gcx, 'tcx>(
assemble_closure_candidates			    fn assemble_closure_candidates(&mut self,
assemble_fn_pointer_candidates			    fn assemble_fn_pointer_candidates(&mut self,
assert_ty_matches			    fn assert_ty_matches(&self, val: Disr) 
assert_ty_matches			    fn assert_ty_matches(&self, val: Disr);
assigned_on_entry			    fn assigned_on_entry(&self, ln: LiveNode, var: Variable)
assigned_on_exit			    fn assigned_on_exit(&self, ln: LiveNode, var: Variable)
assoc_ty_def			fn assoc_ty_def<'cx, 'gcx, 'tcx>(
associated_item			    fn associated_item(&self, def: DefId) -> Option<ty::AssociatedItem>;
associated_item			    fn associated_item<'a>(&self, def: DefId)
associated_item			    pub fn associated_item(self, def_id: DefId) -> AssociatedItem 
associated_item_def_ids			    fn associated_item_def_ids(&self, def_id: DefId) -> Vec<DefId>
associated_item_def_ids			    fn associated_item_def_ids(&self, def_id: DefId) -> Vec<DefId>;
associated_item_def_ids			    pub fn associated_item_def_ids(self, def_id: DefId) -> Rc<Vec<DefId>> 
associated_item_from_impl_item_ref			    fn associated_item_from_impl_item_ref(self,
associated_item_from_trait_item_ref			    fn associated_item_from_trait_item_ref(self,
associated_items			    pub fn associated_items(self, def_id: DefId)
ast_node			pub trait ast_node 
ast_node for hir			impl ast_node for hir::Expr 
ast_node for hir			impl ast_node for hir::Pat 
ast_ty_to_prim_ty			    pub fn ast_ty_to_prim_ty(self, ast_ty: &hir::Ty) -> Option<Ty<'tcx>> 
ast_visit::Visitor for EarlyContext			impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> 
astconv_object_safety_violations			    pub fn astconv_object_safety_violations(self, trait_def_id: DefId)
astconv_util			    pub mod astconv_util;
attempt_static			fn attempt_static(sess: &session::Session) -> Option<DependencyList> 
attr_name			    pub fn attr_name(&self) -> &'static str 
attrs			    pub fn attrs(&self) -> &'a [Attribute] 
attrs			    pub fn attrs(&self, id: NodeId) -> &'ast [ast::Attribute] 
attrs			    pub fn attrs(&self) -> &[Attribute] 
auto_traits			    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item=DefId> + 'a 
autoderef			    pub fn autoderef(expr_id: NodeId, autoderef: u32) -> MethodCall 
bar			    fn bar(&self) {}
bar			    fn bar(&self);
bar			    fn bar() -> i32 
bar			fn bar<T: Fn(u32)>(_: T) {}
basic_blocks			    pub fn basic_blocks(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> 
basic_blocks_mut			    pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> 
basic_options			pub fn basic_options() -> Options 
baz			    fn baz() 
baz			fn baz<I: Foo<A=Bar>>(x: &<I as Foo>::A) {} \/\/ ok!
baz			fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}
baz			fn baz<I>(x: &<I as Foo>::A) where I: Foo<A=Bar> {}
bclose			    pub fn bclose(&mut self, span: syntax_pos::Span) -> io::Result<()> 
bclose_			    pub fn bclose_(&mut self, span: syntax_pos::Span, indented: usize) -> io::Result<()> 
bclose_maybe_open			    pub fn bclose_maybe_open(&mut self,
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
bindings			    pub fn bindings(&self) -> HirVec<&TypeBinding> 
binop_to_string			pub fn binop_to_string(op: BinOpToken) -> &'static str 
bit_str			fn bit_str(bit: usize) -> String 
bitand			    fn bitand(self, other: TypeContents) -> TypeContents 
bitor			    fn bitor(self, other: TypeContents) -> TypeContents 
bits			    pub fn bits(self) -> u64 
bits_to_string			fn bits_to_string(words: &[usize]) -> String 
bitwise			fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],
bivariate			    pub fn bivariate<'a>(&'a mut self, a_is_expected: bool) -> Bivariate<'a, 'infcx, 'gcx, 'tcx> 
bivariate			mod bivariate;
block			    fn block(&mut self, blk: &hir::Block, pred: CFGIndex) -> CFGIndex 
block_all			    fn block_all(&mut self, span: Span, stmts: hir::HirVec<hir::Stmt>, expr: Option<P<hir::Expr>>)
block_expr			    fn block_expr(&mut self, expr: P<hir::Expr>) -> hir::Block 
block_to_string			pub fn block_to_string(blk: &hir::Block) -> String 
blocks			pub mod blocks;
body			    pub fn body(self) -> ast::ExprId 
bogus_code_extent			    pub fn bogus_code_extent(&self, e: CodeExtentData) -> CodeExtent 
boo			    fn boo(&self) -> <Self as Foo>::A;
boo			    fn boo(&self) -> usize { 42 }
bopen			    pub fn bopen(&mut self) -> io::Result<()> 
borrow			    pub fn borrow(self) -> Ref<'a, ty::Tables<'tcx>> 
borrow			    fn borrow(&mut self,
borrow			    fn borrow<'a>(&'a self) -> &'a BareFnTy<'lcx> 
borrow			    fn borrow<'a>(&'a self) -> &'a Region 
borrow			    fn borrow<'a>(&'a self) -> &'a TypeVariants<'lcx> 
borrow			    fn borrow<'a>(&'a self) -> &'a [ExistentialPredicate<'lcx>] 
borrow			    fn borrow<'a>(&'a self) -> &'a [Kind<'lcx>] 
borrow			    fn borrow<'a>(&'a self) -> &'a [Ty<'lcx>] 
borrow_expr			    fn borrow_expr(&mut self,
borrow_mut			    pub fn borrow_mut(self) -> RefMut<'a, ty::Tables<'tcx>> 
borrowck_fake_infer_ctxt			    pub fn borrowck_fake_infer_ctxt(self, param_env: ty::ParameterEnvironment<'gcx>)
borrowck_stats			    pub fn borrowck_stats(&self) -> bool { self.opts.debugging_opts.borrowck_stats }
both			    pub fn both() -> Self 
bounds_to_string			pub fn bounds_to_string(bounds: &[hir::TyParamBound]) -> String 
boxes			    fn boxes(&mut self) -> &mut Vec<pp::Breaks> 
break_offset_if_not_bol			    pub fn break_offset_if_not_bol(&mut self, n: usize, off: isize) -> io::Result<()> 
bug_fmt			pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! 
build			    pub fn build(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) 
build_configuration			pub fn build_configuration(sess: &Session,
build_dep_graph			    pub fn build_dep_graph(&self) -> bool 
build_nodeid_to_index			fn build_nodeid_to_index(decl: Option<&hir::FnDecl>,
build_session			pub fn build_session(sopts: config::Options,
build_session_			pub fn build_session_(sopts: config::Options,
build_session_options_and_crate_config			pub fn build_session_options_and_crate_config(matches: &getopts::Matches)
build_session_with_codemap			pub fn build_session_with_codemap(sopts: config::Options,
build_target_config			pub fn build_target_config(opts: &Options, sp: &Handler) -> Config 
build_to			        fn build_to(from: P<hir::Ty>,
builtin			pub mod builtin;
builtin_deref			    pub fn builtin_deref(&self, explicit: bool, pref: ty::LvaluePreference)
builtin_index			    pub fn builtin_index(&self) -> Option<Ty<'tcx>> 
bytes			    pub fn bytes(self) -> u64 
cache			mod cache;
cake			    fn cake();
calculate			pub fn calculate(sess: &session::Session) 
calculate_dtorck			    fn calculate_dtorck(&'gcx self, tcx: TyCtxt) 
calculate_predecessors			fn calculate_predecessors(mir: &Mir) -> IndexVec<BasicBlock, Vec<BasicBlock>> 
calculate_sized_constraint_inner			    fn calculate_sized_constraint_inner(&self,
calculate_type			fn calculate_type(sess: &session::Session,
call			    fn call<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
call_foo			fn call_foo(thing: Box<Trait>) 
call_foo			fn call_foo(x: Box<Trait>) 
call_site_extent			    pub fn call_site_extent(&self, fn_id: ast::NodeId, body_id: ast::NodeId) -> CodeExtent 
can_equate			    pub fn can_equate<T>(&self, a: &T, b: &T) -> UnitResult<'tcx>
can_have_local_instance			    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool 
can_have_local_instance			    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool;
can_sub_types			    pub fn can_sub_types(&self,
can_type_implement_copy			    pub fn can_type_implement_copy<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
can_use_global_caches			    fn can_use_global_caches(&self) -> bool 
candidate_from_obligation			    fn candidate_from_obligation<'o>(&mut self,
candidate_from_obligation_no_cache			    fn candidate_from_obligation_no_cache<'o>(&mut self,
candidate_should_be_dropped_in_favor_of			    fn candidate_should_be_dropped_in_favor_of<'o>(
cannot_hold			    pub fn cannot_hold(&self) -> bool 
canonicalize			    fn canonicalize(path: Option<PathBuf>) -> Option<PathBuf> 
capture_components			    fn capture_components(&self, ty: Ty<'tcx>) -> Vec<Component<'tcx>> 
carries_unsafe_attr			    pub fn carries_unsafe_attr(&self) -> Option<UnsafeGeneric> 
cast			pub mod cast;
cat_captured_var			    fn cat_captured_var(&mut self,
cat_def			    pub fn cat_def(&self,
cat_deref			    fn cat_deref<N:ast_node>(&self,
cat_deref_common			    fn cat_deref_common<N:ast_node>(&self,
cat_downcast			    pub fn cat_downcast<N:ast_node>(&self,
cat_expr			    pub fn cat_expr(&self, expr: &hir::Expr) -> McResult<cmt<'tcx>> 
cat_expr_autoderefd			    pub fn cat_expr_autoderefd(&self,
cat_expr_unadjusted			    pub fn cat_expr_unadjusted(&self, expr: &hir::Expr) -> McResult<cmt<'tcx>> 
cat_field			    pub fn cat_field<N:ast_node>(&self,
cat_imm_interior			    pub fn cat_imm_interior<N:ast_node>(&self,
cat_index			    pub fn cat_index<N:ast_node>(&self,
cat_pattern			    pub fn cat_pattern<F>(&self, cmt: cmt<'tcx>, pat: &hir::Pat, mut op: F) -> McResult<()>
cat_pattern_			    fn cat_pattern_<F>(&self, cmt: cmt<'tcx>, pat: &hir::Pat, op: &mut F) -> McResult<()>
cat_rvalue			    pub fn cat_rvalue(&self,
cat_rvalue_node			    pub fn cat_rvalue_node(&self,
cat_tup_field			    pub fn cat_tup_field<N:ast_node>(&self,
cat_upvar			    fn cat_upvar(&self,
cause			    fn cause(&self) -> &ObligationCause<'tcx> 
cause			    fn cause(&self) -> &ObligationCause<'tcx>;
cause			    fn cause(&self) -> &ObligationCause<'tcx> 
cause			    fn cause(&mut self, code: traits::ObligationCauseCode<'tcx>) -> traits::ObligationCause<'tcx> 
cbox			    pub fn cbox(&mut self, u: usize) -> io::Result<()> 
cfg			pub mod cfg;
characteristic_def_id_of_type			pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> 
check			    pub fn check(&self, a: DefId, b: DefId) -> Option<bool> 
check_and_note_conflicting_crates			    fn check_and_note_conflicting_crates(&self,
check_arm			    fn check_arm(&mut self, _: &EarlyContext, _: &ast::Arm) { }
check_arm			    fn check_arm(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Arm) { }
check_arm			fn check_arm<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, arm: &'tcx hir::Arm) 
check_ast_crate			pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) 
check_attr			pub mod check_attr;
check_attribute			    fn check_attribute(&self, attr: &ast::Attribute, target: Target) 
check_attribute			    fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }
check_attribute			    fn check_attribute(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx ast::Attribute) { }
check_block			    fn check_block(&mut self, _: &EarlyContext, _: &ast::Block) { }
check_block			    fn check_block(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }
check_block_post			    fn check_block_post(&mut self, _: &EarlyContext, _: &ast::Block) { }
check_block_post			    fn check_block_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Block) { }
check_candidate_cache			    fn check_candidate_cache(&mut self,
check_crate			pub fn check_crate(sess: &Session, krate: &ast::Crate) 
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_crate			    fn check_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }
check_crate			    fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_crate			pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_crate			pub fn check_crate(krate: &hir::Crate,
check_crate_post			    fn check_crate_post(&mut self, _: &EarlyContext, _: &ast::Crate) { }
check_crate_post			    fn check_crate_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Crate) { }
check_decl			    fn check_decl(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Decl) { }
check_def_id			    fn check_def_id(&mut self, def_id: DefId) 
check_duplicate			    pub fn check_duplicate(&self, key: &ty::Predicate<'tcx>) -> bool 
check_duplicate_trait			    pub fn check_duplicate_trait(&self, data: &ty::PolyTraitPredicate<'tcx>) -> bool 
check_edge			    fn check_edge(&self,
check_evaluation_cache			    fn check_evaluation_cache(&self, trait_ref: ty::PolyTraitRef<'tcx>)
check_expr			    fn check_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }
check_expr			    fn check_expr(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }
check_expr			fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) 
check_expr_post			    fn check_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }
check_expr_post			    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Expr) { }
check_fn			    fn check_fn(&mut self, _: &EarlyContext,
check_fn			    fn check_fn(&mut self,
check_fn_post			    fn check_fn_post(&mut self, _: &EarlyContext,
check_fn_post			    fn check_fn_post(&mut self,
check_foreign_item			    fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }
check_foreign_item			    fn check_foreign_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ForeignItem) { }
check_foreign_item_post			    fn check_foreign_item_post(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }
check_foreign_item_post			    fn check_foreign_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ForeignItem) { }
check_generics			    fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }
check_generics			    fn check_generics(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Generics) { }
check_ident			    fn check_ident(&mut self, _: &EarlyContext, _: Span, _: ast::Ident) { }
check_if_label_shadows_lifetime			    fn check_if_label_shadows_lifetime<'a>(sess: &'a Session,
check_impl_item			    fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }
check_impl_item			    fn check_impl_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ImplItem) { }
check_impl_item_post			    fn check_impl_item_post(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }
check_impl_item_post			    fn check_impl_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::ImplItem) { }
check_inline			    fn check_inline(&self, attr: &ast::Attribute, target: Target) 
check_item			    fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }
check_item			    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Item) { }
check_item_post			    fn check_item_post(&mut self, _: &EarlyContext, _: &ast::Item) { }
check_item_post			    fn check_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Item) { }
check_lifetime			    fn check_lifetime(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }
check_lifetime			    fn check_lifetime(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Lifetime) { }
check_lifetime_def			    fn check_lifetime_def(&mut self, _: &EarlyContext, _: &ast::LifetimeDef) { }
check_lifetime_def			    fn check_lifetime_def(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::LifetimeDef) { }
check_lifetime_def_for_shadowing			    fn check_lifetime_def_for_shadowing(&self,
check_lifetime_defs			    fn check_lifetime_defs(&mut self, old_scope: Scope, lifetimes: &[hir::LifetimeDef]) 
check_lint_name			fn check_lint_name(lint_cx: &LintStore,
check_lint_name_attribute			fn check_lint_name_attribute(cx: &LateContext, attr: &ast::Attribute) 
check_lint_name_cmdline			fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,
check_local			    fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }
check_local			    fn check_local(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Local) { }
check_local			fn check_local<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, local: &'tcx hir::Local) 
check_lvalue			    fn check_lvalue(&mut self, expr: &'tcx Expr) 
check_missing_stability			    fn check_missing_stability(&self, id: NodeId, span: Span) 
check_mod			    fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }
check_mod			    fn check_mod(&mut self,
check_mod_post			    fn check_mod_post(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }
check_mod_post			    fn check_mod_post(&mut self,
check_name			    fn check_name(&mut self, _: &LateContext, _: Span, _: ast::Name) { }
check_nightly_options			    pub fn check_nightly_options(matches: &getopts::Matches, flags: &[RustcOptGroup]) 
check_pat			    fn check_pat(&mut self, _: &EarlyContext, _: &ast::Pat) { }
check_pat			    fn check_pat(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Pat) { }
check_path			    fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }
check_path			    fn check_path(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Path, _: ast::NodeId) { }
check_path_list_item			    fn check_path_list_item(&mut self, _: &EarlyContext, _: &ast::PathListItem) { }
check_repr			    fn check_repr(&self, attr: &ast::Attribute, target: Target) 
check_ret			    fn check_ret(&self,
check_stability			    pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) 
check_stmt			    fn check_stmt(&mut self, _: &EarlyContext, _: &ast::Stmt) { }
check_stmt			    fn check_stmt(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Stmt) { }
check_struct_def			    fn check_struct_def(&mut self, _: &EarlyContext,
check_struct_def			    fn check_struct_def(&mut self,
check_struct_def_post			    fn check_struct_def_post(&mut self, _: &EarlyContext,
check_struct_def_post			    fn check_struct_def_post(&mut self,
check_struct_field			    fn check_struct_field(&mut self, _: &EarlyContext, _: &ast::StructField) { }
check_struct_field			    fn check_struct_field(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::StructField) { }
check_trait_item			    fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }
check_trait_item			    fn check_trait_item(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::TraitItem) { }
check_trait_item_post			    fn check_trait_item_post(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }
check_trait_item_post			    fn check_trait_item_post(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::TraitItem) { }
check_transmute			    fn check_transmute(&self, span: Span, from: Ty<'gcx>, to: Ty<'gcx>, id: ast::NodeId) 
check_ty			    fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }
check_ty			    fn check_ty(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Ty) { }
check_unstable_api_usage			pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) 
check_unused_or_stable_features			pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
check_variant			    fn check_variant(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }
check_variant			    fn check_variant(&mut self,
check_variant_post			    fn check_variant_post(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }
check_variant_post			    fn check_variant_post(&mut self,
checked_add			    pub fn checked_add(self, offset: Size, dl: &TargetDataLayout) -> Option<Size> 
checked_mul			    pub fn checked_mul(self, count: u64, dl: &TargetDataLayout) -> Option<Size> 
clone			    fn clone(&self) -> MapEntry<'ast> 
clone			    fn clone(&self) -> LiveNode 
closure_base_def_id			    pub fn closure_base_def_id(&self, def_id: DefId) -> DefId 
closure_kind			    pub fn closure_kind(&self,
closure_kind			    fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind { bug!("closure_kind") }
closure_kind			    fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind;
closure_kind			    pub fn closure_kind(self, def_id: DefId) -> ty::ClosureKind 
closure_trait_ref			    fn closure_trait_ref(&mut self,
closure_trait_ref_and_return_type			    pub fn closure_trait_ref_and_return_type(self,
closure_trait_ref_unnormalized			    fn closure_trait_ref_unnormalized(&mut self,
closure_ty			    fn closure_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)
closure_type			    pub fn closure_type(&self,
closure_type			    pub fn closure_type(self,
closure_typer			    pub fn closure_typer(&self) -> &'cx InferCtxt<'cx, 'gcx, 'tcx> 
cmp			    pub fn cmp(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, other: &Self) -> Ordering 
cmt_			impl<'tcx> cmt_<'tcx> 
cmt_			pub struct cmt_<'tcx> 
code_extent_data			    pub fn code_extent_data(&self, e: CodeExtent) -> CodeExtentData 
code_stats			mod code_stats;
codemap			    pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap 
coherence			mod coherence;
coinductive_match			fn coinductive_match<'a,'c,'gcx,'tcx,I>(selcx: &mut SelectionContext<'a,'gcx,'tcx>,
coinductive_obligation			fn coinductive_obligation<'a,'gcx,'tcx>(selcx: &SelectionContext<'a,'gcx,'tcx>,
collect			    pub fn collect(&mut self, krate: &hir::Crate) 
collect_concrete_regions			    fn collect_concrete_regions(&self,
collect_constrained_late_bound_regions			    pub fn collect_constrained_late_bound_regions<T>(&self, value: &Binder<T>)
collect_error_for_expanding_node			    fn collect_error_for_expanding_node(&self,
collect_errors			    fn collect_errors(&self,
collect_external_language_items			    pub fn collect_external_language_items(&mut self) 
collect_item			    pub fn collect_item(&mut self, item_index: usize,
collect_language_items			pub fn collect_language_items(session: &Session,
collect_late_bound_regions			    fn collect_late_bound_regions<T>(&self, value: &Binder<T>, just_constraint: bool)
collect_local_language_items			    pub fn collect_local_language_items(&mut self, krate: &hir::Crate) 
collect_predicates_for_types			    fn collect_predicates_for_types(&mut self,
collect_referenced_late_bound_regions			    pub fn collect_referenced_late_bound_regions<T>(&self, value: &Binder<T>)
collect_regions			    pub fn collect_regions<T>(self,
collect_root			    pub fn collect_root(&mut self) 
collect_var_errors			    fn collect_var_errors(&self,
collector			mod collector;
combine			mod combine;
combine			    fn combine(&self, other: &RegionVidKey) -> RegionVidKey 
combine_fields			    fn combine_fields(&'a self, trace: TypeTrace<'tcx>)
combine_map			    fn combine_map(&self, t: CombineMapType) -> &RefCell<CombineMap<'tcx>> 
combine_vars			    pub fn combine_vars<F>(&self,
commasep_cmnt			    pub fn commasep_cmnt<T, F, G>(&mut self,
commasep_exprs			    pub fn commasep_exprs(&mut self, b: Breaks, exprs: &[hir::Expr]) -> io::Result<()> 
comments			    fn comments(&mut self) -> &mut Option<Vec<comments::Comment>> 
commit			    pub fn commit(&self, snapshot: RegionSnapshot) 
commit			    pub fn commit(&mut self, s: Snapshot) 
commit			    pub fn commit(&mut self, snapshot: ProjectionCacheSnapshot) 
commit_from			    fn commit_from(&self, snapshot: CombinedSnapshot) 
commit_if_ok			    pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E> where
commit_if_ok			    fn commit_if_ok<T, E, F>(&mut self, f: F) -> Result<T, E> where
commit_unconditionally			    pub fn commit_unconditionally<R, F>(&self, f: F) -> R where
common			    pub mod common;
compare			    fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T> where
compile_result_from_err_count			pub fn compile_result_from_err_count(err_count: usize) -> CompileResult 
complete			    fn complete(&mut self,
compute			    fn compute(&mut self, body: &hir::Expr) -> LiveNode 
compute			    pub fn compute(ty: Ty<'gcx>, infcx: &InferCtxt<'a, 'gcx, 'tcx>)
compute			    fn compute(&mut self, ty0: Ty<'tcx>) -> bool 
compute_components			    fn compute_components(&self, ty: Ty<'tcx>, out: &mut Vec<Component<'tcx>>) 
compute_id_range			    fn compute_id_range(&self, cfgidx: CFGIndex) -> (usize, usize) 
compute_id_range_for_fn_body			pub fn compute_id_range_for_fn_body<'v>(fk: FnKind<'v>,
compute_projection			    fn compute_projection(&mut self, data: ty::ProjectionTy<'tcx>) 
compute_trait_ref			    fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>) 
compute_uncached			    pub fn compute_uncached(ty: Ty<'gcx>,
config			pub mod config;
configure_llvm			unsafe fn configure_llvm(sess: &Session) 
configure_main			fn configure_main(this: &mut EntryContext) 
confirm_builtin_candidate			    fn confirm_builtin_candidate(&mut self,
confirm_builtin_unsize_candidate			    fn confirm_builtin_unsize_candidate(&mut self,
confirm_callable_candidate			fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(
confirm_candidate			fn confirm_candidate<'cx, 'gcx, 'tcx>(
confirm_candidate			    fn confirm_candidate(&mut self,
confirm_closure_candidate			fn confirm_closure_candidate<'cx, 'gcx, 'tcx>(
confirm_closure_candidate			    fn confirm_closure_candidate(&mut self,
confirm_default_impl_candidate			    fn confirm_default_impl_candidate(&mut self,
confirm_default_impl_object_candidate			    fn confirm_default_impl_object_candidate(&mut self,
confirm_fn_pointer_candidate			fn confirm_fn_pointer_candidate<'cx, 'gcx, 'tcx>(
confirm_fn_pointer_candidate			    fn confirm_fn_pointer_candidate(&mut self, obligation: &TraitObligation<'tcx>)
confirm_impl_candidate			fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(
confirm_impl_candidate			    fn confirm_impl_candidate(&mut self,
confirm_object_candidate			fn confirm_object_candidate<'cx, 'gcx, 'tcx>(
confirm_object_candidate			    fn confirm_object_candidate(&mut self,
confirm_param_candidate			    fn confirm_param_candidate(&mut self,
confirm_param_env_candidate			fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(
confirm_poly_trait_refs			    fn confirm_poly_trait_refs(&mut self,
confirm_projection_candidate			    fn confirm_projection_candidate(&mut self,
confirm_select_candidate			fn confirm_select_candidate<'cx, 'gcx, 'tcx>(
const_qualif			    pub mod const_qualif;
const_val			    pub mod const_val;
constituent_types_for_ty			    fn constituent_types_for_ty(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> 
constness			    pub fn constness(self) -> ast::Constness 
constraint_to_nodes			fn constraint_to_nodes(c: &Constraint) -> (Node, Node) 
construct			pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
construct			mod construct;
construct_free_substs			    pub fn construct_free_substs(self, def_id: DefId,
construct_graph			    fn construct_graph(&self) -> RegionGraph<'tcx> 
construct_parameter_environment			    pub fn construct_parameter_environment(self,
construct_var_data			    fn construct_var_data(&self) -> Vec<VarValue<'tcx>> 
consume			    fn consume(&mut self,
consume_expr			    pub fn consume_expr(&mut self, expr: &hir::Expr) 
consume_exprs			    fn consume_exprs(&mut self, exprs: &[hir::Expr]) 
consume_pat			    fn consume_pat(&mut self,
contains			    pub fn contains(&self, id: NodeId) -> bool 
contains			    pub fn contains(&self, other: &BoundRegion) -> bool 
contains_bindings			    pub fn contains_bindings(&self) -> bool 
contains_bindings_or_wild			    pub fn contains_bindings_or_wild(&self) -> bool 
contains_field_named			        fn contains_field_named(field: &ty::FieldDef,
contains_illegal_self_type_reference			    fn contains_illegal_self_type_reference(self,
contains_key			    pub fn contains_key(&self, k: &M::Key) -> bool 
contains_key			    pub fn contains_key(&self, key: &OutputType) -> bool 
contains_node			    pub fn contains_node(&self, node: &DepNode<D>) -> bool 
contains_ref_binding			    pub fn contains_ref_binding(&self) -> Option<hir::Mutability> 
contents			mod contents;
context			mod context;
context			mod context;
cookie			fn cookie() -> ! { \/\/ error: definition of an unknown language item: `cookie`
copy_conditions			    fn copy_conditions(&mut self, obligation: &TraitObligation<'tcx>)
copy_if_invalid			        fn copy_if_invalid(src: LiveNode, dst: &mut LiveNode) -> bool 
copy_or_move			fn copy_or_move<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
count			    pub fn count(&self) -> usize 
count_llvm_insns			    pub fn count_llvm_insns(&self) -> bool 
count_own_vtable_entries			    pub fn count_own_vtable_entries(self, trait_ref: ty::PolyTraitRef<'tcx>) -> usize 
crate_disambiguator			    fn crate_disambiguator(&self, cnum: CrateNum) -> Symbol;
crate_disambiguator			    fn crate_disambiguator(&self, cnum: CrateNum)
crate_disambiguator			    pub fn crate_disambiguator(self, cnum: CrateNum) -> Symbol 
crate_hash			    fn crate_hash(&self, cnum: CrateNum) -> Svh { bug!("crate_hash") }
crate_hash			    fn crate_hash(&self, cnum: CrateNum) -> Svh;
crate_name			    fn crate_name(&self, cnum: CrateNum) -> Symbol { bug!("crate_name") }
crate_name			    fn crate_name(&self, cnum: CrateNum) -> Symbol;
crate_name			    pub fn crate_name(self, cnum: CrateNum) -> Symbol 
crates			    fn crates(&self) -> Vec<CrateNum> { vec![] }
crates			    fn crates(&self) -> Vec<CrateNum>;
create			    fn create() -> u32 { 1 }
create			    fn create() -> u32 { 2 }
create			    fn create() -> u32;
create_and_enter			    pub fn create_and_enter<F, R>(s: &'tcx Session,
create_and_seed_worklist			fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
create_def			    fn create_def(&mut self, node_id: NodeId, data: DefPathData) -> DefIndex 
create_def_with_parent			    fn create_def_with_parent(&mut self,
create_def_with_parent			    pub fn create_def_with_parent(&mut self,
create_dir_racy			pub fn create_dir_racy(path: &Path) -> io::Result<()> 
create_item_scope_if_needed			    fn create_item_scope_if_needed(&mut self, id: ast::NodeId) 
cstore			    pub mod cstore;
cur_cmnt_and_lit			    fn cur_cmnt_and_lit(&mut self) -> &mut ast_pp::CurrentCommentAndLiteral 
current_level			    fn current_level(&self, lint: &'static Lint) -> Level 
current_node			    fn current_node(&self) -> Option<OpenNode> 
custom_coerce_unsized_kind			    fn custom_coerce_unsized_kind(&self, def: DefId)
custom_coerce_unsized_kind			    pub fn custom_coerce_unsized_kind(self, did: DefId) -> adjustment::CustomCoerceUnsized 
dataflow			    pub mod dataflow;
dead			    pub mod dead;
debug			pub mod debug;
decl			    fn decl(&mut self, decl: &hir::Decl, pred: CFGIndex) -> CFGIndex 
decl			    pub fn decl(self) -> &'a FnDecl 
decl_without_init			    fn decl_without_init(&mut self,
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Svh, D::Error> 
decode			    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Kind<'tcx>, D::Error> 
def			pub mod def;
def			    pub fn def(&self) -> Def 
def_collector			mod def_collector;
def_id			    pub fn def_id(&self) -> DefId 
def_id			pub mod def_id;
def_id			    pub fn def_id(&self) -> DefId 
def_id			    pub fn def_id(&self) -> DefId 
def_id			    pub fn def_id(&self) -> DefId 
def_id			    fn def_id(&mut self, did: DefId) 
def_id_is_transmute			    fn def_id_is_transmute(&self, def_id: DefId) -> bool 
def_id_represents_local_inlined_item			    fn def_id_represents_local_inlined_item(&self, def_id: DefId) -> bool 
def_index_for_def_key			    pub fn def_index_for_def_key(&self, key: DefKey) -> Option<DefIndex> 
def_index_for_def_key			    pub fn def_index_for_def_key(&self, def_key: DefKey) -> Option<DefIndex> 
def_index_for_def_key			    fn def_index_for_def_key(&self,
def_index_for_def_key			    pub fn def_index_for_def_key(self, krate: CrateNum, key: DefKey)
def_key			    pub fn def_key(&self, index: DefIndex) -> DefKey 
def_key			    pub fn def_key(&self, def_id: DefId) -> DefKey 
def_key			    fn def_key(&self, def: DefId) -> hir_map::DefKey { bug!("def_key") }
def_key			    fn def_key(&self, def: DefId) -> hir_map::DefKey;
def_key			    pub fn def_key(self, id: DefId) -> ast_map::DefKey 
def_path			    pub fn def_path(&self, index: DefIndex) -> DefPath 
def_path			    pub fn def_path(&self, def_id: DefId) -> DefPath 
def_path			    pub fn def_path(self, id: DefId) -> ast_map::DefPath 
def_path			    pub fn def_path(&mut self, def_path: &ast_map::DefPath) 
def_path_from_id			    pub fn def_path_from_id(&self, id: NodeId) -> Option<DefPath> 
def_span			    fn def_span(&self, sess: &Session, def: DefId) -> Span { bug!("def_span") }
def_span			    fn def_span(&self, sess: &Session, def: DefId) -> Span;
def_span			    pub fn def_span(self, def_id: DefId) -> Span 
default			    pub fn default(&self, ty: Ty<'tcx>) -> Option<type_variable::Default<'tcx>> 
default			    pub fn default(&self, vid: ty::TyVid) -> Option<Default<'tcx>> 
default			    fn default() -> Self 
default			    fn default() -> ErrorOutputType 
default			    fn default() -> TargetDataLayout 
default_configuration			pub fn default_configuration(sess: &Session) -> ast::CrateConfig 
default_decode			    fn default_decode<D: Decoder>(d: &mut D) -> Result<CrateNum, D::Error> 
default_encode			    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
default_encode			    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
default_lib_output			pub fn default_lib_output() -> CrateType 
defid_for_inlined_node			    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId> 
defid_for_inlined_node			    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId>;
define			    fn define(&mut self, writer: LiveNode, var: Variable) 
define_bindings_in_arm_pats			    fn define_bindings_in_arm_pats(&mut self, pat: Option<&hir::Pat>, succ: LiveNode)
define_bindings_in_pat			    fn define_bindings_in_pat(&mut self, pat: &hir::Pat, succ: LiveNode)
definition			                                                                trait definition for {} refers to \\
definition			                                                     trait definition for {} must have a value, \\
definitions			    fn definitions(&mut self) -> &mut Definitions;
definitions			pub mod definitions;
defs			    pub fn defs(self, tcx: TyCtxt<'a, 'gcx, 'tcx>, name: Name, kind: ty::AssociatedKind)
delay_span_bug			    pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
delegate_consume			    fn delegate_consume(&mut self,
dep_graph			pub mod dep_graph;
dep_kind			    fn dep_kind(&self, cnum: CrateNum) -> DepKind { bug!("is_explicitly_linked") }
dep_kind			    fn dep_kind(&self, cnum: CrateNum) -> DepKind;
dep_node			mod dep_node;
dep_node			    fn dep_node(&self, id0: NodeId) -> DepNode<DefId> 
dep_node			    fn dep_node(&self) -> DepNode<DefId> 
dep_node			    pub fn dep_node(&self) -> DepNode<DefId> 
dep_tracking			    impl<'a> dep_tracking::DepTrackingHash for 
dep_tracking			mod dep_tracking 
dep_tracking_hash			            pub fn dep_tracking_hash(&self) -> u64 
dep_tracking_map			mod dep_tracking_map;
dependency_format			    pub mod dependency_format;
deprecation			    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!("deprecation") }
deprecation			    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;
deref			    pub fn deref(self) -> Lvalue<'tcx> 
deref			    fn deref(&self) -> &Self::Target 
deref			    fn deref(&self) -> &[T] 
derive_registrar_fn			    fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>
derive_registrar_fn			    fn derive_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;
derived_cause			    pub fn derived_cause(&self,
desc			    fn desc(&self) -> &'static str 
descr			    pub fn descr(&self) -> &'static str 
describe_def			    fn describe_def(&self, def: DefId) -> Option<Def> { bug!("describe_def") }
describe_def			    fn describe_def(&self, def: DefId) -> Option<Def>;
description			    pub fn description(&self) -> &'static str 
descriptive_string			    pub fn descriptive_string(&self, tcx: TyCtxt) -> String 
descriptive_variant			    pub fn descriptive_variant(&self) -> &str 
destructor			    pub fn destructor(&self) -> Option<DefId> 
determine_pat_move_mode			    fn determine_pat_move_mode(&mut self,
deterministic_hash			    pub fn deterministic_hash(&self, tcx: TyCtxt) -> u64 
deterministic_hash_to			    pub fn deterministic_hash_to<H: Hasher>(&self, tcx: TyCtxt, state: &mut H) 
diag_span_note_once			    pub fn diag_span_note_once<'a, 'b>(&'a self,
diagnostic			    fn diagnostic(&self) -> &errors::Handler 
diagnostic			    pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler 
diagnostics			pub mod diagnostics;
disambiguator			    fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> { None }
disr_incr			    fn disr_incr<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, val: Option<Disr>)
dominates			    pub fn dominates(&self, other: &Location, dominators: &Dominators<BasicBlock>) -> bool 
dominators			    pub fn dominators(&self) -> Dominators<BasicBlock> 
dot			impl<'a> dot::GraphWalk<'a> for &'a cfg::CFG 
dot::GraphWalk for ConstraintGraph			impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> 
dot::GraphWalk for LabelledCFG			impl<'a, 'ast> dot::GraphWalk<'a> for LabelledCFG<'a, 'ast>
dot::Labeller for ConstraintGraph			impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> 
dot::Labeller for LabelledCFG			impl<'a, 'ast> dot::Labeller<'a> for LabelledCFG<'a, 'ast> 
downcast			    unsafe fn downcast<T>(self, tag: usize) -> Option<&'tcx T> 
drain_fulfillment_cx_or_panic			    pub fn drain_fulfillment_cx_or_panic<T>(&self,
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) { debug!("<<"); }
dtor_kind			    pub fn dtor_kind(&self) -> DtorKind 
dummy			    pub fn dummy(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> TypeTrace<'tcx> 
dummy			    pub fn dummy() -> ObligationCause<'tcx> 
dump_constraints			    fn dump_constraints(&self, subject: ast::NodeId) 
dump_region_constraints_to			fn dump_region_constraints_to<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
duration_to_secs_str			pub fn duration_to_secs_str(dur: Duration) -> String 
dylib_dependency_formats			    fn dylib_dependency_formats(&self, cnum: CrateNum)
each_binding			    pub fn each_binding<F>(&self, mut f: F)
each_bit			    fn each_bit<F>(&self, words: &[usize], mut f: F) -> bool where
each_bit_for_node			    pub fn each_bit_for_node<F>(&self, e: EntryOrExit, cfgidx: CFGIndex, f: F) -> bool where
each_bit_on_entry			    pub fn each_bit_on_entry<F>(&self, id: ast::NodeId, mut f: F) -> bool where
each_encl_scope			    pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent, &CodeExtent) 
each_gen_bit			    pub fn each_gen_bit<F>(&self, id: ast::NodeId, mut f: F) -> bool where
each_rvalue_scope			    pub fn each_rvalue_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) 
each_var_scope			    pub fn each_var_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) 
early_error			pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! 
early_lint			    fn early_lint(&self, early_lint: EarlyLint) 
early_warn			pub fn early_warn(output: config::ErrorOutputType, msg: &str) 
edge_label			    fn edge_label(&self, e: &Edge<'a>) -> dot::LabelText<'a> 
edge_label			    fn edge_label(&self, e: &Edge) -> dot::LabelText 
edge_to_nodes			fn edge_to_nodes(e: &Edge) -> (Node, Node) 
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> 
edges			mod edges;
edges			    pub fn edges(&self) -> Vec<(&DepNode<D>,&DepNode<D>)> 
edges			    fn edges(&self) -> dot::Edges<Edge<'tcx>> 
effect			    pub mod effect;
elaborate_predicates			pub fn elaborate_predicates<'cx, 'gcx, 'tcx>(
elaborate_trait_ref			pub fn elaborate_trait_ref<'cx, 'gcx, 'tcx>(
elaborate_trait_refs			pub fn elaborate_trait_refs<'cx, 'gcx, 'tcx>(
elem			    pub fn elem(self, elem: LvalueElem<'tcx>) -> Lvalue<'tcx> 
empty			    pub fn empty(&self) -> bool 
empty			    pub fn empty() -> Generics 
empty			    fn empty() -> TraitObligationStackList<'o,'tcx> 
empty			    pub fn empty() -> Tables<'tcx> 
empty			    pub fn empty() -> InstantiatedPredicates<'tcx> 
empty			    pub fn empty<'a>() -> &'a Slice<T> 
empty_parameter_environment			    pub fn empty_parameter_environment(self) -> ParameterEnvironment<'tcx> 
enabled			    pub fn enabled(&self) -> bool 
encl_scope			    pub fn encl_scope(&self, id: CodeExtent) -> CodeExtent 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode			    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode			    fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> 
encode_metadata			    fn encode_metadata<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
enqueue			    pub fn enqueue(&self, message: &DepMessage) 
enqueue			    pub fn enqueue(&self, message: DepMessage) 
enqueue_enabled			    fn enqueue_enabled(&self, message: DepMessage) 
enter			    pub fn enter<F, R>(&'tcx mut self, f: F) -> R
enter			    pub fn enter<'a, 'gcx: 'tcx, 'tcx, F, R>(gcx: &'a GlobalCtxt<'gcx>,
enter_attrs			    fn enter_attrs(&mut self, attrs: &'a [ast::Attribute]) 
enter_attrs			    fn enter_attrs(&mut self, attrs: &'tcx [ast::Attribute]) 
enter_attrs			    fn enter_attrs(&mut self, attrs: &'tcx [ast::Attribute]);
enter_global			    pub fn enter_global<'gcx, F, R>(gcx: GlobalCtxt<'gcx>, f: F) -> R
enter_lint_attrs			    fn enter_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }
enter_lint_attrs			    fn enter_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) { }
enter_local			    pub fn enter_local<F, R>(&self, arenas: &'tcx CtxtArenas<'tcx>, f: F) -> R
entry			    pub mod entry;
entry_count			    fn entry_count(&self) -> usize 
entry_point_type			fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType 
enum_repr_type			    pub fn enum_repr_type(self, opt_hint: Option<&attr::ReprAttr>) -> attr::IntType 
enumerate_and_adjust			    fn enumerate_and_adjust(self, expected_len: usize, gap_pos: Option<usize>)
env_deref			    fn env_deref(&self,
eq			    fn eq(&self, other: &LintId) -> bool 
eq			            fn eq(&self, other: &Self) -> bool 
eq			    fn eq(&self, other: &Interned<'tcx, Slice<T>>) -> bool 
eq			    fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool 
eq			    fn eq(&self, other: &Self) -> bool { self as *const _ == other as *const _ }
eq			    fn eq(&self, other: &Slice<T>) -> bool 
eq			    fn eq(&self, other: &TyS<'tcx>) -> bool 
eq_impl_headers			    pub fn eq_impl_headers(&self,
eq_trait_refs			    pub fn eq_trait_refs(&self,
eq_types			    pub fn eq_types(&self,
equality_predicate			    pub fn equality_predicate(&self,
equate			    pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'gcx, 'tcx> 
equate			    pub fn equate<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)
equate			mod equate;
erase_late_bound_regions			    pub fn erase_late_bound_regions<T>(self, value: &Binder<T>) -> T
erase_late_bound_regions_and_normalize			    pub fn erase_late_bound_regions_and_normalize<T>(self, value: &ty::Binder<T>)
erase_regions			    pub fn erase_regions<T>(self, value: &T) -> T
erase_self_ty			    pub fn erase_self_ty(tcx: TyCtxt<'a, 'gcx, 'tcx>,
err			    pub fn err(&self, msg: &str) 
err_count			    pub fn err_count(&self) -> usize 
error			    fn error(&mut self, key: ty::ProjectionTy<'tcx>) 
error			    fn error<'a,'gcx>(tcx: TyCtxt<'a,'gcx,'tcx>) -> Self 
error			pub mod error;
error_reporting			pub mod error_reporting;
error_reporting			mod error_reporting;
escapes_depth			    pub fn escapes_depth(&self, depth: u32) -> bool 
evaluate_candidate			    fn evaluate_candidate<'o>(&mut self,
evaluate_obligation			    pub fn evaluate_obligation(&mut self,
evaluate_obligation_conservatively			    pub fn evaluate_obligation_conservatively(&mut self,
evaluate_obligation_recursively			    fn evaluate_obligation_recursively<'o>(&mut self,
evaluate_predicate_recursively			    fn evaluate_predicate_recursively<'o>(&mut self,
evaluate_predicates_recursively			    fn evaluate_predicates_recursively<'a,'o,I>(&mut self,
evaluate_stack			    fn evaluate_stack<'o>(&mut self,
evaluate_where_clause			    fn evaluate_where_clause<'o>(&mut self,
exit_attrs			    fn exit_attrs(&mut self, attrs: &'a [ast::Attribute]) 
exit_attrs			    fn exit_attrs(&mut self, attrs: &'tcx [ast::Attribute]) 
exit_attrs			    fn exit_attrs(&mut self, attrs: &'tcx [ast::Attribute]);
exit_lint_attrs			    fn exit_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }
exit_lint_attrs			    fn exit_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) { }
expand_givens			    fn expand_givens(&self, graph: &RegionGraph) 
expand_node			    fn expand_node(&self,
expansion			    fn expansion(&self, free_regions: &FreeRegionMap, var_values: &mut [VarValue<'tcx>]) 
expect_expr			    pub fn expect_expr(&self, id: NodeId) -> &'ast Expr 
expect_foreign_item			    pub fn expect_foreign_item(&self, id: NodeId) -> &'ast ForeignItem 
expect_full_def			    fn expect_full_def(&mut self, id: NodeId) -> Def 
expect_impl_item			    pub fn expect_impl_item(&self, id: NodeId) -> &'ast ImplItem 
expect_inlined_item			    pub fn expect_inlined_item(&self, id: NodeId) -> &'ast InlinedItem 
expect_item			    pub fn expect_item(&self, id: NodeId) -> &'ast Item 
expect_trait_item			    pub fn expect_trait_item(&self, id: NodeId) -> &'ast TraitItem 
expect_variant			    pub fn expect_variant(&self, id: NodeId) -> &'ast Variant 
expect_variant_data			    pub fn expect_variant_data(&self, id: NodeId) -> &'ast VariantData 
expect_variant_def			    pub fn expect_variant_def(self, def: Def) -> &'tcx VariantDef 
expected_found			pub fn expected_found<'a, 'gcx, 'tcx, R, T>(relation: &mut R,
expected_found_bool			pub fn expected_found_bool<T>(a_is_expected: bool,
expected_found_str			    fn expected_found_str<T: fmt::Display + TypeFoldable<'tcx>>(
explain_span			        fn explain_span<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
export_macros			    fn export_macros(&self, cnum: CrateNum) { bug!("export_macros") }
export_macros			    fn export_macros(&self, cnum: CrateNum);
exported_symbols			    fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId> { bug!("exported_symbols") }
exported_symbols			    fn exported_symbols(&self, cnum: CrateNum) -> Vec<DefId>;
expr			    fn expr(&mut self, expr: &hir::Expr, pred: CFGIndex) -> CFGIndex 
expr			    fn expr(&mut self, span: Span, node: hir::Expr_, attrs: ThinVec<Attribute>) -> hir::Expr 
expr			    pub fn expr(&self, id: ExprId) -> &'ast Expr 
expr			    pub fn expr(&self, id: ExprId) -> &Expr 
expr			    pub fn expr(id: NodeId) -> MethodCall 
expr_block			    fn expr_block(&mut self, b: P<hir::Block>, attrs: ThinVec<Attribute>) -> hir::Expr 
expr_break			    fn expr_break(&mut self, span: Span, attrs: ThinVec<Attribute>) -> P<hir::Expr> 
expr_call			    fn expr_call(&mut self, span: Span, e: P<hir::Expr>, args: hir::HirVec<hir::Expr>)
expr_id			    pub fn expr_id(&self) -> ExprId 
expr_ident			    fn expr_ident(&mut self, span: Span, id: Name, binding: NodeId) -> hir::Expr 
expr_is_lval			    pub fn expr_is_lval(self, expr: &hir::Expr) -> bool 
expr_match			    fn expr_match(&mut self,
expr_mut_addr_of			    fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr 
expr_requires_semi_to_be_stmt			fn expr_requires_semi_to_be_stmt(e: &hir::Expr) -> bool 
expr_span			    pub fn expr_span(self, id: NodeId) -> Span 
expr_std_path			    fn expr_std_path(&mut self,
expr_std_struct			    fn expr_std_struct(&mut self,
expr_to_string			pub fn expr_to_string(e: &hir::Expr) -> String 
expr_tuple			    fn expr_tuple(&mut self, sp: Span, exprs: hir::HirVec<hir::Expr>) -> P<hir::Expr> 
expr_ty			    pub fn expr_ty(&self, ex: &hir::Expr) -> Ty<'tcx> 
expr_ty			    fn expr_ty(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> 
expr_ty			    pub fn expr_ty(&self, expr: &hir::Expr) -> Ty<'tcx> 
expr_ty_adjusted			    pub fn expr_ty_adjusted(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> 
expr_ty_adjusted			    fn expr_ty_adjusted(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> 
expr_ty_adjusted			    pub fn expr_ty_adjusted(&self, expr: &hir::Expr) -> Ty<'tcx> 
expr_ty_adjusted_opt			    pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr) -> Option<Ty<'tcx>> 
expr_ty_opt			    pub fn expr_ty_opt(&self, expr: &hir::Expr) -> Option<Ty<'tcx>> 
expr_use_visitor			    pub mod expr_use_visitor; \/\/ STAGE0: increase glitch immunity
expression_label			    fn expression_label(ex: &hir::Expr) -> Option<(ast::Name, Span)> 
exprs			    fn exprs<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
extend			    pub fn extend(krate: &'ast Crate,
extend			    pub fn extend(parent_node: NodeId,
extend			    fn extend<I: IntoIterator<Item=Box<for <'a> MirMapPass<'a>>>>(&mut self, it: I) 
extend			    pub fn extend<I>(&mut self, dl: &TargetDataLayout,
extend_to			    pub fn extend_to<FR, FT>(&self,
extends			    pub fn extends(self, other: ty::ClosureKind) -> bool 
extension			    pub fn extension(&self) -> &'static str 
extern_crate			    fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate> { bug!("extern_crate") }
extern_crate			    fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> { None }
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum>;
external			    fn external(attr: Deprecation) -> DeprecationEntry 
extract			pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> 
extract_all_region_names			    fn extract_all_region_names(&self) -> HashSet<ast::Name> 
extract_anon_nums_and_names			    fn extract_anon_nums_and_names(&self, same_regions: &SameRegions)
extract_labels			fn extract_labels(ctxt: &mut LifetimeContext, b: hir::ExprId) 
f			    fn f<'a>(x: &'a i32) { \/\/ error: lifetime name `'a` shadows a lifetime
f			    fn f<'b>(x: &'b i32) { \/\/ ok!
f			fn f() {} \/\/ error: multiple functions with a #[main] attribute
f			fn f() {} \/\/ ok!
f			fn f(argc: isize, argv: *const *const u8) -> isize {}
f			unsafe fn f() { return; } \/\/ This is the unsafe code
f			unsafe fn f() { return; }
fast_reject			pub mod fast_reject;
fast_reject_trait_refs			    fn fast_reject_trait_refs(&mut self,
fatal			    pub fn fatal(&self, msg: &str) -> ! 
field			    fn field(&mut self, name: Name, expr: P<hir::Expr>, span: Span) -> hir::Field 
field			    pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> 
field_index_by_increasing_offset			    pub fn field_index_by_increasing_offset<'b>(&'b self) -> impl iter::Iterator<Item=usize>+'b 
field_named			    pub fn field_named(&self, name: ast::Name) -> &FieldDef 
fields			    pub fn fields(&self) -> &[StructField] 
filesearch			pub mod filesearch;
filestem			    pub fn filestem(&self) -> String 
fill_item			    fn fill_item<FR, FT>(substs: &mut Vec<Kind<'tcx>>,
fill_single			    fn fill_single<FR, FT>(substs: &mut Vec<Kind<'tcx>>,
filter_negative_impls			    fn filter_negative_impls(&self, candidate: SelectionCandidate<'tcx>)
filter_to_traits			    pub fn filter_to_traits(self) -> FilterToTraits<Self> 
filtered_mut			    fn filtered_mut(&'a mut self, sty: SimplifiedType)
finalize_incr_comp_session			    pub fn finalize_incr_comp_session(&self, new_directory_path: PathBuf) 
find			    pub fn find(&self, id: NodeId) -> Option<Node<'ast>> 
find_entry			    fn find_entry(&self, id: NodeId) -> Option<MapEntry<'ast>> 
find_entry_point			pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) 
find_field_named			    pub fn find_field_named(&self,
find_first_mod_parent			        fn find_first_mod_parent<'a>(map: &'a Map, mut id: NodeId) -> Option<(NodeId, Name)> 
find_item			fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) 
find_libdir			fn find_libdir(sysroot: &Path) -> Cow<'static, str> 
find_lint			    fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)
find_live			fn find_live<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
find_loop_scope			    fn find_loop_scope(&self,
find_method			pub fn find_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
find_nonrepresentable			        fn find_nonrepresentable<'a, 'tcx, It>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
find_reachable			pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
find_scope			    fn find_scope(&self,
find_similar_impl_candidates			    fn find_similar_impl_candidates(&self,
finish			    pub fn finish(self) -> W 
fit_signed			    pub fn fit_signed(x: i64) -> Integer 
fit_unsigned			    pub fn fit_unsigned(x: u64) -> Integer 
fix_windows_verbatim_for_gcc			pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf 
fixed_point			    fn fixed_point(&mut self,
flag			    pub fn flag(a: S, b: S, c: S) -> R 
flag_s			    pub fn flag_s(a: S, b: S, c: S) -> R 
flag_ubnr			    pub fn flag_ubnr(a: S, b: S, c: S) -> R 
flagmulti			    pub fn flagmulti(a: S, b: S, c: S) -> R 
flagmulti_s			    pub fn flagmulti_s(a: S, b: S, c: S) -> R 
flagmulti_ubnr			    pub fn flagmulti_ubnr(a: S, b: S, c: S) -> R 
flagopt			    pub fn flagopt(a: S, b: S, c: S, d: S) -> R 
flagopt_s			    pub fn flagopt_s(a: S, b: S, c: S, d: S) -> R 
flagopt_ubnr			    pub fn flagopt_ubnr(a: S, b: S, c: S, d: S) -> R 
flags			mod flags;
flatten_late_bound_regions			    pub fn flatten_late_bound_regions<T>(self, bound2_value: &Binder<Binder<T>>)
float_unification_error			fn float_unification_error<'tcx>(a_is_expected: bool,
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			            fn fmt(&self, fmt: &mut Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl<'tcx> fmt::Display for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> 
fmt::Debug for AccessLevels			impl<Id: Hash + Eq + fmt::Debug> fmt::Debug for AccessLevels<Id> 
fmt::Debug for Categorization			impl<'tcx> fmt::Debug for Categorization<'tcx> 
fmt::Debug for CodeExtent			impl fmt::Debug for CodeExtent 
fmt::Debug for DefId			impl fmt::Debug for DefId 
fmt::Debug for EarlyLint			impl fmt::Debug for EarlyLint 
fmt::Debug for Expr			impl fmt::Debug for Expr 
fmt::Debug for GenericKind			impl<'tcx> fmt::Debug for GenericKind<'tcx> 
fmt::Debug for ImplPolarity			impl fmt::Debug for ImplPolarity 
fmt::Debug for InteriorKind			impl fmt::Debug for InteriorKind 
fmt::Debug for Kind			impl<'tcx> fmt::Debug for Kind<'tcx> 
fmt::Debug for Lifetime			impl fmt::Debug for Lifetime 
fmt::Debug for LiveNode			impl fmt::Debug for LiveNode 
fmt::Debug for Location			impl fmt::Debug for Location 
fmt::Debug for Normalized			impl<'tcx, T: fmt::Debug> fmt::Debug for Normalized<'tcx, T> 
fmt::Debug for Pat			impl fmt::Debug for Pat 
fmt::Debug for Path			impl fmt::Debug for Path 
fmt::Debug for PointerKind			impl<'tcx> fmt::Debug for PointerKind<'tcx> 
fmt::Debug for RegionAndOrigin			impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> 
fmt::Debug for RegionSnapshot			impl fmt::Debug for RegionSnapshot 
fmt::Debug for Stmt_			impl fmt::Debug for Stmt_ 
fmt::Debug for TraitObligationStack			impl<'o,'tcx> fmt::Debug for TraitObligationStack<'o,'tcx> 
fmt::Debug for Ty			impl fmt::Debug for Ty 
fmt::Debug for TypeContents			impl fmt::Debug for TypeContents 
fmt::Debug for TypeFlags			impl fmt::Debug for TypeFlags 
fmt::Debug for TypeTrace			impl<'tcx> fmt::Debug for TypeTrace<'tcx> 
fmt::Debug for Upvar			impl fmt::Debug for Upvar 
fmt::Debug for Variable			impl fmt::Debug for Variable 
fmt::Debug for cmt_			impl<'tcx> fmt::Debug for cmt_<'tcx> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableDefaultImplData<N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableFnPointerData<'tcx, N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableImplData<'tcx, N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableObjectData<'tcx, N> 
fmt::Debug for traits			impl<'tcx, O: fmt::Debug> fmt::Debug for traits::Obligation<'tcx, O> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::FulfillmentError<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::RegionObligation<'tcx> 
fmt::Debug for ty			impl fmt::Debug for ty::AdtDef 
fmt::Debug for ty			impl fmt::Debug for ty::BoundRegion 
fmt::Debug for ty			impl fmt::Debug for ty::FloatVid 
fmt::Debug for ty			impl fmt::Debug for ty::FreeRegion 
fmt::Debug for ty			impl fmt::Debug for ty::InferTy 
fmt::Debug for ty			impl fmt::Debug for ty::IntVarValue 
fmt::Debug for ty			impl fmt::Debug for ty::IntVid 
fmt::Debug for ty			impl fmt::Debug for ty::ParamTy 
fmt::Debug for ty			impl fmt::Debug for ty::Region 
fmt::Debug for ty			impl fmt::Debug for ty::RegionVid 
fmt::Debug for ty			impl fmt::Debug for ty::TraitDef 
fmt::Debug for ty			impl fmt::Debug for ty::TyVid 
fmt::Debug for ty			impl fmt::Debug for ty::UpvarId 
fmt::Debug for ty			impl fmt::Debug for ty::Variance 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ClosureTy<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ExistentialTraitRef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::FnSig<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::GenericPredicates<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::InstantiatedPredicates<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ItemSubsts<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ObjectLifetimeDefault<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ParameterEnvironment<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::Predicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ProjectionPredicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::RegionParameterDef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TyS<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TypeParameterDef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::UpvarBorrow<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::adjustment::Adjustment<'tcx> 
fmt::Display for CrateNum			impl fmt::Display for CrateNum 
fmt::Display for CrateType			impl fmt::Display for CrateType 
fmt::Display for FixupError			impl fmt::Display for FixupError 
fmt::Display for GenericKind			impl<'tcx> fmt::Display for GenericKind<'tcx> 
fmt::Display for LayoutError			impl<'tcx> fmt::Display for LayoutError<'tcx> 
fmt::Display for Path			impl fmt::Display for Path 
fmt::Display for QPath			impl fmt::Display for QPath 
fmt::Display for Svh			impl fmt::Display for Svh 
fmt::Display for TypeError			impl<'tcx> fmt::Display for TypeError<'tcx> 
fmt::Display for Unsafety			impl fmt::Display for Unsafety 
fmt::Display for Upvar			impl fmt::Display for Upvar 
fmt::Display for ty			impl fmt::Display for ty::BoundRegion 
fmt::Display for ty			impl fmt::Display for ty::ClosureKind 
fmt::Display for ty			impl fmt::Display for ty::InferTy 
fmt::Display for ty			impl fmt::Display for ty::ParamTy 
fmt::Display for ty			impl fmt::Display for ty::Region 
fmt::Display for ty			impl<'tcx, T, U> fmt::Display for ty::OutlivesPredicate<T,U>
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::EquatePredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::OutlivesPredicate<&'tcx ty::Region,
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, &'tcx ty::Region>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::ProjectionPredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::TraitPredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::TraitRef<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::EquatePredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::FnSig<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Predicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::ProjectionPredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::ProjectionTy<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitPredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitRef<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TyS<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TypeAndMut<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> 
fmt_const_val			fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result 
fmt_head			    pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> fmt::Result 
fmt_successor_labels			    pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> 
fmt_tuple			                fn fmt_tuple(fmt: &mut Formatter, lvs: &[Operand]) -> fmt::Result 
fn_abi			    pub fn fn_abi(&self) -> abi::Abi 
fn_arg_names			    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name> { bug!("fn_arg_names") }
fn_arg_names			    fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;
fn_args			    pub fn fn_args(&self) -> ty::Binder<&[Ty<'tcx>]> 
fn_block_to_string			pub fn fn_block_to_string(p: &hir::FnDecl) -> String 
fn_is_enclosed_by			    fn fn_is_enclosed_by(&self, mut sub_fn: ast::NodeId, sup_fn: ast::NodeId) -> bool 
fn_ret			    pub fn fn_ret(&self) -> Binder<Ty<'tcx>> 
fn_sig			    pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> 
fn_sig			fn fn_sig(f: &mut fmt::Formatter,
fn_trait_kind			    pub fn fn_trait_kind(&self, id: DefId) -> Option<ty::ClosureKind> 
fold			    fn fold<T:TypeFoldable<'tcx>>(&mut self, value: &T) -> T 
fold			pub mod fold;
fold_autoref			    fn fold_autoref(&mut self, ar: &adjustment::AutoBorrow<'tcx>)
fold_bare_fn_ty			    fn fold_bare_fn_ty(&mut self,
fold_binder			            fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>
fold_binder			    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> 
fold_binder			    fn fold_binder<T>(&mut self, t: &Binder<T>) -> Binder<T>
fold_binder			    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> 
fold_closure_ty			    fn fold_closure_ty(&mut self,
fold_fn_sig			    fn fold_fn_sig(&mut self,
fold_impl_header			    fn fold_impl_header(&mut self, imp: &ty::ImplHeader<'tcx>) -> ty::ImplHeader<'tcx> 
fold_mt			    fn fold_mt(&mut self, t: &ty::TypeAndMut<'tcx>) -> ty::TypeAndMut<'tcx> 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_region			            fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_region			    fn fold_region(&mut self, r:&'tcx  ty::Region) -> &'tcx ty::Region 
fold_region			    fn fold_region(&mut self, r: &'tcx ty::Region) -> &'tcx ty::Region 
fold_regions			    pub fn fold_regions<T,F>(self,
fold_regions_in			fn fold_regions_in<'a, 'gcx, 'tcx, T, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
fold_substs			    fn fold_substs(&mut self,
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			            fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			            fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_with			    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
fold_with			    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
fold_with			    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
foo			    fn foo(&self) -> Self where Self: Sized;
foo			    fn foo(&self) -> Self 
foo			    fn foo(&self) -> Self;
foo			    fn foo(&self) 
foo			    fn foo(&self);
foo			    fn foo() -> u8 where Self: Sized;
foo			    fn foo() -> u8;
foo			    fn foo<T>(&self, on: T) where Self: Sized;
foo			    fn foo<T>(&self, on: T) 
foo			    fn foo<T>(&self, on: T);
foo			    fn foo<T>(x: T) where T: Copy {}
foo			    fn foo<T>(x: T);
foo			fn foo() {}
foo			fn foo(arg: &Box<SomeTrait>) { ... }
foo			fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } \/\/ ok!
foo			fn foo(argc: isize, argv: *const *const u8) -> isize {}
foo			fn foo(x: &'a str) { }
foo			fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) { }
foo			fn foo<'a>(arg: &Box<SomeTrait+'a>) { ... }
foo			fn foo<'a>(x: &'a str) {}
foo			fn foo<'static>(x: &'static str) { }
foo			fn foo<F: Fn()>(x: F) { }
foo			fn foo<T: Index<u8>>(x: T){}
foo			fn foo<T: MyTransmutableType>(x: Vec<T>) 
foo			fn foo<T>(_: T) {}
foo			fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> 
foo			fn foo<T>(t: T) where T: Trait<AssociatedType=u32> 
foo			fn foo<T>(x: T) 
foo			fn foo<T>(x: Vec<T>) 
foo			        fn foo(_: LangItem) -> Option<DefId> { None }
for_abi_align			    pub fn for_abi_align(dl: &TargetDataLayout, align: Align) -> Option<Integer> 
for_def			    pub fn for_def(def: &ty::TypeParameterDef) -> ParamTy 
for_each_impl			    pub fn for_each_impl<F: FnMut(DefId)>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, mut f: F) 
for_each_lib_search_path			    pub fn for_each_lib_search_path<F>(&self, mut f: F) where
for_each_region			    fn for_each_region(&self, f: &mut FnMut(&'tcx ty::Region)) 
for_each_relevant_impl			    pub fn for_each_relevant_impl<F: FnMut(DefId)>(&self,
for_item			    pub fn for_item(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId)
for_item			    pub fn for_item<FR, FT>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
for_self			    pub fn for_self() -> ParamTy 
for_sty			    pub fn for_sty(st: &ty::TypeVariants) -> FlagComputation 
format_stable_since_msg			    fn format_stable_since_msg(version: &str) -> String 
free_region			    pub mod free_region;
free_region			fn free_region(index: u32) -> FreeRegion 
free_region_map			    pub fn free_region_map(self, id: NodeId) -> FreeRegionMap 
free_regions_first			        fn free_regions_first(a: &RegionAndOrigin, b: &RegionAndOrigin) -> Ordering 
free_regions_from_same_fn			        fn free_regions_from_same_fn<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
freely_aliasable			    pub fn freely_aliasable(&self) -> Aliasability 
fresh_bound_region			    pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> &'tcx ty::Region 
fresh_bound_variable			        fn fresh_bound_variable<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
fresh_substs_for_item			    pub fn fresh_substs_for_item(&self,
freshen			    fn freshen<F>(&mut self,
freshen			    pub fn freshen<T:TypeFoldable<'tcx>>(&self, t: T) -> T 
freshen			mod freshen;
freshener			    pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'gcx, 'tcx> 
from			    fn from(kind: AdtKind) -> Self 
from			    fn from(r: &'tcx ty::Region) -> Kind<'tcx> 
from			    fn from(ty: Ty<'tcx>) -> Kind<'tcx> 
from_ast			    pub fn from_ast(vdata: &ast::VariantData) -> CtorKind 
from_attr			    pub fn from_attr(dl: &TargetDataLayout, ity: attr::IntType) -> Integer 
from_attr_level			    pub fn from_attr_level(level: &attr::StabilityLevel) -> Self 
from_bits			    pub fn from_bits(abi: u64, pref: u64) -> Result<Align, String> 
from_bits			    pub fn from_bits(bits: u64) -> Size 
from_borrow_kind			    pub fn from_borrow_kind(borrow_kind: ty::BorrowKind) -> MutabilityCategory 
from_bytes			    pub fn from_bytes(abi: u64, pref: u64) -> Result<Align, String> 
from_bytes			    pub fn from_bytes(bytes: u64) -> Size 
from_depth			    pub fn from_depth(&self, depth: u32) -> Region 
from_error			    fn from_error(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
from_hir			    pub fn from_hir(vdata: &hir::VariantData) -> CtorKind 
from_hir			    pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: TyCtxt) -> Self 
from_impl_item			    pub fn from_impl_item<'b, 'tcx>(def_id: DefId,
from_index			    fn from_index(i: u32) -> ty::FloatVid { ty::FloatVid { index: i } }
from_index			    fn from_index(i: u32) -> ty::IntVid { ty::IntVid { index: i } }
from_index			    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid { index: i } }
from_index			    fn from_index(i: u32) -> ty::TyVid { ty::TyVid { index: i } }
from_item			    fn from_item(item: &ast::Item) -> Target 
from_item			    pub fn from_item<'b, 'tcx>(def_id: DefId,
from_label_string			    pub fn from_label_string(label: &str, data: D) -> Result<DepNode<D>, ()> 
from_local			    fn from_local(tcx: TyCtxt, id: ast::NodeId) -> MutabilityCategory 
from_method			    pub fn from_method(tcx: TyCtxt<'a, 'gcx, 'tcx>,
from_method_id			    fn from_method_id(tcx: TyCtxt, method_id: DefId) -> OverloadedCallType 
from_mutbl			    pub fn from_mutbl(m: hir::Mutability) -> MutabilityCategory 
from_mutbl			    pub fn from_mutbl(m: hir::Mutability) -> BorrowKind 
from_mutbl			    pub fn from_mutbl(m: hir::Mutability) -> Self 
from_name			    pub fn from_name(name: Name) -> PathSegment 
from_node			    pub fn from_node(map: &map::Map<'a>, id: NodeId) -> Option<Code<'a>> 
from_node			    pub fn from_node(node: Node) -> Option<FnLikeNode> 
from_node			    fn from_node(p: NodeId, node: Node<'ast>) -> MapEntry<'ast> 
from_node			    pub fn from_node(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId) -> MirSource 
from_object_ty			    fn from_object_ty(&mut self, ty: Ty<'tcx>,
from_obligation_cause			    pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>,
from_pointer_kind			    fn from_pointer_kind(base_mutbl: MutabilityCategory,
from_select_error			    pub fn from_select_error(tcx: TyCtxt<'a, 'gcx, 'tcx>,
from_str			    pub fn from_str(x: &str) -> Option<Level> 
from_trait_id			    fn from_trait_id(tcx: TyCtxt, trait_id: DefId) -> OverloadedCallType 
from_trait_item			    pub fn from_trait_item(def_id: DefId,
from_ty			    pub fn from_ty(ty: Ty<'tcx>) -> LvalueTy<'tcx> 
from_ty			    pub fn from_ty(t: Ty<'tcx>) -> Option<CastTy<'tcx>> 
from_u32			    pub fn from_u32(x: u32) -> CrateNum 
from_u32			    pub fn from_u32(x: u32) -> DefIndex 
from_u32			            pub fn from_u32(u: u32) -> Option<
fs			    pub mod fs;
fudge			mod fudge;
fudge_regions_if_ok			    pub fn fudge_regions_if_ok<T, E, F>(&self,
fulfill			mod fulfill;
fulfill_implication			fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
fully_normalize			pub fn fully_normalize<'a, 'gcx, 'tcx, T>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
fully_resolve			    pub fn fully_resolve<T:TypeFoldable<'tcx>>(&self, value: &T) -> FixupResult<T> 
fully_resolve			pub fn fully_resolve<'a, 'gcx, 'tcx, T>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
fun_to_string			pub fn fun_to_string(decl: &hir::FnDecl,
fundamental_ty			fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool 
future_incompatible			    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> 
fuzzy_match_tys			    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool 
gather_attr			pub fn gather_attr(attr: &ast::Attribute) -> Vec<Result<(ast::Name, Level, Span), Span>> 
gather_attrs			pub fn gather_attrs(attrs: &[ast::Attribute]) -> Vec<Result<(ast::Name, Level, Span), Span>> 
generalize			    fn generalize(&self,
generalize_region			        fn generalize_region<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
generate_derive_registrar_symbol			    pub fn generate_derive_registrar_symbol(&self,
generate_plugin_registrar_symbol			    pub fn generate_plugin_registrar_symbol(&self, svh: &Svh, index: DefIndex)
generics_require_inlining			fn generics_require_inlining(generics: &hir::Generics) -> bool 
generics_require_sized_self			    fn generics_require_sized_self(self, def_id: DefId) -> bool 
generics_to_string			pub fn generics_to_string(generics: &hir::Generics) -> String 
get			    pub fn get(&self, k: &M::Key) -> Option<&M::Value> 
get			    pub fn get(&self, id: NodeId) -> Node<'ast> 
get			    fn get(&self) -> usize { let LiveNode(v) = *self; v }
get			    fn get(&self) -> usize { let Variable(v) = *self; v }
get			    pub fn get(&self, key: &OutputType) -> Option<&Option<PathBuf>> 
get			    pub fn get(&self, key: &str) -> Option<&BTreeSet<String>> 
get_a			    fn get_a(&self) -> A; \/\/ note that this is object safe!
get_attrs			    pub fn get_attrs(self, did: DefId) -> Cow<'gcx, [ast::Attribute]> 
get_cfg_indices			fn get_cfg_indices<'a>(id: ast::NodeId, index: &'a NodeMap<Vec<CFGIndex>>) -> &'a [CFGIndex] 
get_dylib_search_paths			    pub fn get_dylib_search_paths(&self) -> Vec<PathBuf> 
get_enclosing_scope			    pub fn get_enclosing_scope(&self, id: NodeId) -> Option<NodeId> 
get_fn_args			fn get_fn_args(decl: &hir::FnDecl) -> Vec<Option<DefId>> 
get_foreign_abi			    pub fn get_foreign_abi(&self, id: NodeId) -> Abi 
get_generated_lifetimes			    fn get_generated_lifetimes(&self) -> Vec<hir::Lifetime> 
get_if_local			    pub fn get_if_local(&self, id: DefId) -> Option<Node<'ast>> 
get_item_mir			    fn get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> Mir<'tcx>;
get_item_mir			    fn get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
get_level_source			    fn get_level_source(&self, lint: LintId) -> LevelSource 
get_lib_path			    pub fn get_lib_path(&self) -> PathBuf 
get_lint_groups			    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> 
get_lints			    fn get_lints(&self) -> LintArray 
get_lints			    pub fn get_lints<'t>(&'t self) -> &'t [(&'static Lint, bool)] 
get_lints			    fn get_lints(&self) -> LintArray;
get_module_parent			    pub fn get_module_parent(&self, id: NodeId) -> NodeId 
get_mut			    pub fn get_mut(&mut self, k: &M::Key) -> Option<&mut M::Value> 
get_opt_name			    pub fn get_opt_name(&self) -> Option<ast::Name> 
get_or_default_sysroot			pub fn get_or_default_sysroot() -> PathBuf 
get_parent			    pub fn get_parent(&self, id: NodeId) -> NodeId 
get_parent_did			    pub fn get_parent_did(&self, id: NodeId) -> DefId 
get_parent_node			    pub fn get_parent_node(&self, id: NodeId) -> NodeId 
get_resident			fn get_resident() -> Option<usize> 
get_resolution			    fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution>;
get_self			    pub fn get_self(&self) -> Option<ExplicitSelf> 
get_struct_ctor_id			fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> 
get_tools_search_paths			    pub fn get_tools_search_paths(&self) -> Vec<PathBuf> 
get_vtable_index_of_object_method			    pub fn get_vtable_index_of_object_method<N>(self,
get_vtable_methods			pub fn get_vtable_methods<'a, 'tcx>(
give_expl_lifetime_param			    fn give_expl_lifetime_param(&self,
give_lifetime			    fn give_lifetime(&self) -> hir::Lifetime 
give_suggestion			    fn give_suggestion(&self, err: &mut DiagnosticBuilder, same_regions: &[SameRegions]) 
glb			    pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'gcx, 'tcx> 
glb			    pub fn glb<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)
glb			mod glb;
glb_regions			    pub fn glb_regions(&self,
global_tcx			    pub fn global_tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> 
go			            pub fn go(tcx: TyCtxt) 
graph			mod graph;
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(&self.name[..]).unwrap() }
graph_id			    fn graph_id(&self) -> dot::Id 
graphviz			pub mod graphviz;
graphviz			mod graphviz;
guarantor			    pub fn guarantor(&self) -> cmt<'tcx> 
hack			    fn hack<F>(&mut self, f: F) where
handle			    fn handle<A, I, M, C>(self, item_fn: I, method: M, closure: C) -> A where
handle_definition			    fn handle_definition(&mut self, def: Def) 
handle_field_access			    fn handle_field_access(&mut self, lhs: &hir::Expr, name: ast::Name) 
handle_field_pattern_match			    fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, def: Def,
handle_tup_field_access			    fn handle_tup_field_access(&mut self, lhs: &hir::Expr, idx: usize) 
has_allow_dead_code_or_lang_attr			fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool 
has_attr			    pub fn has_attr(self, did: DefId, attr: &str) -> bool 
has_bitset_for_nodeid			    fn has_bitset_for_nodeid(&self, n: ast::NodeId) -> bool 
has_closure_types			    fn has_closure_types(&self) -> bool 
has_concrete_skeleton			    pub fn has_concrete_skeleton(&self) -> bool 
has_dtor			    pub fn has_dtor(&self) -> bool 
has_dtor			    pub fn has_dtor(&self) -> bool 
has_erasable_regions			    fn has_erasable_regions(&self) -> bool 
has_error_field			    pub fn has_error_field(self, ty: Ty<'tcx>) -> bool 
has_errors			    pub fn has_errors(&self) -> bool 
has_escaping_regions			    fn has_escaping_regions(&self) -> bool 
has_infer_types			    fn has_infer_types(&self) -> bool 
has_lifetimes			    pub fn has_lifetimes(&self) -> bool 
has_param_types			    fn has_param_types(&self) -> bool 
has_projection_types			    fn has_projection_types(&self) -> bool 
has_re_skol			    fn has_re_skol(&self) -> bool 
has_regions_escaping_depth			    fn has_regions_escaping_depth(&self, depth: u32) -> bool 
has_self			    pub fn has_self(&self) -> bool 
has_self_ty			    fn has_self_ty(&self) -> bool 
has_type_flags			    fn has_type_flags(&self, flags: TypeFlags) -> bool 
has_types			    pub fn has_types(&self) -> bool 
has_value			    pub fn has_value(&self) -> bool 
hash			    fn hash<H>(&self, state: &mut H) where H: Hasher 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			                fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) 
hash			                fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) 
hash			        fn hash(&self, &mut DefaultHasher, ErrorOutputType);
hash			        fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) 
hash			        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) 
hash			            fn hash<H: Hasher>(&self, s: &mut H) 
hash			    fn hash<H: Hasher>(&self, s: &mut H) 
hash			    fn hash<H: Hasher>(&self, s: &mut H) 
hash			    pub fn hash<T: Hash>(&mut self, x: T) 
hash::Hash for LintId			impl hash::Hash for LintId 
hash_discriminant_u8			    fn hash_discriminant_u8<T>(&mut self, x: &T) 
head			    pub fn head(&mut self, w: &str) -> io::Result<()> 
higher_ranked			mod higher_ranked;
higher_ranked_glb			    pub fn higher_ranked_glb<T>(&mut self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)
higher_ranked_lub			    pub fn higher_ranked_lub<T>(&mut self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)
higher_ranked_match			    pub fn higher_ranked_match<T, U>(&mut self,
higher_ranked_sub			    pub fn higher_ranked_sub<T>(&mut self, a: &Binder<T>, b: &Binder<T>, a_is_expected: bool)
hir			impl hir::Arm 
hir			impl hir::Pat 
hir			pub mod hir;
hir_visit::Visitor for IdVisitor			impl<'a, 'b, 'tcx> hir_visit::Visitor<'tcx> for IdVisitor<'a, 'b, 'tcx> 
hir_visit::Visitor for LateContext			impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> 
host_filesearch			    pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch 
host_triple			pub fn host_triple() -> &'static str 
id			    pub fn id(&self) -> ast::NodeId 
id			    fn id(&self, index: IdIndex) -> DepNode<D> 
id			    pub fn id(&self) -> NodeId 
id			    pub fn id(self) -> NodeId 
id			    pub fn id(&self) -> NodeId 
id			    fn id(&self) -> ast::NodeId { self.id }
id			    fn id(&self) -> ast::NodeId;
id			    pub fn id(&self) -> DefId 
identity_for_item			    pub fn identity_for_item(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId)
idx			    fn idx(&self, ln: LiveNode, var: Variable) -> usize 
immediate_successors			    pub fn immediate_successors(&self, node: &DepNode<D>) -> Vec<&DepNode<D>> 
impl_item			    pub fn impl_item(&self, id: ImplItemId) -> &'ast ImplItem 
impl_item			    pub fn impl_item(&self, id: ImplItemId) -> &ImplItem 
impl_item_scope_tag			        fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str 
impl_item_to_string			pub fn impl_item_to_string(i: &hir::ImplItem) -> String 
impl_of_method			    pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> 
impl_or_trait_obligations			    fn impl_or_trait_obligations(&mut self,
impl_parent			    fn impl_parent(&self, def: DefId) -> Option<DefId> { bug!("impl_parent") }
impl_parent			    fn impl_parent(&self, impl_def_id: DefId) -> Option<DefId>;
impl_polarity			    fn impl_polarity(&self, def: DefId) -> hir::ImplPolarity { bug!("impl_polarity") }
impl_polarity			    fn impl_polarity(&self, def: DefId) -> hir::ImplPolarity;
impl_similar_to			    fn impl_similar_to(&self,
impl_trait_ref			    fn impl_trait_ref<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
impl_trait_ref			    pub fn impl_trait_ref(self, id: DefId) -> Option<TraitRef<'gcx>> 
impl_trait_ref_and_oblig			pub fn impl_trait_ref_and_oblig<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tcx>,
implementations_of_trait			    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }
implementations_of_trait			    fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>;
implied_bounds			pub fn implied_bounds<'a, 'gcx, 'tcx>(
implied_bounds_from_components			fn implied_bounds_from_components<'tcx>(sub_region: &'tcx ty::Region,
impls_bound			    fn impls_bound(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
in_binder			fn in_binder<'a, 'gcx, 'tcx, T, U>(f: &mut fmt::Formatter,
in_cbox			    pub fn in_cbox(&self) -> bool 
in_ignore			    pub fn in_ignore<'graph>(&'graph self) -> Option<raii::IgnoreTask<'graph>> 
in_snapshot			    pub fn in_snapshot<T, F>(&self, f: F) -> T where
in_snapshot			    fn in_snapshot(&self) -> bool 
in_snapshot			    fn in_snapshot<R, F>(&mut self, f: F) -> R
in_task			    pub fn in_task<'graph>(&'graph self, key: DepNode<DefId>) -> Option<raii::DepTask<'graph>> 
inc_and_offset_cur_anon			    fn inc_and_offset_cur_anon(&self, n: u32) 
inc_counter			    fn inc_counter(&self) 
inc_cur_anon			    fn inc_cur_anon(&self, n: u32) 
incoming			    pub fn incoming() -> Self 
incr_comp_session_dir			    pub fn incr_comp_session_dir(&self) -> cell::Ref<PathBuf> 
incr_comp_session_dir_opt			    pub fn incr_comp_session_dir_opt(&self) -> Option<cell::Ref<PathBuf>> 
indent			pub fn indent<R, F>(op: F) -> R where
indenter			pub fn indenter() -> Indenter 
index			    fn index(&self, k: &'k M::Key) -> &M::Value 
index			    fn index(self) -> usize 
index			    fn index(self) -> usize 
index			    fn index(&self) -> u32 { self.index }
index			            fn index(self) -> usize 
index			    fn index(&self, index: BasicBlock) -> &BasicBlockData<'tcx> 
index			    pub fn index(self, index: Operand<'tcx>) -> Lvalue<'tcx> 
index_mut			    fn index_mut(&mut self, index: BasicBlock) -> &mut BasicBlockData<'tcx> 
index_of_field_named			    pub fn index_of_field_named(&self,
indices2			    fn indices2<F>(&mut self, ln: LiveNode, succ_ln: LiveNode, mut op: F) where
infcx			    fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'gcx, 'tcx> 
infcx			    fn infcx(&self) -> &'f InferCtxt<'f, 'gcx, 'tcx>;
infcx			    fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'gcx, 'tcx> 
infcx			    pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'gcx, 'tcx> 
infer			pub mod infer;
infer_ctxt			    pub fn infer_ctxt(self,
infer_variable_values			    fn infer_variable_values(&self,
inherent_implementations_for_type			    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId> { vec![] }
inherent_implementations_for_type			    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>;
inherit			    pub fn inherit(&self) -> MutabilityCategory 
init_empty			    fn init_empty(&mut self, ln: LiveNode, succ_ln: LiveNode) 
init_from_succ			    fn init_from_succ(&mut self, ln: LiveNode, succ_ln: LiveNode) 
init_incr_comp_session			    pub fn init_incr_comp_session(&self,
init_llvm			fn init_llvm(sess: &Session) 
initial_discriminant			    fn initial_discriminant<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Disr 
initial_discriminant			    fn initial_discriminant<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Disr;
initial_value			    fn initial_value(&self) -> bool;
inner			        mod inner 
input			    pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> 
input_types			    pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a 
input_types			    pub fn input_types<'a>(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a 
input_types			    pub fn input_types<'b>(&'b self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'b 
inputs			    pub fn inputs(&self) -> &[Ty<'tcx>] 
inputs			    pub fn inputs(&self) -> Binder<&[Ty<'tcx>]> 
insert			    pub fn insert(&mut self, k: M::Key, v: M::Value) -> Option<M::Value> 
insert			    fn insert(&mut self, id: NodeId, node: Node<'ast>) 
insert			    pub fn insert(&mut self, a: DefId, b: DefId, result: bool) 
insert			    fn insert(&mut self,
insert			    pub fn insert(&mut self,
insert			    fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool 
insert_blindly			    fn insert_blindly(&mut self,
insert_candidate_cache			    fn insert_candidate_cache(&mut self,
insert_def_id			    fn insert_def_id(&mut self, def_id: DefId) 
insert_entry			    fn insert_entry(&mut self, id: NodeId, entry: MapEntry<'ast>) 
insert_evaluation_cache			    fn insert_evaluation_cache(&mut self,
insert_late_bound_lifetimes			fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,
insert_lifetime			    fn insert_lifetime(&mut self,
insert_previous_work_product			    pub fn insert_previous_work_product(&self, v: &Arc<WorkProductId>, data: WorkProduct) 
insert_work_product			    pub fn insert_work_product(&self, v: &Arc<WorkProductId>, data: WorkProduct) 
instantiate			    pub fn instantiate(&mut self,
instantiate			    pub fn instantiate(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: &Substs<'tcx>)
instantiate_and_push			    pub fn instantiate_and_push(
instantiate_into			    fn instantiate_into(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
instantiate_own			    pub fn instantiate_own(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, substs: &Substs<'tcx>)
instantiate_supertrait			    pub fn instantiate_supertrait(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
int_unification_error			fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::IntVarValue))
inter			    pub fn inter(self) -> Option<&'this Map<'tcx>> 
intercrate			    pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>) -> SelectionContext<'cx, 'gcx, 'tcx> 
interior_param			    pub fn interior_param(&self) -> bool 
interior_unsafe			    pub fn interior_unsafe(&self) -> bool 
intern_code_extent			    pub fn intern_code_extent(&self,
intern_existential_predicates			    pub fn intern_existential_predicates(self, eps: &[ExistentialPredicate<'tcx>])
intern_layout			    pub fn intern_layout(self, layout: Layout) -> &'gcx Layout 
intern_node			    pub fn intern_node(&self,
intern_stability			    pub fn intern_stability(self, stab: attr::Stability) -> &'gcx attr::Stability 
intern_substs			    pub fn intern_substs(self, ts: &[Kind<'tcx>]) -> &'tcx Slice<Kind<'tcx>> 
intern_tup			    pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> 
intern_ty			    fn intern_ty(&self, st: TypeVariants<'tcx>,
intern_type_list			    pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx Slice<Ty<'tcx>> 
intern_with			    fn intern_with<F>(self, F) -> Self::Output
intern_with			    fn intern_with<F>(self, f: F) -> Self::Output
intern_with			    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output 
intern_with			    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
intersects			    pub fn intersects(&self, tc: TypeContents) -> bool 
into_early_lint			    fn into_early_lint(self, id: LintId) -> EarlyLint 
into_early_lint			    fn into_early_lint(self, id: LintId) -> EarlyLint;
into_iter			    fn into_iter(self) -> Self::IntoIter 
into_option			    fn into_option(self) -> Option<CodeExtent> 
into_set			    fn into_set(self) -> FxHashSet<&'tcx ty::Region> 
into_string			    fn into_string(self) -> String 
intra			    pub fn intra(self) -> Option<&'this Map<'tcx>> 
intravisit			pub mod intravisit;
intravisit::Visitor for Formals			        impl<'a, 'v> intravisit::Visitor<'v> for Formals<'a> 
intrinsicck			    pub mod intrinsicck;
invalid_node			fn invalid_node() -> LiveNode { LiveNode(usize::MAX) }
invalid_users			fn invalid_users() -> Users 
invalidate			    pub fn invalidate(&self) 
is_accessible_from			    pub fn is_accessible_from<T: NodeIdTree>(self, block: NodeId, tree: &T) -> bool 
is_adt_dtorck			    pub fn is_adt_dtorck(self, adt: &ty::AdtDef) -> bool 
is_allocator			    fn is_allocator(&self, cnum: CrateNum) -> bool { bug!("is_allocator") }
is_allocator			    fn is_allocator(&self, cnum: CrateNum) -> bool;
is_argument			    pub fn is_argument(&self, id: NodeId) -> bool 
is_at_least			    pub fn is_at_least<T: NodeIdTree>(self, vis: Visibility, tree: &T) -> bool 
is_binding_pat			    fn is_binding_pat(pat: &hir::Pat) -> bool 
is_body			    fn is_body(&self, node_id: NodeId, item: &Item) -> bool 
is_bool			    pub fn is_bool(&self) -> bool { self.sty == TyBool }
is_borrowed_ty			    fn is_borrowed_ty(ty: &hir::Ty) -> bool 
is_bound			    pub fn is_bound(&self) -> bool 
is_by_value			    pub fn is_by_value(self) -> bool 
is_char			    pub fn is_char(&self) -> bool 
is_checkable			    pub fn is_checkable(self) -> bool 
is_comparison			    pub fn is_comparison(self) -> bool 
is_compatible_with_codegen_units_and_single_output_file			    fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool 
is_compiler_builtins			    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!("is_compiler_builtins") }
is_compiler_builtins			    fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;
is_const			    pub fn is_const(&self) -> bool 
is_const_fn			    fn is_const_fn(&self, did: DefId) -> bool { bug!("is_const_fn") }
is_const_fn			    fn is_const_fn(&self, did: DefId) -> bool;
is_default			    pub fn is_default(&self) -> bool 
is_default_impl			    fn is_default_impl(&self, impl_did: DefId) -> bool { bug!("is_default_impl") }
is_default_impl			    fn is_default_impl(&self, impl_did: DefId) -> bool;
is_defaulted_trait			    fn is_defaulted_trait(&self, did: DefId) -> bool { bug!("is_defaulted_trait") }
is_defaulted_trait			    fn is_defaulted_trait(&self, did: DefId) -> bool;
is_descendant_of			    fn is_descendant_of(&self, node: NodeId, ancestor: NodeId) -> bool 
is_descendant_of			    fn is_descendant_of(&self, node: NodeId, ancestor: NodeId) -> bool;
is_dllimport_foreign_item			    fn is_dllimport_foreign_item(&self, def: DefId) -> bool;
is_dllimport_foreign_item			    fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }
is_drop			    pub fn is_drop(&self) -> bool 
is_dtorck			    pub fn is_dtorck(&'gcx self, tcx: TyCtxt) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_enqueue_enabled			    pub fn is_enqueue_enabled(&self) -> bool 
is_enum			    pub fn is_enum(&self) -> bool 
is_exported			    pub fn is_exported(&self, id: Id) -> bool 
is_final			    pub fn is_final(&self) -> bool 
is_floating_point			    pub fn is_floating_point(&self) -> bool 
is_fn			    pub fn is_fn(&self) -> bool 
is_fn_like			    fn is_fn_like(&self) -> bool 
is_foreign_item			    fn is_foreign_item(&self, did: DefId) -> bool { bug!("is_foreign_item") }
is_foreign_item			    fn is_foreign_item(&self, did: DefId) -> bool;
is_fp			    pub fn is_fp(&self) -> bool 
is_fresh			    pub fn is_fresh(&self) -> bool 
is_from_trait			    pub fn is_from_trait(&self) -> bool 
is_fully_enabled			    pub fn is_fully_enabled(&self) -> bool 
is_fundamental			    pub fn is_fundamental(&self) -> bool 
is_global			    fn is_global(self) -> bool 
is_global			    fn is_global(&self) -> bool 
is_identity			    pub fn is_identity(&self) -> bool 
is_immutable			    pub fn is_immutable(&self) -> bool 
is_impl_item_body			    fn is_impl_item_body(&self, node_id: NodeId, item: &ImplItem) -> bool 
is_inlined_def_id			    pub fn is_inlined_def_id(&self, id: DefId) -> bool 
is_inlined_node_id			    pub fn is_inlined_node_id(&self, id: NodeId) -> bool 
is_integral			    pub fn is_integral(&self) -> bool 
is_item_mir_available			    fn is_item_mir_available(&self, def: DefId) -> bool 
is_item_mir_available			    fn is_item_mir_available(&self, def: DefId) -> bool;
is_knowable			    fn is_knowable<'o>(&mut self,
is_lazy			    pub fn is_lazy(self) -> bool 
is_local			    pub fn is_local(&self) -> bool 
is_local			    pub fn is_local(&self) -> bool 
is_lt_parameterized			    pub fn is_lt_parameterized(&self) -> bool 
is_machine			    pub fn is_machine(&self) -> bool 
is_met			    fn is_met(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
is_method_call			    pub fn is_method_call(&self, id: ast::NodeId) -> bool 
is_method_call			    pub fn is_method_call(&self, expr_id: NodeId) -> bool 
is_mutable			    pub fn is_mutable(&self) -> bool 
is_mutating_use			    pub fn is_mutating_use(&self) -> bool 
is_never			    pub fn is_never(&self) -> bool 
is_nightly_build			    pub fn is_nightly_build() -> bool 
is_nil			    pub fn is_nil(&self) -> bool 
is_no_builtins			    fn is_no_builtins(&self, cnum: CrateNum) -> bool { bug!("is_no_builtins") }
is_no_builtins			    fn is_no_builtins(&self, cnum: CrateNum) -> bool;
is_nonmutating_use			    pub fn is_nonmutating_use(&self) -> bool 
is_noop			    pub fn is_noop(&self) -> bool 
is_noop			    pub fn is_noop(&self) -> bool 
is_normalized_for_trans			    fn is_normalized_for_trans(&self) -> bool 
is_numeric			    pub fn is_numeric(&self) -> bool 
is_object_safe			    pub fn is_object_safe(self, trait_def_id: DefId) -> bool 
is_overloaded_autoderef			    pub fn is_overloaded_autoderef(&self, expr_id: NodeId, autoderefs: u32) -> bool 
is_panic_runtime			    fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!("is_panic_runtime") }
is_panic_runtime			    fn is_panic_runtime(&self, cnum: CrateNum) -> bool;
is_param			    pub fn is_param(&self, index: u32) -> bool 
is_parameterized			    pub fn is_parameterized(&self) -> bool 
is_payloadfree			    pub fn is_payloadfree(&self) -> bool 
is_phantom_data			    pub fn is_phantom_data(&self) -> bool 
is_phantom_data			    pub fn is_phantom_data(&self) -> bool 
is_positional			    pub fn is_positional(&self) -> bool 
is_present			    pub fn is_present(&self) -> bool 
is_primitive			    pub fn is_primitive(&self) -> bool 
is_public			    pub fn is_public(&self, id: Id) -> bool 
is_reachable			    pub fn is_reachable(&self, id: Id) -> bool 
is_refutable			    pub fn is_refutable(&self) -> bool 
is_region_ptr			    pub fn is_region_ptr(&self) -> bool 
is_representable			    pub fn is_representable(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span)
is_rlib			            fn is_rlib(p: &Path) -> bool 
is_scalar			    pub fn is_scalar(&self) -> bool 
is_self			    pub fn is_self(&self) -> bool 
is_self			    pub fn is_self(&self) -> bool 
is_shift			    pub fn is_shift(self) -> bool 
is_signed			    pub fn is_signed(&self) -> bool 
is_simd			    pub fn is_simd(&self) -> bool 
is_simd			    pub fn is_simd(&self) -> bool 
is_sized			    pub fn is_sized(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_sized_uncached			    fn is_sized_uncached(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_slice			    pub fn is_slice(&self) -> bool 
is_some			    pub fn is_some(&self) -> bool 
is_stable			    pub fn is_stable(&self) -> bool 
is_staged_api			    fn is_staged_api(&self, cnum: CrateNum) -> bool { bug!("is_staged_api") }
is_staged_api			    fn is_staged_api(&self, cnum: CrateNum) -> bool;
is_static			    pub fn is_static(&self, super_region: ty::FreeRegion) -> bool 
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;
is_storage_dead_marker			    pub fn is_storage_dead_marker(&self) -> bool 
is_storage_live_marker			    pub fn is_storage_live_marker(&self) -> bool 
is_storage_marker			    pub fn is_storage_marker(&self) -> bool 
is_struct			    pub fn is_struct(&self) -> bool 
is_struct			    pub fn is_struct(&self) -> bool 
is_structural			    pub fn is_structural(&self) -> bool 
is_subregion_of			    pub fn is_subregion_of(&self,
is_subscope_of			    pub fn is_subscope_of(&self,
is_tainted_by_errors			    pub fn is_tainted_by_errors(&self) -> bool 
is_trait			    pub fn is_trait(&self) -> bool 
is_tuple			    pub fn is_tuple(&self) -> bool 
is_ty_var			    pub fn is_ty_var(&self) -> bool 
is_type_parameter			fn is_type_parameter(ty: Ty) -> bool 
is_type_parameterized			    pub fn is_type_parameterized(&self) -> bool 
is_type_structurally_recursive			        fn is_type_structurally_recursive<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
is_uint			    pub fn is_uint(&self) -> bool 
is_uninhabited			    pub fn is_uninhabited(&self, block: Option<NodeId>, cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool 
is_uninhabited_recurse			    pub fn is_uninhabited_recurse(&self,
is_uninhabited_recurse			    pub fn is_uninhabited_recurse(&self,
is_union			    pub fn is_union(&self) -> bool 
is_unique			    pub fn is_unique(&self) -> bool 
is_unit			    pub fn is_unit(&self) -> bool 
is_univariant			    pub fn is_univariant(&self) -> bool 
is_unsafe_ptr			    pub fn is_unsafe_ptr(&self) -> bool 
is_unsized			    pub fn is_unsized(&self) -> bool 
is_unstable_enabled			    pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool 
is_use			    pub fn is_use(&self) -> bool 
is_valid			    fn is_valid(&self) -> bool 
is_var_in_set			fn is_var_in_set(new_vars: &[ty::RegionVid], r: &ty::Region) -> bool 
is_vtable_safe_method			    pub fn is_vtable_safe_method(self,
issue_32330_warnings			    pub fn issue_32330_warnings(&self, span: Span, issue32330s: &[ty::Issue32330]) 
item			    pub fn item(&self, id: NodeId) -> &Item 
item_attrs			    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { bug!("item_attrs") }
item_attrs			    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;
item_children			    fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!("item_children") }
item_children			    fn item_children(&self, did: DefId) -> Vec<def::Export>;
item_extent			    pub fn item_extent(&self, n: ast::NodeId) -> CodeExtent 
item_generics			    fn item_generics<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_generics			    pub fn item_generics(self, did: DefId) -> &'gcx Generics<'gcx> 
item_id			    pub fn item_id(&self) -> NodeId 
item_is_mod			            fn item_is_mod(item: &Item) -> bool 
item_might_be_inlined			fn item_might_be_inlined(item: &hir::Item) -> bool 
item_mir			    pub fn item_mir(self, did: DefId) -> Ref<'gcx, Mir<'gcx>> 
item_name			    pub fn item_name(index: usize) -> &'static str 
item_name			    pub fn item_name(&self) -> Name 
item_name			    pub fn item_name(self, id: DefId) -> ast::Name 
item_name			    pub fn item_name(&self) -> Name 
item_path			pub mod item_path;
item_path_str			fn item_path_str(def_id: DefId) -> String 
item_path_str			    pub fn item_path_str(self, def_id: DefId) -> String 
item_predicates			    fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_predicates			    pub fn item_predicates(self, did: DefId) -> GenericPredicates<'gcx> 
item_scope_tag			        fn item_scope_tag(item: &hir::Item) -> &'static str 
item_super_predicates			    fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_super_predicates			    pub fn item_super_predicates(self, did: DefId) -> GenericPredicates<'gcx> 
item_to_string			pub fn item_to_string(i: &hir::Item) -> String 
item_type			    fn item_type<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
item_type			    pub fn item_type(self, did: DefId) -> Ty<'gcx> 
item_variances			    fn item_variances(&self, def: DefId) -> Vec<ty::Variance> { bug!("item_variances") }
item_variances			    fn item_variances(&self, def: DefId) -> Vec<ty::Variance>;
item_variances			    pub fn item_variances(self, item_id: DefId) -> Rc<Vec<ty::Variance>> 
itemlikevisit			pub mod itemlikevisit;
items			    pub fn items(&self) -> &[Option<DefId>] 
items			    pub fn items(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>)
iter			    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, BTreeSet<String>> 
iter			    pub fn iter(&self, kind: PathKind) -> Iter 
iter			    fn iter(&'o self) -> TraitObligationStackList<'o,'tcx> 
iter			    pub fn iter<'a>(&'a self)
iter_mut			    fn iter_mut(&'a mut self) -> Box<Iterator<Item = &'a mut DefId> + 'a> 
iterate_until_fixed_point			    fn iterate_until_fixed_point<F>(&self, tag: &str, mut body: F)
join			    fn join(&self, a: usize, b: usize) -> usize { a & !b }
join			    fn join(&self, a: usize, b: usize) -> usize { a | b }
join			    fn join(&self, succ: usize, pred: usize) -> usize;
keep_local			fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool 
keys			    pub fn keys(&self) -> Vec<M::Key> 
keys			    pub fn keys<'a>(&'a self) -> BTreeMapKeysIter<'a, OutputType, Option<PathBuf>> 
kill_constraint			        fn kill_constraint<'tcx>(skols: &FxHashSet<&'tcx ty::Region>,
kind			    pub fn kind(self) -> FnKind<'a> 
kind_name			    pub fn kind_name(&self) -> &'static str 
krate			    pub fn krate(&self) -> &'ast Crate 
krate			    pub fn krate<'ast>(&'ast self) -> &'ast Crate 
krate			pub fn krate(sess: &Session,
krate_attrs			    pub fn krate_attrs(&self) -> &'ast [ast::Attribute] 
lang_items			    pub mod lang_items;
lang_items			    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>
lang_items			    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;
lattice			pub mod lattice;
layout			pub mod layout;
layout			    pub fn layout<'lcx>(&'tcx self, infcx: &InferCtxt<'a, 'tcx, 'lcx>)
leak_check			    pub fn leak_check(&self,
len			    pub fn len(&self) -> usize 
len			    fn len(&self) -> usize 
level_src			    fn level_src(&self, lint: &'static Lint) -> Option<LevelSource> 
level_stack			    fn level_stack(&mut self) -> &mut Vec<(LintId, LevelSource)> 
level_stack			    fn level_stack(&mut self) -> &mut Vec<(LintId, LevelSource)>;
liberate_late_bound_regions			    pub fn liberate_late_bound_regions<T>(self,
lifetime_to_string			pub fn lifetime_to_string(e: &hir::Lifetime) -> String 
lifetimes			    pub fn lifetimes(&self) -> HirVec<&Lifetime> 
lifetimes_in_scope			fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
lift			    pub fn lift<T: ?Sized + Lift<'tcx>>(self, value: &T) -> Option<T::Lifted> 
lift_to_global			    pub fn lift_to_global<T: ?Sized + Lift<'gcx>>(self, value: &T) -> Option<T::Lifted> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> 
lift_to_tcx			    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted>;
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Region> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Substs<'tcx>> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Ty<'tcx>> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)
lift_to_tcx			    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> 
lift_to_tcx			    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)
link_name			pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> 
link_or_copy			pub fn link_or_copy<P: AsRef<Path>, Q: AsRef<Path>>(p: P, q: Q) -> io::Result<LinkOrCopy> 
lint			pub mod lint;
lint			    fn lint(&self, lint: &'static Lint, msg: &str) 
lints			    fn lints(&self) -> &LintStore 
lints			    fn lints(&self) -> &LintStore;
list			    fn list(&'o self) -> TraitObligationStackList<'o,'tcx> 
literals			    fn literals(&self) -> &Option<Vec<comments::Literal>> 
live_node			    fn live_node(&self, node_id: NodeId, span: Span) -> LiveNode 
live_node_kind_to_string			fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt) -> String 
live_on_entry			    fn live_on_entry(&self, ln: LiveNode, var: Variable)
live_on_exit			    fn live_on_exit(&self, ln: LiveNode, var: Variable)
liveness			    pub mod liveness;
ln_str			    fn ln_str(&self, ln: LiveNode) -> String 
lnk			    fn lnk(&self, ln: LiveNode) -> LiveNodeKind 
load_macro			    fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!("load_macro") }
load_macro			    fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;
local			    pub fn local(index: DefIndex) -> DefId 
local			    fn local(attr: Deprecation, id: DefId) -> DeprecationEntry 
local_crate_disambiguator			    pub fn local_crate_disambiguator(&self) -> Symbol 
local_def_id			    pub fn local_def_id(&self, node: ast::NodeId) -> DefId 
local_def_id			    pub fn local_def_id(&self, node: NodeId) -> DefId 
local_kind			    pub fn local_kind(&self, local: Local) -> LocalKind 
local_node_for_inlined_defid			    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId> 
local_node_for_inlined_defid			    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId>;
local_var_name_str			    pub fn local_var_name_str(self, id: NodeId) -> InternedString 
lookup			fn lookup<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
lookup			    fn lookup<S: Into<MultiSpan>>(&self,
lookup_adt_def			    pub fn lookup_adt_def(self, did: DefId) -> &'gcx AdtDef 
lookup_and_emit			    fn lookup_and_emit<S: Into<MultiSpan>>(&self,
lookup_and_handle_method			    fn lookup_and_handle_method(&mut self, id: ast::NodeId) 
lookup_code_extent			    pub fn lookup_code_extent(&self, e: CodeExtentData) -> CodeExtent 
lookup_deprecation			    pub fn lookup_deprecation(self, id: DefId) -> Option<Deprecation> 
lookup_deprecation_entry			    pub fn lookup_deprecation_entry(self, id: DefId) -> Option<DeprecationEntry> 
lookup_deprecation_uncached			    fn lookup_deprecation_uncached(self, id: DefId) -> Option<DeprecationEntry> 
lookup_locally_or_in_crate_store			fn lookup_locally_or_in_crate_store<M, F>(descr: &str,
lookup_packed			    pub fn lookup_packed(self, did: DefId) -> bool 
lookup_repr_hints			    pub fn lookup_repr_hints(self, did: DefId) -> Rc<Vec<attr::ReprAttr>> 
lookup_simd			    pub fn lookup_simd(self, did: DefId) -> bool 
lookup_stability			    pub fn lookup_stability(self, id: DefId) -> Option<&'gcx Stability> 
lookup_stability_uncached			    fn lookup_stability_uncached(self, id: DefId) -> Option<&'gcx Stability> 
lookup_trait_def			    pub fn lookup_trait_def(self, did: DefId) -> &'gcx TraitDef 
lower_angle_bracketed_parameter_data			    fn lower_angle_bracketed_parameter_data(&mut self,
lower_arg			    fn lower_arg(&mut self, arg: &Arg) -> hir::Arg 
lower_arm			    fn lower_arm(&mut self, arm: &Arm) -> hir::Arm 
lower_attrs			    fn lower_attrs(&mut self, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> 
lower_binding_mode			    fn lower_binding_mode(&mut self, b: &BindingMode) -> hir::BindingMode 
lower_binop			    fn lower_binop(&mut self, b: BinOp) -> hir::BinOp 
lower_block			    fn lower_block(&mut self, b: &Block) -> P<hir::Block> 
lower_block_check_mode			    fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode 
lower_bounds			    fn lower_bounds(&mut self, bounds: &[TyParamBound]) -> hir::TyParamBounds 
lower_capture_clause			    fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause 
lower_constness			    fn lower_constness(&mut self, c: Spanned<Constness>) -> hir::Constness 
lower_crate			    fn lower_crate(mut self, c: &Crate) -> hir::Crate 
lower_crate			pub fn lower_crate(sess: &Session,
lower_defaultness			    fn lower_defaultness(&mut self, d: Defaultness, has_value: bool) -> hir::Defaultness 
lower_expr			    fn lower_expr(&mut self, e: &Expr) -> hir::Expr 
lower_field			    fn lower_field(&mut self, f: &Field) -> hir::Field 
lower_fn_decl			    fn lower_fn_decl(&mut self, decl: &FnDecl) -> P<hir::FnDecl> 
lower_foreign_item			    fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem 
lower_foreign_mod			    fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod 
lower_generics			    fn lower_generics(&mut self, g: &Generics) -> hir::Generics 
lower_impl_item			    fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem 
lower_impl_item_ref			    fn lower_impl_item_ref(&mut self, i: &ImplItem) -> hir::ImplItemRef 
lower_impl_polarity			    fn lower_impl_polarity(&mut self, i: ImplPolarity) -> hir::ImplPolarity 
lower_item			    pub fn lower_item(&mut self, i: &Item) -> hir::Item 
lower_item_id			    fn lower_item_id(&mut self, i: &Item) -> SmallVector<hir::ItemId> 
lower_item_kind			    fn lower_item_kind(&mut self,
lower_items			    fn lower_items(&mut self, c: &Crate) 
lower_label			    fn lower_label(&mut self, id: NodeId, label: Option<Spanned<Ident>>) -> Option<hir::Label> 
lower_lifetime			    fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime 
lower_lifetime_def			    fn lower_lifetime_def(&mut self, l: &LifetimeDef) -> hir::LifetimeDef 
lower_lifetime_defs			    fn lower_lifetime_defs(&mut self, lts: &Vec<LifetimeDef>) -> hir::HirVec<hir::LifetimeDef> 
lower_lifetimes			    fn lower_lifetimes(&mut self, lts: &Vec<Lifetime>) -> hir::HirVec<hir::Lifetime> 
lower_local			    fn lower_local(&mut self, l: &Local) -> P<hir::Local> 
lower_macro_def			    fn lower_macro_def(&mut self, m: &MacroDef) -> hir::MacroDef 
lower_method_sig			    fn lower_method_sig(&mut self, sig: &MethodSig) -> hir::MethodSig 
lower_mod			    fn lower_mod(&mut self, m: &Mod) -> hir::Mod 
lower_mt			    fn lower_mt(&mut self, mt: &MutTy) -> hir::MutTy 
lower_mutability			    fn lower_mutability(&mut self, m: Mutability) -> hir::Mutability 
lower_opt_lifetime			    fn lower_opt_lifetime(&mut self, o_lt: &Option<Lifetime>) -> Option<hir::Lifetime> 
lower_opt_sp_ident			    fn lower_opt_sp_ident(&mut self, o_id: Option<Spanned<Ident>>) -> Option<Spanned<Name>> 
lower_parenthesized_parameter_data			    fn lower_parenthesized_parameter_data(&mut self,
lower_pat			    fn lower_pat(&mut self, p: &Pat) -> P<hir::Pat> 
lower_path			    fn lower_path(&mut self,
lower_path_extra			    fn lower_path_extra(&mut self,
lower_path_segment			    fn lower_path_segment(&mut self,
lower_poly_trait_ref			    fn lower_poly_trait_ref(&mut self, p: &PolyTraitRef) -> hir::PolyTraitRef 
lower_qpath			    fn lower_qpath(&mut self,
lower_stmt			    fn lower_stmt(&mut self, s: &Stmt) -> SmallVector<hir::Stmt> 
lower_struct_field			    fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField 
lower_trait_bound_modifier			    fn lower_trait_bound_modifier(&mut self, f: TraitBoundModifier) -> hir::TraitBoundModifier 
lower_trait_item			    fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem 
lower_trait_ref			    fn lower_trait_ref(&mut self, p: &TraitRef) -> hir::TraitRef 
lower_ty			    fn lower_ty(&mut self, t: &Ty) -> P<hir::Ty> 
lower_ty_binding			    fn lower_ty_binding(&mut self, b: &TypeBinding) -> hir::TypeBinding 
lower_ty_param			    fn lower_ty_param(&mut self, tp: &TyParam, add_bounds: &[TyParamBound]) -> hir::TyParam 
lower_ty_param_bound			    fn lower_ty_param_bound(&mut self, tpb: &TyParamBound) -> hir::TyParamBound 
lower_ty_params			    fn lower_ty_params(&mut self, tps: &P<[TyParam]>, add_bounds: &NodeMap<Vec<TyParamBound>>)
lower_unop			    fn lower_unop(&mut self, u: UnOp) -> hir::UnOp 
lower_unsafe_source			    fn lower_unsafe_source(&mut self, u: UnsafeSource) -> hir::UnsafeSource 
lower_unsafety			    fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety 
lower_variant			    fn lower_variant(&mut self, v: &Variant) -> hir::Variant 
lower_variant_data			    fn lower_variant_data(&mut self, vdata: &VariantData) -> hir::VariantData 
lower_visibility			    fn lower_visibility(&mut self, v: &Visibility) -> hir::Visibility 
lower_where_clause			    fn lower_where_clause(&mut self, wc: &WhereClause) -> hir::WhereClause 
lower_where_predicate			    fn lower_where_predicate(&mut self, pred: &WherePredicate) -> hir::WherePredicate 
lowering			pub mod lowering;
lto			    pub fn lto(&self) -> bool 
lub			    pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'gcx, 'tcx> 
lub			    pub fn lub<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)
lub			mod lub;
lub			    fn lub(&mut self, mode: MatchMode) 
lub			fn lub() 
lub_concrete_regions			    fn lub_concrete_regions(&self,
lub_free_regions			    pub fn lub_free_regions(&self, fr_a: FreeRegion, fr_b: FreeRegion) -> Region 
lub_regions			    pub fn lub_regions(&self,
macros			mod macros;
macros_only			    pub fn macros_only(self) -> bool 
main			pub fn main(swap_in: Receiver<Vec<DepMessage>>,
main			fn main() 
main			fn main() {}
make			    pub fn make<FN>(start_krate: CrateNum,
make_child			fn make_child<'elve>(x: &mut &'elve isize, y: &mut &'elve isize) 
make_child			fn make_child<'human, 'elve: 'human>(x: &mut &'human isize,
make_child			fn make_child<'human, 'elve>(x: &mut &'human isize, y: &mut &'elve isize) 
make_eqregion			    pub fn make_eqregion(&self,
make_node			    fn make_node(&mut self, id: DepNode<D>) -> IdIndex 
make_nop			    pub fn make_nop(&mut self) 
make_statement_nop			    pub fn make_statement_nop(&mut self, location: Location) 
make_struct			                    fn make_struct(this: &mut LoweringContext,
make_subregion			    pub fn make_subregion(&self,
make_target_lib_path			fn make_target_lib_path(sysroot: &Path,
map			pub mod map;
map			    pub fn map<M, F>(self, f: F) -> Vtable<'tcx, M> where F: FnMut(N) -> M 
map			    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> NodeItem<U> 
map_bound			    pub fn map_bound<F,U>(self, f: F) -> Binder<U>
map_bound_ref			    pub fn map_bound_ref<F,U>(&self, f: F) -> Binder<U>
map_crate			pub fn map_crate<'ast>(forest: &'ast mut Forest,
map_decoded_item			pub fn map_decoded_item<'ast>(map: &Map<'ast>,
map_def			    pub fn map_def<E, OP>(&self, mut op: OP) -> Option<DepNode<E>>
maps			pub mod maps;
mark_incr_comp_session_as_invalid			    pub fn mark_incr_comp_session_as_invalid(&self) 
mark_live_symbols			    fn mark_live_symbols(&mut self) 
match_			    fn match_(&mut self, id: ast::NodeId, discr: &hir::Expr,
match_fresh_trait_refs			    fn match_fresh_trait_refs(&self,
match_impl			    fn match_impl(&mut self,
match_mode			    fn match_mode(&self) -> MatchMode 
match_poly_projection_predicate			    pub fn match_poly_projection_predicate(&self,
match_poly_trait_ref			    fn match_poly_trait_ref(&mut self,
match_projection			    fn match_projection(&mut self,
match_projection_obligation_against_definition_bounds			    fn match_projection_obligation_against_definition_bounds(
match_where_clause_trait_ref			    fn match_where_clause_trait_ref(&mut self,
matched_pat			    fn matched_pat(&mut self,
matches_names			    fn matches_names(&self, parent_of_n: NodeId, name: Name) -> bool 
max			    pub fn max() -> IdRange 
max			    pub fn max(self, other: Align) -> Align 
may_apply			    fn may_apply(&self) -> bool 
may_apply			    pub fn may_apply(&self) -> bool 
maybe_get_item_ast			    fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)
maybe_print_constraints_for			pub fn maybe_print_constraints_for<'a, 'gcx, 'tcx>(
maybe_print_trailing_comment			    pub fn maybe_print_trailing_comment(&mut self,
maybe_report_ambiguity			    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>) 
maybe_walk			    pub fn maybe_walk<F>(&'tcx self, mut f: F)
mem_categorization			    pub mod mem_categorization;
memoize			    fn memoize<OP>(&self, key: M::Key, op: OP) -> M::Value
memoize			    fn memoize<OP>(&self, key: K, op: OP) -> V
memoize			    fn memoize<OP>(&self, key: Self::Key, op: OP) -> Self::Value
merge_from_succ			    fn merge_from_succ(&mut self,
meta_stats			    pub fn meta_stats(&self) -> bool { self.opts.debugging_opts.meta_stats }
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8] { bug!("metadata_encoding_version") }
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8];
metadata_filename			    fn metadata_filename(&self) -> &str { bug!("metadata_filename") }
metadata_filename			    fn metadata_filename(&self) -> &str;
metadata_section_name			    fn metadata_section_name(&self, target: &Target) -> &str { bug!("metadata_section_name") }
metadata_section_name			    fn metadata_section_name(&self, target: &Target) -> &str;
method_might_be_inlined			fn method_might_be_inlined<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
middle			pub mod middle 
min			    pub fn min(self, other: Align) -> Align 
mir			pub mod mir;
misc			    pub fn misc(span: Span, body_id: ast::NodeId) -> ObligationCause<'tcx> 
misc			    pub fn misc(span: Span, body_id: ast::NodeId, trait_ref: O) -> Obligation<'tcx, O> 
missing_lang_items			    fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>
missing_lang_items			    fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;
mk_adt			    pub fn mk_adt(self, def: &'tcx AdtDef, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> 
mk_anon			    pub fn mk_anon(self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> 
mk_array			    pub fn mk_array(self, ty: Ty<'tcx>, n: usize) -> Ty<'tcx> 
mk_bool			    pub fn mk_bool(self) -> Ty<'tcx> 
mk_box			    pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_closure			    pub fn mk_closure(self,
mk_closure_from_closure_substs			    pub fn mk_closure_from_closure_substs(self,
mk_diverging_default			    pub fn mk_diverging_default(self) -> Ty<'tcx> 
mk_dynamic			    pub fn mk_dynamic(
mk_existential_predicates			    pub fn mk_existential_predicates<I: InternAs<[ExistentialPredicate<'tcx>],
mk_float_var			    pub fn mk_float_var(self, v: FloatVid) -> Ty<'tcx> 
mk_fn_def			    pub fn mk_fn_def(self, def_id: DefId,
mk_fn_ptr			    pub fn mk_fn_ptr(self, fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> 
mk_fn_sig			    pub fn mk_fn_sig<I>(self, inputs: I, output: I::Item, variadic: bool)
mk_imm_ptr			    pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_imm_ref			    pub fn mk_imm_ref(self, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_infer			    pub fn mk_infer(self, it: InferTy) -> Ty<'tcx> 
mk_int_var			    pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> 
mk_mach_float			    pub fn mk_mach_float(self, tm: ast::FloatTy) -> Ty<'tcx> 
mk_mach_int			    pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> 
mk_mach_uint			    pub fn mk_mach_uint(self, tm: ast::UintTy) -> Ty<'tcx> 
mk_map			    fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> 
mk_mut_ptr			    pub fn mk_mut_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_mut_ref			    pub fn mk_mut_ref(self, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_nil			    pub fn mk_nil(self) -> Ty<'tcx> 
mk_nil_ptr			    pub fn mk_nil_ptr(self) -> Ty<'tcx> 
mk_param			    pub fn mk_param(self,
mk_param_from_def			    pub fn mk_param_from_def(self, def: &ty::TypeParameterDef) -> Ty<'tcx> 
mk_projection			    pub fn mk_projection(self,
mk_ptr			    pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> 
mk_ref			    pub fn mk_ref(self, r: &'tcx Region, tm: TypeAndMut<'tcx>) -> Ty<'tcx> 
mk_self_type			    pub fn mk_self_type(self) -> Ty<'tcx> 
mk_set			    fn mk_set<V: Ord>(entries: Vec<V>) -> BTreeSet<V> 
mk_slice			    pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_static_str			    pub fn mk_static_str(self) -> Ty<'tcx> 
mk_str			    pub fn mk_str(self) -> Ty<'tcx> 
mk_substs			    pub fn mk_substs<I: InternAs<[Kind<'tcx>],
mk_substs_trait			    pub fn mk_substs_trait(self,
mk_tup			    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output 
mk_ty			    pub fn mk_ty(self, st: TypeVariants<'tcx>) -> Ty<'tcx> 
mk_type_list			    pub fn mk_type_list<I: InternAs<[Ty<'tcx>],
mk_var			    pub fn mk_var(self, v: TyVid) -> Ty<'tcx> 
moves_by_default			    pub fn moves_by_default(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
multi			    pub fn multi(a: S, b: S, c: S, d: S) -> R 
multi_s			    pub fn multi_s(a: S, b: S, c: S, d: S) -> R 
multi_ubnr			    pub fn multi_ubnr(a: S, b: S, c: S, d: S) -> R 
must_defer			    pub fn must_defer(tcx: TyCtxt<'a, 'gcx, 'tcx>,
must_hold			    pub fn must_hold(&self) -> bool 
must_not_eliminate_frame_pointers			    pub fn must_not_eliminate_frame_pointers(&self) -> bool 
mut_bits_to_string			fn mut_bits_to_string(words: &mut [usize]) -> String 
mut_lints			    fn mut_lints(&mut self) -> &mut LintStore 
mut_lints			    fn mut_lints(&mut self) -> &mut LintStore;
mutate			    fn mutate(&mut self,
mutate_expr			    fn mutate_expr(&mut self,
name			    fn name(&self) -> Name;
name			    pub fn name(&self, id: NodeId) -> Name 
name			    fn name<'a>(&self) -> Cow<'static, str> 
name_lower			    pub fn name_lower(&self) -> String 
name_to_dummy_lifetime			fn name_to_dummy_lifetime(name: ast::Name) -> hir::Lifetime 
name_to_string			pub fn name_to_string(name: ast::Name) -> String 
named_element_ty			    pub fn named_element_ty(self,
native_libraries			    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>
native_libraries			    fn native_libraries(&self, cnum: CrateNum) -> Vec<NativeLibrary>;
nbsp			    pub fn nbsp(&mut self) -> io::Result<()> 
nearest_common_ancestor			    pub fn nearest_common_ancestor(&self,
necessary_variants			    pub fn necessary_variants(&self) -> Vec<DefId> 
need_type_info			    fn need_type_info(&self, span: Span, ty: Ty<'tcx>) 
needs_drop			    pub fn needs_drop(&self, _: TyCtxt) -> bool 
needs_infer			    fn needs_infer(&self) -> bool 
needs_infer			    pub fn needs_infer(&self) -> bool 
needs_parentheses			fn needs_parentheses(expr: &hir::Expr) -> bool 
needs_subst			    fn needs_subst(&self) -> bool 
nested_obligations			    pub fn nested_obligations(self) -> Vec<N> 
nested_obligations_mut			    fn nested_obligations_mut(&mut self) -> &mut Vec<N> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v>;
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> 
nested_visit_map			            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'gcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'ast> 
nested_visit_map			        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> 
nested_visit_map			    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> 
new			    pub fn new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    pub fn new(test: &str) -> Result<EdgeFilter, Box<Error>> 
new			    pub fn new(text: &str) -> Self 
new			    pub fn new(graph: DepGraph) -> DepTrackingMap<M> 
new			    fn new(v: usize) -> IdIndex 
new			    pub fn new() -> DepGraphEdges<D> 
new			    pub fn new(enabled: bool) -> DepGraph 
new			    pub fn new(nodes: &[DepNode<D>],
new			    pub fn new(data: &'graph DepGraphThreadData) -> Option<IgnoreTask<'graph>> 
new			    pub fn new(data: &'graph DepGraphThreadData, key: DepNode<DefId>)
new			    pub fn new() -> Self 
new			    pub fn new(enabled: bool) -> DepGraphThreadData 
new			    pub fn new(def: Def) -> PathResolution 
new			    fn new(value: usize) -> Self 
new			    pub fn new(x: usize) -> CrateNum 
new			    pub fn new(x: usize) -> DefIndex 
new			    pub fn new(map: &'a map::Map<'ast>) -> IdRangeComputingVisitor<'a, 'ast> 
new			    pub fn new(base: &'v mut V) -> Self 
new			    fn new(d: &'a FnDecl, b: ast::ExprId, id: NodeId, s: Span, attrs: &'a [Attribute]) -> Self 
new			    pub fn new(definitions: &'a mut Definitions) -> Self 
new			    pub fn new() -> Definitions 
new			    pub fn new(krate: Crate, dep_graph: &DepGraph) -> Forest 
new			    pub fn new(cm: &'a CodeMap,
new			    pub fn new(hash: u64) -> Svh 
new			    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool)
new			    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool)
new			            fn new(sub_fr: ty::FreeRegion,
new			    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,
new			    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)
new			    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool)
new			    pub fn new(fields: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool)
new			    fn new(a_is_expected: bool, a: T, b: T) -> Self 
new			    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,
new			    fn new(directions: TaintDirections,
new			    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> RegionVarBindings<'a, 'gcx, 'tcx> 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self 
new			    pub fn new(f: &'combine mut CombineFields<'infcx, 'gcx, 'tcx>, a_is_expected: bool)
new			    pub fn new() -> TypeVariableTable<'tcx> 
new			    fn new(sess: &'a Session,
new			    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    pub fn new() -> LintStore 
new			    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,
new			    fn new(root: RootUnsafeContext) -> UnsafeContext 
new			    pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),
new			    pub fn new() -> FreeRegionMap 
new			    pub fn new() -> LanguageItems 
new			    pub fn new(session: &'a Session, ast_map: &'a hir_map::Map<'tcx>)
new			    fn new(ir: &'a mut IrMaps<'a, 'tcx>, specials: Specials) -> Liveness<'a, 'tcx> 
new			    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> IrMaps<'a, 'tcx> 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)
new			    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ReachableContext<'a, 'tcx> 
new			    pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> 
new			    pub fn new() -> Self 
new			            fn new(value: usize) -> Self 
new			    pub fn new(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,
new			    pub fn new(terminator: Option<Terminator<'tcx>>) -> BasicBlockData<'tcx> 
new			    pub fn new() -> Passes 
new			    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> 
new			    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> 
new			    pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> 
new			    pub fn new() -> Self { CodeStats { type_sizes: FxHashSet() } }
new			    pub fn new(data: BTreeMap<String, BTreeSet<String>>) -> Externs 
new			    pub fn new(entries: &[(OutputType, Option<PathBuf>)]) -> OutputTypes 
new			    pub fn new(sysroot: &'a Path,
new			    pub fn new() -> SearchPaths 
new			    pub fn new() -> FulfillmentContext<'tcx> 
new			    pub fn new(dep_graph: DepGraph) -> GlobalFulfilledPredicates<'gcx> 
new			    fn new(obligation: PredicateObligation<'tcx>,
new			    pub fn new(cause: ObligationCause<'tcx>,
new			    pub fn new(span: Span,
new			    fn new(selcx: &'a mut SelectionContext<'b, 'gcx, 'tcx>,
new			    pub fn new() -> Self 
new			    pub fn new() -> EvaluationCache<'tcx> 
new			    pub fn new() -> SelectionCache<'tcx> 
new			    pub fn new(infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>) -> SelectionContext<'cx, 'gcx, 'tcx> 
new			    pub fn new() -> Self 
new			    fn new() -> Children 
new			    pub fn new() -> Graph 
new			    fn new(base: I) -> FilterToTraits<I> 
new			    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> PredicateSet<'a, 'gcx, 'tcx> 
new			    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Match<'a, 'gcx, 'tcx> 
new			    fn new(arenas: &'tcx CtxtArenas<'tcx>) -> CtxtInterners<'tcx> 
new			    fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> 
new			    pub fn new() -> CtxtArenas<'tcx> 
new			    fn new() -> FlagComputation 
new			    fn new(just_constrained: bool) -> Self 
new			    fn new<F>(tcx: TyCtxt<'a, 'gcx, 'tcx>, fld_r: &'a mut F)
new			    pub fn new<F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
new			    fn new(root_mode: RootMode) -> LocalPathBuffer 
new			    fn new(dl: &TargetDataLayout, fields: &Vec<&'a Layout>,
new			    pub fn new(dl: &TargetDataLayout, packed: bool) -> Union 
new			    fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,
new			    pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>) -> TraitRef<'tcx> 
new			    pub fn new(depth: u32) -> DebruijnIndex 
new			    pub fn new(index: u32, name: Name) -> ParamTy 
new			    pub fn new(def_id: DefId,
new			    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self 
new			    pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> 
new_bound			    pub fn new_bound(&self, debruijn: ty::DebruijnIndex) -> &'tcx Region 
new_code_extent			    fn new_code_extent(&mut self, child_scope: CodeExtentData) -> CodeExtent 
new_from_input			    pub fn new_from_input(cm: &'a CodeMap,
new_node_extent			    fn new_node_extent(&mut self, child_scope: ast::NodeId) -> CodeExtent 
new_node_extent_with_dtor			    fn new_node_extent_with_dtor(&mut self, id: ast::NodeId) -> CodeExtent 
new_region_var			    pub fn new_region_var(&self, origin: RegionVariableOrigin) -> RegionVid 
new_return_pointer			    pub fn new_return_pointer(return_ty: Ty) -> LocalDecl 
new_temp			    pub fn new_temp(ty: Ty<'tcx>) -> Self 
new_var			    pub fn new_var(&mut self,
next			    fn next(&mut self) -> Option<NodeId> 
next			    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> 
next			    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> 
next			    fn next(&mut self) -> Option<(&'a Path, PathKind)> 
next			    fn next(&mut self) -> Option<&'o TraitObligationStack<'o,'tcx>> 
next			    fn next(&mut self) -> Option<Node> 
next			    fn next(&mut self) -> Option<DefId> 
next			    fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> 
next			    fn next(&mut self) -> Option<ty::Predicate<'tcx>> 
next			    fn next(&mut self) -> Option<Ty<'tcx>> 
next_diverging_ty_var			    pub fn next_diverging_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> 
next_float_var_id			    pub fn next_float_var_id(&self) -> FloatVid 
next_id			    fn next_id(&self) -> NodeId 
next_int_var_id			    pub fn next_int_var_id(&self) -> IntVid 
next_node_id			    pub fn next_node_id(&self) -> NodeId 
next_region_var			    pub fn next_region_var(&self, origin: RegionVariableOrigin)
next_ty_var			    pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> 
next_ty_var_id			    pub fn next_ty_var_id(&self, diverging: bool, origin: TypeVariableOrigin) -> TyVid 
nightly_options			pub mod nightly_options 
no_landing_pads			    pub fn no_landing_pads(&self) -> bool 
no_late_bound_regions			    pub fn no_late_bound_regions<T>(self, value: &Binder<T>) -> Option<T>
no_verify			    pub fn no_verify(&self) -> bool { self.opts.debugging_opts.no_verify }
node_extent			    pub fn node_extent(&self, n: ast::NodeId) -> CodeExtent 
node_id			    fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> 
node_id			    pub fn node_id(self) -> NodeId 
node_id			    fn node_id(&self, n: &Node) -> dot::Id 
node_id			    pub fn node_id(&self) -> ast::NodeId 
node_id			    pub fn node_id(&self, region_maps: &RegionMaps) -> ast::NodeId 
node_id_item_substs			    pub fn node_id_item_substs(&self, id: NodeId) -> Option<&'tcx Substs<'tcx>> 
node_id_to_string			fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String 
node_id_to_type			    pub fn node_id_to_type(&self, id: NodeId) -> Ty<'tcx> 
node_id_to_type_opt			    pub fn node_id_to_type_opt(&self, id: NodeId) -> Option<Ty<'tcx>> 
node_is_reachable			    pub fn node_is_reachable(&self, id: ast::NodeId) -> bool 
node_label			    fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> 
node_label			    fn node_label(&self, n: &Node) -> dot::LabelText 
node_method_id			    pub fn node_method_id(&self, method_call: ty::MethodCall)
node_method_ty			    pub fn node_method_ty(&self, method_call: ty::MethodCall)
node_path_str			    pub fn node_path_str(self, id: ast::NodeId) -> String 
node_scope_region			    pub fn node_scope_region(self, id: NodeId) -> &'tcx Region 
node_to_string			    pub fn node_to_string(&self, id: NodeId) -> String 
node_to_string			fn node_to_string(node_id: ast::NodeId) -> String 
node_to_user_string			    pub fn node_to_user_string(&self, id: NodeId) -> String 
node_ty			    pub fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> 
node_ty			    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> 
node_type			    pub fn node_type(&self, id: ast::NodeId) -> Ty<'tcx> 
nodemap			    pub mod nodemap;
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> 
nodes			    pub fn nodes(&self) -> Vec<&DepNode<D>> 
nodes			    fn nodes(&self) -> dot::Nodes<Node> 
nodes_matching_suffix			    pub fn nodes_matching_suffix<'a>(&'a self, parts: &'a [String])
nominal_obligations			    fn nominal_obligations(&mut self,
non_zero_field_in_type			    fn non_zero_field_in_type(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
non_zero_field_paths			    fn non_zero_field_paths<I>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
none			    pub fn none() -> PathParameters 
nonzeroing_move_hints			    pub fn nonzeroing_move_hints(&self) -> bool 
noop			fn noop() 
normalize			fn normalize<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
normalize			pub fn normalize<'a, 'b, 'gcx, 'tcx, T>(selcx: &'a mut SelectionContext<'b, 'gcx, 'tcx>,
normalize			    fn normalize(&mut self) -> Vec<traits::PredicateObligation<'tcx>> 
normalize_and_test_predicates			pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
normalize_associated_type			    pub fn normalize_associated_type<T>(self, value: &T) -> T
normalize_associated_type			fn normalize_associated_type<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
normalize_associated_type_in_env			    pub fn normalize_associated_type_in_env<T>(
normalize_param_env_or_error			pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
normalize_projection_type			    pub fn normalize_projection_type(&mut self,
normalize_projection_type			pub fn normalize_projection_type<'a, 'b, 'gcx, 'tcx>(
normalize_projections_in			    fn normalize_projections_in<T>(&self, value: &T) -> T::Lifted
normalize_to_error			fn normalize_to_error<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tcx>,
normalize_with_depth			pub fn normalize_with_depth<'a, 'b, 'gcx, 'tcx, T>(
note_and_explain_region			    pub fn note_and_explain_region(self,
note_and_explain_type_err			    pub fn note_and_explain_type_err(self,
note_error_origin			    fn note_error_origin(&self,
note_obligation_cause			    fn note_obligation_cause<T>(&self,
note_obligation_cause_code			    fn note_obligation_cause_code<T>(&self,
note_region_origin			    fn note_region_origin(&self, err: &mut DiagnosticBuilder, origin: &SubregionOrigin<'tcx>) 
note_type_err			    pub fn note_type_err(&self,
note_without_error			    pub fn note_without_error(&self, msg: &str) 
num			    pub mod num;
num_local_def_ids			    pub fn num_local_def_ids(&self) -> usize 
num_nodes			    fn num_nodes(&self) -> usize { self.basic_blocks.len() }
num_to_string			        fn num_to_string(counter: usize) -> String 
num_vars			    pub fn num_vars(&self) -> u32 
num_vars			    pub fn num_vars(&self) -> usize 
obj_size_bound			    pub fn obj_size_bound(&self) -> u64 
object			trait object (e.g. if `T: OtherTrait`, use `on: Box<OtherTrait>`). If the number
object_region_bounds			pub fn object_region_bounds<'a, 'gcx, 'tcx>(
object_safety			mod object_safety;
object_safety			    pub fn object_safety(&self) -> Option<bool> 
object_safety_violation_for_method			    fn object_safety_violation_for_method(self,
object_safety_violations			    pub fn object_safety_violations(self, trait_def_id: DefId)
object_safety_violations_for_trait			    fn object_safety_violations_for_trait(self, trait_def_id: DefId)
obligations			pub fn obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
of			    pub fn of(lint: &'static Lint) -> LintId 
offset_cur_anon			    fn offset_cur_anon(&self) 
on_mir_pass			    fn on_mir_pass<'a>(
on_unimplemented_note			    fn on_unimplemented_note(&self,
opportunistic_resolve_var			    pub fn opportunistic_resolve_var(&self, rid: RegionVid) -> &'tcx ty::Region 
opposite			    fn opposite(self) -> RelationDir 
ops::BitAnd for TypeContents			impl ops::BitAnd for TypeContents 
ops::BitOr for TypeContents			impl ops::BitOr for TypeContents 
ops::Sub for TypeContents			impl ops::Sub for TypeContents 
opt			    pub fn opt(a: S, b: S, c: S, d: S) -> R 
opt			mod opt 
opt_def_index			    pub fn opt_def_index(&self, node: ast::NodeId) -> Option<DefIndex> 
opt_def_path			    pub fn opt_def_path(self, id: DefId) -> Option<ast_map::DefPath> 
opt_destruction_extent			    pub fn opt_destruction_extent(&self, n: ast::NodeId) -> Option<CodeExtent> 
opt_encl_scope			    pub fn opt_encl_scope(&self, id: CodeExtent) -> Option<CodeExtent> 
opt_expr			    fn opt_expr(&mut self,
opt_local_def_id			    pub fn opt_local_def_id(&self, node: ast::NodeId) -> Option<DefId> 
opt_local_def_id			    pub fn opt_local_def_id(&self, node: NodeId) -> Option<DefId> 
opt_normalize_projection_type			fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(
opt_s			    pub fn opt_s(a: S, b: S, c: S, d: S) -> R 
opt_span_bug_fmt			fn opt_span_bug_fmt<S: Into<MultiSpan>>(file: &'static str,
opt_span_warn			    pub fn opt_span_warn<S: Into<MultiSpan>>(&self, opt_sp: Option<S>, msg: &str) 
opt_ubnr			    pub fn opt_ubnr(a: S, b: S, c: S, d: S) -> R 
optgroups			    fn optgroups() -> Vec<OptGroup> 
option			    pub fn option(&self) -> Option<PathBuf> 
or			    pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> 
original_crate_name			    fn original_crate_name(&self, cnum: CrateNum) -> Symbol 
original_crate_name			    fn original_crate_name(&self, cnum: CrateNum) -> Symbol;
original_crate_name			    pub fn original_crate_name(self, cnum: CrateNum) -> Symbol 
original_label			fn original_label(span: Span) -> Original 
original_lifetime			fn original_lifetime(l: &hir::Lifetime) -> Original 
orphan_check			pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
orphan_check_trait_ref			fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,
outgoing			    pub fn outgoing() -> Self 
outlives			pub mod outlives;
outlives_components			    pub fn outlives_components(&self, ty0: Ty<'tcx>)
output			    pub fn output(&self) -> Ty<'tcx> 
output			    pub fn output(&self) -> ty::Binder<Ty<'tcx>> 
overlap			fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,
overlapping_impls			pub fn overlapping_impls<'cx, 'gcx, 'tcx>(infcx: &InferCtxt<'cx, 'gcx, 'tcx>,
overloaded_method_return_ty			    fn overloaded_method_return_ty(&self,
own_count			    pub fn own_count(&self) -> usize 
owned_pointer			    pub fn owned_pointer(&self) -> TypeContents 
owns_owned			    pub fn owns_owned(&self) -> bool 
panic_strategy			    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy 
panic_strategy			    fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;
panic_strategy			    pub fn panic_strategy(&self) -> PanicStrategy 
param_env			    pub fn param_env(&self) -> &ty::ParameterEnvironment<'gcx> 
param_env			    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'gcx> 
parameterized			pub fn parameterized(f: &mut fmt::Formatter,
params			    pub fn params(&self) -> &[Kind<'tcx>] 
parent			    pub fn parent(&self, child: DefId) -> DefId 
parent_count			    pub fn parent_count(&self) -> usize 
parent_def_id			    pub fn parent_def_id(self, def_id: DefId) -> Option<DefId> 
parent_node			    fn parent_node(self) -> Option<NodeId> 
parse			    pub fn parse(sess: &Session) -> TargetDataLayout 
parse_bool			        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool 
parse_cfgspecs			pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig 
parse_crate_types_from_list			pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> 
parse_list			        fn parse_list(slot: &mut Vec<String>, v: Option<&str>)
parse_opt_bool			        fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool 
parse_opt_list			        fn parse_opt_list(slot: &mut Option<Vec<String>>, v: Option<&str>)
parse_opt_string			        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool 
parse_opt_uint			        fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool 
parse_panic_strategy			        fn parse_panic_strategy(slot: &mut Option<PanicStrategy>, v: Option<&str>) -> bool 
parse_passes			        fn parse_passes(slot: &mut Passes, v: Option<&str>) -> bool 
parse_string			        fn parse_string(slot: &mut String, v: Option<&str>) -> bool 
parse_string_push			        fn parse_string_push(slot: &mut Vec<String>, v: Option<&str>) -> bool 
parse_uint			        fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool 
pat			    fn pat(&mut self, pat: &hir::Pat, pred: CFGIndex) -> CFGIndex 
pat			    fn pat(&mut self, span: Span, pat: hir::PatKind) -> P<hir::Pat> 
pat_bindings			    fn pat_bindings<F>(&mut self, pat: &hir::Pat, mut f: F) where
pat_err			    fn pat_err(&mut self, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> 
pat_ident			    fn pat_ident(&mut self, span: Span, name: Name) -> P<hir::Pat> 
pat_ident_binding_mode			    fn pat_ident_binding_mode(&mut self, span: Span, name: Name, bm: hir::BindingMode)
pat_none			    fn pat_none(&mut self, span: Span) -> P<hir::Pat> 
pat_ok			    fn pat_ok(&mut self, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> 
pat_some			    fn pat_some(&mut self, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> 
pat_std_enum			    fn pat_std_enum(&mut self,
pat_to_string			pub fn pat_to_string(pat: &hir::Pat) -> String 
pat_ty			    fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> 
pat_ty			    pub fn pat_ty(&self, pat: &hir::Pat) -> Ty<'tcx> 
pat_ty_opt			    pub fn pat_ty_opt(&self, pat: &hir::Pat) -> Option<Ty<'tcx>> 
pat_util			pub mod pat_util;
pat_wild			    fn pat_wild(&mut self, span: Span) -> P<hir::Pat> 
path			    pub fn path(&self, flavor: OutputType) -> PathBuf 
path2cstr			pub fn path2cstr(p: &Path) -> CString 
path_to_string			pub fn path_to_string(p: &hir::Path) -> String 
pats_all			    fn pats_all<'b, I: Iterator<Item=&'b P<hir::Pat>>>(&mut self,
pending_obligations			    pub fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>> 
pick_lifetime			    fn pick_lifetime(&self,
plug_leaks			    pub fn plug_leaks<T>(&self,
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: CrateNum) -> Option<DefId>;
poly_project_and_unify_type			pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(
pop_ignore			    pub fn pop_ignore(&mut self) 
pop_skolemized			    pub fn pop_skolemized(&self,
pop_skolemized			    pub fn pop_skolemized(&self,
pop_task			    pub fn pop_task(&mut self, key: DepNode<D>) 
populate_implementations_for_trait_if_necessary			    pub fn populate_implementations_for_trait_if_necessary(self, trait_id: DefId) 
populate_inherent_implementations_for_type_if_necessary			    pub fn populate_inherent_implementations_for_type_if_necessary(self,
positional_element_ty			    pub fn positional_element_ty(self,
post			    fn post(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> 
postorder			pub fn postorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> Postorder<'a, 'tcx> 
postprocess			    fn postprocess(&mut self, krate: &ast::Crate);
ppaux			    pub mod ppaux;
pprust::PpAnn for DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O> 
pre			    fn pre(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> 
pre			    fn pre(&self,
predecessors			    pub fn predecessors(&self, mir: &Mir) -> Ref<IndexVec<BasicBlock, Vec<BasicBlock>>> 
predecessors			    fn predecessors<'graph>(&'graph self, node: Self::Node)
predecessors			    pub fn predecessors(&self) -> Ref<IndexVec<BasicBlock, Vec<BasicBlock>>> 
predecessors_for			    pub fn predecessors_for(&self, bb: BasicBlock) -> Ref<Vec<BasicBlock>> 
predicate_can_apply			    fn predicate_can_apply(&self, pred: ty::PolyTraitRef<'tcx>) -> bool 
predicate_for_trait_def			    pub fn predicate_for_trait_def(self,
predicate_for_trait_ref			pub fn predicate_for_trait_ref<'tcx>(
predicate_obligations			pub fn predicate_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
predicates			    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> GenericPredicates<'gcx> 
predicates_for_generics			pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,
predicates_for_generics			pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,
pref			    pub fn pref(self) -> u64 
preorder			pub fn preorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> Preorder<'a, 'tcx> 
pretty_print_to			    fn pretty_print_to<'b>(&self, wr: Box<io::Write + 'b>,
previous_work_product			    pub fn previous_work_product(&self, v: &Arc<WorkProductId>) -> Option<WorkProduct> 
prim_ty_to_ty			    pub fn prim_ty_to_ty(self,
principal			    pub fn principal(&self) -> Option<ExistentialTraitRef<'tcx>> 
principal			    pub fn principal(&self) -> Option<PolyExistentialTraitRef<'tcx>> 
print			pub mod print;
print_arg			    pub fn print_arg(&mut self, input: &hir::Arg, is_closure: bool) -> io::Result<()> 
print_arm			    fn print_arm(&mut self, arm: &hir::Arm) -> io::Result<()> 
print_associated_const			    fn print_associated_const(&mut self,
print_associated_type			    fn print_associated_type(&mut self,
print_block			    pub fn print_block(&mut self, blk: &hir::Block) -> io::Result<()> 
print_block_maybe_unclosed			    pub fn print_block_maybe_unclosed(&mut self,
print_block_unclosed			    pub fn print_block_unclosed(&mut self, blk: &hir::Block) -> io::Result<()> 
print_block_unclosed_indent			    pub fn print_block_unclosed_indent(&mut self,
print_block_with_attrs			    pub fn print_block_with_attrs(&mut self,
print_bounds			    pub fn print_bounds(&mut self, prefix: &str, bounds: &[hir::TyParamBound]) -> io::Result<()> 
print_call_post			    fn print_call_post(&mut self, args: &[hir::Expr]) -> io::Result<()> 
print_capture_clause			    pub fn print_capture_clause(&mut self, capture_clause: hir::CaptureClause) -> io::Result<()> 
print_crate			pub fn print_crate<'a>(cm: &'a CodeMap,
print_debug_stats			    pub fn print_debug_stats(self) 
print_decl			    pub fn print_decl(&mut self, decl: &hir::Decl) -> io::Result<()> 
print_else			    fn print_else(&mut self, els: Option<&hir::Expr>) -> io::Result<()> 
print_enum_def			    pub fn print_enum_def(&mut self,
print_explicit_self			    fn print_explicit_self(&mut self, explicit_self: &hir::ExplicitSelf) -> io::Result<()> 
print_expr			    pub fn print_expr(&mut self, expr: &hir::Expr) -> io::Result<()> 
print_expr_addr_of			    fn print_expr_addr_of(&mut self,
print_expr_binary			    fn print_expr_binary(&mut self,
print_expr_call			    fn print_expr_call(&mut self, func: &hir::Expr, args: &[hir::Expr]) -> io::Result<()> 
print_expr_id			    pub fn print_expr_id(&mut self, expr_id: &hir::ExprId) -> io::Result<()> 
print_expr_maybe_paren			    pub fn print_expr_maybe_paren(&mut self, expr: &hir::Expr) -> io::Result<()> 
print_expr_method_call			    fn print_expr_method_call(&mut self,
print_expr_repeat			    fn print_expr_repeat(&mut self, element: &hir::Expr, count: &hir::Expr) -> io::Result<()> 
print_expr_struct			    fn print_expr_struct(&mut self,
print_expr_tup			    fn print_expr_tup(&mut self, exprs: &[hir::Expr]) -> io::Result<()> 
print_expr_unary			    fn print_expr_unary(&mut self, op: hir::UnOp, expr: &hir::Expr) -> io::Result<()> 
print_expr_vec			    fn print_expr_vec(&mut self, exprs: &[hir::Expr]) -> io::Result<()> 
print_extern_opt_abi			    pub fn print_extern_opt_abi(&mut self, opt_abi: Option<Abi>) -> io::Result<()> 
print_fn			    pub fn print_fn(&mut self,
print_fn_args_and_ret			    pub fn print_fn_args_and_ret(&mut self, decl: &hir::FnDecl) -> io::Result<()> 
print_fn_block_args			    pub fn print_fn_block_args(&mut self, decl: &hir::FnDecl) -> io::Result<()> 
print_fn_header_info			    pub fn print_fn_header_info(&mut self,
print_fn_output			    pub fn print_fn_output(&mut self, decl: &hir::FnDecl) -> io::Result<()> 
print_for_decl			    pub fn print_for_decl(&mut self, loc: &hir::Local, coll: &hir::Expr) -> io::Result<()> 
print_foreign_item			    pub fn print_foreign_item(&mut self, item: &hir::ForeignItem) -> io::Result<()> 
print_foreign_mod			    pub fn print_foreign_mod(&mut self,
print_formal_lifetime_list			    fn print_formal_lifetime_list(&mut self, lifetimes: &[hir::LifetimeDef]) -> io::Result<()> 
print_generics			    pub fn print_generics(&mut self, generics: &hir::Generics) -> io::Result<()> 
print_help_message			fn print_help_message() 
print_if			    pub fn print_if(&mut self,
print_if_let			    pub fn print_if_let(&mut self,
print_impl_item			    pub fn print_impl_item(&mut self, ii: &hir::ImplItem) -> io::Result<()> 
print_impl_item_ref			    pub fn print_impl_item_ref(&mut self, item_ref: &hir::ImplItemRef) -> io::Result<()> 
print_item			    pub fn print_item(&mut self, item: &hir::Item) -> io::Result<()> 
print_item_id			    pub fn print_item_id(&mut self, item_id: &hir::ItemId) -> io::Result<()> 
print_lifetime			    pub fn print_lifetime(&mut self, lifetime: &hir::Lifetime) -> io::Result<()> 
print_lifetime_def			    pub fn print_lifetime_def(&mut self, lifetime: &hir::LifetimeDef) -> io::Result<()> 
print_llvm_passes			    pub fn print_llvm_passes(&self) -> bool 
print_local_decl			    pub fn print_local_decl(&mut self, loc: &hir::Local) -> io::Result<()> 
print_method_sig			    pub fn print_method_sig(&mut self,
print_mod			    pub fn print_mod(&mut self, _mod: &hir::Mod, attrs: &[ast::Attribute]) -> io::Result<()> 
print_mt			    pub fn print_mt(&mut self, mt: &hir::MutTy) -> io::Result<()> 
print_mutability			    pub fn print_mutability(&mut self, mutbl: hir::Mutability) -> io::Result<()> 
print_name			    pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> 
print_node			    fn print_node(&mut self, node: &Node) -> io::Result<()> 
print_node			    fn print_node(&mut self, node: &Node) -> io::Result<()>;
print_opt_abi_and_extern_if_nondefault			    pub fn print_opt_abi_and_extern_if_nondefault(&mut self,
print_opt_lifetime			    pub fn print_opt_lifetime(&mut self, lifetime: &Option<hir::Lifetime>) -> io::Result<()> 
print_pat			    pub fn print_pat(&mut self, pat: &hir::Pat) -> io::Result<()> 
print_path			    fn print_path(&mut self,
print_path_parameters			    fn print_path_parameters(&mut self,
print_perf_stats			    pub fn print_perf_stats(&self) 
print_poly_trait_ref			    fn print_poly_trait_ref(&mut self, t: &hir::PolyTraitRef) -> io::Result<()> 
print_qpath			    fn print_qpath(&mut self,
print_remaining_comments			    pub fn print_remaining_comments(&mut self) -> io::Result<()> 
print_stmt			    pub fn print_stmt(&mut self, st: &hir::Stmt) -> io::Result<()> 
print_struct			    pub fn print_struct(&mut self,
print_trait_item			    pub fn print_trait_item(&mut self, ti: &hir::TraitItem) -> io::Result<()> 
print_trait_ref			    pub fn print_trait_ref(&mut self, t: &hir::TraitRef) -> io::Result<()> 
print_ty_fn			    pub fn print_ty_fn(&mut self,
print_ty_param			    pub fn print_ty_param(&mut self, param: &hir::TyParam) -> io::Result<()> 
print_type			    pub fn print_type(&mut self, ty: &hir::Ty) -> io::Result<()> 
print_type_sizes			    pub fn print_type_sizes(&self) 
print_unsafety			    pub fn print_unsafety(&mut self, s: hir::Unsafety) -> io::Result<()> 
print_usize			    pub fn print_usize(&mut self, i: usize) -> io::Result<()> 
print_variant			    pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> 
print_variants			    pub fn print_variants(&mut self,
print_visibility			    pub fn print_visibility(&mut self, vis: &hir::Visibility) -> io::Result<()> 
print_where_clause			    pub fn print_where_clause(&mut self, where_clause: &hir::WhereClause) -> io::Result<()> 
privacy			    pub mod privacy;
probe			    pub fn probe<R, F>(&self, f: F) -> R where
probe			    pub fn probe(&mut self, vid: ty::TyVid) -> Option<Ty<'tcx>> 
probe			    fn probe<R, F>(&mut self, f: F) -> R
probe_root			    pub fn probe_root(&mut self, vid: ty::TyVid) -> Option<Ty<'tcx>> 
process_backedge			    fn process_backedge<'c, I>(&mut self, cycle: I,
process_command_line			    pub fn process_command_line(&mut self, sess: &Session) 
process_edges			        fn process_edges<'a, 'gcx, 'tcx>(this: &RegionVarBindings<'a, 'gcx, 'tcx>,
process_errors			    fn process_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>)
process_item			    fn process_item(&mut self, item: &ast::Item, defs: &Definitions);
process_obligation			    fn process_obligation(&mut self,
process_predicate			fn process_predicate<'a, 'gcx, 'tcx>(
prohibit_projection			    pub fn prohibit_projection(self, span: Span)
prohibit_type_params			    pub fn prohibit_type_params(self, segments: &[hir::PathSegment]) 
project			mod project;
project_adjustments			        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>)
project_and_unify_type			fn project_and_unify_type<'cx, 'gcx, 'tcx>(
project_type			fn project_type<'cx, 'gcx, 'tcx>(
projection_bounds			    pub fn projection_bounds<'a>(&'a self) ->
projection_mode			    pub fn projection_mode(&self) -> Reveal 
projection_mode			    pub fn projection_mode(&self) -> Reveal 
projection_ty			    pub fn projection_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
propagate			    pub fn propagate(&mut self, cfg: &cfg::CFG, body: &hir::Expr) 
propagate			    fn propagate(&mut self) 
propagate_bits_into_entry_set_for			    fn propagate_bits_into_entry_set_for(&mut self,
propagate_bits_into_graph_successors_of			    fn propagate_bits_into_graph_successors_of(&mut self,
propagate_node			    fn propagate_node(&mut self, node: &ast_map::Node<'tcx>,
propagate_through_block			    fn propagate_through_block(&mut self, blk: &hir::Block, succ: LiveNode)
propagate_through_decl			    fn propagate_through_decl(&mut self, decl: &hir::Decl, succ: LiveNode)
propagate_through_expr			    fn propagate_through_expr(&mut self, expr: &Expr, succ: LiveNode)
propagate_through_exprs			    fn propagate_through_exprs(&mut self, exprs: &[Expr], succ: LiveNode)
propagate_through_local			    fn propagate_through_local(&mut self, local: &hir::Local, succ: LiveNode)
propagate_through_loop			    fn propagate_through_loop(&mut self,
propagate_through_lvalue_components			    fn propagate_through_lvalue_components(&mut self,
propagate_through_opt_expr			    fn propagate_through_opt_expr(&mut self,
propagate_through_stmt			    fn propagate_through_stmt(&mut self, stmt: &hir::Stmt, succ: LiveNode)
provided_trait_methods			    pub fn provided_trait_methods(self, id: DefId) -> Vec<AssociatedItem> 
ptr_sigil			pub fn ptr_sigil(ptr: PointerKind) -> &'static str 
ptr_sized_integer			    pub fn ptr_sized_integer(&self) -> Integer 
push			    pub fn push<E: Clone>(&mut self, k: M::Key, elem: E)
push			    pub fn push(&mut self, other: BoundRegion) 
push			    fn push(&mut self, predicate: &ty::Predicate<'tcx>) 
push			    fn push(&mut self, text: &str) 
push			    fn push(&mut self, text: &str);
push_hook			    pub fn push_hook(&mut self, hook: Box<for<'b> MirPassHook<'b>>) 
push_ignore			    pub fn push_ignore(&mut self) 
push_impl_path			    fn push_impl_path<T>(self,
push_impl_path_fallback			    fn push_impl_path_fallback<T>(self,
push_item_path			    pub fn push_item_path<T>(self, buffer: &mut T, def_id: DefId)
push_krate_path			    pub fn push_krate_path<T>(self, buffer: &mut T, cnum: CrateNum)
push_pass			    fn push_pass<P: LintPass + ?Sized + 'static>(&mut self,
push_pass			    pub fn push_pass(&mut self, pass: Box<for<'b> MirMapPass<'b>>) 
push_region_constraints			fn push_region_constraints<'tcx>(out: &mut Vec<Component<'tcx>>, regions: Vec<&'tcx ty::Region>) 
push_sig_subtypes			fn push_sig_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, sig: &ty::PolyFnSig<'tcx>) 
push_skolemized			    pub fn push_skolemized(&self, br: ty::BoundRegion, snapshot: &RegionSnapshot)
push_stack			    fn push_stack<'o,'s:'o>(&mut self,
push_subtypes			fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) 
push_task			    pub fn push_task(&mut self, key: DepNode<D>) 
qpath_def			    pub fn qpath_def(&self, qpath: &hir::QPath, id: NodeId) -> Def 
qpath_to_string			pub fn qpath_to_string(p: &hir::QPath) -> String 
query			    pub fn query(&self) -> DepGraphQuery<D> 
query			    pub fn query(&self) -> DepGraphQuery<DefId> 
query			mod query;
query			    pub fn query(&self) -> DepGraphQuery<DefId> 
raii			mod raii;
raw_emit_lint			pub fn raw_emit_lint<S: Into<MultiSpan>>(sess: &Session,
raw_struct_lint			pub fn raw_struct_lint<'a, S>(sess: &'a Session,
reachable			    pub mod reachable;
reachable_nodes			    fn reachable_nodes(&self, node: &DepNode<D>, direction: Direction) -> Vec<&DepNode<D>> 
read			    fn read(&self, k: &M::Key) 
read			    pub fn read(&mut self, v: DepNode<D>) 
read			    pub fn read(&self, v: DepNode<DefId>) 
read			    pub fn read(&self, id: NodeId) 
read_trait_impls			    fn read_trait_impls(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) 
rebase_onto			    pub fn rebase_onto(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
rebuild			    fn rebuild(&self) -> (hir::FnDecl, hir::Generics) 
rebuild_arg_ty_or_output			    fn rebuild_arg_ty_or_output(&self,
rebuild_args_ty			    fn rebuild_args_ty(&self,
rebuild_generics			    fn rebuild_generics(&self,
rebuild_output			    fn rebuild_output(&self, ty: &hir::FunctionRetTy,
rebuild_path			    fn rebuild_path(&self,
rebuild_ty			    fn rebuild_ty(&self,
rebuild_ty_param_bounds			    fn rebuild_ty_param_bounds(&self,
rebuild_ty_params			    fn rebuild_ty_params(&self,
record_expr			    fn record_expr(&mut self, expr: hir::Expr) -> hir::ExprId 
record_fn_parent			    fn record_fn_parent(&self, sub_fn: ast::NodeId, sup_fn: ast::NodeId) 
record_impl			    fn record_impl(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
record_impl_from_cstore			    pub fn record_impl_from_cstore(&mut self,
record_local_impl			    pub fn record_local_impl(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
record_remote_impl			    pub fn record_remote_impl(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
record_rvalue_scope			    fn record_rvalue_scope(&self, var: ast::NodeId, lifetime: CodeExtent) 
record_rvalue_scope			    fn record_rvalue_scope<'a>(visitor: &mut RegionResolutionVisitor,
record_rvalue_scope_if_borrow_expr			    fn record_rvalue_scope_if_borrow_expr(visitor: &mut RegionResolutionVisitor,
record_time			pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where
record_trait_has_default_impl			    pub fn record_trait_has_default_impl(self, trait_def_id: DefId) 
record_type_size			    pub fn record_type_size<S: ToString>(&mut self,
record_var_lifetime			fn record_var_lifetime(visitor: &mut RegionResolutionVisitor,
record_var_scope			    fn record_var_scope(&self, var: ast::NodeId, lifetime: CodeExtent) 
recursion_limit			    pub mod recursion_limit;
recursive_type_with_infinite_size_error			    pub fn recursive_type_with_infinite_size_error(self,
references_error			    fn references_error(&self) -> bool 
region			    pub mod region;
region_at			    pub fn region_at(&self, i: usize) -> &'tcx ty::Region 
region_for_def			    pub fn region_for_def(&self, def: &ty::RegionParameterDef) -> &'tcx ty::Region 
region_inference			pub mod region_inference;
region_obligations			    pub fn region_obligations(&self,
region_outlives_predicate			    pub fn region_outlives_predicate(&self,
region_param			    pub fn region_param(&self, param: &EarlyBoundRegion) -> &RegionParameterDef<'tcx> 
region_var_for_def			    pub fn region_var_for_def(&self,
region_vars_confined_to_snapshot			    fn region_vars_confined_to_snapshot(&self,
regions			    fn regions(&mut self, a: &'tcx ty::Region, _: &'tcx ty::Region)
regions			    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)
regions			    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)
regions			    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)
regions			    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)
regions			    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)
regions			    fn regions(&mut self, a: &'tcx ty::Region, b: &'tcx ty::Region)
regions			    pub fn regions(&self) -> Vec<&'tcx ty::Region> 
regions			    pub fn regions(&'a self) -> impl DoubleEndedIterator<Item=&'tcx ty::Region> + 'a 
register			    fn register(&mut self, name: &str, span: Span) 
register_bound			    pub fn register_bound(&mut self,
register_early_pass			    pub fn register_early_pass(&mut self,
register_future_incompatible			    pub fn register_future_incompatible(&mut self,
register_group			    pub fn register_group(&mut self, sess: Option<&Session>,
register_late_pass			    pub fn register_late_pass(&mut self,
register_predicate_obligation			    pub fn register_predicate_obligation(&mut self,
register_region_obligation			    pub fn register_region_obligation(&mut self,
register_region_obligation			fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,
register_removed			    pub fn register_removed(&mut self, name: &str, reason: &str) 
register_renamed			    pub fn register_renamed(&mut self, old_name: &str, new_name: &str) 
relate			pub mod relate;
relate			    fn relate<'a, 'gcx, R>(relation: &mut R, a: &Self, b: &Self)
relate			    fn relate<'a, 'gcx, R>(relation: &mut R,
relate			    fn relate<T: Relate<'tcx>>(&mut self, a: &T, b: &T) -> RelateResult<'tcx, T> 
relate_bound			    fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> 
relate_bound			    fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;
relate_bound			    fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> 
relate_free_regions			    fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) 
relate_free_regions_from_implied_bounds			    pub fn relate_free_regions_from_implied_bounds<'tcx>(&mut self,
relate_free_regions_from_predicates			    pub fn relate_free_regions_from_predicates(&mut self,
relate_item_substs			fn relate_item_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,
relate_substs			pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,
relate_to_static			    fn relate_to_static(&mut self, sup: FreeRegion) 
relate_vars			    pub fn relate_vars(&mut self, a: ty::TyVid, dir: RelationDir, b: ty::TyVid) 
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T: Relate<'tcx>>(&mut self,
relations			    fn relations<'a>(&'a mut self, a: ty::TyVid) -> &'a mut Vec<Relation> 
relations			fn relations<'a>(v: &'a mut TypeVariableData) -> &'a mut Vec<Relation> 
relative_def_path			    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> 
relative_def_path			    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;
relative_target_lib_path			pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf 
rematch_impl			    fn rematch_impl(&mut self,
replace_if_possible			    pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
replace_late_bound_regions			    pub fn replace_late_bound_regions<T,F>(self,
replace_late_bound_regions_with_fresh_var			    pub fn replace_late_bound_regions_with_fresh_var<T>(
replace_newline_with_backslash_l			fn replace_newline_with_backslash_l(s: String) -> String 
report_and_explain_type_error			    pub fn report_and_explain_type_error(&self,
report_concrete_failure			    fn report_concrete_failure(&self,
report_conflicting_default_types			    pub fn report_conflicting_default_types(&self,
report_dead_assign			    fn report_dead_assign(&self, id: NodeId, sp: Span, var: Variable, is_argument: bool) 
report_extra_impl_obligation			    pub fn report_extra_impl_obligation(&self,
report_fulfillment_error			    fn report_fulfillment_error(&self,
report_fulfillment_errors			    pub fn report_fulfillment_errors(&self, errors: &Vec<FulfillmentError<'tcx>>) 
report_generic_bound_failure			    fn report_generic_bound_failure(&self,
report_inference_failure			    fn report_inference_failure(&self,
report_maybe_different			        fn report_maybe_different(f: &mut fmt::Formatter,
report_mismatched_types			    pub fn report_mismatched_types(&self,
report_object_safety_error			    pub fn report_object_safety_error(self,
report_overflow_error			    pub fn report_overflow_error<T>(&self,
report_overflow_error_cycle			    pub fn report_overflow_error_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> ! 
report_processed_errors			    fn report_processed_errors(&self,
report_projection_error			    fn report_projection_error(&self,
report_region_errors			    pub fn report_region_errors(&self,
report_selection_error			    pub fn report_selection_error(&self,
report_similar_impl_candidates			    fn report_similar_impl_candidates(&self,
report_sub_sup_conflict			    fn report_sub_sup_conflict(&self,
repr_discr			    fn repr_discr(tcx: TyCtxt, ty: Ty, hints: &[attr::ReprAttr], min: i64, max: i64)
require			    pub fn require(&self, it: LangItem) -> Result<DefId, String> 
require_lang_item			    pub fn require_lang_item(&self, lang_item: LangItem) -> DefId 
require_owned_box			    pub fn require_owned_box(&self) -> Result<DefId, String> 
require_sized			    fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) 
require_unsafe			    fn require_unsafe(&mut self, span: Span, description: &str) 
require_unsafe_ext			    fn require_unsafe_ext(&mut self, node_id: ast::NodeId, span: Span,
required_region_bounds			    pub fn required_region_bounds(self,
reserve_node_ids			    pub fn reserve_node_ids(&self, count: usize) -> ast::NodeId 
reset			    fn reset(&mut self, bits: &mut [usize]) 
reset			    pub fn reset(&mut self) 
resolve			pub mod resolve;
resolve_arm			fn resolve_arm<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, arm: &'tcx hir::Arm) 
resolve_block			fn resolve_block<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, blk: &'tcx hir::Block) 
resolve_crate			pub fn resolve_crate(sess: &Session, map: &ast_map::Map) -> RegionMaps 
resolve_expr			fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, expr: &'tcx hir::Expr) 
resolve_fn			fn resolve_fn<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,
resolve_free_lifetime_ref			    fn resolve_free_lifetime_ref(&mut self,
resolve_hir_path			    fn resolve_hir_path(&mut self, path: &mut hir::Path, is_value: bool);
resolve_item_like			fn resolve_item_like<'a, 'tcx, F>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,
resolve_lifetime			    pub mod resolve_lifetime;
resolve_lifetime_ref			    fn resolve_lifetime_ref(&mut self, lifetime_ref: &hir::Lifetime) 
resolve_local			fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,
resolve_pat			fn resolve_pat<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, pat: &'tcx hir::Pat) 
resolve_regions			    pub fn resolve_regions(&self,
resolve_regions_and_report_errors			    pub fn resolve_regions_and_report_errors(&self,
resolve_stmt			fn resolve_stmt<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, stmt: &'tcx hir::Stmt) 
resolve_type_and_region_vars_if_possible			    pub fn resolve_type_and_region_vars_if_possible<T>(&self, value: &T) -> T
resolve_type_vars_if_possible			    pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T
resolve_type_vars_or_error			    fn resolve_type_vars_or_error(&self, t: &Ty<'tcx>) -> mc::McResult<Ty<'tcx>> 
resolve_var			    pub fn resolve_var(&self, rid: RegionVid) -> &'tcx ty::Region 
result			    pub fn result(&self) -> IdRange 
retrace_path			    pub fn retrace_path(self,
rev_lookup			        fn rev_lookup<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
reverse			    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry<'tcx>) 
reverse			    fn reverse(_: &mut Vec<Self::Value>, _: Self::Undo) {}
reverse_postorder			pub fn reverse_postorder<'a, 'tcx>(mir: &'a Mir<'tcx>) -> ReversePostorder<'a, 'tcx> 
rollback_skolemized			    pub fn rollback_skolemized(&mut self, snapshot: &ProjectionCacheSnapshot) 
rollback_to			    fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot) 
rollback_to			    pub fn rollback_to(&self, snapshot: RegionSnapshot) 
rollback_to			    pub fn rollback_to(&mut self, s: Snapshot) 
rollback_to			    pub fn rollback_to(&mut self, snapshot: ProjectionCacheSnapshot) 
rollback_undo_entry			    pub fn rollback_undo_entry(&self, undo_entry: UndoLogEntry<'tcx>) 
root			    pub fn root(krate: &'ast Crate) -> NodeCollector<'ast> 
root_mode			    fn root_mode(&self) -> &RootMode 
root_mode			    fn root_mode(&self) -> &RootMode;
root_var			    pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid 
run_pass			    fn run_pass<'a>(
run_pass			    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,
run_pass			    fn run_pass<'a>(&mut self,
run_passes			    pub fn run_passes(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) 
rust_printer			pub fn rust_printer<'a>(writer: Box<Write + 'a>, krate: Option<&'a Crate>) -> State<'a> 
rust_printer_annotated			pub fn rust_printer_annotated<'a>(writer: Box<Write + 'a>,
rustc			mod rustc 
rustc_optgroups			pub fn rustc_optgroups() -> Vec<RustcOptGroup> 
rustc_short_optgroups			pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> 
safe_to_unsafe_fn_ty			    pub fn safe_to_unsafe_fn_ty(self, bare_fn: &BareFnTy<'tcx>) -> Ty<'tcx> 
same_origin			    pub fn same_origin(&self, other: &DeprecationEntry) -> bool 
same_size			    pub fn same_size(self, other: SizeSkeleton) -> bool 
same_struct_or_enum			        fn same_struct_or_enum<'tcx>(ty: Ty<'tcx>, def: &'tcx ty::AdtDef) -> bool 
same_type			        fn same_type<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool 
save_and_restore_obligations_in_snapshot_flag			    pub fn save_and_restore_obligations_in_snapshot_flag<F, R>(&self, func: F) -> R
scopes_intersect			    pub fn scopes_intersect(&self, scope1: CodeExtent, scope2: CodeExtent)
search			    pub fn search<F>(&self, mut pick: F)
search_lifetimes			fn search_lifetimes<'a>(lifetimes: &'a [hir::LifetimeDef],
search_paths			pub mod search_paths;
select			    fn select(&mut self, selcx: &mut SelectionContext<'a, 'gcx, 'tcx>)
select			mod select;
select			    pub fn select(&mut self, obligation: &TraitObligation<'tcx>)
select_all_or_error			    pub fn select_all_or_error(&mut self,
select_from_expr			    fn select_from_expr(&mut self, expr: &hir::Expr) 
select_where_possible			    pub fn select_where_possible(&mut self,
self_ty			    fn self_ty(&self) -> ty::Binder<Ty<'tcx>> 
self_ty			    pub fn self_ty(&self) -> Ty<'tcx> 
self_ty			    pub fn self_ty(&self) -> Ty<'tcx> 
sequence_element_type			    pub fn sequence_element_type(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
serialize			impl<'tcx> serialize::UseSpecializedDecodable for &'tcx AdtDef {}
serialize			impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Slice<Ty<'tcx>> {}
serialize			impl<'tcx> serialize::UseSpecializedEncodable for &'tcx AdtDef 
serialize			impl<'tcx> serialize::UseSpecializedDecodable for &'tcx BareFnTy<'tcx> {}
serialize			impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Region {}
serialize			impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Slice<ExistentialPredicate<'tcx>> {}
serialize			impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Substs<'tcx> {}
serialize::Decodable for Cache			impl serialize::Decodable for Cache 
serialize::Encodable for Cache			impl serialize::Encodable for Cache 
serialize::UseSpecializedDecodable for CrateNum			impl serialize::UseSpecializedDecodable for CrateNum 
serialize::UseSpecializedDecodable for GenericPredicates			impl<'tcx> serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}
serialize::UseSpecializedDecodable for Ty			impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}
serialize::UseSpecializedEncodable for CrateNum			impl serialize::UseSpecializedEncodable for CrateNum 
serialize::UseSpecializedEncodable for GenericPredicates			impl<'tcx> serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}
serialize::UseSpecializedEncodable for Ty			impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}
sess			    fn sess(&self) -> &Session 
sess			    fn sess(&self) -> &Session;
session			pub mod session;
set_bit			fn set_bit(words: &mut [usize], bit: usize) -> bool 
set_captures			    fn set_captures(&mut self, node_id: NodeId, cs: Vec<CaptureInfo>) 
set_destructor			    pub fn set_destructor(&self, dtor: DefId) 
set_level			    fn set_level(&mut self, lint: LintId, mut lvlsrc: LevelSource) 
set_object_safety			    pub fn set_object_safety(&self, is_safe: bool) 
set_tainted_by_errors			    pub fn set_tainted_by_errors(&self) 
shadow			mod shadow;
shadower_label			fn shadower_label(span: Span) -> Shadower 
shadower_lifetime			fn shadower_lifetime(l: &hir::Lifetime) -> Shadower 
shallow_resolve			    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> 
shift_region			pub fn shift_region(region: ty::Region, amount: u32) -> ty::Region 
shift_region_through_binders			    fn shift_region_through_binders(&self, region: &'tcx ty::Region) -> &'tcx ty::Region 
shift_regions			pub fn shift_regions<'a, 'gcx, 'tcx, T>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
shift_regions_through_binders			    fn shift_regions_through_binders(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
shifted			    pub fn shifted(&self, amount: u32) -> DebruijnIndex 
shorthand			    fn shorthand(&self) -> &'static str 
should_explore			fn should_explore<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
should_update_candidate_cache			    fn should_update_candidate_cache(&mut self,
should_warn			    fn should_warn(&self, var: Variable) -> Option<String> 
should_warn_about_field			    fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool 
should_warn_about_item			    fn should_warn_about_item(&mut self, item: &hir::Item) -> bool 
should_warn_about_variant			    fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool 
signal_block_expr			    fn signal_block_expr(&mut self,
signal_shadowing_problem			fn signal_shadowing_problem(sess: &Session, name: ast::Name, orig: Original, shadower: Shadower) 
simd_size			    pub fn simd_size(&self, _cx: TyCtxt) -> usize 
simd_type			    pub fn simd_type(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
simple_name			    pub fn simple_name(&self) -> Option<ast::Name> 
simplify_type			pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
single_codegen_unit			    pub fn single_codegen_unit(&self) -> bool 
size			    pub fn size(&self) -> Size 
size			    pub fn size(&self, dl: &TargetDataLayout) -> Size 
size			    pub fn size(self, dl: &TargetDataLayout) -> Size 
sized_conditions			    fn sized_conditions(&mut self, obligation: &TraitObligation<'tcx>)
sized_constraint			    pub fn sized_constraint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
sized_constraint_for_ty			    fn sized_constraint_for_ty(&self,
skip_binder			    pub fn skip_binder(&self) -> &T 
skip_current_subtree			    pub fn skip_current_subtree(&mut self) 
skip_stability_check_due_to_privacy			    fn skip_stability_check_due_to_privacy(self, def_id: DefId) -> bool 
skolemize_late_bound_regions			    pub fn skolemize_late_bound_regions<T>(&self,
snapshot			    pub fn snapshot(&mut self) -> Snapshot 
snapshot			    pub fn snapshot(&mut self) -> ProjectionCacheSnapshot 
some_func			fn some_func<T: Foo>(foo: T) 
some_func			fn some_func<T: fmt::Debug>(foo: T) 
some_func			fn some_func<T>(foo: T) 
sort_key			    pub fn sort_key(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> (u64, InternedString) 
sort_string			    pub fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String 
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> 
source			    fn source(&self, edge: &Edge<'tcx>) -> Node 
space_if_not_bol			    pub fn space_if_not_bol(&mut self) -> io::Result<()> 
span			    pub fn span(self) -> Span 
span			    pub fn span(&self, id: NodeId) -> Span 
span			    pub fn span(&self) -> Span 
span			    pub fn span(&self) -> Span 
span			    fn span(&self) -> Span { self.span }
span			    fn span(&self) -> Span;
span			    pub fn span(&self, region_maps: &RegionMaps, ast_map: &ast_map::Map) -> Option<Span> 
span_bug_fmt			pub fn span_bug_fmt<S: Into<MultiSpan>>(file: &'static str,
span_debug			    fn span_debug(span: syntax_pos::Span, f: &mut fmt::Formatter) -> fmt::Result 
span_err			    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_err_or_warn			    pub fn span_err_or_warn<S: Into<MultiSpan>>(&self, is_warning: bool, sp: S, msg: &str) 
span_err_with_code			    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) 
span_fatal			    pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! 
span_fatal_with_code			    pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) -> ! 
span_if_local			    pub fn span_if_local(&self, id: DefId) -> Option<Span> 
span_lint			    fn span_lint<S: Into<MultiSpan>>(&self, lint: &'static Lint, span: S, msg: &str) 
span_lint_help			    fn span_lint_help(&self, lint: &'static Lint, span: Span,
span_lint_note			    fn span_lint_note(&self, lint: &'static Lint, span: Span, msg: &str,
span_note_without_error			    pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_of_impl			    pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> 
span_unimpl			    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! 
span_warn			    pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) 
span_warn_with_code			    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) 
specialization_graph			pub mod specialization_graph;
specialize			mod specialize;
specializes			pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
stability			    pub mod stability;
stability			    fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!("stability") }
stability			    fn stability(&self, def: DefId) -> Option<attr::Stability>;
stable			    fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }
stable			    pub fn stable(g: getopts::OptGroup) -> RustcOptGroup 
stable_hash			    pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &DepTrackingHash>,
start_node			    fn start_node(&self) -> Self::Node { START_BLOCK }
start_snapshot			    fn start_snapshot(&self) -> CombinedSnapshot 
start_snapshot			    pub fn start_snapshot(&self) -> RegionSnapshot 
std_path			    fn std_path(&mut self, span: Span, components: &[&str], is_value: bool) -> hir::Path 
stmt			    fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex 
stmt_ends_with_semi			fn stmt_ends_with_semi(stmt: &hir::Stmt_) -> bool 
stmt_let			    fn stmt_let(&mut self, sp: Span, mutbl: bool, ident: Name, ex: P<hir::Expr>)
stmt_to_string			pub fn stmt_to_string(stmt: &hir::Stmt) -> String 
store_free_region_map			    pub fn store_free_region_map(self, id: NodeId, map: FreeRegionMap) 
str_to_ident			    fn str_to_ident(&self, s: &'static str) -> Name 
straightline			    fn straightline<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
stride			    pub fn stride(&self) -> Size 
struct_err			    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  
struct_fatal			    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!("struct_field_names") }
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;
struct_lockstep_tails			    pub fn struct_lockstep_tails(self,
struct_span_err			    pub fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,
struct_span_err_with_code			    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,
struct_span_fatal			    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,
struct_span_fatal_with_code			    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,
struct_span_lint			    fn struct_span_lint<S: Into<MultiSpan>>(&self,
struct_span_warn			    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,
struct_span_warn_with_code			    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,
struct_tail			    pub fn struct_tail(self, mut ty: Ty<'tcx>) -> Ty<'tcx> 
struct_variant			    pub fn struct_variant(&self) -> &VariantDef 
struct_warn			    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  
structural_impls			mod structural_impls;
structural_impls			mod structural_impls;
sty			mod sty;
sub			    pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'gcx, 'tcx> 
sub			    pub fn sub<T>(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>, a: &T, b: &T)
sub			mod sub;
sub			    fn sub(self, other: TypeContents) -> TypeContents 
sub_free_region			    pub fn sub_free_region(&self, sub: FreeRegion, sup: FreeRegion) -> bool 
sub_poly_trait_refs			    pub fn sub_poly_trait_refs(&self,
sub_regions			    pub fn sub_regions(&self,
sub_types			    pub fn sub_types(&self,
subst			pub mod subst;
subst			    fn subst<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
subst_spanned			    fn subst_spanned<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
subst_supertrait			    pub fn subst_supertrait(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
substs			    pub fn substs(&self) -> &'tcx Substs<'tcx> 
successors			    fn successors<'graph>(&'graph self, node: Self::Node)
successors			    pub fn successors(&self) -> Cow<[BasicBlock]> 
successors_mut			    pub fn successors_mut(&mut self) -> Vec<&mut BasicBlock> 
suffix_matches			    fn suffix_matches(&self, parent: NodeId) -> bool 
suggest_new_overflow_limit			    fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder) 
super_assert_message			            fn super_assert_message(&mut self,
super_assign			            fn super_assign(&mut self,
super_basic_block_data			            fn super_basic_block_data(&mut self,
super_branch			            fn super_branch(&mut self,
super_closure_substs			            fn super_closure_substs(&mut self,
super_combine_tys			    pub fn super_combine_tys<R>(&self,
super_const_usize			            fn super_const_usize(&mut self, _substs: & 
super_const_val			            fn super_const_val(&mut self, _substs: & 
super_constant			            fn super_constant(&mut self,
super_def_id			            fn super_def_id(&mut self, _def_id: & 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self;
super_fold_with			                fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _: &mut F) -> 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> (T, U) 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self  
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self 
super_lattice_tys			pub fn super_lattice_tys<'a, 'gcx, 'tcx, L>(this: &mut L,
super_literal			            fn super_literal(&mut self,
super_local_decl			            fn super_local_decl(&mut self,
super_lvalue			            fn super_lvalue(&mut self,
super_mir			            fn super_mir(&mut self,
super_operand			            fn super_operand(&mut self,
super_projection			            fn super_projection(&mut self,
super_projection_elem			            fn super_projection_elem(&mut self,
super_relate_tys			pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,
super_rvalue			            fn super_rvalue(&mut self,
super_source_info			            fn super_source_info(&mut self, source_info: & 
super_span			            fn super_span(&mut self, _span: & 
super_statement			            fn super_statement(&mut self,
super_substs			            fn super_substs(&mut self, _substs: & 
super_terminator			            fn super_terminator(&mut self,
super_terminator_kind			            fn super_terminator_kind(&mut self,
super_ty			            fn super_ty(&mut self, _ty: & 
super_typed_const_val			            fn super_typed_const_val(&mut self,
super_visibility_scope			            fn super_visibility_scope(&mut self,
super_visibility_scope_data			            fn super_visibility_scope_data(&mut self,
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool;
super_visit_with			                fn super_visit_with<F: TypeVisitor<'tcx>>(&self, _: &mut F) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
supertrait_def_ids			pub fn supertrait_def_ids<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,
supertraits			pub fn supertraits<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,
supertraits_reference_self			    fn supertraits_reference_self(self, trait_def_id: DefId) -> bool 
sv::SnapshotVecDelegate for Delegate			impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> 
svh			pub mod svh;
swap			    fn swap(&self) 
symbol_is_live			    fn symbol_is_live(&mut self,
synth_comment			    pub fn synth_comment(&mut self, text: String) -> io::Result<()> 
sysroot			    pub fn sysroot<'a>(&'a self) -> &'a Path 
tables			    pub fn tables(self) -> Ref<'a, Tables<'gcx>> 
tag			    fn tag(&self) -> &'static str { "Bivariate" }
tag			    fn tag(&self) -> &'static str { "Equate" }
tag			    fn tag(&self) -> &'static str { "Glb" }
tag			    fn tag(&self) -> &'static str { "Lub" }
tag			    fn tag(&self) -> &'static str { "Sub" }
tag			    fn tag(_: Option<ty::FloatVid>) -> &'static str { "FloatVid" }
tag			    fn tag(_: Option<ty::IntVid>) -> &'static str { "IntVid" }
tag			    fn tag(_: Option<ty::RegionVid>) -> &'static str { "RegionVid" }
tag			    fn tag(_: Option<ty::TyVid>) -> &'static str { "TyVid" }
tag			    fn tag(&self) -> &'static str { "Match" }
tag			    fn tag(&self) -> &'static str;
tainted			    pub fn tainted(&self,
tainted_regions			    fn tainted_regions(&self,
take_deferred_obligations			    pub fn take_deferred_obligations(&mut self) -> Vec<DeferredObligation<'tcx>> 
takes_u8			fn takes_u8(_: u8) {}
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> 
target			    fn target(&self, edge: &Edge<'tcx>) -> Node 
target_filesearch			    pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch 
tc_ty			        fn tc_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
tcx			    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }
tcx			    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx> 
tcx			    pub fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> 
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.infcx.tcx }
tcx			    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> 
tcx			pub mod tcx;
tcx			            fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.infcx.tcx }
tcx			    fn tcx<'c>(&'c self) -> TyCtxt<'c, 'gcx, 'tcx> 
tcx			    pub fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> 
tcx			    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.tcx }
tcx			            fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.0 }
tcx			    fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }
tcx			    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx>;
tcx			    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }
temp_path			    pub fn temp_path(&self,
temp_path_ext			    pub fn temp_path_ext(&self,
temporary_scope			    pub fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> 
temporary_scope			    pub fn temporary_scope(&self, id: ast::NodeId) -> &'tcx ty::Region 
temporary_scope			    pub fn temporary_scope(&self, expr_id: ast::NodeId) -> Option<CodeExtent> 
temps_iter			    pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a 
terminator			    pub fn terminator(&self) -> &Terminator<'tcx> 
terminator_mut			    pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> 
test			    pub fn test<D: Clone + Debug>(&self, node: &DepNode<D>) -> bool 
test			    pub fn test<D: Clone + Debug>(&self,
tests			mod tests 
thread			mod thread;
time			pub fn time<T, F>(do_it: bool, what: &str, f: F) -> T where
time_llvm_passes			    pub fn time_llvm_passes(&self) -> bool 
time_passes			    pub fn time_passes(&self) -> bool { self.opts.debugging_opts.time_passes }
tls			pub mod tls 
to_bound_region			    pub fn to_bound_region(&self) -> ty::BoundRegion 
to_code_extent			    pub fn to_code_extent(&self, region_maps: &RegionMaps) -> CodeExtent 
to_dep_node			    fn to_dep_node(key: &Self::Key) -> DepNode<DefId>;
to_dep_node			            fn to_dep_node(key: &
to_early_bound_region_data			    pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion 
to_error			    pub fn to_error(&self) -> FulfillmentError<'tcx> 
to_fn_parts			    pub fn to_fn_parts(self) -> FnParts<'a> 
to_fulfillment_error			fn to_fulfillment_error<'tcx>(
to_hir_binop			    pub fn to_hir_binop(self) -> hir::BinOp_ 
to_i16			    fn to_i16(&self) -> Option<i16> 
to_i16			    fn to_i16(&self) -> Option<i16>;
to_i32			    fn to_i32(&self) -> Option<i32> 
to_i32			    fn to_i32(&self) -> Option<i32>;
to_i64			    fn to_i64(&self) -> Option<i64> 
to_i64			    fn to_i64(&self) -> Option<i64>;
to_i8			    fn to_i8(&self) -> Option<i8> 
to_i8			    fn to_i8(&self) -> Option<i8>;
to_mutbl_lossy			    pub fn to_mutbl_lossy(self) -> hir::Mutability 
to_mutbl_lossy			    pub fn to_mutbl_lossy(self) -> hir::Mutability 
to_node			    fn to_node(self) -> Option<Node<'ast>> 
to_obligation			    pub fn to_obligation(&self) -> PredicateObligation<'tcx> 
to_opt_poly_trait_ref			    pub fn to_opt_poly_trait_ref(&self) -> Option<PolyTraitRef<'tcx>> 
to_poly_trait_predicate			    pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> 
to_poly_trait_ref			    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> 
to_poly_trait_ref			    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
to_predicate			    fn to_predicate(&self) -> Predicate<'tcx> 
to_predicate			    fn to_predicate(&self) -> Predicate<'tcx>;
to_readable_str			pub fn to_readable_str(mut val: usize) -> String 
to_self			    pub fn to_self(&self) -> Option<ExplicitSelf> 
to_string			    pub fn to_string(&self) -> String 
to_string			    pub fn to_string(&self, tcx: TyCtxt) -> String 
to_string			pub fn to_string<F>(f: F) -> String
to_string			    pub fn to_string(&self) -> String 
to_string			    pub fn to_string(&self) -> String 
to_ty			    pub fn to_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
to_ty			    pub fn to_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
to_ty			    pub fn to_ty<'a, 'tcx>(&self, tcx: &ty::TyCtxt<'a, 'tcx, 'tcx>,
to_ty			    pub fn to_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
to_ty			    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> 
to_ty			    fn to_ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx>;
to_type			    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
to_type			    fn to_type<'a, 'gcx, 'tcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx>;
to_u16			    fn to_u16(&self) -> Option<u16> 
to_u16			    fn to_u16(&self) -> Option<u16>;
to_u32			    fn to_u32(&self) -> Option<u32> 
to_u32			    fn to_u32(&self) -> Option<u32>;
to_u64			    fn to_u64(&self) -> Option<u64> 
to_u64			    fn to_u64(&self) -> Option<u64>;
to_u8			    fn to_u8(&self) -> Option<u8> 
to_u8			    fn to_u8(&self) -> Option<u8>;
to_user_str			    pub fn to_user_str(&self) -> &'static str 
to_user_str			    pub fn to_user_str(&self) -> &'static str 
top			fn top<'s>(stack: &'s Vec<Option<DepNode<DefId>>>) -> Option<Option<&'s DepNode<DefId>>> 
track_anon			    fn track_anon(&self, anon: u32) 
track_errors			    pub fn track_errors<F, T>(&self, f: F) -> Result<T, usize>
trait_def			    fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)-> ty::TraitDef
trait_def			    fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)-> ty::TraitDef;
trait_def			pub mod trait_def;
trait_did			    pub fn trait_did(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> DefId 
trait_has_default_impl			    pub fn trait_has_default_impl(self, trait_def_id: DefId) -> bool 
trait_has_sized_self			    fn trait_has_sized_self(self, trait_def_id: DefId) -> bool 
trait_id_of_impl			    pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> 
trait_impl_polarity			    pub fn trait_impl_polarity(self, id: DefId) -> hir::ImplPolarity 
trait_item_scope_tag			        fn trait_item_scope_tag(item: &hir::TraitItem) -> &'static str 
trait_item_to_string			pub fn trait_item_to_string(i: &hir::TraitItem) -> String 
trait_obligations			pub fn trait_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
trait_of_item			    fn trait_of_item(&self, def_id: DefId) -> Option<DefId> { bug!("trait_of_item") }
trait_of_item			    fn trait_of_item(&self, def_id: DefId) -> Option<DefId>;
trait_of_item			    pub fn trait_of_item(self, def_id: DefId) -> Option<DefId> 
trait_ref_is_knowable			pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,
trait_ref_to_string			    pub fn trait_ref_to_string(&self, t: &ty::TraitRef<'tcx>) -> String 
trait_ref_type_vars			fn trait_ref_type_vars<'a, 'gcx, 'tcx>(selcx: &mut SelectionContext<'a, 'gcx, 'tcx>,
traits			pub mod traits;
trans_normalize			            fn trans_normalize<'a, 'tcx>(&self,
trans_normalize			    fn trans_normalize<'a, 'tcx>(&self, infcx: &InferCtxt<'a, 'gcx, 'tcx>) -> Self 
trans_normalize			    fn trans_normalize<'a, 'tcx>(&self, infcx: &InferCtxt<'a, 'gcx, 'tcx>) -> Self;
trans_stats			    pub fn trans_stats(&self) -> bool { self.opts.debugging_opts.trans_stats }
transform			pub mod transform;
transitive_bounds			pub fn transitive_bounds<'cx, 'gcx, 'tcx>(tcx: TyCtxt<'cx, 'gcx, 'tcx>,
transitive_predecessors			    pub fn transitive_predecessors(&self, node: &DepNode<D>) -> Vec<&DepNode<D>> 
transitive_successors			    pub fn transitive_successors(&self, node: &DepNode<D>) -> Vec<&DepNode<D>> 
translate_substs			pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
transmute			    fn transmute(Vec<Self>) -> Foo<Self>;
transmute			    fn transmute(x: Foo<String>) -> Vec<String> 
transmute			    fn transmute(x: Foo<u8>) -> Vec<u8> 
traversal			pub mod traversal;
traverse_successor			    fn traverse_successor(&mut self) 
truncate_to			    pub fn truncate_to(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, generics: &ty::Generics<'tcx>)
try_push_visible_item_path			    pub fn try_push_visible_item_path<T>(self, buffer: &mut T, external_def_id: DefId) -> bool
try_select			    pub fn try_select(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>)
try_start			    fn try_start(&mut self, key: ty::ProjectionTy<'tcx>)
ty			    fn ty(&mut self, span: Span, node: hir::Ty_) -> P<hir::Ty> 
ty			pub mod ty;
ty			impl<'a, 'tcx, 'gcx> ty::TyCtxt<'a, 'tcx, 'gcx> 
ty			      pub fn ty<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
ty			    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> LvalueTy<'tcx> 
ty			    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Ty<'tcx>>
ty			    pub fn ty<'a, 'gcx>(&self, mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> 
ty			impl<'a, 'gcx, 'tcx> ty::TyS<'tcx> 
ty			impl<'a, 'tcx> ty::TyS<'tcx> 
ty			impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> 
ty			    pub fn ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, subst: &Substs<'tcx>) -> Ty<'tcx> 
ty			impl<'a, 'gcx, 'tcx> ty::ExistentialTraitRef<'tcx> 
ty			impl<'a, 'gcx, 'tcx> ty::PolyExistentialTraitRef<'tcx> 
ty			impl<'a, 'gcx, 'tcx> ty::TraitRef<'tcx> 
ty			impl<'a, 'tcx> ty::TyS<'tcx> 
ty::Lift for SelectionCandidate			impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> 
ty::fold::TypeFolder for Generalizer			impl<'cx, 'gcx, 'tcx> ty::fold::TypeFolder<'gcx, 'tcx> for Generalizer<'cx, 'gcx, 'tcx> 
ty_adt_def			    pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> 
ty_for_param			    fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> 
ty_is_local			fn ty_is_local(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal) -> bool 
ty_is_local_constructor			fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)-> bool 
ty_to_def_id			    pub fn ty_to_def_id(&self) -> Option<DefId> 
ty_to_string			pub fn ty_to_string(ty: &hir::Ty) -> String 
ty_to_string			    pub fn ty_to_string(&self, t: Ty<'tcx>) -> String 
type_at			    pub fn type_at(&self, i: usize) -> Ty<'tcx> 
type_category			        fn type_category<'tcx>(t: Ty<'tcx>) -> Option<u32> 
type_contents			    pub fn type_contents(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> TypeContents 
type_error_message			    pub fn type_error_message<M>(&self,
type_error_struct			    pub fn type_error_struct<M>(&self,
type_error_struct_with_diag			    pub fn type_error_struct_with_diag<M>(&self,
type_flags			    pub fn type_flags(&self) -> TypeFlags 
type_for_def			    pub fn type_for_def(&self, ty_param_def: &ty::TypeParameterDef) -> Ty<'tcx> 
type_id_hash			    pub fn type_id_hash(self, ty: Ty<'tcx>) -> u64 
type_is_unconstrained_numeric			    pub fn type_is_unconstrained_numeric(&'a self, ty: Ty) -> UnconstrainedNumeric 
type_is_unsafe_function			fn type_is_unsafe_function(ty: Ty) -> bool 
type_known_to_meet_bound			pub fn type_known_to_meet_bound<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,
type_moves_by_default			    pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool 
type_needs_drop_given_env			    pub fn type_needs_drop_given_env(self,
type_param			    pub fn type_param(&self, param: &ParamTy) -> &TypeParameterDef<'tcx> 
type_parameter_def			    pub fn type_parameter_def(self,
type_var_diverges			    pub fn type_var_diverges(&'a self, ty: Ty) -> bool 
type_var_for_def			    pub fn type_var_for_def(&self,
type_variable			pub mod type_variable;
types			    pub fn types(&self) -> HirVec<&P<Ty>> 
types			    pub fn types(cause: &ObligationCause<'tcx>,
types			    pub fn types(&'a self) -> impl DoubleEndedIterator<Item=Ty<'tcx>> + 'a 
types_escaping_snapshot			    pub fn types_escaping_snapshot(&mut self, s: &Snapshot) -> Vec<Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>)
tys_to_string			    pub fn tys_to_string(&self, ts: &[Ty<'tcx>]) -> String 
uncovered_tys			fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, infer_is_local: InferIsLocal)
unify_float_variable			    fn unify_float_variable(&self,
unify_integral_variable			    fn unify_integral_variable(&self,
unify_key			pub mod unify_key;
unimpl			    pub fn unimpl(&self, msg: &str) -> ! 
union			    pub fn union<I, T, F>(v: I, mut f: F) -> TypeContents where
unit			    pub fn unit(self) -> InferOk<'tcx, ()> 
unresolved_lifetime_ref			    fn unresolved_lifetime_ref(&self, lifetime_ref: &hir::Lifetime) 
unsolved_variables			    pub fn unsolved_variables(&self) -> Vec<ty::Ty<'tcx>> 
unsolved_variables			    pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> 
unstable			    fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }
unstable			    pub fn unstable(g: getopts::OptGroup) -> RustcOptGroup 
unstable_bnr			    fn unstable_bnr(g: getopts::OptGroup) -> R { RustcOptGroup::unstable_bnr(g) }
unstable_bnr			    fn unstable_bnr(g: getopts::OptGroup) -> RustcOptGroup 
unstable_options			    pub fn unstable_options(&self) -> bool 
upcast_choices			    pub fn upcast_choices(self,
update_limit			fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Cell<usize>,
update_limits			pub fn update_limits(sess: &Session, krate: &ast::Crate) 
upvar			    pub fn upvar(&self) -> Option<cmt<'tcx>> 
upvar_capture			    pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture<'tcx>> 
upvar_capture			    pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture<'tcx>> 
upvar_tys			    pub fn upvar_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'acx>) ->
used_crate_source			    fn used_crate_source(&self, cnum: CrateNum) -> CrateSource { bug!("used_crate_source") }
used_crate_source			    fn used_crate_source(&self, cnum: CrateNum) -> CrateSource;
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(CrateNum, LibSource)>;
used_libraries			    fn used_libraries(&self) -> Vec<NativeLibrary> { vec![] }
used_libraries			    fn used_libraries(&self) -> Vec<NativeLibrary>;
used_link_args			    fn used_link_args(&self) -> Vec<String> { vec![] }
used_link_args			    fn used_link_args(&self) -> Vec<String>;
used_on_entry			    fn used_on_entry(&self, ln: LiveNode, var: Variable) -> bool 
util			pub mod util 
util			mod util;
util			pub mod util;
validate_crate_name			pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) 
values			    pub fn values<'a>(&'a self) -> BTreeMapValuesIter<'a, OutputType, Option<PathBuf>> 
values_are_none			    fn values_are_none(&self) -> bool 
values_str			    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<(String, String)> 
var_diverges			    pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool 
var_ids			fn var_ids<'a, 'gcx, 'tcx>(fields: &CombineFields<'a, 'gcx, 'tcx>,
var_origin			    pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin 
var_origin			    pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin 
var_region			    pub fn var_region(&self, id: ast::NodeId) -> ty::Region 
var_scope			    pub fn var_scope(&self, var_id: ast::NodeId) -> CodeExtent 
variable			    fn variable(&self, node_id: NodeId, span: Span) -> Variable 
variable_name			    fn variable_name(&self, var: Variable) -> String 
variadic			    pub fn variadic(&self) -> bool 
variant_descr			    pub fn variant_descr(&self) -> &'static str 
variant_index_with_id			    pub fn variant_index_with_id(&self, vid: DefId) -> usize 
variant_of_def			    pub fn variant_of_def(&self, def: Def) -> &VariantDef 
variant_to_string			pub fn variant_to_string(var: &hir::Variant) -> String 
variant_with_id			    pub fn variant_with_id(&self, vid: DefId) -> &VariantDef 
vars_and_temps_iter			    pub fn vars_and_temps_iter(&self) -> impl Iterator<Item=Local> 
vars_created_since_snapshot			    pub fn vars_created_since_snapshot(&self, mark: &RegionSnapshot) -> Vec<RegionVid> 
vars_iter			    pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a 
verbose			    pub fn verbose(&self) -> bool { self.opts.debugging_opts.verbose }
verbose			pub fn verbose() -> bool 
verify			fn verify(sess: &Session, items: &lang_items::LanguageItems) 
verify_generic_bound			    pub fn verify_generic_bound(&self,
verify_generic_bound			    pub fn verify_generic_bound(&self,
verify_ok			fn verify_ok(sess: &session::Session, list: &[Linkage]) 
virtual_call_violation_for_method			    fn virtual_call_violation_for_method(self,
visibility			    fn visibility(&self, def: DefId) -> ty::Visibility { bug!("visibility") }
visibility			    fn visibility(&self, def: DefId) -> ty::Visibility;
visibility_qualified			pub fn visibility_qualified(vis: &hir::Visibility, s: &str) -> String 
visible_parent_map			    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> 
visible_parent_map			    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;
visit			mod visit;
visit			    pub fn visit<'ast,V>(&'ast self, visitor: &mut V)
visit			    pub fn visit<V>(&self, visitor: &mut V)
visit			pub mod visit;
visit::Visitor for DefCollector			impl<'a> visit::Visitor<'a> for DefCollector<'a> 
visit_all_item_likes			    pub fn visit_all_item_likes<'hir, V>(&'hir self, visitor: &mut V)
visit_all_item_likes_in_krate			pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,
visit_all_item_likes_in_krate			    pub fn visit_all_item_likes_in_krate<V,F>(self,
visit_arm			    fn visit_arm(&mut self, a: &'v Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'a ast::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'tcx hir::Arm) 
visit_arm			    fn visit_arm(&mut self, arm: &'tcx hir::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'tcx hir::Arm) { visit_arm(self, a); }
visit_arm			    fn visit_arm(&mut self, a: &'tcx hir::Arm) 
visit_arm			fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &'ast Arm) 
visit_assert_message			            fn visit_assert_message(&mut self,
visit_assign			            fn visit_assign(&mut self,
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) 
visit_associated_item_kind			    fn visit_associated_item_kind(&mut self, kind: &'v AssociatedItemKind) 
visit_ast_const_integer			    pub fn visit_ast_const_integer(&mut self, expr: &Expr) 
visit_attribute			    fn visit_attribute(&mut self, _attr: &'v Attribute) 
visit_attribute			    fn visit_attribute(&mut self, attr: &'a ast::Attribute) 
visit_attribute			    fn visit_attribute(&mut self, attr: &'tcx ast::Attribute) 
visit_basic_block_data			            fn visit_basic_block_data(&mut self,
visit_binder			    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool 
visit_binder			    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, x: &ty::Binder<T>) -> bool 
visit_block			    fn visit_block(&mut self, b: &'v Block) 
visit_block			    fn visit_block(&mut self, block: &'ast Block) 
visit_block			    fn visit_block(&mut self, b: &'a ast::Block) 
visit_block			    fn visit_block(&mut self, b: &'tcx hir::Block) 
visit_block			    fn visit_block(&mut self, block: &'tcx hir::Block) 
visit_block			    fn visit_block(&mut self, b: &'ast Block) 
visit_body			    fn visit_body(&mut self, id: ExprId) 
visit_body			    fn visit_body(&mut self, id: ExprId) 
visit_body			    fn visit_body(&mut self, id: hir::ExprId) 
visit_branch			            fn visit_branch(&mut self,
visit_closure_substs			            fn visit_closure_substs(&mut self,
visit_const			    fn visit_const(&mut self, item_id: ast::NodeId, expr: &'tcx hir::Expr) 
visit_const_usize			            fn visit_const_usize(&mut self,
visit_const_val			            fn visit_const_val(&mut self,
visit_constant			            fn visit_constant(&mut self,
visit_decl			    fn visit_decl(&mut self, d: &'v Decl) 
visit_decl			    fn visit_decl(&mut self, d: &'tcx hir::Decl) 
visit_def_id			            fn visit_def_id(&mut self,
visit_def_mention			    fn visit_def_mention(&mut self, _def: Def) 
visit_defaultness			    fn visit_defaultness(&mut self, defaultness: &'v Defaultness) 
visit_early_late			    fn visit_early_late<F>(&mut self,
visit_enum_def			    fn visit_enum_def(&mut self,
visit_expr			    fn visit_expr(&mut self, ex: &'v Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'ast Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'a Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'ast hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &'a ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &'tcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'tcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'tcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'gcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'tcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'tcx Expr) { visit_expr(self, ex); }
visit_expr			    fn visit_expr(&mut self, ex: &'tcx Expr) 
visit_expr			fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &'tcx hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &'ast Expr) 
visit_expr			        fn visit_expr(&mut self, ex: &'v hir::Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, _ex: &'v Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, e: &'a ast::Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, e: &'tcx hir::Expr) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: ExprId, s: Span, id: NodeId) 
visit_fn			    fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, decl: &'a ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: hir_visit::FnKind<'tcx>, decl: &'tcx hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, fn_decl: &'tcx hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, _: FnKind<'tcx>, _: &'tcx hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,
visit_fn			fn visit_fn<'a, 'tcx: 'a>(ir: &mut IrMaps<'a, 'tcx>,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'ast>, fd: &'ast FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'tcx>, decl: &'tcx hir::FnDecl,
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &'a ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &'ast hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, g: &'v Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &'ast Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &'a Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &'ast hir::Generics) 
visit_generics			    fn visit_generics(&mut self, g: &'a ast::Generics) 
visit_generics			    fn visit_generics(&mut self, g: &'tcx hir::Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &'tcx hir::Generics) 
visit_hir_const_integer			    fn visit_hir_const_integer(&mut self, expr: &hir::Expr) 
visit_id			    fn visit_id(&mut self, _node_id: NodeId) 
visit_id			    fn visit_id(&mut self, id: NodeId) 
visit_id			    fn visit_id(&mut self, id: ast::NodeId) 
visit_ident			    fn visit_ident(&mut self, sp: Span, id: ast::Ident) 
visit_ids			    fn visit_ids<'b, F: 'b>(&'b mut self, f: F)
visit_impl_item			        fn visit_impl_item(&mut self, i: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem);
visit_impl_item			            fn visit_impl_item(&mut self, item: &'lcx ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'ast ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'a ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _ii: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'a ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &'tcx ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) 
visit_impl_item_ref			    fn visit_impl_item_ref(&mut self, ii: &'v ImplItemRef) 
visit_item			        fn visit_item(&mut self, i: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'a ast::Item) 
visit_item			    fn visit_item(&mut self, i: &'v Item) 
visit_item			    fn visit_item(&mut self, item: &'hir Item) 
visit_item			    fn visit_item(&mut self, item: &'hir Item);
visit_item			            fn visit_item(&mut self, item: &'lcx Item) 
visit_item			    fn visit_item(&mut self, i: &'ast Item) 
visit_item			    fn visit_item(&mut self, i: &'a Item) 
visit_item			    fn visit_item(&mut self, i: &'ast hir::Item) 
visit_item			    fn visit_item(&mut self, it: &'a ast::Item) 
visit_item			    fn visit_item(&mut self, it: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, i: &'ast Item) 
visit_item			        fn visit_item(&mut self, _: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, i: &'tcx Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx hir::Item) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lt: &'a ast::Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) 
visit_lifetime			        fn visit_lifetime(&mut self, lifetime_ref: &'v hir::Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, def: &'a LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, def: &'ast hir::LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lt: &'a ast::LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lt: &'tcx hir::LifetimeDef) 
visit_literal			            fn visit_literal(&mut self,
visit_local			    fn visit_local(&mut self, l: &'v Local) 
visit_local			    fn visit_local(&mut self, l: &'a ast::Local) 
visit_local			    fn visit_local(&mut self, l: &'tcx hir::Local) 
visit_local			    fn visit_local(&mut self, l: &'tcx hir::Local) { visit_local(self, l); }
visit_local			    fn visit_local(&mut self, l: &'tcx hir::Local) 
visit_local			fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) 
visit_local			    fn visit_local(&mut self, l: &'ast Local) 
visit_local_decl			            fn visit_local_decl(&mut self,
visit_location			            fn visit_location(&mut self, mir: & 
visit_lvalue			            fn visit_lvalue(&mut self,
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'ast MacroDef) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'a MacroDef) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'ast hir::MacroDef) 
visit_macro_def			    fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) 
visit_macro_invoc			    fn visit_macro_invoc(&mut self, id: NodeId, const_integer: bool) 
visit_mir			            fn visit_mir(&mut self, mir: & 
visit_mod			    fn visit_mod(&mut self, m: &'v Mod, _s: Span, n: NodeId) 
visit_mod			    fn visit_mod(&mut self, m: &'a ast::Mod, s: Span, n: ast::NodeId) 
visit_mod			    fn visit_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: ast::NodeId) 
visit_name			    fn visit_name(&mut self, _span: Span, _name: Name) 
visit_name			    fn visit_name(&mut self, sp: Span, name: ast::Name) 
visit_nested_impl_item			    fn visit_nested_impl_item(&mut self, id: ImplItemId) 
visit_nested_impl_item			    fn visit_nested_impl_item(&mut self, item_id: ImplItemId) 
visit_nested_item			    fn visit_nested_item(&mut self, id: ItemId) 
visit_nested_item			    fn visit_nested_item(&mut self, item: ItemId) 
visit_node			    fn visit_node(&mut self, node: &ast_map::Node<'tcx>) 
visit_operand			            fn visit_operand(&mut self,
visit_pat			    fn visit_pat(&mut self, p: &'v Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &'ast Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &'a Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &'ast hir::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'a ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'tcx hir::Pat) 
visit_pat			            fn visit_pat(&mut self, p: &hir::Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &'tcx hir::Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &'tcx hir::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &'ast Pat) 
visit_path			    fn visit_path(&mut self, path: &'v Path, _id: NodeId) 
visit_path			    fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, p: &'tcx hir::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) 
visit_path			    fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &'a ast::Path, item: &'a ast::PathListItem) 
visit_path_parameters			    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) 
visit_path_segment			    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self,
visit_projection			            fn visit_projection(&mut self,
visit_projection_elem			            fn visit_projection_elem(&mut self,
visit_qpath			    fn visit_qpath(&mut self, qpath: &'v QPath, id: NodeId, span: Span) 
visit_region			    fn visit_region(&mut self, r: &'tcx ty::Region) -> bool 
visit_region			    fn visit_region(&mut self, r: &'tcx ty::Region) -> bool 
visit_rvalue			            fn visit_rvalue(&mut self,
visit_source_info			            fn visit_source_info(&mut self,
visit_span			            fn visit_span(&mut self,
visit_statement			            fn visit_statement(&mut self,
visit_stmt			    fn visit_stmt(&mut self, s: &'v Stmt) 
visit_stmt			    fn visit_stmt(&mut self, stmt: &'ast Stmt) 
visit_stmt			    fn visit_stmt(&mut self, stmt: &'a Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'a ast::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'tcx hir::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &'ast Stmt) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, field: &'ast StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'a ast::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'tcx hir::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, field: &'tcx hir::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'tcx StructField) 
visit_substs			            fn visit_substs(&mut self,
visit_terminator			            fn visit_terminator(&mut self,
visit_terminator_kind			            fn visit_terminator_kind(&mut self,
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'ast TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'a TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, _ti: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) 
visit_trait_ref			    fn visit_trait_ref(&mut self, t: &'v TraitRef) 
visit_trait_ref			    fn visit_trait_ref(&mut self, tr: &'ast TraitRef) 
visit_trait_ref			    fn visit_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>) -> bool 
visit_ty			    fn visit_ty(&mut self, t: &'v Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &'ast Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &'a Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &'ast hir::Ty) 
visit_ty			    fn visit_ty(&mut self, t: &'a ast::Ty) 
visit_ty			    fn visit_ty(&mut self, t: &'tcx hir::Ty) 
visit_ty			        fn visit_ty(&mut self, ty: &'v hir::Ty) 
visit_ty			        fn visit_ty(&mut self, ty: &hir::Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &'tcx hir::Ty) 
visit_ty			            fn visit_ty(&mut self,
visit_ty			    fn visit_ty(&mut self, t: Ty) -> bool 
visit_ty			    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool 
visit_ty			    fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool 
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) 
visit_typed_const_val			            fn visit_typed_const_val(&mut self,
visit_variant			    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) 
visit_variant			    fn visit_variant(&mut self, v: &'a ast::Variant, g: &'a ast::Generics, item_id: ast::NodeId) 
visit_variant			    fn visit_variant(&mut self,
visit_variant			    fn visit_variant(&mut self,
visit_variant			    fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: NodeId) 
visit_variant_data			    fn visit_variant_data(&mut self,
visit_variant_data			    fn visit_variant_data(&mut self,
visit_variant_data			    fn visit_variant_data(&mut self, def: &'tcx hir::VariantData, _: ast::Name,
visit_vis			    fn visit_vis(&mut self, vis: &'v Visibility) 
visit_vis			    fn visit_vis(&mut self, visibility: &'ast Visibility) 
visit_visibility_scope			            fn visit_visibility_scope(&mut self,
visit_visibility_scope_data			            fn visit_visibility_scope_data(&mut self,
visit_where_predicate			    fn visit_where_predicate(&mut self, predicate: &'v WherePredicate) 
visit_with			    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
visit_with			    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
vtable_default_impl			    fn vtable_default_impl(&mut self,
vtable_impl			    fn vtable_impl(&mut self,
walk			    pub fn walk<F>(&self, mut it: F) -> bool
walk			    pub fn walk(&'tcx self) -> TypeWalker<'tcx> 
walk			pub mod walk;
walk_			    fn walk_<G>(&self, it: &mut G) -> bool
walk_adjustment			    fn walk_adjustment(&mut self, expr: &hir::Expr) 
walk_arg_patterns			    fn walk_arg_patterns(&mut self,
walk_arm			pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) 
walk_arm			    fn walk_arm(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &hir::Arm, mode: MatchMode) 
walk_assoc_type_binding			pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,
walk_associated_item_kind			pub fn walk_associated_item_kind<'v, V: Visitor<'v>>(_: &mut V, _: &'v AssociatedItemKind) 
walk_autoderefs			    fn walk_autoderefs(&mut self,
walk_autoref			    fn walk_autoref(&mut self,
walk_block			pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) 
walk_block			    fn walk_block(&mut self, blk: &hir::Block) 
walk_callee			    fn walk_callee(&mut self, call: &hir::Expr, callee: &hir::Expr) 
walk_captures			    fn walk_captures(&mut self, closure_expr: &hir::Expr, fn_decl_span: Span) 
walk_cfg			    fn walk_cfg(&mut self,
walk_crate			pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) 
walk_decl			pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) 
walk_defaultness			pub fn walk_defaultness<'v, V: Visitor<'v>>(_: &mut V, _: &'v Defaultness) 
walk_enum_def			pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,
walk_expr			pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) 
walk_expr			    pub fn walk_expr(&mut self, expr: &hir::Expr) 
walk_fn			pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,
walk_fn			    pub fn walk_fn(&mut self,
walk_fn_decl			pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) 
walk_fn_decl_nopat			pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) 
walk_fn_kind			pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'v>) 
walk_fn_ret_ty			pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy) 
walk_fn_with_body			pub fn walk_fn_with_body<'v, V: Visitor<'v>>(visitor: &mut V,
walk_foreign_item			pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) 
walk_generics			pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) 
walk_impl_item			pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) 
walk_impl_item_ref			pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef) 
walk_irrefutable_pat			    fn walk_irrefutable_pat(&mut self, cmt_discr: mc::cmt<'tcx>, pat: &hir::Pat) 
walk_item			pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) 
walk_item			    pub fn walk_item(&mut self, ii: &'a InlinedItem, krate: &'a hir::Crate) 
walk_lifetime			pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) 
walk_lifetime_def			pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V, lifetime_def: &'v LifetimeDef) 
walk_local			pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) 
walk_local			    fn walk_local(&mut self, local: &hir::Local) 
walk_macro_def			pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) 
walk_mod			pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod, mod_node_id: NodeId) 
walk_opt_name			pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) 
walk_opt_sp_name			pub fn walk_opt_sp_name<'v, V: Visitor<'v>>(visitor: &mut V, opt_sp_name: &Option<Spanned<Name>>) 
walk_overloaded_operator			    fn walk_overloaded_operator(&mut self,
walk_parent_nodes			    fn walk_parent_nodes<F>(&self, start_id: NodeId, found: F) -> Result<NodeId, NodeId>
walk_pat			pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) 
walk_pat			    fn walk_pat(&mut self, cmt_discr: mc::cmt<'tcx>, pat: &hir::Pat, match_mode: MatchMode) 
walk_path			pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) 
walk_path_parameters			pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,
walk_path_segment			pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,
walk_poly_trait_ref			pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,
walk_qpath			pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath, id: NodeId, span: Span) 
walk_shallow			    pub fn walk_shallow(&'tcx self) -> AccIntoIter<walk::TypeWalkerArray<'tcx>> 
walk_shallow			pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> AccIntoIter<TypeWalkerArray<'tcx>> 
walk_stmt			pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) 
walk_stmt			    fn walk_stmt(&mut self, stmt: &hir::Stmt) 
walk_struct_def			pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) 
walk_struct_expr			    fn walk_struct_expr(&mut self,
walk_struct_field			pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) 
walk_trait_item			pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) 
walk_trait_ref			pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)
walk_ty			pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) 
walk_ty_param_bound			pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyParamBound) 
walk_tys			    pub fn walk_tys(&self) -> IntoIter<Ty<'tcx>> 
walk_variant			pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,
walk_vis			pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) 
walk_where_predicate			pub fn walk_where_predicate<'v, V: Visitor<'v>>(
warn			    pub fn warn(&self, msg: &str) 
warn_about_dead_assign			    fn warn_about_dead_assign(&self,
warn_about_unused			    fn warn_about_unused(&self,
warn_about_unused_args			    fn warn_about_unused_args(&self, decl: &hir::FnDecl, entry_ln: LiveNode) 
warn_about_unused_or_dead_vars_in_pat			    fn warn_about_unused_or_dead_vars_in_pat(&mut self, pat: &hir::Pat) 
warn_dead_code			    fn warn_dead_code(&mut self,
weak_lang_items			    pub mod weak_lang_items;
wf			pub mod wf;
when			    pub fn when(&self, cond: bool) -> TypeContents 
where_clause_to_string			pub fn where_clause_to_string(i: &hir::WhereClause) -> String 
with			    fn with<F>(&mut self, wrap_scope: ScopeChain, f: F) where
with			    pub fn with<P>(&self, value: P) -> Obligation<'tcx,P> 
with			    pub fn with<U>(self, value: U) -> Normalized<'tcx,U> 
with			    fn with(r: &'o TraitObligationStack<'o,'tcx>) -> TraitObligationStackList<'o,'tcx> 
with			    pub fn with<F, R>(f: F) -> R
with_addl_obligations			    fn with_addl_obligations(mut self,
with_caller_bounds			    pub fn with_caller_bounds(&self,
with_cause			    fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R
with_cause			    fn with_cause<F,R>(&mut self, _cause: Cause, f: F) -> R
with_depth			    fn with_depth(cause: ObligationCause<'tcx>,
with_expected_switched			    fn with_expected_switched<R, F: FnOnce(&mut Self) -> R>(&mut self, f: F) -> R 
with_extension			    pub fn with_extension(&self, extension: &str) -> PathBuf 
with_forced_absolute_paths			pub fn with_forced_absolute_paths<F: FnOnce() -> R, R>(f: F) -> R 
with_freevars			    pub fn with_freevars<T, F>(self, fid: NodeId, f: F) -> T where
with_fresh_ty_vars			    pub fn with_fresh_ty_vars(selcx: &mut traits::SelectionContext<'a, 'gcx, 'tcx>,
with_ignore			    pub fn with_ignore<OP,R>(&self, op: OP) -> R
with_lint_attrs			    fn with_lint_attrs<F>(&mut self,
with_loop_nodes			    fn with_loop_nodes<R, F>(&mut self,
with_opt			    pub fn with_opt<F, R>(f: F) -> R
with_options			    pub fn with_options(delegate: &'a mut (Delegate<'tcx>+'a),
with_options			    pub fn with_options(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,
with_parent			    fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_id: NodeId, f: F) 
with_parent			    pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) 
with_parent_def			    fn with_parent_def<T, F>(&mut self, parent_id: NodeId, f: F) -> T
with_self_ty			    pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, self_ty: Ty<'tcx>)
with_self_ty			    pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
with_self_ty			    pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,
with_taken			    fn with_taken(taken: &[hir::LifetimeDef]) -> LifeGiver 
with_task			    pub fn with_task<OP,R>(&self, key: DepNode<DefId>, op: OP) -> R
word_nbsp			    pub fn word_nbsp(&mut self, w: &str) -> io::Result<()> 
work_products			    pub fn work_products(&self) -> Ref<FxHashMap<Arc<WorkProductId>, WorkProduct>> 
would_be_zero_sized			    pub fn would_be_zero_sized<I>(dl: &TargetDataLayout, fields: I)
write			    fn write(&self, k: &M::Key) 
write			    pub fn write(&mut self, v: DepNode<D>) 
write			    pub fn write(&self, v: DepNode<DefId>) 
write_lvalue			    fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: u32)
write_trait_impls			    fn write_trait_impls(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) 
write_vars			    fn write_vars<F>(&self,
writer			    fn writer(&mut self) -> &mut pp::Printer<'a> 
