A			struct A;
AccessLevel			pub enum AccessLevel 
AccessLevels			impl<Id: Hash + Eq> AccessLevels<Id> 
AccessLevels			pub struct AccessLevels<Id = NodeId> 
AdtDefData			impl<'tcx, 'container> AdtDefData<'tcx, 'container> 
AdtDefData			pub struct AdtDefData<'tcx, 'container: 'tcx> 
AdtKind			pub enum AdtKind { Struct, Enum }
AggregateKind			pub enum AggregateKind<'tcx> 
Aliasability			pub enum Aliasability 
AliasableReason			pub enum AliasableReason 
AnnotationKind			enum AnnotationKind 
Annotator			impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> 
Annotator			struct Annotator<'a, 'tcx: 'a> 
AnotherImpl			struct AnotherImpl;
ArgDecl			pub struct ArgDecl<'tcx> 
AssociatedConst			pub struct AssociatedConst<'tcx> 
AssociatedType			pub struct AssociatedType<'tcx> 
AssociatedTypeNormalizer			impl<'a,'b,'tcx> AssociatedTypeNormalizer<'a,'b,'tcx> 
AssociatedTypeNormalizer			struct AssociatedTypeNormalizer<'a,'b:'a,'tcx:'b> 
AtBindingPatternVisitor			struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> 
AutoAdjustment			impl<'tcx> AutoAdjustment<'tcx> 
AutoAdjustment			pub enum AutoAdjustment<'tcx> 
AutoDerefRef			impl<'tcx> AutoDerefRef<'tcx> 
AutoDerefRef			pub struct AutoDerefRef<'tcx> 
AutoRef			pub enum AutoRef<'tcx> 
Bar			struct Bar {x: u8}
Bar			struct Bar;
Bar			struct Bar<T>(T);
BareFnTy			pub struct BareFnTy<'tcx> 
BasicBlock			impl BasicBlock 
BasicBlock			pub struct BasicBlock(u32);
BasicBlockData			impl<'tcx> BasicBlockData<'tcx> 
BasicBlockData			pub struct BasicBlockData<'tcx> 
BinOp			pub enum BinOp 
BinOp			impl BinOp 
Binder			impl<T> Binder<T> 
Binder			pub struct Binder<T>(pub T);
BitwiseOperator			pub trait BitwiseOperator 
BitwiseOperator for Subtract			impl BitwiseOperator for Subtract 
BitwiseOperator for Union			impl BitwiseOperator for Union 
Bivariate			impl<'a, 'tcx> Bivariate<'a, 'tcx> 
Bivariate			pub struct Bivariate<'a, 'tcx: 'a> 
BlockQueryVisitor			struct BlockQueryVisitor<P> where P: FnMut(&hir::Expr) -> bool 
BlockRemainder			pub struct BlockRemainder 
Borrow			impl<'tcx> Borrow<TypeVariants<'tcx>> for InternedTy<'tcx> 
BorrowKind			impl BorrowKind 
BorrowKind			pub enum BorrowKind 
BorrowKind			pub enum BorrowKind 
BorrowKind			impl BorrowKind 
BottomUpFolder			pub struct BottomUpFolder<'a, 'tcx: 'a, F> where F: FnMut(Ty<'tcx>) -> Ty<'tcx> 
BoundRegion			pub enum BoundRegion 
BuiltinBound			pub enum BuiltinBound 
BuiltinBoundConditions			enum BuiltinBoundConditions<'tcx> 
BuiltinBounds			impl BuiltinBounds 
BuiltinBounds			pub struct BuiltinBounds(EnumSet<BuiltinBound>);
C			struct C { a: Cell<usize> }
CFG			impl CFG 
CFG			pub struct CFG 
CFGBuilder			impl<'a, 'tcx> CFGBuilder<'a, 'tcx> 
CFGBuilder			struct CFGBuilder<'a, 'tcx: 'a> 
CFGEdgeData			pub struct CFGEdgeData 
CFGNodeData			impl CFGNodeData 
CFGNodeData			pub enum CFGNodeData 
CLike for BuiltinBound			impl CLike for BuiltinBound 
CReaderCacheKey			pub struct CReaderCacheKey 
CallKind			impl<'tcx> CallKind<'tcx> 
CallKind			pub enum CallKind<'tcx> 
CallSiteScopeData			impl CallSiteScopeData 
CallSiteScopeData			pub struct CallSiteScopeData 
CaptureInfo			struct CaptureInfo 
CastKind			pub enum CastKind 
CastKind			pub enum CastKind 
CastTy			impl<'tcx> CastTy<'tcx> 
CastTy			pub enum CastTy<'tcx> 
Categorization			pub enum Categorization<'tcx> 
Cause			pub enum Cause 
CheckAttrVisitor			impl<'a> CheckAttrVisitor<'a> 
CheckAttrVisitor			struct CheckAttrVisitor<'a> 
CheckCrateVisitor			impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> 
CheckCrateVisitor			struct CheckCrateVisitor<'a, 'tcx: 'a> 
CheckCrateVisitor			struct CheckCrateVisitor<'a, 'ast: 'a> 
CheckItemRecursionVisitor			impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> 
CheckItemRecursionVisitor			struct CheckItemRecursionVisitor<'a, 'ast: 'a> 
CheckLintNameResult			enum CheckLintNameResult<'a> 
CheckLoopVisitor			impl<'a> CheckLoopVisitor<'a> 
CheckLoopVisitor			struct CheckLoopVisitor<'a> 
Checker			impl<'a, 'tcx> Checker<'a, 'tcx> 
Checker			struct Checker<'a, 'tcx: 'a> 
ChildItem			pub struct ChildItem 
Clone for LiveNode			impl Clone for LiveNode 
Clone for MapEntry			impl<'ast> Clone for MapEntry<'ast> 
ClosureKind			impl ClosureKind 
ClosureKind			pub enum ClosureKind 
ClosureParts			impl<'a> ClosureParts<'a> 
ClosureParts			struct ClosureParts<'a> 
ClosureSubsts			pub struct ClosureSubsts<'tcx> 
ClosureTy			pub struct ClosureTy<'tcx> 
ClosureUpvar			pub struct ClosureUpvar<'tcx> 
Code			impl<'a> Code<'a> 
Code			pub enum Code<'a> 
CodeExtent			impl CodeExtent 
CodeExtent			pub struct CodeExtent(u32);
CodeExtentData			impl CodeExtentData 
CodeExtentData			pub enum CodeExtentData 
CollectPrivateImplItemsVisitor			struct CollectPrivateImplItemsVisitor<'a> 
Combine for RegionVidKey			impl Combine for RegionVidKey 
CombineFields			impl<'a, 'tcx> CombineFields<'a, 'tcx> 
CombineFields			pub struct CombineFields<'a, 'tcx: 'a> 
CombineMapType			pub enum CombineMapType 
CombinedSnapshot			pub struct CombinedSnapshot 
CommonTypes			impl<'tcx> CommonTypes<'tcx> 
CommonTypes			pub struct CommonTypes<'tcx> 
Component			pub enum Component<'tcx> 
Config			pub struct Config 
ConstEvalErr			impl ConstEvalErr 
ConstEvalErr			pub struct ConstEvalErr 
ConstVal			impl ConstVal 
ConstVal			pub enum ConstVal 
Constant			pub struct Constant<'tcx> 
Constraint			pub enum Constraint 
ConstraintGraph			impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> 
ConstraintGraph			struct ConstraintGraph<'a, 'tcx: 'a> 
Constructor			pub enum Constructor 
ConsumeMode			pub enum ConsumeMode 
Context			enum Context 
Context			pub struct Context 
Context			impl<'a> Context<'a> 
Context			struct Context<'a> 
CopyImplementationError			pub enum CopyImplementationError 
CrateAnalysis			pub struct CrateAnalysis<'a> 
CrateSource			pub struct CrateSource 
CrateStore			pub trait CrateStore<'tcx> : Any 
CrateStore for DummyCrateStore			impl<'tcx> CrateStore<'tcx> for DummyCrateStore 
CrateType			pub enum CrateType 
CtxtArenas			impl<'tcx> CtxtArenas<'tcx> 
CtxtArenas			pub struct CtxtArenas<'tcx> 
CustomCoerceUnsized			pub enum CustomCoerceUnsized 
DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> 
DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> 
DataFlowContext			pub struct DataFlowContext<'a, 'tcx: 'a, O> 
DataFlowOperator			pub trait DataFlowOperator : BitwiseOperator 
DeadVisitor			impl<'a, 'tcx> DeadVisitor<'a, 'tcx> 
DeadVisitor			struct DeadVisitor<'a, 'tcx: 'a> 
DebruijnIndex			impl DebruijnIndex 
DebruijnIndex			pub struct DebruijnIndex 
Debug for BasicBlock			impl Debug for BasicBlock 
Debug for Constant			impl<'tcx> Debug for Constant<'tcx> 
Debug for Literal			impl<'tcx> Debug for Literal<'tcx> 
Debug for Lvalue			impl<'tcx> Debug for Lvalue<'tcx> 
Debug for Operand			impl<'tcx> Debug for Operand<'tcx> 
Debug for Rvalue			impl<'tcx> Debug for Rvalue<'tcx> 
Debug for Statement			impl<'tcx> Debug for Statement<'tcx> 
Debug for Terminator			impl<'tcx> Debug for Terminator<'tcx> 
DebugInfoLevel			pub enum DebugInfoLevel 
DebugStat			            struct DebugStat 
Decodable			impl<'tcx> Decodable for &'tcx Substs<'tcx> 
Decodable			impl<'tcx> Decodable for &'tcx ClosureSubsts<'tcx> 
Decodable for AdtDef			impl<'tcx> Decodable for AdtDef<'tcx> 
Decodable for Substs			impl<'tcx> Decodable for Substs<'tcx> 
Decodable for Ty			impl<'tcx> Decodable for Ty<'tcx> 
DecodingContext			    pub trait DecodingContext<'tcx> 
Def			impl Def 
Def			pub enum Def 
DefData			pub struct DefData 
DefId			impl DefId 
DefId			pub struct DefId 
DefIdMap			pub fn DefIdMap<T>() -> DefIdMap<T> { FnvHashMap() }
DefIdSet			pub fn DefIdSet() -> DefIdSet { FnvHashSet() }
DefIndex			impl DefIndex 
DefIndex			pub struct DefIndex(u32);
DefKey			pub struct DefKey 
DefLike			pub enum DefLike 
DefPathData			impl DefPathData 
DefPathData			pub enum DefPathData 
DefRegion			pub enum DefRegion 
Default			pub struct Default<'tcx> 
Default for AccessLevels			impl<Id: Hash + Eq> Default for AccessLevels<Id> 
Default for ErrorOutputType			impl Default for ErrorOutputType 
Definitions			impl Definitions 
Definitions			pub struct Definitions 
Delegate			pub trait Delegate<'tcx> 
Delegate			struct Delegate<'tcx>(PhantomData<&'tcx ()>);
Delegate for MutationChecker			impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> 
DepGraph			impl DepGraph 
DepGraph			pub struct DepGraph 
DepGraphEdges			impl DepGraphEdges 
DepGraphEdges			pub struct DepGraphEdges 
DepGraphQuery			impl DepGraphQuery 
DepGraphQuery			pub struct DepGraphQuery 
DepGraphThreadData			impl DepGraphThreadData 
DepGraphThreadData			pub struct DepGraphThreadData 
DepMessage			pub enum DepMessage 
DepNode			pub enum DepNode 
DepTask			impl<'graph> DepTask<'graph> 
DepTask			pub struct DepTask<'graph> 
DepTrackingMap			impl<M: DepTrackingMapConfig> DepTrackingMap<M> 
DepTrackingMap			pub struct DepTrackingMap<M: DepTrackingMapConfig> 
DepTrackingMapConfig			pub trait DepTrackingMapConfig 
DepTrackingMapConfig			        impl<'tcx> DepTrackingMapConfig for 
Deref for A			impl Deref for A 
DerivedObligationCause			pub struct DerivedObligationCause<'tcx> 
DisambiguatedDefPathData			pub struct DisambiguatedDefPathData 
Drop for DepTask			impl<'graph> Drop for DepTask<'graph> 
Drop for Foo			impl Drop for Foo 
Drop for IgnoreTask			impl<'graph> Drop for IgnoreTask<'graph> 
Drop for Indenter			impl Drop for Indenter 
DropKind			pub enum DropKind 
DtorKind			impl DtorKind 
DtorKind			pub enum DtorKind 
DummyCrateStore			pub struct DummyCrateStore;
EarlyBoundRegion			pub struct EarlyBoundRegion 
EarlyContext			impl<'a> EarlyContext<'a> 
EarlyContext			pub struct EarlyContext<'a> 
EarlyLintPass			pub trait EarlyLintPass: LintPass 
Edge			enum Edge 
EffectCheckVisitor			impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> 
EffectCheckVisitor			struct EffectCheckVisitor<'a, 'tcx: 'a> 
Elaborator			impl<'cx, 'tcx> Elaborator<'cx, 'tcx> 
Elaborator			pub struct Elaborator<'cx, 'tcx:'cx> 
ElementKind			pub enum ElementKind 
Encodable for AdtDef			impl<'tcx> Encodable for AdtDef<'tcx> 
Encodable for Substs			impl<'tcx> Encodable for Substs<'tcx> 
Encodable for Ty			impl<'tcx> Encodable for Ty<'tcx> 
EncodingContext			    pub trait EncodingContext<'tcx> 
EntryContext			struct EntryContext<'a, 'tcx: 'a> 
EntryFnType			pub enum EntryFnType 
EntryOrExit			pub enum EntryOrExit 
EnumeratedItems			impl<'a,T> EnumeratedItems<'a,T> 
EnumeratedItems			pub struct EnumeratedItems<'a,T:'a> 
Eq for AdtDefData			impl<'tcx, 'container> Eq for AdtDefData<'tcx, 'container> {}
Eq for ConstVal			impl Eq for ConstVal { }
Eq for InternedTy			impl<'tcx> Eq for InternedTy<'tcx> {}
Eq for LintId			impl Eq for LintId { }
Eq for Method			impl<'tcx> Eq for Method<'tcx> {}
Eq for TyS			impl<'tcx> Eq for TyS<'tcx> {}
Equate			impl<'a, 'tcx> Equate<'a, 'tcx> 
Equate			pub struct Equate<'a, 'tcx: 'a> 
EquatePredicate			pub struct EquatePredicate<'tcx>(pub Ty<'tcx>, pub Ty<'tcx>); \/\/ `0 == 1`
ErrKind			pub enum ErrKind 
ErrorOutputType			pub enum ErrorOutputType 
ErrorReported			pub struct ErrorReported;
ErrorReporting			pub trait ErrorReporting<'tcx> 
ErrorReporting for InferCtxt			impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> 
ErrorReportingHelpers			trait ErrorReportingHelpers<'tcx> 
ErrorReportingHelpers for InferCtxt			impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> 
EvalHint			impl<'tcx> EvalHint<'tcx> 
EvalHint			pub enum EvalHint<'tcx> 
EvaluationCache			impl<'tcx> EvaluationCache<'tcx> 
EvaluationCache			pub struct EvaluationCache<'tcx> 
EvaluationResult			enum EvaluationResult 
EvaluationResult			impl EvaluationResult 
ExistentialBounds			impl<'tcx> ExistentialBounds<'tcx> 
ExistentialBounds			pub struct ExistentialBounds<'tcx> 
ExpectedFound			pub struct ExpectedFound<T> 
ExplicitSelfCategory			pub enum ExplicitSelfCategory 
Export			pub struct Export 
ExprUseVisitor			impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> 
ExprUseVisitor			pub struct ExprUseVisitor<'d, 't, 'a: 't, 'tcx:'a+'d> 
Field			impl Field 
Field			pub struct Field(u32);
FieldDefData			impl<'tcx, 'container> FieldDefData<'tcx, 'container> 
FieldDefData			pub struct FieldDefData<'tcx, 'container: 'tcx> 
FieldName			pub enum FieldName 
FileMatch			pub enum FileMatch 
FileSearch			impl<'a> FileSearch<'a> 
FileSearch			pub struct FileSearch<'a> 
FilterToTraits			impl<I> FilterToTraits<I> 
FilterToTraits			pub struct FilterToTraits<I> 
FindLintError			enum FindLintError 
FixupError			pub enum FixupError 
FlagComputation			impl FlagComputation 
FlagComputation			pub struct FlagComputation 
FloatVid			pub struct FloatVid 
FnLikeNode			impl<'a> FnLikeNode<'a> 
FnLikeNode			pub struct FnLikeNode<'a> { node: map::Node<'a> }
FnOutput			impl<'tcx> FnOutput<'tcx> 
FnOutput			pub enum FnOutput<'tcx> 
FnParts			pub struct FnParts<'a> 
FnSig			pub struct FnSig<'tcx> 
FoldOps			pub trait FoldOps 
Folder for IdAndSpanUpdater			impl<F: FoldOps> Folder for IdAndSpanUpdater<F> 
Folder for StaticInliner			impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> 
Foo			enum Foo {Bar, Baz}
Foo			impl Foo 
Foo			impl<'a> Foo<'a> 
Foo			impl<T> Foo<T> 
Foo			pub trait Foo 
Foo			struct Foo { a: u8 }
Foo			struct Foo 
Foo			struct Foo {bar: bool, baz: bool}
Foo			struct Foo(i32);
Foo			struct Foo;
Foo			struct Foo<'a, T: 'a> 
Foo			struct Foo<'a, T> 
Foo			struct Foo<'a> 
Foo			struct Foo<T: 'static> 
Foo			struct Foo<T> 
Foo			struct Foo<T>(Vec<T>)
Foo			trait Foo where Self: Sized 
Foo			trait Foo 
Foo			trait Foo {}
Foo for T			impl<T> Foo for T where Bar<T>: Foo {}
Foo for bool			impl Foo for bool 
Foo for i32			impl Foo for i32 
Foo for isize			impl Foo for isize 
Forest			impl Forest 
Forest			pub struct Forest 
Formals			        struct Formals<'a> 
FoundAst			pub enum FoundAst<'ast> 
FragmentInfo			pub enum FragmentInfo 
FreeLifetimeCollector			    struct FreeLifetimeCollector<'a> 
FreeRegion			pub struct FreeRegion 
FreeRegionMap			impl FreeRegionMap 
FreeRegionMap			pub struct FreeRegionMap 
FreeRegionsFromSameFn			        impl FreeRegionsFromSameFn 
FreeRegionsFromSameFn			        struct FreeRegionsFromSameFn 
Freevar			pub struct Freevar 
FreshOrKept			enum FreshOrKept 
FromIterator			impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> 
FulfilledPredicates			impl<'tcx> FulfilledPredicates<'tcx> 
FulfilledPredicates			pub struct FulfilledPredicates<'tcx> 
FulfillmentContext			impl<'tcx> FulfillmentContext<'tcx> 
FulfillmentContext			pub struct FulfillmentContext<'tcx> 
FulfillmentError			impl<'tcx> FulfillmentError<'tcx> 
FulfillmentError			pub struct FulfillmentError<'tcx> 
FulfillmentErrorCode			pub enum FulfillmentErrorCode<'tcx> 
FullTypeResolver			struct FullTypeResolver<'a, 'tcx:'a> 
FutureIncompatibleInfo			pub struct FutureIncompatibleInfo 
GatherLabels			    struct GatherLabels<'a> 
GatherNodeLevels			pub struct GatherNodeLevels;
Generalizer			struct Generalizer<'cx, 'tcx:'cx> 
Generator			trait Generator 
Generator for AnotherImpl			impl Generator for AnotherImpl 
Generator for Impl			impl Generator for Impl 
GenericKind			impl<'tcx> GenericKind<'tcx> 
GenericKind			pub enum GenericKind<'tcx> 
GenericPredicates			impl<'tcx> GenericPredicates<'tcx> 
GenericPredicates			pub struct GenericPredicates<'tcx> 
Generics			impl<'tcx> Generics<'tcx> 
Generics			pub struct Generics<'tcx> 
GetCurrentProcess			        fn GetCurrentProcess() -> HANDLE;
GetProcessMemoryInfo			        fn GetProcessMemoryInfo(Process: HANDLE,
Glb			impl<'a, 'tcx> Glb<'a, 'tcx> 
Glb			pub struct Glb<'a, 'tcx: 'a> 
HardwiredLints			pub struct HardwiredLints;
HasEscapingRegionsVisitor			struct HasEscapingRegionsVisitor 
HasTypeFlagsVisitor			struct HasTypeFlagsVisitor 
Hash for AdtDefData			impl<'tcx, 'container> Hash for AdtDefData<'tcx, 'container> 
Hash for InternedTy			impl<'tcx> Hash for InternedTy<'tcx> 
Hash for Method			impl<'tcx> Hash for Method<'tcx> 
Hash for TyS			impl<'tcx> Hash for TyS<'tcx> 
HigherRankedRelations			pub trait HigherRankedRelations<'a,'tcx> 
HigherRankedRelations for CombineFields			impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> 
IdAndSpanUpdater			struct IdAndSpanUpdater<F> 
IdIndex			impl IdIndex 
IdIndex			struct IdIndex 
IdVisitingOperation for EarlyContext			impl<'a> IdVisitingOperation for EarlyContext<'a> 
IdVisitingOperation for LateContext			impl<'a, 'tcx> IdVisitingOperation for LateContext<'a, 'tcx> 
IgnoreTask			impl<'graph> IgnoreTask<'graph> 
IgnoreTask			pub struct IgnoreTask<'graph> 
Impl			struct Impl;
ImplMethod			pub struct ImplMethod<'tcx> 
ImplOrTraitItem			impl<'tcx> ImplOrTraitItem<'tcx> 
ImplOrTraitItem			pub enum ImplOrTraitItem<'tcx> 
ImplOrTraitItemContainer			impl ImplOrTraitItemContainer 
ImplOrTraitItemContainer			pub enum ImplOrTraitItemContainer 
ImplOrTraitItemId			impl ImplOrTraitItemId 
ImplOrTraitItemId			pub enum ImplOrTraitItemId 
Implication			pub enum Implication<'tcx> 
Implicator			impl<'a, 'tcx> Implicator<'a, 'tcx> 
Implicator			struct Implicator<'a, 'tcx: 'a> 
ImpliedBound			pub enum ImpliedBound<'tcx> 
ImportUse			pub enum ImportUse 
Indenter			pub struct Indenter 
Index			trait Index<Idx> { ... }
Index			impl<'tcx> Index<'tcx> 
Index			pub struct Index<'tcx> 
Index for DepTrackingMap			impl<'k, M: DepTrackingMapConfig> Index<&'k M::Key> for DepTrackingMap<M> 
Index for Foo			impl Index<u8> for Foo 
Index for Mir			impl<'tcx> Index<BasicBlock> for Mir<'tcx> 
IndexMut for Mir			impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> 
InferCtxt			impl<'a, 'tcx> InferCtxt<'a, 'tcx> 
InferCtxt			pub struct InferCtxt<'a, 'tcx: 'a> 
InferCtxtExt			trait InferCtxtExt 
InferCtxtExt for InferCtxt			impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> 
InferIsLocal			struct InferIsLocal(bool);
InferTy			pub enum InferTy 
InlinedItem			impl InlinedItem 
InlinedItem			pub enum InlinedItem 
InlinedItemRef			pub enum InlinedItemRef<'a> 
InlinedParent			pub struct InlinedParent 
Input			impl Input 
Input			pub enum Input 
InstantiatedPredicates			impl<'tcx> InstantiatedPredicates<'tcx> 
InstantiatedPredicates			pub struct InstantiatedPredicates<'tcx> 
IntTy			impl IntTy 
IntTy			pub enum IntTy { I8, I16, I32, I64 }
IntTy			pub enum IntTy 
IntTypeExt			pub trait IntTypeExt 
IntTypeExt for attr			impl IntTypeExt for attr::IntType 
IntVarValue			pub enum IntVarValue 
IntVid			pub struct IntVid 
InteriorKind			pub enum InteriorKind 
InteriorOffsetKind			pub enum InteriorOffsetKind 
InternedTy			pub struct InternedTy<'tcx> 
IntoIterator			impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> 
IntoIterator			impl<'a> IntoIterator for &'a BuiltinBounds 
IntoIterator for VecPerParamSpace			impl<T> IntoIterator for VecPerParamSpace<T> 
IntrinsicCheckingVisitor			impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> 
IntrinsicCheckingVisitor			struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> 
IrMaps			impl<'a, 'tcx> IrMaps<'a, 'tcx> 
IrMaps			struct IrMaps<'a, 'tcx: 'a> 
Irrefutable			struct Irrefutable(i32);
ItemFnParts			struct ItemFnParts<'a> 
ItemKind			pub enum ItemKind 
ItemSubsts			impl<'tcx> ItemSubsts<'tcx> 
ItemSubsts			pub struct ItemSubsts<'tcx> 
ItemVariances			pub struct ItemVariances 
Iter			pub struct Iter<'a> 
Iterator for Elaborator			impl<'cx, 'tcx> Iterator for Elaborator<'cx, 'tcx> 
Iterator for EnumeratedItems			impl<'a,T> Iterator for EnumeratedItems<'a,T> 
Iterator for Iter			impl<'a> Iterator for Iter<'a> 
Iterator for LinkedPath			impl<'a> Iterator for LinkedPath<'a> 
Iterator for NodesMatchingSuffix			impl<'a, 'ast> Iterator for NodesMatchingSuffix<'a, 'ast> 
Iterator for SupertraitDefIds			impl<'cx, 'tcx> Iterator for SupertraitDefIds<'cx, 'tcx> 
Iterator for TraitObligationStackList			impl<'o,'tcx> Iterator for TraitObligationStackList<'o,'tcx>
Iterator for TypeWalker			impl<'tcx> Iterator for TypeWalker<'tcx> 
KillFrom			pub enum KillFrom 
LabelledCFG			pub struct LabelledCFG<'a, 'ast: 'a> 
LangItem			    pub enum LangItem 
LanguageItemCollector			impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> 
LanguageItemCollector			struct LanguageItemCollector<'a, 'tcx: 'a> 
LanguageItems			impl LanguageItems 
LanguageItems			pub struct LanguageItems 
LastPrivate			impl LastPrivate 
LastPrivate			pub enum LastPrivate 
LateBoundRegionConversionTime			pub enum LateBoundRegionConversionTime 
LateContext			impl<'a, 'tcx> LateContext<'a, 'tcx> 
LateContext			pub struct LateContext<'a, 'tcx: 'a> 
LateLintPass			pub trait LateLintPass: LintPass 
LateLintPass for GatherNodeLevels			impl LateLintPass for GatherNodeLevels 
LateLintPass for HardwiredLints			impl LateLintPass for HardwiredLints {}
LatticeDir			pub trait LatticeDir<'f,'tcx> : TypeRelation<'f,'tcx> 
LatticeDir for Glb			impl<'a, 'tcx> LatticeDir<'a,'tcx> for Glb<'a, 'tcx> 
LatticeDir for Lub			impl<'a, 'tcx> LatticeDir<'a,'tcx> for Lub<'a, 'tcx> 
Level			impl Level 
Level			pub enum Level 
LifeGiver			impl LifeGiver 
LifeGiver			struct LifeGiver 
LifeSeeder			struct LifeSeeder 
LifetimeContext			impl<'a> LifetimeContext<'a> 
LifetimeContext			struct LifetimeContext<'a> 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> 
Lift			pub trait Lift<'tcx> 
Lift for TraitRef			impl<'a, 'tcx> Lift<'tcx> for TraitRef<'a> 
Lift for Ty			impl<'a, 'tcx> Lift<'tcx> for Ty<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::EquatePredicate<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::ProjectionPredicate<'a> 
Lift for ty			impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> 
Lift for ty			impl<'tcx> Lift<'tcx> for ty::Region 
LinkMeta			pub struct LinkMeta 
Linkage			pub enum Linkage 
LinkagePreference			pub enum LinkagePreference 
LinkedPath			impl<'a> LinkedPath<'a> 
LinkedPath			pub struct LinkedPath<'a>(Option<&'a LinkedPathNode<'a>>);
LinkedPathNode			pub struct LinkedPathNode<'a> 
Lint			impl Lint 
Lint			pub struct Lint 
LintContext			pub trait LintContext: Sized 
LintContext for EarlyContext			impl<'a> LintContext for EarlyContext<'a> 
LintContext for LateContext			impl<'a, 'tcx> LintContext for LateContext<'a, 'tcx> 
LintId			impl LintId 
LintId			pub struct LintId 
LintPass			pub trait LintPass 
LintPass for GatherNodeLevels			impl LintPass for GatherNodeLevels 
LintPass for HardwiredLints			impl LintPass for HardwiredLints 
LintSource			pub enum LintSource 
LintStore			impl LintStore 
LintStore			pub struct LintStore 
Literal			pub enum Literal<'tcx> 
LiveNode			impl LiveNode 
LiveNode			struct LiveNode(usize);
LiveNodeKind			enum LiveNodeKind 
Liveness			impl<'a, 'tcx> Liveness<'a, 'tcx> 
Liveness			struct Liveness<'a, 'tcx: 'a> 
LoanCause			pub enum LoanCause 
LocalInfo			struct LocalInfo 
LoopKind			enum LoopKind<'a> 
LoopQueryVisitor			struct LoopQueryVisitor<P> where P: FnMut(&hir::Expr_) -> bool 
LoopScope			struct LoopScope 
Lub			impl<'a, 'tcx> Lub<'a, 'tcx> 
Lub			pub struct Lub<'a, 'tcx: 'a> 
Lvalue			impl<'tcx> Lvalue<'tcx> 
Lvalue			pub enum Lvalue<'tcx> 
LvalueContext			pub enum LvalueContext 
LvaluePreference			impl LvaluePreference 
LvaluePreference			pub enum LvaluePreference 
LvalueTy			impl<'tcx> LvalueTy<'tcx> 
LvalueTy			pub enum LvalueTy<'tcx> 
Map			impl<'ast> Map<'ast> 
Map			pub struct Map<'ast> 
MapEntry			impl<'ast> MapEntry<'ast> 
MapEntry			pub enum MapEntry<'ast> 
MarkSymbolVisitor			impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> 
MarkSymbolVisitor			struct MarkSymbolVisitor<'a, 'tcx: 'a> 
Match			impl<'a, 'tcx> Match<'a, 'tcx> 
Match			pub struct Match<'a, 'tcx: 'a> 
MatchCheckCtxt			pub struct MatchCheckCtxt<'a, 'tcx: 'a> 
MatchMode			pub enum MatchMode 
Matrix			struct Matrix<'a>(Vec<Vec<&'a Pat>>);
MaybeFnLike			pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }
MaybeFnLike for ast			impl MaybeFnLike for ast::Expr 
MaybeFnLike for ast			impl MaybeFnLike for ast::Item 
MaybeFnLike for ast			impl MaybeFnLike for ast::TraitItem 
MemCategorizationContext			impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> 
MemCategorizationContext			pub struct MemCategorizationContext<'t, 'a: 't, 'tcx : 'a> 
MemoizationMap			pub trait MemoizationMap 
MemoizationMap for RefCell			impl<M: DepTrackingMapConfig> MemoizationMap for RefCell<DepTrackingMap<M>> 
MemoizationMap for RefCell			impl<K, V, S> MemoizationMap for RefCell<HashMap<K,V,S>>
Method			enum Method { GET, POST }
Method			enum Method 
Method			impl<'tcx> Method<'tcx> 
Method			pub struct Method<'tcx> 
MethodCall			impl MethodCall 
MethodCall			pub struct MethodCall 
MethodCallee			pub struct MethodCallee<'tcx> 
MethodMatchResult			impl MethodMatchResult 
MethodMatchResult			pub enum MethodMatchResult 
MethodMatchedData			pub enum MethodMatchedData 
MethodViolationCode			pub enum MethodViolationCode 
Mir			impl<'tcx> Mir<'tcx> 
Mir			pub struct Mir<'tcx> 
Mir			impl<'tcx> Mir<'tcx> 
MismatchedProjectionTypes			pub struct MismatchedProjectionTypes<'tcx> 
Mode			enum Mode 
MoveReason			pub enum MoveReason 
Mutability			pub enum Mutability 
MutabilityCategory			impl MutabilityCategory 
MutabilityCategory			pub enum MutabilityCategory 
MutateMode			pub enum MutateMode 
MutationChecker			struct MutationChecker<'a, 'tcx: 'a> 
MyTransmutableType			trait MyTransmutableType 
MyTransmutableType for String			impl MyTransmutableType for String 
MyTransmutableType for u8			impl MyTransmutableType for u8 
Named			trait Named 
Named for ForeignItem			impl Named for ForeignItem { fn name(&self) -> Name { self.name } }
Named for ImplItem			impl Named for ImplItem { fn name(&self) -> Name { self.name } }
Named for Item			impl Named for Item { fn name(&self) -> Name { self.name } }
Named for Spanned			impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() } }
Named for TraitItem			impl Named for TraitItem { fn name(&self) -> Name { self.name } }
Named for Variant_			impl Named for Variant_ { fn name(&self) -> Name { self.name } }
NativeLibraryKind			    pub enum NativeLibraryKind 
Node			pub enum Node<'ast> 
Node			enum Node 
NodeCollector			impl<'ast> NodeCollector<'ast> 
NodeCollector			pub struct NodeCollector<'ast> 
NodeIdAssigner for Session			impl NodeIdAssigner for Session 
NodeMap			pub fn NodeMap<T>() -> NodeMap<T> { FnvHashMap() }
NodePrinter			pub trait NodePrinter 
NodePrinter for pprust			impl<'a> NodePrinter for pprust::State<'a> 
NodeSet			pub fn NodeSet() -> NodeSet { FnvHashSet() }
NodesMatchingSuffix			impl<'a, 'ast> NodesMatchingSuffix<'a, 'ast> 
NodesMatchingSuffix			pub struct NodesMatchingSuffix<'a, 'ast:'a> 
Normalized			impl<'tcx,T> Normalized<'tcx,T> 
Normalized			pub struct Normalized<'tcx,T> 
NotThreadSafe			struct NotThreadSafe<T> 
Note			pub enum Note 
ObjectLifetimeDefault			pub enum ObjectLifetimeDefault 
ObjectSafetyViolation			pub enum ObjectSafetyViolation<'tcx> 
Obligation			impl<'tcx,O> Obligation<'tcx,O> 
Obligation			pub struct Obligation<'tcx, T> 
ObligationCause			impl<'tcx> ObligationCause<'tcx> 
ObligationCause			pub struct ObligationCause<'tcx> 
ObligationCauseCode			pub enum ObligationCauseCode<'tcx> 
OpenNode			enum OpenNode 
Operand			pub enum Operand<'tcx> 
OpportunisticTypeAndRegionResolver			impl<'a, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'tcx> 
OpportunisticTypeAndRegionResolver			pub struct OpportunisticTypeAndRegionResolver<'a, 'tcx:'a> 
OpportunisticTypeResolver			impl<'a, 'tcx> OpportunisticTypeResolver<'a, 'tcx> 
OpportunisticTypeResolver			pub struct OpportunisticTypeResolver<'a, 'tcx:'a> 
OptLevel			pub enum OptLevel 
OptionStability			pub enum OptionStability { Stable, Unstable }
Options			pub struct Options 
Original			struct Original { kind: ShadowKind, span: Span }
OrphanCheckErr			pub enum OrphanCheckErr<'tcx> 
OutlivesPredicate			pub struct OutlivesPredicate<A,B>(pub A, pub B); \/\/ `A : B`
OutputFilenames			impl OutputFilenames 
OutputFilenames			pub struct OutputFilenames 
OutputType			impl OutputType 
OutputType			pub enum OutputType 
OverloadedCallType			enum OverloadedCallType 
OverloadedCallType			impl OverloadedCallType 
PROCESS_MEMORY_COUNTERS			    struct PROCESS_MEMORY_COUNTERS 
ParamSpace			impl ParamSpace 
ParamSpace			pub enum ParamSpace 
ParamTy			impl ParamTy 
ParamTy			pub struct ParamTy 
ParameterEnvironment			impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> 
ParameterEnvironment			pub struct ParameterEnvironment<'a, 'tcx:'a> 
ParameterEnvironment			impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> 
ParameterOrigin			pub enum ParameterOrigin 
PartialEq for AdtDefData			impl<'tcx, 'container> PartialEq for AdtDefData<'tcx, 'container> 
PartialEq for ConstVal			impl PartialEq for ConstVal 
PartialEq for InternedTy			impl<'tcx> PartialEq for InternedTy<'tcx> 
PartialEq for LintId			impl PartialEq for LintId 
PartialEq for Method			impl<'tcx> PartialEq for Method<'tcx> 
PartialEq for TyS			impl<'tcx> PartialEq for TyS<'tcx> 
PassArgs			enum PassArgs 
Passes			impl Passes 
Passes			pub enum Passes 
PathElem			impl PathElem 
PathElem			pub enum PathElem 
PathKind			pub enum PathKind 
PathResolution			impl PathResolution 
PathResolution			pub struct PathResolution 
PointerKind			pub enum PointerKind 
PolyFnOutput			impl<'tcx> PolyFnOutput<'tcx> 
PolyFnSig			impl<'tcx> PolyFnSig<'tcx> 
PolyProjectionPredicate			impl<'tcx> PolyProjectionPredicate<'tcx> 
PolyTraitPredicate			impl<'tcx> PolyTraitPredicate<'tcx> 
PolyTraitRef			impl<'tcx> PolyTraitRef<'tcx> 
Predicate			impl<'tcx> Predicate<'tcx> 
Predicate			pub enum Predicate<'tcx> 
PredicateSet			impl<'a,'tcx> PredicateSet<'a,'tcx> 
PredicateSet			struct PredicateSet<'a,'tcx:'a> 
PrintRequest			pub enum PrintRequest 
PrivateDep			pub enum PrivateDep 
ProjectedTy			enum ProjectedTy<'tcx> 
Projection			pub struct Projection<'tcx, B, V> 
ProjectionElem			pub enum ProjectionElem<'tcx, V> 
ProjectionPredicate			pub struct ProjectionPredicate<'tcx> 
ProjectionTy			impl<'tcx> ProjectionTy<'tcx> 
ProjectionTy			pub struct ProjectionTy<'tcx> 
ProjectionTyCandidate			enum ProjectionTyCandidate<'tcx> 
ProjectionTyCandidateSet			struct ProjectionTyCandidateSet<'tcx> 
ProjectionTyError			pub enum ProjectionTyError<'tcx> 
PropagationContext			impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> 
PropagationContext			struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O: 'a> 
ReachableContext			impl<'a, 'tcx> ReachableContext<'a, 'tcx> 
ReachableContext			struct ReachableContext<'a, 'tcx: 'a> 
RebuildPathInfo			struct RebuildPathInfo<'a> 
Rebuilder			impl<'a, 'tcx> Rebuilder<'a, 'tcx> 
Rebuilder			struct Rebuilder<'a, 'tcx: 'a> 
Region			impl Region 
Region			pub enum Region 
RegionAndOrigin			struct RegionAndOrigin<'tcx> 
RegionEraser			        struct RegionEraser<'a, 'tcx: 'a>(&'a ty::ctxt<'tcx>);
RegionFolder			impl<'a, 'tcx> RegionFolder<'a, 'tcx> 
RegionFolder			pub struct RegionFolder<'a, 'tcx: 'a> 
RegionMaps			impl RegionMaps 
RegionMaps			pub struct RegionMaps 
RegionObligation			pub struct RegionObligation<'tcx> 
RegionParameterDef			impl RegionParameterDef 
RegionParameterDef			pub struct RegionParameterDef 
RegionReplacer			impl<'a, 'tcx> RegionReplacer<'a, 'tcx> 
RegionReplacer			struct RegionReplacer<'a, 'tcx: 'a> 
RegionResolutionError			pub enum RegionResolutionError<'tcx> 
RegionResolutionVisitor			impl<'a> RegionResolutionVisitor<'a> 
RegionResolutionVisitor			struct RegionResolutionVisitor<'a> 
RegionSnapshot			pub struct RegionSnapshot 
RegionSubsts			impl RegionSubsts 
RegionSubsts			pub enum RegionSubsts 
RegionVarBindings			impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> 
RegionVarBindings			pub struct RegionVarBindings<'a, 'tcx: 'a> 
RegionVariableOrigin			impl RegionVariableOrigin 
RegionVariableOrigin			pub enum RegionVariableOrigin 
RegionVid			pub struct RegionVid 
RegionVidKey			pub struct RegionVidKey 
Relate			pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> 
Relate for Box			impl<'a,'tcx:'a,T> Relate<'a,'tcx> for Box<T>
Relate for Rc			impl<'a,'tcx:'a,T> Relate<'a,'tcx> for Rc<T>
Relate for Ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for Ty<'tcx> 
Relate for Vec			impl<'a,'tcx:'a> Relate<'a,'tcx> for Vec<ty::PolyProjectionPredicate<'tcx>> 
Relate for abi			impl<'a,'tcx:'a> Relate<'a,'tcx> for abi::Abi 
Relate for ast			impl<'a,'tcx:'a> Relate<'a,'tcx> for ast::Unsafety 
Relate for ty			impl<'a,'tcx:'a,T> Relate<'a,'tcx> for ty::Binder<T>
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::BareFnTy<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::BuiltinBounds 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ClosureSubsts<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ExistentialBounds<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::FnSig<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ProjectionPredicate<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ProjectionTy<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::Region 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TraitRef<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TypeAndMut<'tcx> 
RelateResultCompare			pub trait RelateResultCompare<'tcx, T> 
RelateResultCompare for RelateResult			impl<'tcx, T:Clone + PartialEq> RelateResultCompare<'tcx, T> for RelateResult<'tcx, T> 
RelationDir			impl RelationDir 
RelationDir			pub enum RelationDir 
RenamingRecorder			struct RenamingRecorder<'map> 
Representability			pub enum Representability 
Resolvable			pub trait Resolvable<'tcx> 
Resolvable for Ty			impl<'tcx> Resolvable<'tcx> for Ty<'tcx> 
Resolvable for ty			impl<'tcx> Resolvable<'tcx> for ty::PolyTraitRef<'tcx> 
Resolvable for ty			impl<'tcx> Resolvable<'tcx> for ty::TraitRef<'tcx> 
RootUnsafeContext			enum RootUnsafeContext 
RustcOptGroup			impl RustcOptGroup 
RustcOptGroup			pub struct RustcOptGroup 
Rvalue			pub enum Rvalue<'tcx> 
RvalueContext			struct RvalueContext<'a, 'tcx: 'a> 
RvalueContextDelegate			struct RvalueContextDelegate<'a, 'tcx: 'a> 
SameRegions			impl SameRegions 
SameRegions			pub struct SameRegions 
ScopeChain			enum ScopeChain<'a> 
SearchPaths			impl SearchPaths 
SearchPaths			pub struct SearchPaths 
SelectionCache			impl<'tcx> SelectionCache<'tcx> 
SelectionCache			pub struct SelectionCache<'tcx> 
SelectionCandidate			enum SelectionCandidate<'tcx> 
SelectionCandidateSet			struct SelectionCandidateSet<'tcx> 
SelectionContext			impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> 
SelectionContext			pub struct SelectionContext<'cx, 'tcx:'cx> 
SelectionError			pub enum SelectionError<'tcx> 
SeparateVecsPerParamSpace			pub struct SeparateVecsPerParamSpace<T> 
Session			impl Session 
Session			pub struct Session 
ShadowKind			enum ShadowKind { Label, Lifetime }
ShadowKind			impl ShadowKind 
Shadower			struct Shadower { kind: ShadowKind, span: Span }
SimplifiedType			pub enum SimplifiedType 
SkolemizedRegionVid			pub struct SkolemizedRegionVid 
Snapshot			pub struct Snapshot 
Specials			struct Specials 
StabilityLevel			impl StabilityLevel 
StabilityLevel			pub enum StabilityLevel 
Statement			pub struct Statement<'tcx> 
StatementKind			pub enum StatementKind<'tcx> 
StaticInliner			impl<'a, 'tcx> StaticInliner<'a, 'tcx> 
StaticInliner			pub struct StaticInliner<'a, 'tcx: 'a> 
Sub			impl<'a, 'tcx> Sub<'a, 'tcx> 
Sub			pub struct Sub<'a, 'tcx: 'a> 
SubregionOrigin			impl<'tcx> SubregionOrigin<'tcx> 
SubregionOrigin			pub enum SubregionOrigin<'tcx> 
Subst			pub trait Subst<'tcx> : Sized 
SubstFolder			impl<'a,'tcx> SubstFolder<'a,'tcx> 
SubstFolder			struct SubstFolder<'a, 'tcx: 'a> 
Substs			impl<'tcx> Substs<'tcx> 
Substs			pub struct Substs<'tcx> 
Subtract			struct Subtract;
Super			trait Super<A> 
Super			trait Super<A> {}
Super for Foo			impl Super<Foo> for Foo{}
SupertraitDefIds			pub struct SupertraitDefIds<'cx, 'tcx:'cx> 
Sync for NotThreadSafe			unsafe impl<T> Sync for NotThreadSafe<T> {}
TC			    mod TC 
Tables			impl<'tcx> Tables<'tcx> 
Tables			pub struct Tables<'tcx> 
Target			enum Target 
Target			impl Target 
TargetLint			enum TargetLint 
TempDecl			pub struct TempDecl<'tcx> 
Terminator			impl<'tcx> Terminator<'tcx> 
Terminator			pub enum Terminator<'tcx> 
Test			enum Test 
Test			impl Test 
ThreadLocalTyCx			    struct ThreadLocalTyCx;
TlsPayload			    struct TlsPayload;
ToPolyTraitRef			pub trait ToPolyTraitRef<'tcx> 
ToPolyTraitRef for PolyProjectionPredicate			impl<'tcx> ToPolyTraitRef<'tcx> for PolyProjectionPredicate<'tcx> 
ToPolyTraitRef for PolyTraitPredicate			impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> 
ToPolyTraitRef for TraitRef			impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> 
ToPredicate			pub trait ToPredicate<'tcx> 
ToPredicate for PolyEquatePredicate			impl<'tcx> ToPredicate<'tcx> for PolyEquatePredicate<'tcx> 
ToPredicate for PolyProjectionPredicate			impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> 
ToPredicate for PolyRegionOutlivesPredicate			impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate 
ToPredicate for PolyTraitRef			impl<'tcx> ToPredicate<'tcx> for PolyTraitRef<'tcx> 
ToPredicate for PolyTypeOutlivesPredicate			impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> 
ToPredicate for TraitRef			impl<'tcx> ToPredicate<'tcx> for TraitRef<'tcx> 
ToPrimitive			pub trait ToPrimitive 
ToPrimitive for i64			impl ToPrimitive for i64 
ToPrimitive for u64			impl ToPrimitive for u64 
ToType			pub trait ToType<'tcx> 
ToType for IntVarValue			impl<'tcx> ToType<'tcx> for IntVarValue 
ToType for ast			impl<'tcx> ToType<'tcx> for ast::FloatTy 
TrackMatchMode			enum TrackMatchMode 
TrackMatchMode			impl TrackMatchMode 
TrackingVisitor			    struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> 
Trait			trait Trait { type AssociatedType; }
Trait			trait Trait 
Trait			trait Trait: Super<Self> 
Trait for Foo			impl Trait for Foo {}
Trait for String			impl Trait for String 
Trait for i8			impl Trait for i8 { type AssociatedType = &'static str; }
Trait for u8			impl Trait for u8 
TraitAndProjections			struct TraitAndProjections<'tcx>(ty::TraitRef<'tcx>, Vec<ty::ProjectionPredicate<'tcx>>);
TraitDef			impl<'tcx> TraitDef<'tcx> 
TraitDef			pub struct TraitDef<'tcx> 
TraitErrorKey			impl<'tcx> TraitErrorKey<'tcx> 
TraitErrorKey			pub struct TraitErrorKey<'tcx> 
TraitObligation			impl<'tcx> TraitObligation<'tcx> 
TraitObligationStack			impl<'o,'tcx> TraitObligationStack<'o,'tcx> 
TraitObligationStack			struct TraitObligationStack<'prev, 'tcx: 'prev> 
TraitObligationStackList			impl<'o,'tcx> TraitObligationStackList<'o,'tcx> 
TraitObligationStackList			struct TraitObligationStackList<'o,'tcx:'o> 
TraitPredicate			impl<'tcx> TraitPredicate<'tcx> 
TraitPredicate			pub struct TraitPredicate<'tcx> 
TraitRef			impl<'tcx> TraitRef<'tcx> 
TraitRef			pub struct TraitRef<'tcx> 
TraitTy			impl<'tcx> TraitTy<'tcx> 
TraitTy			pub struct TraitTy<'tcx> 
TransmuteRestriction			pub struct TransmuteRestriction<'tcx> 
TupleArgumentsFlag			pub enum TupleArgumentsFlag { Yes, No }
TwoRegions			pub struct TwoRegions 
TyIVar			impl<'tcx, 'lt> TyIVar<'tcx, 'lt> 
TyIVar			pub struct TyIVar<'tcx, 'lt: 'tcx>(ivar::Ivar<NonZero<*const TyS<'static>>>,
TyS			impl<'tcx> TyS<'tcx> 
TyS			pub struct TyS<'tcx> 
TyS			impl<'tcx> TyS<'tcx> 
TyVid			pub struct TyVid 
TypeAndMut			pub struct TypeAndMut<'tcx> 
TypeContents			impl TypeContents 
TypeContents			pub struct TypeContents 
TypeError			pub enum TypeError<'tcx> 
TypeFoldable			pub trait TypeFoldable<'tcx>: fmt::Debug + Clone 
TypeFoldable			            impl<'tcx> TypeFoldable<'tcx> for 
TypeFoldable for TraitAndProjections			impl<'tcx> TypeFoldable<'tcx> for TraitAndProjections<'tcx> 
TypeFoldable for Ty			impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> 
TypeFoldable for subst			impl<'tcx> TypeFoldable<'tcx> for subst::Substs<'tcx> 
TypeFoldable for traits			impl<'tcx> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx> 
TypeFoldable for ty			impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where 'tcx: 'a 
TypeFoldable for ty			impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U>
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::BareFnTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::BuiltinBounds 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureSubsts<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialBounds<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::FnOutput<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ItemSubsts<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Region 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TypeAndMut<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TypeScheme<'tcx>  
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoRef<'tcx> 
TypeFolder			pub trait TypeFolder<'tcx> : Sized 
TypeFolder for AssociatedTypeNormalizer			impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> 
TypeFolder for BottomUpFolder			impl<'a, 'tcx, F> TypeFolder<'tcx> for BottomUpFolder<'a, 'tcx, F> where
TypeFolder for RegionEraser			        impl<'a, 'tcx> TypeFolder<'tcx> for RegionEraser<'a, 'tcx> 
TypeFolder for RegionFolder			impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>
TypeFolder for RegionReplacer			impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>
TypeFolder for SubstFolder			impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> 
TypeFolder for TypeFreshener			impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> 
TypeFreshener			impl<'a, 'tcx> TypeFreshener<'a, 'tcx> 
TypeFreshener			pub struct TypeFreshener<'a, 'tcx:'a> 
TypeOrigin			impl TypeOrigin 
TypeOrigin			pub enum TypeOrigin 
TypeParameterDef			pub struct TypeParameterDef<'tcx> 
TypeRelation			pub trait TypeRelation<'a,'tcx> : Sized 
TypeRelation for Bivariate			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Bivariate<'a, 'tcx> 
TypeRelation for Equate			impl<'a, 'tcx> TypeRelation<'a,'tcx> for Equate<'a, 'tcx> 
TypeRelation for Glb			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Glb<'a, 'tcx> 
TypeRelation for Lub			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Lub<'a, 'tcx> 
TypeRelation for Match			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> 
TypeRelation for Sub			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> 
TypeScheme			pub struct TypeScheme<'tcx> 
TypeTrace			impl<'tcx> TypeTrace<'tcx> 
TypeTrace			pub struct TypeTrace<'tcx> 
TypeVariableData			struct TypeVariableData<'tcx> 
TypeVariableTable			impl<'tcx> TypeVariableTable<'tcx> 
TypeVariableTable			pub struct TypeVariableTable<'tcx> 
TypeVariableValue			enum TypeVariableValue<'tcx> 
TypeVariants			pub enum TypeVariants<'tcx> 
TypeVisitor			pub trait TypeVisitor<'tcx> : Sized 
TypeVisitor for HasEscapingRegionsVisitor			impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor 
TypeVisitor for HasTypeFlagsVisitor			impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor 
TypeWalker			impl<'tcx> TypeWalker<'tcx> 
TypeWalker			pub struct TypeWalker<'tcx> 
UintTy			impl UintTy 
UintTy			pub enum UintTy { U8, U16, U32, U64 }
UnOp			pub enum UnOp 
UnconstrainedNumeric			pub enum UnconstrainedNumeric 
UndoEntry			enum UndoEntry<'tcx> 
UndoLogEntry			pub enum UndoLogEntry 
UnifyKey for ty			impl UnifyKey for ty::FloatVid 
UnifyKey for ty			impl UnifyKey for ty::IntVid 
UnifyKey for ty			impl UnifyKey for ty::RegionVid 
Union			struct Union;
UnsafeContext			impl UnsafeContext 
UnsafeContext			struct UnsafeContext 
Upvar			pub struct Upvar 
UpvarBorrow			pub struct UpvarBorrow 
UpvarCapture			pub enum UpvarCapture 
UpvarId			pub struct UpvarId 
Usefulness			enum Usefulness 
Users			struct Users 
ValuePairs			pub enum ValuePairs<'tcx> 
VarData			struct VarData 
VarDecl			pub struct VarDecl<'tcx> 
VarKind			enum VarKind 
VarValue			pub enum VarValue 
Variable			impl Variable 
Variable			struct Variable(usize);
Variance			pub enum Variance 
VariantDefData			impl<'tcx, 'container> VariantDefData<'tcx, 'container> 
VariantDefData			pub struct VariantDefData<'tcx, 'container: 'tcx> 
VariantKind			pub enum VariantKind { Struct, Tuple, Unit }
VecPerParamSpace			impl<T> VecPerParamSpace<T> 
VecPerParamSpace			pub struct VecPerParamSpace<T> 
Verify			pub enum Verify<'tcx> 
VerifyBound			impl VerifyBound 
VerifyBound			pub enum VerifyBound 
Visitor for Annotator			impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> 
Visitor for AtBindingPatternVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> 
Visitor for BlockQueryVisitor			impl<'v, P> Visitor<'v> for BlockQueryVisitor<P> where P: FnMut(&hir::Expr) -> bool 
Visitor for CheckAttrVisitor			impl<'a, 'v> Visitor<'v> for CheckAttrVisitor<'a> 
Visitor for CheckCrateVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> 
Visitor for CheckCrateVisitor			impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> 
Visitor for CheckItemRecursionVisitor			impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> 
Visitor for CheckLoopVisitor			impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> 
Visitor for Checker			impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> 
Visitor for CollectPrivateImplItemsVisitor			impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> 
Visitor for Context			impl<'a, 'v> Visitor<'v> for Context<'a> 
Visitor for DeadVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> 
Visitor for EffectCheckVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> 
Visitor for EntryContext			impl<'a, 'tcx> Visitor<'tcx> for EntryContext<'a, 'tcx> 
Visitor for FreeLifetimeCollector			    impl<'a, 'v> Visitor<'v> for FreeLifetimeCollector<'a> 
Visitor for GatherLabels			    impl<'v, 'a> Visitor<'v> for GatherLabels<'a> 
Visitor for IntrinsicCheckingVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> 
Visitor for IrMaps			impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> 
Visitor for LanguageItemCollector			impl<'a, 'v, 'tcx> Visitor<'v> for LanguageItemCollector<'a, 'tcx> 
Visitor for LifeSeeder			impl<'v> Visitor<'v> for LifeSeeder 
Visitor for LifetimeContext			impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> 
Visitor for Liveness			impl<'a, 'tcx, 'v> Visitor<'v> for Liveness<'a, 'tcx> 
Visitor for LoopQueryVisitor			impl<'v, P> Visitor<'v> for LoopQueryVisitor<P> where P: FnMut(&hir::Expr_) -> bool 
Visitor for MarkSymbolVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> 
Visitor for MatchCheckCtxt			impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> 
Visitor for NodeCollector			impl<'ast> Visitor<'ast> for NodeCollector<'ast> 
Visitor for ReachableContext			impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> 
Visitor for RegionResolutionVisitor			impl<'a, 'v> Visitor<'v> for RegionResolutionVisitor<'a> 
Visitor for TrackingVisitor			    impl<'visit, 'tcx, F, V> Visitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>
Vtable			impl<'tcx, N> Vtable<'tcx, N> 
Vtable			pub enum Vtable<'tcx, N> 
VtableBuiltinData			pub struct VtableBuiltinData<N> 
VtableClosureData			pub struct VtableClosureData<'tcx, N> 
VtableDefaultImplData			pub struct VtableDefaultImplData<N> 
VtableImplData			pub struct VtableImplData<'tcx, N> 
VtableObjectData			pub struct VtableObjectData<'tcx> 
WalkState			        struct WalkState<'tcx> 
WfPredicates			impl<'a,'tcx> WfPredicates<'a,'tcx> 
WfPredicates			struct WfPredicates<'a,'tcx:'a> 
WitnessPreference			enum WitnessPreference 
X			struct X { x: (), }
_match			pub mod _match;
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { true } \/\/ irrelevant
a_is_expected			    fn a_is_expected(&self) -> bool;
abort_if_errors			    pub fn abort_if_errors(&self) 
abort_if_new_errors			    pub fn abort_if_new_errors<F>(&self, mut f: F)
acc			    fn acc(&mut self, ln: LiveNode, var: Variable, acc: u32) 
access_path			    fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: u32)
accumulate_from_adt			    fn accumulate_from_adt(&mut self,
accumulate_from_object_ty			    fn accumulate_from_object_ty(&mut self,
accumulate_from_rptr			    fn accumulate_from_rptr(&mut self,
accumulate_from_substs			    fn accumulate_from_substs(&mut self,
accumulate_from_ty			    fn accumulate_from_ty(&mut self, ty: Ty<'tcx>) 
activate_allocator			fn activate_allocator(sess: &session::Session, list: &mut DependencyList) 
add_ast_node			    fn add_ast_node(&mut self, id: ast::NodeId, preds: &[CFGIndex]) -> CFGIndex 
add_bound_computation			    fn add_bound_computation(&mut self, computation: &FlagComputation) 
add_bounds			    fn add_bounds(&mut self, bounds: &ty::ExistentialBounds) 
add_constraint			    fn add_constraint(&self, constraint: Constraint, origin: SubregionOrigin<'tcx>) 
add_contained_edge			    fn add_contained_edge(&mut self,
add_depth			    fn add_depth(&mut self, depth: u32) 
add_dummy_node			    fn add_dummy_node(&mut self, preds: &[CFGIndex]) -> CFGIndex 
add_edge_from_current_node			    fn add_edge_from_current_node<OP>(&mut self,
add_edge_from_open_node			    fn add_edge_from_open_node<OP>(&mut self,
add_entries_from_fn_decl			    fn add_entries_from_fn_decl(index: &mut NodeMap<Vec<CFGIndex>>,
add_exiting_edge			    fn add_exiting_edge(&mut self,
add_flags			    fn add_flags(&mut self, flags: TypeFlags) 
add_fn_sig			    fn add_fn_sig(&mut self, fn_sig: &ty::PolyFnSig) 
add_gen			    pub fn add_gen(&mut self, id: ast::NodeId, bit: usize) 
add_given			    pub fn add_given(&self,
add_given			    pub fn add_given(&self, sub: ty::FreeRegion, sup: ty::RegionVid) 
add_kill			    pub fn add_kill(&mut self, kind: KillFrom, id: ast::NodeId, bit: usize) 
add_kills_from_flow_exits			    pub fn add_kills_from_flow_exits(&mut self, cfg: &cfg::CFG) 
add_library			fn add_library(sess: &session::Session,
add_lint			    pub fn add_lint(&self,
add_live_node			    fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode 
add_live_node_for_node			    fn add_live_node_for_node(&mut self, node_id: NodeId, lnk: LiveNodeKind) 
add_node			    fn add_node(&mut self, data: CFGNodeData, preds: &[CFGIndex]) -> CFGIndex 
add_path			    pub fn add_path(&mut self, path: &str, output: config::ErrorOutputType) 
add_projection_predicate			    fn add_projection_predicate(&mut self, projection_predicate: &ty::ProjectionPredicate) 
add_projection_ty			    fn add_projection_ty(&mut self, projection_ty: &ty::ProjectionTy) 
add_qualif			    fn add_qualif(&mut self, qualif: ConstQualif) 
add_region			    fn add_region(&mut self, r: ty::Region) 
add_returning_edge			    fn add_returning_edge(&mut self,
add_scope_and_walk_fn			    fn add_scope_and_walk_fn<'b>(&mut self,
add_sty			    fn add_sty(&mut self, st: &ty::TypeVariants) 
add_substs			    fn add_substs(&mut self, substs: &subst::Substs) 
add_ty			    fn add_ty(&mut self, ty: Ty) 
add_tys			    fn add_tys(&mut self, tys: &[Ty]) 
add_unreachable_node			    fn add_unreachable_node(&mut self) -> CFGIndex 
add_variable			    fn add_variable(&mut self, vk: VarKind) -> Variable 
add_verify			    fn add_verify(&self, verify: Verify<'tcx>) 
adjust			    pub fn adjust<F>(&'tcx self, cx: &ty::ctxt<'tcx>,
adjust_expr_ty			    pub fn adjust_expr_ty(&self,
adjust_for_autoderef			    pub fn adjust_for_autoderef<F>(&'tcx self,
adjust_for_autoref			    pub fn adjust_for_autoref(&'tcx self, cx: &ty::ctxt<'tcx>,
adjust_space			    fn adjust_space(&mut self) 
adjustment			pub mod adjustment;
adjustments			    pub fn adjustments(&self) -> Ref<NodeMap<adjustment::AutoAdjustment<'tcx>>> 
adt_def			    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>
adt_def			    fn adt_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>;
adt_kind			    pub fn adt_kind(&self) -> AdtKind 
all			    pub fn all() -> [ParamSpace; 3] 
all			    pub fn all<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool 
all_basic_blocks			    pub fn all_basic_blocks(&self) -> Vec<BasicBlock> 
all_constructors			fn all_constructors(_cx: &MatchCheckCtxt, left_ty: Ty,
all_fields			    pub fn all_fields(&self) ->
all_vecs			    pub fn all_vecs<P>(&self, mut pred: P) -> bool where
alloc_trait_def			    pub fn alloc_trait_def(&self, def: ty::TraitDef<'tcx>)
ancestors_of			        fn ancestors_of<'a>(scope_map: &[CodeExtent],
and			                                  struct and enum constructors",
and			    pub fn and(self, vb: VerifyBound) -> VerifyBound 
annotate			    fn annotate<F>(&mut self, id: NodeId, attrs: &[Attribute],
anonymize_late_bound_regions			    pub fn anonymize_late_bound_regions<T>(&self, sig: &Binder<T>) -> Binder<T>
any			    pub fn any<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool 
append_configuration			pub fn append_configuration(cfg: &mut ast::CrateConfig,
append_to_same_regions			        fn append_to_same_regions(same_regions: &mut Vec<SameRegions>,
apply_gen_kill			    fn apply_gen_kill(&self, cfgidx: CFGIndex, bits: &mut [usize]) 
apply_lang_items			        fn apply_lang_items(cx: &ty::ctxt, did: DefId, tc: TypeContents)
are_inner_types_recursive			        fn are_inner_types_recursive<'tcx>(cx: &ty::ctxt<'tcx>, sp: Span,
arm_contains_ref_binding			pub fn arm_contains_ref_binding(dm: &RefCell<DefMap>, arm: &hir::Arm) -> Option<hir::Mutability> 
arm_contains_ref_binding			    pub fn arm_contains_ref_binding(&self, arm: &hir::Arm) -> Option<hir::Mutability> 
arm_move_mode			    fn arm_move_mode(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &hir::Arm) -> TrackMatchMode 
arm_pats_bindings			    fn arm_pats_bindings<F>(&mut self, pat: Option<&hir::Pat>, f: F) where
as_interned_str			    pub fn as_interned_str(&self) -> InternedString 
as_local_node_id			    pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> 
as_local_node_id			    pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> 
as_opt_method			    pub fn as_opt_method(&self) -> Option<Rc<Method<'tcx>>> 
as_opt_param_ty			    pub fn as_opt_param_ty(&self) -> Option<ty::ParamTy> 
as_ref			    pub fn as_ref(&self) -> Binder<&T> 
as_slice			    pub fn as_slice(&self) -> &[T] 
as_str			    pub fn as_str(&self) -> String 
as_str			    pub fn as_str(self) -> &'static str 
as_str			    fn as_str(&self) -> &'static str 
as_u32			    pub fn as_u32(&self) -> u32 
as_usize			    pub fn as_usize(&self) -> usize 
asm_comments			    pub fn asm_comments(&self) -> bool { self.opts.debugging_opts.asm_comments }
assemble_builtin_bound_candidates			    fn assemble_builtin_bound_candidates<'o>(&mut self,
assemble_candidates			    fn assemble_candidates<'o>(&mut self,
assemble_candidates_for_unsizing			    fn assemble_candidates_for_unsizing(&mut self,
assemble_candidates_from_caller_bounds			    fn assemble_candidates_from_caller_bounds<'o>(&mut self,
assemble_candidates_from_default_impls			    fn assemble_candidates_from_default_impls(&mut self,
assemble_candidates_from_impls			fn assemble_candidates_from_impls<'cx,'tcx>(
assemble_candidates_from_impls			    fn assemble_candidates_from_impls(&mut self,
assemble_candidates_from_object_ty			    fn assemble_candidates_from_object_ty(&mut self,
assemble_candidates_from_object_type			fn assemble_candidates_from_object_type<'cx,'tcx>(
assemble_candidates_from_param_env			fn assemble_candidates_from_param_env<'cx,'tcx>(
assemble_candidates_from_predicates			fn assemble_candidates_from_predicates<'cx,'tcx,I>(
assemble_candidates_from_projected_tys			    fn assemble_candidates_from_projected_tys(&mut self,
assemble_candidates_from_trait_def			fn assemble_candidates_from_trait_def<'cx,'tcx>(
assemble_closure_candidates			    fn assemble_closure_candidates(&mut self,
assemble_fn_pointer_candidates			    fn assemble_fn_pointer_candidates(&mut self,
assigned_on_entry			    fn assigned_on_entry(&self, ln: LiveNode, var: Variable)
assigned_on_exit			    fn assigned_on_exit(&self, ln: LiveNode, var: Variable)
associated_consts			    fn associated_consts(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
associated_consts			    pub fn associated_consts(&self, id: DefId) -> Vec<Rc<AssociatedConst<'tcx>>> 
ast_node			pub trait ast_node 
ast_node for hir			impl ast_node for hir::Expr 
ast_node for hir			impl ast_node for hir::Pat 
ast_ty_to_prim_ty			pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)
ast_util::IdVisitingOperation for RenamingRecorder			impl<'map> ast_util::IdVisitingOperation for RenamingRecorder<'map> 
ast_visit::Visitor for EarlyContext			impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> 
astconv_object_safety_violations			pub fn astconv_object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,
astconv_util			    pub mod astconv_util;
attempt_static			fn attempt_static(sess: &session::Session) -> Option<DependencyList> 
attrs			    pub fn attrs(&self, id: NodeId) -> &'ast [ast::Attribute] 
autoderef			    pub fn autoderef(expr_id: NodeId, autoderef: u32) -> MethodCall 
back			pub mod back 
bar			    fn bar(&self) -> i32 { self.0 }
bar			    fn bar(&self) {}
bar			    fn bar(&self);
bar			    fn bar() -> i32 
bar			fn bar() -> ! 
basic_block_data			    pub fn basic_block_data(&self, bb: BasicBlock) -> &BasicBlockData<'tcx> 
basic_block_data_mut			    pub fn basic_block_data_mut(&mut self, bb: BasicBlock) -> &mut BasicBlockData<'tcx> 
basic_options			pub fn basic_options() -> Options 
baz			    fn baz() 
baz			fn baz() -> ! 
baz			fn baz<I: Foo<A=Bar>>(x: &<I as Foo>::A) {} \/\/ ok!
baz			fn baz<I>(x: &<I as Foo<A=Bar>>::A) {}
baz			fn baz<I>(x: &<I as Foo>::A) where I: Foo<A=Bar> {}
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binop_ty			    pub fn binop_ty(&self,
bit_str			fn bit_str(bit: usize) -> String 
bitand			    fn bitand(self, other: TypeContents) -> TypeContents 
bitor			    fn bitor(self, other: TypeContents) -> TypeContents 
bits_to_string			fn bits_to_string(words: &[usize]) -> String 
bitwise			fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],
bivariate			    pub fn bivariate(&self) -> Bivariate<'a, 'tcx> 
bivariate			pub mod bivariate;
block			    fn block(&mut self, blk: &hir::Block, pred: CFGIndex) -> CFGIndex 
block_query			pub fn block_query<P>(b: &hir::Block, p: P) -> bool where P: FnMut(&hir::Expr) -> bool 
blocks			pub mod blocks;
body			    pub fn body(self) -> &'a Block 
bogus_code_extent			    pub fn bogus_code_extent(&self, e: CodeExtentData) -> CodeExtent 
boo			    fn boo(&self) -> <Self as Foo>::A;
boo			    fn boo(&self) -> usize { 42 }
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrow			    fn borrow<'a>(&'a self) -> &'a TypeVariants<'tcx> 
borrow_expr			    fn borrow_expr(&mut self,
borrow_impl_lists			    pub fn borrow_impl_lists<'s>(&'s self, tcx: &ty::ctxt<'tcx>)
borrowck_stats			    pub fn borrowck_stats(&self) -> bool { self.opts.debugging_opts.borrowck_stats }
bound_list_is_sorted			fn bound_list_is_sorted(bounds: &[ty::PolyProjectionPredicate]) -> bool 
bug			    pub fn bug(&self, msg: &str) -> ! 
build			    pub fn build(&mut self, tcx: &ty::ctxt<'tcx>, krate: &Crate, access_levels: &AccessLevels) 
build_configuration			pub fn build_configuration(sess: &Session) -> ast::CrateConfig 
build_nodeid_to_index			fn build_nodeid_to_index(decl: Option<&hir::FnDecl>,
build_session			pub fn build_session(sopts: config::Options,
build_session_			pub fn build_session_(sopts: config::Options,
build_session_options			pub fn build_session_options(matches: &getopts::Matches) -> Options 
build_target_config			pub fn build_target_config(opts: &Options, sp: &Handler) -> Config 
build_to			        fn build_to(from: P<hir::Ty>,
builtin			pub mod builtin;
builtin_bound			    fn builtin_bound(&mut self,
builtin_deref			    pub fn builtin_deref(&self, explicit: bool, pref: ty::LvaluePreference)
builtin_index			    pub fn builtin_index(&self) -> Option<Ty<'tcx>> 
cake			    fn cake();
calculate			pub fn calculate(sess: &session::Session) 
calculate_dtorck			    fn calculate_dtorck(&'tcx self, tcx: &ctxt<'tcx>) 
calculate_type			fn calculate_type(sess: &session::Session,
call			    fn call<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
call_foo			fn call_foo(thing: Box<Trait>) 
call_foo			fn call_foo(x: Box<Trait>) 
call_site_extent			    pub fn call_site_extent(&self, fn_id: ast::NodeId, body_id: ast::NodeId) -> CodeExtent 
can_equate			    pub fn can_equate<'b,T>(&'b self, a: &T, b: &T) -> UnitResult<'tcx>
can_mk_eqty			pub fn can_mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>)
can_mk_subty			pub fn can_mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
can_type_implement_copy			    pub fn can_type_implement_copy(&self, self_type: Ty<'tcx>, span: Span)
candidate_from_obligation			    fn candidate_from_obligation<'o>(&mut self,
candidate_from_obligation_no_cache			    fn candidate_from_obligation_no_cache<'o>(&mut self,
candidate_should_be_dropped_in_favor_of			    fn candidate_should_be_dropped_in_favor_of<'o>(&mut self,
cannot_hold			    pub fn cannot_hold(&self) -> bool 
canonicalize			    fn canonicalize(path: Option<PathBuf>) -> Option<PathBuf> 
capture_components			fn capture_components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
cast			pub mod cast;
cast_const			fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult 
cat_captured_var			    fn cat_captured_var(&mut self,
cat_def			    pub fn cat_def(&self,
cat_deref			    fn cat_deref<N:ast_node>(&self,
cat_deref_common			    fn cat_deref_common<N:ast_node>(&self,
cat_downcast			    pub fn cat_downcast<N:ast_node>(&self,
cat_expr			    pub fn cat_expr(&self, expr: &hir::Expr) -> McResult<cmt<'tcx>> 
cat_expr_autoderefd			    pub fn cat_expr_autoderefd(&self,
cat_expr_unadjusted			    pub fn cat_expr_unadjusted(&self, expr: &hir::Expr) -> McResult<cmt<'tcx>> 
cat_field			    pub fn cat_field<N:ast_node>(&self,
cat_imm_interior			    pub fn cat_imm_interior<N:ast_node>(&self,
cat_index			    pub fn cat_index<N:ast_node>(&self,
cat_pattern			    pub fn cat_pattern<F>(&self, cmt: cmt<'tcx>, pat: &hir::Pat, mut op: F) -> McResult<()>
cat_pattern_			    fn cat_pattern_<F>(&self, cmt: cmt<'tcx>, pat: &hir::Pat, op: &mut F)
cat_rvalue			    pub fn cat_rvalue(&self,
cat_rvalue_node			    pub fn cat_rvalue_node(&self,
cat_slice_pattern			    pub fn cat_slice_pattern(&self,
cat_tup_field			    pub fn cat_tup_field<N:ast_node>(&self,
cat_upvar			    fn cat_upvar(&self,
cause			    fn cause(&mut self, code: traits::ObligationCauseCode<'tcx>) -> traits::ObligationCause<'tcx> 
cfg			    pub mod cfg;
check			    fn check(&mut self, id: DefId, span: Span,
check_adjustments			fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) 
check_and_note_conflicting_crates			    fn check_and_note_conflicting_crates(&self,
check_arm			    fn check_arm(&mut self, _: &EarlyContext, _: &ast::Arm) { }
check_arm			    fn check_arm(&mut self, _: &LateContext, _: &hir::Arm) { }
check_arm			fn check_arm(this: &mut Liveness, arm: &hir::Arm) 
check_arms			fn check_arms(cx: &MatchCheckCtxt,
check_ast_crate			pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) 
check_attr			    pub mod check_attr;
check_attribute			    fn check_attribute(&self, attr: &ast::Attribute, target: Target) 
check_attribute			    fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }
check_attribute			    fn check_attribute(&mut self, _: &LateContext, _: &ast::Attribute) { }
check_block			    fn check_block(&mut self, _: &EarlyContext, _: &ast::Block) { }
check_block			    fn check_block(&mut self, _: &LateContext, _: &hir::Block) { }
check_candidate_cache			    fn check_candidate_cache(&mut self,
check_const			    pub mod check_const;
check_crate			pub fn check_crate(sess: &Session, krate: &ast::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt, access_levels: &AccessLevels) 
check_crate			    fn check_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }
check_crate			    fn check_crate(&mut self, _: &LateContext, _: &hir::Crate) { }
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(sess: &Session, krate: &hir::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate<'ast>(sess: &Session,
check_crate			pub fn check_crate(tcx: &ty::ctxt, access_levels: &privacy::AccessLevels) 
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(tcx: &ctxt) 
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(krate: &hir::Crate,
check_decl			    fn check_decl(&mut self, _: &EarlyContext, _: &ast::Decl) { }
check_decl			    fn check_decl(&mut self, _: &LateContext, _: &hir::Decl) { }
check_def_id			    fn check_def_id(&mut self, def_id: DefId) 
check_evaluation_cache			    fn check_evaluation_cache(&self, trait_ref: ty::PolyTraitRef<'tcx>)
check_exhaustive			fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: hir::MatchSource) 
check_explicit_self			    fn check_explicit_self(&mut self, _: &EarlyContext, _: &ast::ExplicitSelf) { }
check_explicit_self			    fn check_explicit_self(&mut self, _: &LateContext, _: &hir::ExplicitSelf) { }
check_expr			    fn check_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }
check_expr			    fn check_expr(&mut self, _: &LateContext, _: &hir::Expr) { }
check_expr			fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,
check_expr			fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) 
check_expr			fn check_expr(this: &mut Liveness, expr: &Expr) 
check_expr			pub fn check_expr(tcx: &ty::ctxt, e: &hir::Expr,
check_expr_post			    fn check_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }
check_expr_post			    fn check_expr_post(&mut self, _: &LateContext, _: &hir::Expr) { }
check_fn			    fn check_fn(&mut self, _: &EarlyContext,
check_fn			    fn check_fn(&mut self, _: &LateContext,
check_fn			fn check_fn(cx: &mut MatchCheckCtxt,
check_fn			fn check_fn(_v: &Liveness,
check_for_bindings_named_the_same_as_variants			fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat) 
check_for_mutation_in_guard			fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,
check_for_static_nan			fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) 
check_foreign_item			    fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }
check_foreign_item			    fn check_foreign_item(&mut self, _: &LateContext, _: &hir::ForeignItem) { }
check_generics			    fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }
check_generics			    fn check_generics(&mut self, _: &LateContext, _: &hir::Generics) { }
check_ident			    fn check_ident(&mut self, _: &EarlyContext, _: Span, _: ast::Ident) { }
check_if_label_shadows_lifetime			    fn check_if_label_shadows_lifetime<'a>(sess: &'a Session,
check_impl_item			    fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }
check_impl_item			    fn check_impl_item(&mut self, _: &LateContext, _: &hir::ImplItem) { }
check_inline			    fn check_inline(&self, attr: &ast::Attribute, target: Target) 
check_irrefutable			fn check_irrefutable(cx: &MatchCheckCtxt, pat: &Pat, is_fn_arg: bool) 
check_item			    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) 
check_item			    fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }
check_item			    fn check_item(&mut self, _: &LateContext, _: &hir::Item) { }
check_item			pub fn check_item(tcx: &ty::ctxt, item: &hir::Item, warn_about_defns: bool,
check_legality_of_bindings_in_at_patterns			fn check_legality_of_bindings_in_at_patterns(cx: &MatchCheckCtxt, pat: &Pat) 
check_legality_of_move_bindings			fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,
check_lifetime			    fn check_lifetime(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }
check_lifetime			    fn check_lifetime(&mut self, _: &LateContext, _: &hir::Lifetime) { }
check_lifetime_def			    fn check_lifetime_def(&mut self, _: &EarlyContext, _: &ast::LifetimeDef) { }
check_lifetime_def			    fn check_lifetime_def(&mut self, _: &LateContext, _: &hir::LifetimeDef) { }
check_lifetime_def_for_shadowing			    fn check_lifetime_def_for_shadowing(&self,
check_lifetime_defs			    fn check_lifetime_defs(&mut self, old_scope: Scope, lifetimes: &[hir::LifetimeDef]) 
check_lint_name			fn check_lint_name<'a>(sess: &'a Session,
check_lint_name_attribute			fn check_lint_name_attribute(cx: &LateContext, attr: &ast::Attribute) 
check_lint_name_cmdline			fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,
check_local			    fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }
check_local			    fn check_local(&mut self, _: &LateContext, _: &hir::Local) { }
check_local			fn check_local(cx: &mut MatchCheckCtxt, loc: &hir::Local) 
check_local			fn check_local(this: &mut Liveness, local: &hir::Local) 
check_loop			    pub mod check_loop;
check_lvalue			    fn check_lvalue(&mut self, expr: &Expr) 
check_match			    pub mod check_match;
check_mod			    fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }
check_mod			    fn check_mod(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }
check_name			    fn check_name(&mut self, _: &LateContext, _: Span, _: ast::Name) { }
check_pat			    fn check_pat(&mut self, _: &EarlyContext, _: &ast::Pat) { }
check_pat			    fn check_pat(&mut self, _: &LateContext, _: &hir::Pat) { }
check_pat			pub fn check_pat(tcx: &ty::ctxt, pat: &hir::Pat,
check_path			    fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }
check_path			    fn check_path(&mut self, _: &LateContext, _: &hir::Path, _: ast::NodeId) { }
check_path			pub fn check_path(tcx: &ty::ctxt, path: &hir::Path, id: ast::NodeId,
check_path_list_item			    fn check_path_list_item(&mut self, _: &EarlyContext, _: &ast::PathListItem) { }
check_path_list_item			    fn check_path_list_item(&mut self, _: &LateContext, _: &hir::PathListItem) { }
check_path_list_item			pub fn check_path_list_item(tcx: &ty::ctxt, item: &hir::PathListItem,
check_repr			    fn check_repr(&self, attr: &ast::Attribute, target: Target) 
check_ret			    fn check_ret(&self,
check_rvalues			    pub mod check_rvalues;
check_static_mut_type			    fn check_static_mut_type(&self, e: &hir::Expr) 
check_static_recursion			    pub mod check_static_recursion;
check_static_type			    fn check_static_type(&self, e: &hir::Expr) 
check_stmt			    fn check_stmt(&mut self, _: &EarlyContext, _: &ast::Stmt) { }
check_stmt			    fn check_stmt(&mut self, _: &LateContext, _: &hir::Stmt) { }
check_struct_def			    fn check_struct_def(&mut self, _: &EarlyContext,
check_struct_def			    fn check_struct_def(&mut self, _: &LateContext,
check_struct_def_post			    fn check_struct_def_post(&mut self, _: &EarlyContext,
check_struct_def_post			    fn check_struct_def_post(&mut self, _: &LateContext,
check_struct_field			    fn check_struct_field(&mut self, _: &EarlyContext, _: &ast::StructField) { }
check_struct_field			    fn check_struct_field(&mut self, _: &LateContext, _: &hir::StructField) { }
check_trait_item			    fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }
check_trait_item			    fn check_trait_item(&mut self, _: &LateContext, _: &hir::TraitItem) { }
check_transmute			    fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>, id: ast::NodeId) 
check_ty			    fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }
check_ty			    fn check_ty(&mut self, _: &LateContext, _: &hir::Ty) { }
check_unstable_api_usage			pub fn check_unstable_api_usage(tcx: &ty::ctxt)
check_unused_or_stable_features			pub fn check_unused_or_stable_features(sess: &Session,
check_variant			    fn check_variant(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }
check_variant			    fn check_variant(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) { }
check_variant_post			    fn check_variant_post(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }
check_variant_post			    fn check_variant_post(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) { }
checked_or			    fn checked_or(&self, ty: Ty<'tcx>) -> EvalHint<'tcx> 
clone			    fn clone(&self) -> MapEntry<'ast> 
clone			    fn clone(&self) -> LiveNode 
closure_kind			    fn closure_kind(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)
closure_kind			    pub fn closure_kind(&self,
closure_kind			    pub fn closure_kind(this: &RefCell<Self>,
closure_kind			    pub fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind 
closure_trait_ref			    fn closure_trait_ref(&mut self,
closure_trait_ref_and_return_type			pub fn closure_trait_ref_and_return_type<'tcx>(
closure_trait_ref_unnormalized			    fn closure_trait_ref_unnormalized(&mut self,
closure_ty			    fn closure_ty(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)
closure_type			    pub fn closure_type(&self,
closure_type			    pub fn closure_type(this: &RefCell<Self>,
closure_type			    pub fn closure_type(&self,
closure_typer			    pub fn closure_typer(&self) -> &'cx InferCtxt<'cx, 'tcx> 
cmt_			impl<'tcx> cmt_<'tcx> 
cmt_			pub struct cmt_<'tcx> 
code_extent_data			    pub fn code_extent_data(&self, e: CodeExtent) -> CodeExtentData 
codemap			    pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap 
coherence			mod coherence;
collect			    pub fn collect(&mut self, krate: &hir::Crate) 
collect_concrete_region_errors			    fn collect_concrete_region_errors(&self,
collect_concrete_regions			    fn collect_concrete_regions(&self,
collect_error_for_expanding_node			    fn collect_error_for_expanding_node(&self,
collect_external_language_items			    pub fn collect_external_language_items(&mut self) 
collect_item			    pub fn collect_item(&mut self, item_index: usize,
collect_language_items			pub fn collect_language_items(session: &Session,
collect_local_language_items			    pub fn collect_local_language_items(&mut self, krate: &hir::Crate) 
collect_predicates_for_types			    fn collect_predicates_for_types(&mut self,
collect_regions			    pub fn collect_regions<T>(&self,
collector			mod collector;
combine			pub mod combine;
combine			    fn combine(&self, other: &RegionVidKey) -> RegionVidKey 
combine_fields			    fn combine_fields(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
combine_map			    fn combine_map(&self, t: CombineMapType) -> &RefCell<CombineMap> 
combine_vars			    pub fn combine_vars<F>(&self,
commit			    pub fn commit(&self, snapshot: RegionSnapshot) 
commit			    pub fn commit(&mut self, s: Snapshot) 
commit_from			    fn commit_from(&self, snapshot: CombinedSnapshot) 
commit_if_ok			    pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E> where
commit_regions_if_ok			    pub fn commit_regions_if_ok<T, E, F>(&self, f: F) -> Result<T, E> where
commit_unconditionally			    pub fn commit_unconditionally<R, F>(&self, f: F) -> R where
common			    pub mod common;
common_supertype			pub fn common_supertype<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
compare			    fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T> where
compare_const_vals			pub fn compare_const_vals(a: &ConstVal, b: &ConstVal) -> Option<Ordering> 
compare_lit_exprs			pub fn compare_lit_exprs<'tcx>(tcx: &ty::ctxt<'tcx>,
components			pub fn components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
compute			    fn compute(&mut self, decl: &hir::FnDecl, body: &hir::Block) -> LiveNode 
compute			    fn compute(&mut self, ty0: Ty<'tcx>) -> bool 
compute_components			fn compute_components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
compute_id_range			    fn compute_id_range(&self, cfgidx: CFGIndex) -> (usize, usize) 
compute_projection			    fn compute_projection(&mut self, data: ty::ProjectionTy<'tcx>) 
compute_trait_ref			    fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>) 
config			pub mod config;
configure_main			fn configure_main(this: &mut EntryContext) 
confirm_builtin_candidate			    fn confirm_builtin_candidate(&mut self,
confirm_builtin_unsize_candidate			    fn confirm_builtin_unsize_candidate(&mut self,
confirm_callable_candidate			fn confirm_callable_candidate<'cx,'tcx>(
confirm_candidate			fn confirm_candidate<'cx,'tcx>(
confirm_candidate			    fn confirm_candidate(&mut self,
confirm_closure_candidate			fn confirm_closure_candidate<'cx,'tcx>(
confirm_closure_candidate			    fn confirm_closure_candidate(&mut self,
confirm_default_impl_candidate			    fn confirm_default_impl_candidate(&mut self,
confirm_default_impl_object_candidate			    fn confirm_default_impl_object_candidate(&mut self,
confirm_fn_pointer_candidate			fn confirm_fn_pointer_candidate<'cx,'tcx>(
confirm_fn_pointer_candidate			    fn confirm_fn_pointer_candidate(&mut self,
confirm_impl_candidate			fn confirm_impl_candidate<'cx,'tcx>(
confirm_impl_candidate			    fn confirm_impl_candidate(&mut self,
confirm_object_candidate			    fn confirm_object_candidate(&mut self,
confirm_param_candidate			    fn confirm_param_candidate(&mut self,
confirm_param_env_candidate			fn confirm_param_env_candidate<'cx,'tcx>(
confirm_poly_trait_refs			    fn confirm_poly_trait_refs(&mut self,
confirm_projection_candidate			    fn confirm_projection_candidate(&mut self,
consider_adding_bidirectional_edges			        fn consider_adding_bidirectional_edges(result_set: &mut Vec<Region>,
consider_adding_directed_edge			        fn consider_adding_directed_edge(result_set: &mut Vec<Region>,
consider_unification_despite_ambiguity			fn consider_unification_despite_ambiguity<'cx,'tcx>(selcx: &mut SelectionContext<'cx,'tcx>,
consider_unification_despite_ambiguity			    fn consider_unification_despite_ambiguity(&mut self, obligation: &TraitObligation<'tcx>) 
const_eval			    pub mod const_eval;
const_expr_to_pat			pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<hir::Pat> 
const_int_checked_div			pub fn const_int_checked_div<'a>(
const_int_checked_neg			pub fn const_int_checked_neg<'a>(
const_int_checked_rem			pub fn const_int_checked_rem<'a>(
const_uint_checked_div			pub fn const_uint_checked_div<'a>(
const_uint_checked_neg			pub fn const_uint_checked_neg<'a>(
const_uint_checked_rem			pub fn const_uint_checked_rem<'a>(
const_uint_not			fn const_uint_not(a: u64, opt_ety: Option<UintTy>) -> ConstVal 
const_val_to_expr			fn const_val_to_expr(value: &ConstVal) -> P<hir::Expr> 
constituent_types_for_ty			    fn constituent_types_for_ty(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> 
constraint_to_nodes			fn constraint_to_nodes(c: &Constraint) -> (Node, Node) 
construct			pub fn construct(tcx: &ty::ctxt,
construct			mod construct;
construct_free_substs			    pub fn construct_free_substs(&self, generics: &Generics<'tcx>,
construct_graph			    fn construct_graph(&self) -> RegionGraph 
construct_parameter_environment			    pub fn construct_parameter_environment<'a>(&'a self,
construct_var_data			    fn construct_var_data(&self) -> Vec<VarData> 
construct_witness			fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,
constructor_arity			pub fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize 
consume			    fn consume(&mut self,
consume			    fn consume(&mut self, _: NodeId, _: Span, _: cmt, _: ConsumeMode) {}
consume			    fn consume(&mut self,
consume			    fn consume(&mut self,
consume_expr			    pub fn consume_expr(&mut self, expr: &hir::Expr) 
consume_exprs			    fn consume_exprs(&mut self, exprs: &[P<hir::Expr>]) 
consume_pat			    fn consume_pat(&mut self,
consume_pat			    fn consume_pat(&mut self, _: &Pat, _: cmt, _: ConsumeMode) {}
consume_pat			    fn consume_pat(&mut self,
consume_pat			    fn consume_pat(&mut self,
container			    pub fn container(&self) -> ImplOrTraitItemContainer 
container_id			    pub fn container_id(&self) -> DefId 
contains			    pub fn contains(&self, other: &BoundRegion) -> bool 
contains_field_named			        fn contains_field_named(field: ty::FieldDef,
contains_illegal_self_type_reference			fn contains_illegal_self_type_reference<'tcx>(tcx: &ty::ctxt<'tcx>,
contains_key			    pub fn contains_key(&self, k: &M::Key) -> bool 
contents			mod contents;
context			mod context;
context			mod context;
contraction			    fn contraction(&self, free_regions: &FreeRegionMap, var_data: &mut [VarData]) 
copy_if_invalid			        fn copy_if_invalid(src: LiveNode, dst: &mut LiveNode) -> bool 
copy_or_move			fn copy_or_move<'a, 'tcx>(typer: &infer::InferCtxt<'a, 'tcx>,
count_llvm_insns			    pub fn count_llvm_insns(&self) -> bool 
count_own_vtable_entries			pub fn count_own_vtable_entries<'tcx>(tcx: &ty::ctxt<'tcx>,
count_type_sizes			    pub fn count_type_sizes(&self) -> bool 
crate_attrs			    fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>
crate_attrs			    fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>;
crate_hash			    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh { unimplemented!() }
crate_hash			    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh;
crate_name			    fn crate_name(&self, cnum: ast::CrateNum) -> String { unimplemented!() }
crate_name			    fn crate_name(&self, cnum: ast::CrateNum) -> String;
crate_struct_field_attrs			    fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)
crate_top_level_items			    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>
crate_top_level_items			    fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>;
crates			    fn crates(&self) -> Vec<ast::CrateNum> { vec![] }
crates			    fn crates(&self) -> Vec<ast::CrateNum>;
create			    fn create() -> u32 { 1 }
create			    fn create() -> u32 { 2 }
create			    fn create() -> u32;
create_and_enter			    pub fn create_and_enter<F, R>(s: &'tcx Session,
create_and_seed_worklist			fn create_and_seed_worklist(tcx: &ty::ctxt,
create_def			    fn create_def(&mut self, node_id: NodeId, data: DefPathData) -> DefIndex 
create_def_with_parent			    fn create_def_with_parent(&mut self,
create_def_with_parent			    pub fn create_def_with_parent(&mut self,
create_item_scope_if_needed			    fn create_item_scope_if_needed(&mut self, id: ast::NodeId) 
cstore			    pub mod cstore;
ctxt			impl<'tcx> ctxt<'tcx> 
ctxt			pub struct ctxt<'tcx> 
ctxt			impl<'tcx> ctxt<'tcx> 
current_level			    fn current_level(&self, lint: &'static Lint) -> Level 
current_node			    fn current_node(&self) -> Option<OpenNode> 
custom_coerce_unsized_kind			    fn custom_coerce_unsized_kind(&self, def: DefId)
custom_coerce_unsized_kind			    pub fn custom_coerce_unsized_kind(&self, did: DefId) -> adjustment::CustomCoerceUnsized 
dataflow			    pub mod dataflow;
dead			    pub mod dead;
decl			    pub fn decl(self) -> &'a FnDecl 
decl			    fn decl(&mut self, decl: &hir::Decl, pred: CFGIndex) -> CFGIndex 
decl_without_init			    fn decl_without_init(&mut self,
decl_without_init			    fn decl_without_init(&mut self, _: NodeId, _: Span) {}
decl_without_init			    fn decl_without_init(&mut self,
decl_without_init			    fn decl_without_init(&mut self,
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<&'tcx Substs<'tcx>, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Substs<'tcx>, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<AdtDef<'tcx>, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Ty<'tcx>, D::Error> 
decode			    fn decode<S: Decoder>(s: &mut S) -> Result<&'tcx ClosureSubsts<'tcx>, S::Error> 
decode_substs			        fn decode_substs(&self, decoder: &mut OpaqueDecoder) -> Substs<'tcx>;
decode_ty			        fn decode_ty(&self, decoder: &mut OpaqueDecoder) -> ty::Ty<'tcx>;
def			    pub mod def;
def_id			    pub mod def_id;
def_id			    pub fn def_id(&self) -> DefId 
def_id			    pub fn def_id(&self) -> DefId 
def_id			    pub fn def_id(&self) -> DefId 
def_id			    pub fn def_id(&self) -> DefId 
def_id_is_transmute			    fn def_id_is_transmute(&self, def_id: DefId) -> bool 
def_id_represents_local_inlined_item			    fn def_id_represents_local_inlined_item(&self, def_id: DefId) -> bool 
def_id_span			    pub fn def_id_span(&self, def_id: DefId, fallback: Span) -> Span 
def_key			    pub fn def_key(&self, index: DefIndex) -> DefKey 
def_key			    pub fn def_key(&self, def_id: DefId) -> DefKey 
def_path			    pub fn def_path(&self, index: DefIndex) -> DefPath 
def_path			    pub fn def_path(&self, def_id: DefId) -> DefPath 
def_path			    fn def_path(&self, def: DefId) -> hir_map::DefPath { unimplemented!() }
def_path			    fn def_path(&self, def: DefId) -> hir_map::DefPath;
def_path			    pub fn def_path(&self, id: DefId) -> ast_map::DefPath 
def_path_from_id			    pub fn def_path_from_id(&self, id: NodeId) -> DefPath 
def_to_path			pub fn def_to_path(tcx: &ty::ctxt, id: DefId) -> hir::Path 
default			    pub fn default(&self, ty: Ty<'tcx>) -> Option<type_variable::Default<'tcx>> 
default			    pub fn default(&self, vid: ty::TyVid) -> Option<Default<'tcx>> 
default			    fn default() -> Self 
default			    fn default() -> ErrorOutputType 
default_configuration			pub fn default_configuration(sess: &Session) -> ast::CrateConfig 
default_lib_output			pub fn default_lib_output() -> CrateType 
define			    fn define(&mut self, writer: LiveNode, var: Variable) 
define_bindings_in_arm_pats			    fn define_bindings_in_arm_pats(&mut self, pat: Option<&hir::Pat>, succ: LiveNode)
define_bindings_in_pat			    fn define_bindings_in_pat(&mut self, pat: &hir::Pat, succ: LiveNode)
definition			                                                            trait definition for {} refers to \\
definition			                                                        trait definition for {} must have named \\
definition			                                                 trait definition for {} must have a value, \\
definitions			pub mod definitions;
delay_span_bug			    pub fn delay_span_bug(&self, sp: Span, msg: &str) 
delegate_consume			    fn delegate_consume(&mut self,
dep_graph			pub mod dep_graph;
dep_node			    fn dep_node(&self, tcx: &ty::ctxt<'tcx>) -> DepNode 
dep_tracking_map			mod dep_tracking_map;
dependency_format			    pub mod dependency_format;
dependents			    pub fn dependents(&self, node: DepNode) -> Vec<DepNode> 
deprecation			    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { unimplemented!() }
deprecation			    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;
deref			    fn deref(&self)-> &str { "foo" }
deref			    fn deref(&self) -> &Self::Target { &self.0 }
deref			    pub fn deref(self) -> Lvalue<'tcx> 
deref_kind			fn deref_kind(t: Ty, context: DerefKindContext) -> McResult<deref_kind> 
deref_kind			pub enum deref_kind 
deref_mut			    fn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }
deref_vec			    fn deref_vec<N:ast_node>(&self,
derived_cause			    fn derived_cause(&self,
desc			    fn desc(&self) -> &'static str 
description			    pub fn description(&self) -> &'static str 
description			    pub fn description(&self) -> Cow<str> 
descriptive_string			    pub fn descriptive_string(&self, tcx: &ty::ctxt) -> String 
destination			    pub fn destination(&self) -> Option<&Lvalue<'tcx>> 
destination_mut			    pub fn destination_mut(&mut self) -> Option<&mut Lvalue<'tcx>> 
destructor			    pub fn destructor(&self) -> Option<DefId> 
determine_pat_move_mode			    fn determine_pat_move_mode(&mut self,
diagnostic			    pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler 
diagnostics			pub mod diagnostics;
disr_incr			    fn disr_incr(&self, val: Disr) -> Option<Disr> 
disr_incr			    fn disr_incr(&self, val: Disr) -> Option<Disr>;
disr_string			    fn disr_string(&self, val: Disr) -> String 
disr_string			    fn disr_string(&self, val: Disr) -> String;
disr_wrap_incr			    fn disr_wrap_incr(&self, val: Option<Disr>) -> Disr 
disr_wrap_incr			    fn disr_wrap_incr(&self, val: Option<Disr>) -> Disr;
diverges			    pub fn diverges(&self) -> bool 
dot			impl<'a, 'ast> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast>
dot			impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> 
dot			impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG 
dot::GraphWalk for ConstraintGraph			impl<'a, 'tcx> dot::GraphWalk<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> 
dot::Labeller for ConstraintGraph			impl<'a, 'tcx> dot::Labeller<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> 
drain_fulfillment_cx			pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
drain_fulfillment_cx_or_panic			pub fn drain_fulfillment_cx_or_panic<'a,'tcx,T>(span: Span,
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) {}
drop			    fn drop(&mut self) { debug!("<<"); }
dtor_kind			    pub fn dtor_kind(&self) -> DtorKind 
dummy			    pub fn dummy(tcx: &ty::ctxt<'tcx>) -> TypeTrace<'tcx> 
dummy			    pub fn dummy() -> ObligationCause<'tcx> 
dump_constraints			    fn dump_constraints(&self, subject: ast::NodeId) 
dump_region_constraints_to			fn dump_region_constraints_to<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,
dylib_dependency_formats			    fn dylib_dependency_formats(&self, cnum: ast::CrateNum)
each_bit			    fn each_bit<F>(&self, words: &[usize], mut f: F) -> bool where
each_bit_for_node			    pub fn each_bit_for_node<F>(&self, e: EntryOrExit, cfgidx: CFGIndex, f: F) -> bool where
each_bit_on_entry			    pub fn each_bit_on_entry<F>(&self, id: ast::NodeId, mut f: F) -> bool where
each_encl_scope			    pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent, &CodeExtent) 
each_gen_bit			    pub fn each_gen_bit<F>(&self, id: ast::NodeId, mut f: F) -> bool where
each_rvalue_scope			    pub fn each_rvalue_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) 
each_var_scope			    pub fn each_var_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) 
early_bound_lifetime_names			fn early_bound_lifetime_names(generics: &hir::Generics) -> Vec<ast::Name> 
early_bound_lifetimes			pub fn early_bound_lifetimes<'a>(generics: &'a hir::Generics) -> Vec<hir::LifetimeDef> 
early_error			pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! 
early_warn			pub fn early_warn(output: config::ErrorOutputType, msg: &str) 
edge_label			    fn edge_label(&self, e: &Edge<'a>) -> dot::LabelText<'a> 
edge_label			    fn edge_label(&self, e: &Edge) -> dot::LabelText 
edge_to_nodes			fn edge_to_nodes(e: &Edge) -> (Node, Node) 
edges			mod edges;
edges			    pub fn edges(&self) -> Vec<(DepNode,DepNode)> 
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> 
edges			    fn edges(&self) -> dot::Edges<Edge> 
effect			    pub mod effect;
elaborate_predicates			pub fn elaborate_predicates<'cx, 'tcx>(
elaborate_trait_ref			pub fn elaborate_trait_ref<'cx, 'tcx>(
elaborate_trait_refs			pub fn elaborate_trait_refs<'cx, 'tcx>(
elem			    pub fn elem(self, elem: LvalueElem<'tcx>) -> Lvalue<'tcx> 
element_kind			fn element_kind(t: Ty) -> ElementKind 
empty			    pub fn empty() -> LinkedPath<'a> 
empty			    pub fn empty() -> Substs<'tcx> 
empty			    pub fn empty() -> VecPerParamSpace<T> 
empty			    fn empty() -> TraitObligationStackList<'o,'tcx> 
empty			    pub fn empty() -> Tables<'tcx> 
empty			    pub fn empty() -> GenericPredicates<'tcx> 
empty			    pub fn empty() -> Generics<'tcx> 
empty			    pub fn empty() -> InstantiatedPredicates<'tcx> 
empty			    pub fn empty() -> ItemSubsts<'tcx> 
empty			    pub fn empty() -> BuiltinBounds 
empty_parameter_environment			    pub fn empty_parameter_environment<'a>(&'a self)
encl_scope			    pub fn encl_scope(&self, id: CodeExtent) -> CodeExtent 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
encode_metadata			    fn encode_metadata(&self,
encode_substs			        fn encode_substs(&self, encoder: &mut OpaqueEncoder, substs: &Substs<'tcx>);
encode_ty			        fn encode_ty(&self, encoder: &mut OpaqueEncoder, t: Ty<'tcx>);
encode_type			    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>
encode_type			    fn encode_type(&self, tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Vec<u8>;
enqueue			    pub fn enqueue(&self, message: DepMessage) 
enter			    pub fn enter<'tcx, F: FnOnce(&ty::ctxt<'tcx>) -> R, R>(tcx: ty::ctxt<'tcx>, f: F) -> R 
enter_attrs			    fn enter_attrs(&mut self, attrs: &[ast::Attribute]) 
enter_attrs			    fn enter_attrs(&mut self, attrs: &[ast::Attribute]);
enter_decoding_context			    pub fn enter_decoding_context<'tcx, F, R>(dcx: &DecodingContext<'tcx>,
enter_encoding_context			    pub fn enter_encoding_context<'tcx, F, R>(ecx: &EncodingContext<'tcx>,
enter_lint_attrs			    fn enter_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }
enter_lint_attrs			    fn enter_lint_attrs(&mut self, _: &LateContext, _: &[ast::Attribute]) { }
enter_region_binder			    fn enter_region_binder(&mut self) 
enter_region_binder			    fn enter_region_binder(&mut self) { }
enter_region_binder			    fn enter_region_binder(&mut self) 
entry			    pub mod entry;
entry_count			    fn entry_count(&self) -> usize 
entry_point_type			fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType 
enum_repr_type			    pub fn enum_repr_type(&self, opt_hint: Option<&attr::ReprAttr>)
env_deref			    fn env_deref(&self,
eq			    fn eq(&self, other: &LintId) -> bool 
eq			    fn eq(&self, other: &ConstVal) -> bool 
eq			    fn eq(&self, other: &InternedTy<'tcx>) -> bool 
eq			    fn eq(&self, other: &Self) -> bool { self as *const _ == other as *const _ }
eq			    fn eq(&self, other: &Self) -> bool { self.def_id == other.def_id }
eq			    fn eq(&self, other: &TyS<'tcx>) -> bool 
eq_trait_refs			    pub fn eq_trait_refs(&self,
eq_types			    pub fn eq_types(&self,
equality_predicate			    pub fn equality_predicate(&self,
equate			    pub fn equate(&self) -> Equate<'a, 'tcx> 
equate			    pub fn equate(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
equate			pub mod equate;
erase_hint			    fn erase_hint(&self) -> EvalHint<'tcx> 
erase_late_bound_regions			    pub fn erase_late_bound_regions<T>(&self, value: &Binder<T>) -> T
erase_regions			    pub fn erase_regions(self) -> Substs<'tcx> 
erase_regions			    pub fn erase_regions<T>(&self, value: &T) -> T
erased			    pub fn erased(t: VecPerParamSpace<Ty<'tcx>>) -> Substs<'tcx>
err			    pub fn err(&self, msg: &str) 
err_count			    pub fn err_count(&self) -> usize 
error			pub mod error;
error_reporting			pub mod error_reporting;
error_reporting			mod error_reporting;
escapes_depth			    pub fn escapes_depth(&self, depth: u32) -> bool 
euv::Delegate for CheckCrateVisitor			impl<'a, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'tcx> 
euv::Delegate for RvalueContextDelegate			impl<'a, 'tcx> euv::Delegate<'tcx> for RvalueContextDelegate<'a, 'tcx> 
eval_const_expr			pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> ConstVal 
eval_const_expr_partial			pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,
eval_repeat_count			    pub fn eval_repeat_count(&self, count_expr: &hir::Expr) -> usize 
evaluate_candidate			    fn evaluate_candidate<'o>(&mut self,
evaluate_obligation			    pub fn evaluate_obligation(&mut self,
evaluate_obligation_conservatively			    pub fn evaluate_obligation_conservatively(&mut self,
evaluate_obligation_recursively			    fn evaluate_obligation_recursively<'o>(&mut self,
evaluate_predicate_recursively			    fn evaluate_predicate_recursively<'o>(&mut self,
evaluate_predicates_recursively			    fn evaluate_predicates_recursively<'a,'o,I>(&mut self,
evaluate_stack			    fn evaluate_stack<'o>(&mut self,
evaluate_where_clause			    fn evaluate_where_clause<'o>(&mut self,
exit_attrs			    fn exit_attrs(&mut self, attrs: &[ast::Attribute]) 
exit_attrs			    fn exit_attrs(&mut self, attrs: &[ast::Attribute]);
exit_lint_attrs			    fn exit_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }
exit_lint_attrs			    fn exit_lint_attrs(&mut self, _: &LateContext, _: &[ast::Attribute]) { }
exit_region_binder			    fn exit_region_binder(&mut self) 
exit_region_binder			    fn exit_region_binder(&mut self) { }
exit_region_binder			    fn exit_region_binder(&mut self) 
expand_givens			    fn expand_givens(&self, graph: &RegionGraph) 
expand_node			    fn expand_node(&self,
expansion			    fn expansion(&self, free_regions: &FreeRegionMap, var_data: &mut [VarData]) 
expect_expr			    pub fn expect_expr(&self, id: NodeId) -> &'ast Expr 
expect_foreign_item			    pub fn expect_foreign_item(&self, id: NodeId) -> &'ast ForeignItem 
expect_item			    pub fn expect_item(&self, id: NodeId) -> &'ast Item 
expect_struct			    pub fn expect_struct(&self, id: NodeId) -> &'ast VariantData 
expect_trait_item			    pub fn expect_trait_item(&self, id: NodeId) -> &'ast TraitItem 
expect_variant			    pub fn expect_variant(&self, id: NodeId) -> &'ast Variant 
expected_found			fn expected_found<T>(a_is_expected: bool,
expected_found			pub fn expected_found<'a,'tcx:'a,R,T>(relation: &mut R,
expected_found_bool			pub fn expected_found_bool<T>(a_is_expected: bool,
expected_found_str			    fn expected_found_str<T: fmt::Display + Resolvable<'tcx> + TypeFoldable<'tcx>>(
explain_span			        fn explain_span(tcx: &ty::ctxt, heading: &str, span: Span)
expr			    fn expr(&mut self, expr: &hir::Expr, pred: CFGIndex) -> CFGIndex 
expr			    pub fn expr(id: NodeId) -> MethodCall 
expr_is_lval			    pub fn expr_is_lval(&self, expr: &hir::Expr) -> bool 
expr_span			    pub fn expr_span(&self, id: NodeId) -> Span 
expr_ty			    pub fn expr_ty(&self, ex: &hir::Expr) -> Ty<'tcx> 
expr_ty			    fn expr_ty(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> 
expr_ty			    pub fn expr_ty(&self, expr: &hir::Expr) -> Ty<'tcx> 
expr_ty_adjusted			    pub fn expr_ty_adjusted(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> 
expr_ty_adjusted			    fn expr_ty_adjusted(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> 
expr_ty_adjusted			    pub fn expr_ty_adjusted(&self, expr: &hir::Expr) -> Ty<'tcx> 
expr_ty_opt			    pub fn expr_ty_opt(&self, expr: &hir::Expr) -> Option<Ty<'tcx>> 
expr_use_visitor			    pub mod expr_use_visitor; \/\/ STAGE0: increase glitch immunity
expression_label			    fn expression_label(ex: &hir::Expr) -> Option<ast::Name> 
exprs			    fn exprs<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
extend			    pub fn extend(krate: &'ast Crate,
extend			    pub fn extend<I:Iterator<Item=T>>(&mut self, space: ParamSpace, values: I) 
extends			    pub fn extends(self, other: ty::ClosureKind) -> bool 
extern_item_path			    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }
extern_item_path			    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum> { None }
extern_mod_stmt_cnum			    fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum>;
extract			pub fn extract(attrs: &[ast::Attribute]) -> Option<InternedString> 
extract_all_region_names			    fn extract_all_region_names(&self) -> HashSet<ast::Name> 
extract_anon_nums_and_names			    fn extract_anon_nums_and_names(&self, same_regions: &SameRegions)
extract_labels			fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) 
extract_values_and_collect_conflicts			    fn extract_values_and_collect_conflicts(&self,
f			    fn f<'a>(x: &'a i32) { \/\/ error: lifetime name `'a` shadows a lifetime
f			    fn f<'b>(x: &'b i32) { \/\/ ok!
f			unsafe fn f() { return; }
fast_reject			pub mod fast_reject;
fast_reject_trait_refs			    fn fast_reject_trait_refs(&mut self,
fatal			    pub fn fatal(&self, msg: &str) -> ! 
field			    pub fn field(self, f: Field) -> Lvalue<'tcx> 
field_named			    pub fn field_named(&self, name: ast::Name) -> &FieldDefData<'tcx, 'container> 
fields_iter			    fn fields_iter(&self) -> slice::Iter<FieldDefData<'tcx, 'container>> 
filesearch			pub mod filesearch;
filestem			    pub fn filestem(&self) -> String 
filter_to_traits			    pub fn filter_to_traits(self) -> FilterToTraits<Elaborator<'cx, 'tcx>> 
find			    pub fn find(&self, id: NodeId) -> Option<Node<'ast>> 
find_entry			    fn find_entry(&self, id: NodeId) -> Option<MapEntry<'ast>> 
find_entry_point			pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) 
find_field_named			    pub fn find_field_named(&self,
find_first_mod_parent			        fn find_first_mod_parent<'a>(map: &'a Map, mut id: NodeId) -> Option<(NodeId, Name)> 
find_item			fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) 
find_libdir			fn find_libdir(sysroot: &Path) -> String 
find_lint			    fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)
find_live			fn find_live(tcx: &ty::ctxt,
find_loop_scope			    fn find_loop_scope(&self,
find_nonrepresentable			        fn find_nonrepresentable<'tcx, It: Iterator<Item=Ty<'tcx>>>(cx: &ty::ctxt<'tcx>,
find_reachable			pub fn find_reachable(tcx: &ty::ctxt,
find_scope			    fn find_scope(&self,
fix_windows_verbatim_for_gcc			pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf 
fixup_err_to_string			pub fn fixup_err_to_string(f: FixupError) -> String 
flag			    pub fn    flag(a: S, b: S, c: S)       -> R { stable(getopts::optflag(a, b, c)) }
flag_u			    pub fn    flag_u(a: S, b: S, c: S)       -> R { unstable(getopts::optflag(a, b, c)) }
flagmulti			    pub fn flagmulti(a: S, b: S, c: S)     -> R { stable(getopts::optflagmulti(a, b, c)) }
flagmulti_u			    pub fn flagmulti_u(a: S, b: S, c: S)     -> R { unstable(getopts::optflagmulti(a, b, c)) }
flagopt			    pub fn flagopt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optflagopt(a, b, c, d)) }
flagopt_u			    pub fn flagopt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optflagopt(a, b, c, d)) }
flags			mod flags;
flatten_late_bound_regions			    pub fn flatten_late_bound_regions<T>(&self, bound2_value: &Binder<Binder<T>>)
float_unification_error			fn float_unification_error<'tcx>(a_is_expected: bool,
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(),fmt::Error> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Categorization			impl<'tcx> fmt::Debug for Categorization<'tcx> 
fmt::Debug for CodeExtent			impl fmt::Debug for CodeExtent 
fmt::Debug for DefId			impl fmt::Debug for DefId 
fmt::Debug for GenericKind			impl<'tcx> fmt::Debug for GenericKind<'tcx> 
fmt::Debug for InteriorKind			impl fmt::Debug for InteriorKind 
fmt::Debug for LiveNode			impl fmt::Debug for LiveNode 
fmt::Debug for Matrix			impl<'a> fmt::Debug for Matrix<'a> 
fmt::Debug for Normalized			impl<'tcx, T: fmt::Debug> fmt::Debug for Normalized<'tcx, T> 
fmt::Debug for PointerKind			impl fmt::Debug for PointerKind 
fmt::Debug for RegionAndOrigin			impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> 
fmt::Debug for RegionSnapshot			impl fmt::Debug for RegionSnapshot 
fmt::Debug for ScopeChain			impl<'a> fmt::Debug for ScopeChain<'a> 
fmt::Debug for TraitObligationStack			impl<'o,'tcx> fmt::Debug for TraitObligationStack<'o,'tcx> 
fmt::Debug for TransmuteRestriction			impl<'tcx> fmt::Debug for TransmuteRestriction<'tcx> 
fmt::Debug for TyIVar			impl<'tcx, 'lt> fmt::Debug for TyIVar<'tcx, 'lt> 
fmt::Debug for TypeContents			impl fmt::Debug for TypeContents 
fmt::Debug for TypeFlags			impl fmt::Debug for TypeFlags 
fmt::Debug for TypeTrace			impl<'tcx> fmt::Debug for TypeTrace<'tcx> 
fmt::Debug for Upvar			impl fmt::Debug for Upvar 
fmt::Debug for Variable			impl fmt::Debug for Variable 
fmt::Debug for VecPerParamSpace			impl<T: fmt::Debug> fmt::Debug for VecPerParamSpace<T> 
fmt::Debug for Verify			impl<'tcx> fmt::Debug for Verify<'tcx> 
fmt::Debug for cmt_			impl<'tcx> fmt::Debug for cmt_<'tcx> 
fmt::Debug for subst			impl fmt::Debug for subst::RegionSubsts 
fmt::Debug for subst			impl<'tcx> fmt::Debug for subst::Substs<'tcx> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableDefaultImplData<N> 
fmt::Debug for traits			impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableImplData<'tcx, N> 
fmt::Debug for traits			impl<'tcx, O: fmt::Debug> fmt::Debug for traits::Obligation<'tcx, O> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::FulfillmentError<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::FulfillmentErrorCode<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::RegionObligation<'tcx> 
fmt::Debug for traits			impl<'tcx> fmt::Debug for traits::VtableObjectData<'tcx> 
fmt::Debug for ty			impl fmt::Debug for ty::BoundRegion 
fmt::Debug for ty			impl fmt::Debug for ty::FloatVid 
fmt::Debug for ty			impl fmt::Debug for ty::FreeRegion 
fmt::Debug for ty			impl fmt::Debug for ty::InferTy 
fmt::Debug for ty			impl fmt::Debug for ty::IntVarValue 
fmt::Debug for ty			impl fmt::Debug for ty::IntVid 
fmt::Debug for ty			impl fmt::Debug for ty::ItemVariances 
fmt::Debug for ty			impl fmt::Debug for ty::ParamTy 
fmt::Debug for ty			impl fmt::Debug for ty::Region 
fmt::Debug for ty			impl fmt::Debug for ty::RegionParameterDef 
fmt::Debug for ty			impl fmt::Debug for ty::RegionVid 
fmt::Debug for ty			impl fmt::Debug for ty::TyVid 
fmt::Debug for ty			impl fmt::Debug for ty::UpvarBorrow 
fmt::Debug for ty			impl fmt::Debug for ty::UpvarId 
fmt::Debug for ty			impl fmt::Debug for ty::Variance 
fmt::Debug for ty			impl<'a, 'tcx> fmt::Debug for ty::ParameterEnvironment<'a, 'tcx> 
fmt::Debug for ty			impl<'tcx, 'container> fmt::Debug for ty::AdtDefData<'tcx, 'container> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ClosureTy<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ExistentialBounds<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::FnSig<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::GenericPredicates<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ImplOrTraitItem<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::InstantiatedPredicates<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ItemSubsts<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ObjectLifetimeDefault 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::Predicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ProjectionPredicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitDef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitTy<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TyS<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TypeParameterDef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::adjustment::AutoAdjustment<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::adjustment::AutoDerefRef<'tcx> 
fmt::Display for CrateType			impl fmt::Display for CrateType 
fmt::Display for GenericKind			impl<'tcx> fmt::Display for GenericKind<'tcx> 
fmt::Display for PathElem			impl fmt::Display for PathElem 
fmt::Display for TraitAndProjections			impl<'tcx> fmt::Display for TraitAndProjections<'tcx> 
fmt::Display for TypeError			impl<'tcx> fmt::Display for TypeError<'tcx> 
fmt::Display for TypeOrigin			impl fmt::Display for TypeOrigin 
fmt::Display for Upvar			impl fmt::Display for Upvar 
fmt::Display for ty			impl fmt::Display for ty::Binder<ty::OutlivesPredicate<ty::Region, ty::Region>> 
fmt::Display for ty			impl fmt::Display for ty::BoundRegion 
fmt::Display for ty			impl fmt::Display for ty::BuiltinBounds 
fmt::Display for ty			impl fmt::Display for ty::ExplicitSelfCategory 
fmt::Display for ty			impl fmt::Display for ty::InferTy 
fmt::Display for ty			impl fmt::Display for ty::ParamTy 
fmt::Display for ty			impl fmt::Display for ty::Region 
fmt::Display for ty			impl<'tcx, T, U> fmt::Display for ty::OutlivesPredicate<T,U>
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::EquatePredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, ty::Region>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::ProjectionPredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::TraitPredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::TraitRef<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::EquatePredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::FnSig<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Predicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::ProjectionPredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::ProjectionTy<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitPredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitRef<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitTy<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TyS<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TypeAndMut<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> 
fmt_const_val			fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result 
fmt_head			    pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> fmt::Result 
fmt_successor_labels			    pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> 
fmt_tuple			                fn fmt_tuple(fmt: &mut Formatter, name: &str, lvs: &[Operand]) -> fmt::Result 
fn_abi			    pub fn fn_abi(&self) -> abi::Abi 
fn_args			    pub fn fn_args(&self) -> ty::Binder<Vec<Ty<'tcx>>> 
fn_is_enclosed_by			    fn fn_is_enclosed_by(&self, mut sub_fn: ast::NodeId, sup_fn: ast::NodeId) -> bool 
fn_like			    fn fn_like(&mut self,
fn_ret			    fn fn_ret(&self, id: NodeId) -> ty::PolyFnOutput<'tcx> 
fn_ret			    pub fn fn_ret(&self) -> Binder<FnOutput<'tcx>> 
fn_sig			    pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> 
fn_sig			fn fn_sig(f: &mut fmt::Formatter,
fn_trait_kind			    pub fn fn_trait_kind(&self, id: DefId) -> Option<ty::ClosureKind> 
fold			    fn fold<T:TypeFoldable<'tcx>>(&mut self, value: &T) -> T 
fold			pub mod fold;
fold_autoref			    fn fold_autoref(&mut self, ar: &adjustment::AutoRef<'tcx>)
fold_bare_fn_ty			    fn fold_bare_fn_ty(&mut self,
fold_binder			            fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>
fold_binder			    fn fold_binder<T>(&mut self, t: &Binder<T>) -> Binder<T>
fold_closure_ty			    fn fold_closure_ty(&mut self,
fold_existential_bounds			    fn fold_existential_bounds(&mut self, s: &ty::ExistentialBounds<'tcx>)
fold_fn_sig			    fn fold_fn_sig(&mut self,
fold_mt			    fn fold_mt(&mut self, t: &ty::TypeAndMut<'tcx>) -> ty::TypeAndMut<'tcx> 
fold_output			    fn fold_output(&mut self,
fold_pat			    fn fold_pat(&mut self, pat: P<Pat>) -> P<Pat> 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			            fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_regions			    pub fn fold_regions<T,F>(&self,
fold_regions_in			fn fold_regions_in<'tcx, T, F>(tcx: &ty::ctxt<'tcx>,
fold_substs			            fn fold_substs(&mut self,
fold_substs			    fn fold_substs(&mut self,
fold_trait_ref			    fn fold_trait_ref(&mut self, t: &ty::TraitRef<'tcx>) -> ty::TraitRef<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			            fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
foo			    fn foo(&self) -> Self where Self: Sized;
foo			    fn foo(&self) -> Self 
foo			    fn foo(&self) -> Self;
foo			    fn foo(&self) 
foo			    fn foo(&self);
foo			    fn foo() -> u8 where Self: Sized;
foo			    fn foo() -> u8;
foo			    fn foo<T>(&self, on: T) where Self: Sized;
foo			    fn foo<T>(&self, on: T) 
foo			    fn foo<T>(&self, on: T);
foo			 fn foo<T>(x: T) where T: Copy {}
foo			 fn foo<T>(x: T);
foo			fn foo() -> ! 
foo			fn foo() -> 
foo			fn foo() {}
foo			fn foo(arg: &Box<SomeTrait>) { ... }
foo			fn foo(x: &'a str) { }
foo			fn foo(x: Empty) 
foo			fn foo(x: Option<String>) 
foo			fn foo(x: u8) -> u8 
foo			fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) { }
foo			fn foo<'a>(arg: &Box<SomeTrait+'a>) { ... }
foo			fn foo<'a>(x: &'a str) { }
foo			fn foo<'static>(x: &'static str) { }
foo			fn foo<F: Fn()>(x: F) { }
foo			fn foo<T: Index<u8>>(x: T){}
foo			fn foo<T: MyTransmutableType>(x: Vec<T>) 
foo			fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> 
foo			fn foo<T>(t: T) where T: Trait<AssociatedType=u32> 
foo			fn foo<T>(x: T) 
foo			fn foo<T>(x: Vec<T>) 
foo			        fn foo(_: LangItem) -> Option<DefId> { None }
for_def			    pub fn for_def(def: &ty::TypeParameterDef) -> ParamTy 
for_each_impl			    pub fn for_each_impl<F: FnMut(DefId)>(&self, tcx: &ty::ctxt<'tcx>, mut f: F)  
for_each_lib_search_path			    pub fn for_each_lib_search_path<F>(&self, mut f: F) where
for_each_region			    fn for_each_region(&self, f: &mut FnMut(ty::Region)) 
for_each_relevant_impl			    pub fn for_each_relevant_impl<F: FnMut(DefId)>(&self,
for_item			    pub fn for_item(cx: &'a ctxt<'tcx>, id: NodeId) -> ParameterEnvironment<'a, 'tcx> 
for_self			    pub fn for_self() -> ParamTy 
for_sty			    pub fn for_sty(st: &ty::TypeVariants) -> FlagComputation 
free_region			    pub mod free_region;
free_region			fn free_region(index: u32) -> FreeRegion 
free_region_map			    pub fn free_region_map(&self, id: NodeId) -> FreeRegionMap 
free_regions_first			        fn free_regions_first(a: &RegionAndOrigin, b: &RegionAndOrigin) -> Ordering 
free_regions_from_same_fn			        fn free_regions_from_same_fn(tcx: &ty::ctxt,
freely_aliasable			    pub fn freely_aliasable(&self, ctxt: &ty::ctxt<'tcx>)
fresh_bound_region			    pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> ty::Region 
fresh_bound_variable			        fn fresh_bound_variable(infcx: &InferCtxt, debruijn: ty::DebruijnIndex) -> ty::Region 
fresh_substs_for_generics			    pub fn fresh_substs_for_generics(&self,
fresh_substs_for_trait			    pub fn fresh_substs_for_trait(&self,
fresh_type_vars_for_impl			pub fn fresh_type_vars_for_impl<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
freshen			    fn freshen<F>(&mut self,
freshen			    pub fn freshen<T:TypeFoldable<'tcx>>(&self, t: T) -> T 
freshen			mod freshen;
freshener			    pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> 
from			    pub fn from(node: &'a LinkedPathNode) -> LinkedPath<'a> 
from			    pub fn from(tcx: &ty::ctxt, t: ast::IntTy) -> IntTy 
from			    pub fn from(tcx: &ty::ctxt, t: ast::UintTy) -> UintTy 
from_attr_level			    pub fn from_attr_level(level: &attr::StabilityLevel) -> Self 
from_borrow_kind			    pub fn from_borrow_kind(borrow_kind: ty::BorrowKind) -> MutabilityCategory 
from_builtin_kind			    pub fn from_builtin_kind(&self, bound: ty::BuiltinBound)
from_depth			    pub fn from_depth(&self, depth: u32) -> Region 
from_error			    fn from_error<'a>(infcx: &InferCtxt<'a, 'tcx>,
from_index			    fn from_index(i: u32) -> ty::FloatVid { ty::FloatVid { index: i } }
from_index			    fn from_index(i: u32) -> ty::IntVid { ty::IntVid { index: i } }
from_index			    fn from_index(i: u32) -> ty::RegionVid { ty::RegionVid { index: i } }
from_item			    fn from_item(item: &ast::Item) -> Target 
from_iter			    fn from_iter<T: IntoIterator<Item=Vec<&'a Pat>>>(iter: T) -> Matrix<'a> 
from_local			    fn from_local(tcx: &ty::ctxt, id: ast::NodeId) -> MutabilityCategory 
from_method_id			    fn from_method_id(tcx: &ty::ctxt, method_id: DefId)
from_mutbl			    pub fn from_mutbl(m: hir::Mutability) -> MutabilityCategory 
from_mutbl			    pub fn from_mutbl(m: hir::Mutability) -> BorrowKind 
from_mutbl			    pub fn from_mutbl(m: hir::Mutability) -> Self 
from_node			    pub fn from_node(node: Node) -> Option<Code> 
from_node			    pub fn from_node(node: Node) -> Option<FnLikeNode> 
from_node			    fn from_node(p: NodeId, node: Node<'ast>) -> MapEntry<'ast> 
from_object_ty			    fn from_object_ty(&mut self, ty: Ty<'tcx>, data: &ty::TraitTy<'tcx>) 
from_pointer_kind			    fn from_pointer_kind(base_mutbl: MutabilityCategory,
from_str			    pub fn from_str(x: &str) -> Option<Level> 
from_trait_id			    fn from_trait_id(tcx: &ty::ctxt, trait_id: DefId)
from_ty			    pub fn from_ty(t: Ty<'tcx>) -> Option<CastTy<'tcx>> 
from_ty			    pub fn from_ty(ty: Ty<'tcx>) -> LvalueTy<'tcx> 
from_u32			            pub fn from_u32(u: u32) -> Option<
from_u32			    pub fn from_u32(x: u32) -> DefIndex 
from_uint			    pub fn from_uint(u: usize) -> ParamSpace 
from_usize			    fn from_usize(v: usize) -> BuiltinBound 
front			pub mod front 
fs			    pub mod fs;
fulfill			mod fulfill;
fulfill			    pub fn fulfill(&self, dep_node: DepNode, value: Ty<'lt>) 
fulfill_ty			    pub fn fulfill_ty(&self, ty: Ty<'container>) 
full_def			    pub fn full_def(&self) -> Def 
fully_normalize			    fn fully_normalize<T>(&self, value: &T) -> Result<T,ErrorReported>
fully_normalize			pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
fully_resolve			    pub fn fully_resolve<T:TypeFoldable<'tcx>>(&self, value: &T) -> FixupResult<T> 
fully_resolve			pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a,'tcx>, value: &T) -> FixupResult<T>
fundamental_ty			fn fundamental_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool
future_incompatible			    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> 
gather_attr			pub fn gather_attr(attr: &ast::Attribute)
gather_attrs			pub fn gather_attrs(attrs: &[ast::Attribute])
generalize			    fn generalize(&self,
generalize_region			        fn generalize_region(infcx: &InferCtxt,
generics_require_inlining			fn generics_require_inlining(generics: &hir::Generics) -> bool 
generics_require_sized_self			fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,
get			    pub fn get(&self, k: &M::Key) -> Option<&M::Value> 
get			    pub fn get(&self, id: NodeId) -> Node<'ast> 
get			    fn get(&self) -> usize { let LiveNode(v) = *self; v }
get			    fn get(&self) -> usize { let Variable(v) = *self; v }
get			    pub fn get<'a>(&'a self, space: ParamSpace, index: usize) -> &'a T 
get			    pub fn get(&self, dep_node: DepNode) -> Option<Ty<'tcx>> 
get_a			    fn get_a(&self) -> A; \/\/ note that this is object safe!
get_attrs			    pub fn get_attrs(&self, did: DefId) -> Cow<'tcx, [ast::Attribute]> 
get_cfg_indices			fn get_cfg_indices<'a>(id: ast::NodeId, index: &'a NodeMap<Vec<CFGIndex>>) -> &'a [CFGIndex] 
get_dylib_search_paths			    pub fn get_dylib_search_paths(&self) -> Vec<PathBuf> 
get_enclosing_scope			    pub fn get_enclosing_scope(&self, id: NodeId) -> Option<NodeId> 
get_fn_def			fn get_fn_def<'a>(tcx: &'a ty::ctxt,
get_foreign_abi			    pub fn get_foreign_abi(&self, id: NodeId) -> abi::Abi 
get_foreign_vis			    pub fn get_foreign_vis(&self, id: NodeId) -> Visibility 
get_generated_lifetimes			    fn get_generated_lifetimes(&self) -> Vec<hir::Lifetime> 
get_if_local			    pub fn get_if_local(&self, id: DefId) -> Option<Node<'ast>> 
get_impl_method			    pub fn get_impl_method(&self,
get_level_source			    fn get_level_source(&self, lint: LintId) -> LevelSource 
get_lib_path			    pub fn get_lib_path(&self) -> PathBuf 
get_lint_groups			    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> 
get_lints			    fn get_lints(&self) -> LintArray 
get_lints			    fn get_lints(&self) -> LintArray 
get_lints			    pub fn get_lints<'t>(&'t self) -> &'t [(&'static Lint, bool)] 
get_lints			    fn get_lints(&self) -> LintArray;
get_mut_slice			    pub fn get_mut_slice<'a>(&'a mut self, space: ParamSpace) -> &'a mut [T] 
get_or_default_sysroot			pub fn get_or_default_sysroot() -> PathBuf 
get_parent			    pub fn get_parent(&self, id: NodeId) -> NodeId 
get_parent_did			    pub fn get_parent_did(&self, id: NodeId) -> DefId 
get_parent_node			    pub fn get_parent_node(&self, id: NodeId) -> NodeId 
get_path_elem			    pub fn get_path_elem(&self, id: NodeId) -> PathElem 
get_resident			fn get_resident() -> Option<usize> 
get_self			    pub fn get_self<'a>(&'a self) -> Option<&'a T> 
get_slice			    pub fn get_slice<'a>(&'a self, space: ParamSpace) -> &'a [T] 
get_struct_ctor_id			fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> 
get_tools_search_paths			    pub fn get_tools_search_paths(&self) -> Vec<PathBuf> 
get_unstable_features_setting			pub fn get_unstable_features_setting() -> UnstableFeatures 
get_vtable_index_of_object_method			pub fn get_vtable_index_of_object_method<'tcx>(tcx: &ty::ctxt<'tcx>,
give_expl_lifetime_param			    fn give_expl_lifetime_param(&self,
give_lifetime			    fn give_lifetime(&self) -> hir::Lifetime 
give_suggestion			    fn give_suggestion(&self, err: &mut DiagnosticBuilder, same_regions: &[SameRegions]) 
give_suggestion			    fn give_suggestion(&self, err: &mut DiagnosticBuilder, same_regions: &[SameRegions]);
glb			    pub fn glb(&self) -> Glb<'a, 'tcx> 
glb			    pub fn glb(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
glb			pub mod glb;
glb_regions			    pub fn glb_regions(&self, origin: SubregionOrigin<'tcx>, a: Region, b: Region) -> Region 
global_expr			    fn global_expr(&mut self, mode: Mode, expr: &hir::Expr) -> ConstQualif 
go			            pub fn go(tcx: &ty::ctxt) 
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(&self.name[..]).unwrap() }
graph_id			    fn graph_id(&self) -> dot::Id 
graphviz			pub mod graphviz;
graphviz			mod graphviz;
guarantor			    pub fn guarantor(&self) -> cmt<'tcx> 
handle			    fn handle<A, I, M, C>(self, item_fn: I, method: M, closure: C) -> A where
handle_const_fn_call			    fn handle_const_fn_call(&mut self,
handle_field_access			    fn handle_field_access(&mut self, lhs: &hir::Expr, name: ast::Name) 
handle_field_pattern_match			    fn handle_field_pattern_match(&mut self, lhs: &hir::Pat,
handle_tup_field_access			    fn handle_tup_field_access(&mut self, lhs: &hir::Expr, idx: usize) 
has_allow_dead_code_or_lang_attr			fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool 
has_attr			    pub fn has_attr(&self, did: DefId, attr: &str) -> bool 
has_bitset_for_nodeid			    fn has_bitset_for_nodeid(&self, n: ast::NodeId) -> bool 
has_closure_types			    fn has_closure_types(&self) -> bool 
has_drop_flag			    pub fn has_drop_flag(&self) -> bool 
has_dtor			    pub fn has_dtor(&self) -> bool 
has_dtor			    pub fn has_dtor(&self) -> bool 
has_erasable_regions			    fn has_erasable_regions(&self) -> bool 
has_errors			    pub fn has_errors(&self) -> bool 
has_escaping_regions			    fn has_escaping_regions(&self) -> bool 
has_infer_types			    fn has_infer_types(&self) -> bool 
has_param_types			    fn has_param_types(&self) -> bool 
has_projection_types			    fn has_projection_types(&self) -> bool 
has_region_params			    pub fn has_region_params(&self, space: subst::ParamSpace) -> bool 
has_regions_escaping_depth			    fn has_regions_escaping_depth(&self, depth: u32) -> bool 
has_self_ty			    fn has_self_ty(&self) -> bool 
has_type_flags			    fn has_type_flags(&self, flags: TypeFlags) -> bool 
has_type_params			    pub fn has_type_params(&self, space: subst::ParamSpace) -> bool 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, s: &mut H) 
hash			    fn hash<H: Hasher>(&self, s: &mut H) 
hash::Hash for ConstVal			impl hash::Hash for ConstVal 
hash::Hash for LintId			impl hash::Hash for LintId 
hash_crate_independent			    pub fn hash_crate_independent(&self, ty: Ty<'tcx>, svh: &Svh) -> u64 
helper			        fn helper<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh,
higher_ranked			mod higher_ranked;
higher_ranked_glb			    fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>) -> RelateResult<'tcx, Binder<T>>
higher_ranked_lub			    fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> RelateResult<'tcx, Binder<T>>
higher_ranked_sub			    fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> RelateResult<'tcx, Binder<T>>
higher_ranked_sub			    fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>)
hir_visit::Visitor for LateContext			impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> 
host_filesearch			    pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch 
host_triple			pub fn host_triple() -> &'static str 
i64_to_disr			    fn i64_to_disr(&self, val: i64) -> Option<Disr> 
i64_to_disr			    fn i64_to_disr(&self, val: i64) -> Option<Disr>;
id			    fn id(&self, index: IdIndex) -> DepNode 
id			    pub fn id(&self) -> NodeId 
id			    pub fn id(self) -> NodeId 
id			    pub fn id(&self) -> ast::NodeId 
id			    fn id(&self) -> ast::NodeId { self.id }
id			    fn id(&self) -> ast::NodeId;
id			    fn id(&self) -> ImplOrTraitItemId 
id			    pub fn id(&self) -> DefId 
idx			    fn idx(&self, ln: LiveNode, var: Variable) -> usize 
impl_items			    fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>
impl_items			    fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>;
impl_of_method			    pub fn impl_of_method(&self, def_id: DefId) -> Option<DefId> 
impl_or_trait_item			    fn impl_or_trait_item(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
impl_or_trait_item			    pub fn impl_or_trait_item(&self, id: DefId) -> ImplOrTraitItem<'tcx> 
impl_or_trait_obligations			    fn impl_or_trait_obligations(&mut self,
impl_polarity			    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity> { unimplemented!() }
impl_polarity			    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>;
impl_trait_ref			    fn impl_trait_ref(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
impl_trait_ref			    pub fn impl_trait_ref(&self, id: DefId) -> Option<TraitRef<'tcx>> 
impl_trait_ref_and_oblig			fn impl_trait_ref_and_oblig<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,
implementations_of_trait			    fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId> { vec![] }
implementations_of_trait			    fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId>;
implications			pub fn implications<'a,'tcx>(
implicator			    pub mod implicator;
implied_bounds			pub fn implied_bounds<'a,'tcx>(
implied_bounds_from_components			fn implied_bounds_from_components<'tcx>(sub_region: ty::Region,
impls_bound			    fn impls_bound<'a>(&'tcx self, param_env: &ParameterEnvironment<'a,'tcx>,
impossible_case			    pub fn impossible_case(&self, sp: Span, msg: &str) -> ! 
in_binder			fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,
in_ignore			    pub fn in_ignore<'graph>(&'graph self) -> raii::IgnoreTask<'graph> 
in_snapshot			    fn in_snapshot(&self) -> bool 
in_task			    pub fn in_task<'graph>(&'graph self, key: DepNode) -> raii::DepTask<'graph> 
inc_and_offset_cur_anon			    fn inc_and_offset_cur_anon(&self, n: u32) 
inc_counter			    fn inc_counter(&self) 
inc_cur_anon			    fn inc_cur_anon(&self, n: u32) 
indent			pub fn indent<R, F>(op: F) -> R where
indenter			pub fn indenter() -> Indenter 
index			    fn index(&self, k: &'k M::Key) -> &M::Value 
index			    fn index(self) -> usize 
index			    fn index<'a>(&'a self, idx: u8) -> &'a u8 { &self.a }
index			    fn index(&self) -> u32 { self.index }
index			    fn index(&self, index: BasicBlock) -> &BasicBlockData<'tcx> 
index			    pub fn index(self) -> usize 
index			    pub fn index(self, index: Operand<'tcx>) -> Lvalue<'tcx> 
index_mut			    fn index_mut(&mut self, index: BasicBlock) -> &mut BasicBlockData<'tcx> 
index_of_field_named			    pub fn index_of_field_named(&self,
indices2			    fn indices2<F>(&mut self, ln: LiveNode, succ_ln: LiveNode, mut op: F) where
infcx			    fn infcx(&self) -> &'a InferCtxt<'a,'tcx> 
infcx			    fn infcx(&self) -> &'f InferCtxt<'f, 'tcx>;
infcx			    fn infcx(&self) -> &'a InferCtxt<'a,'tcx> 
infcx			    pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> 
infer			    pub mod infer;
infer_variable_values			    fn infer_variable_values(&self,
inherent_implementations_for_type			    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId> { vec![] }
inherent_implementations_for_type			    fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>;
inherit			    pub fn inherit(&self) -> MutabilityCategory 
init_empty			    fn init_empty(&mut self, ln: LiveNode, succ_ln: LiveNode) 
init_from_succ			    fn init_from_succ(&mut self, ln: LiveNode, succ_ln: LiveNode) 
initial_value			    fn initial_value(&self) -> bool;
inline_const_fn_from_external_crate			fn inline_const_fn_from_external_crate(tcx: &ty::ctxt, def_id: DefId)
inner			        mod inner 
input			    pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> 
input_types			    pub fn input_types(&self) -> &[Ty<'tcx>] 
input_types			    pub fn input_types(&self) -> &[Ty<'tcx>] 
inputs			    pub fn inputs(&self) -> ty::Binder<Vec<Ty<'tcx>>> 
insert			    pub fn insert(&mut self, k: M::Key, v: M::Value) -> Option<M::Value> 
insert			    fn insert(&mut self, id: NodeId, node: Node<'ast>) 
insert			    fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool 
insert_candidate_cache			    fn insert_candidate_cache(&mut self,
insert_def			    fn insert_def(&mut self, id: NodeId, node: Node<'ast>, data: DefPathData) -> DefIndex 
insert_def_id			    fn insert_def_id(&mut self, def_id: DefId) 
insert_entry			    fn insert_entry(&mut self, id: NodeId, entry: MapEntry<'ast>) 
insert_evaluation_cache			    fn insert_evaluation_cache(&mut self,
insert_lifetime			    fn insert_lifetime(&mut self,
instantiate			    pub fn instantiate(&self,
instantiate			    pub fn instantiate(&self, tcx: &ctxt<'tcx>, substs: &Substs<'tcx>)
instantiate_and_push			    pub fn instantiate_and_push(
instantiate_supertrait			    pub fn instantiate_supertrait(&self,
int_unification_error			fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::IntVarValue))
intercrate			    pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>)
interior			        fn interior<'tcx, N: ast_node>(elt: &N,
interior_param			    pub fn interior_param(&self) -> bool 
interior_unsafe			    pub fn interior_unsafe(&self) -> bool 
intern_adt_def			    pub fn intern_adt_def(&self,
intern_code_extent			    pub fn intern_code_extent(&self,
intern_node			    pub fn intern_node(&self,
intern_stability			    pub fn intern_stability(&self, stab: attr::Stability) -> &'tcx attr::Stability 
intern_trait_def			    pub fn intern_trait_def(&self, def: ty::TraitDef<'tcx>)
intern_ty			    fn intern_ty(type_arena: &'tcx TypedArena<TyS<'tcx>>,
intersects			    pub fn intersects(&self, tc: TypeContents) -> bool 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Self::IntoIter 
into_option			    fn into_option(self) -> Option<CodeExtent> 
into_vec			    pub fn into_vec(self) -> Vec<T> 
intravisit::Visitor for Formals			        impl<'a, 'v> intravisit::Visitor<'v> for Formals<'a> 
intravisit::Visitor for RvalueContext			impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> 
intrinsicck			    pub mod intrinsicck;
invalid_node			fn invalid_node() -> LiveNode { LiveNode(usize::MAX) }
invalid_users			fn invalid_users() -> Users 
is_adt_dtorck			    pub fn is_adt_dtorck(&self, adt: ty::AdtDef<'tcx>) -> bool 
is_allocator			    fn is_allocator(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }
is_allocator			    fn is_allocator(&self, cnum: ast::CrateNum) -> bool;
is_argument			    pub fn is_argument(&self, id: NodeId) -> bool 
is_bare_fn			    pub fn is_bare_fn(&self) -> bool 
is_bare_fn_item			    pub fn is_bare_fn_item(&self) -> bool 
is_binding_pat			    fn is_binding_pat(pat: &hir::Pat) -> bool 
is_bool			    pub fn is_bool(&self) -> bool { self.sty == TyBool }
is_borrowed_ty			    fn is_borrowed_ty(ty: &hir::Ty) -> bool 
is_bound			    pub fn is_bound(&self) -> bool 
is_char			    pub fn is_char(&self) -> bool 
is_compatible_with_codegen_units_and_single_output_file			    fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool 
is_const_fn			    fn is_const_fn(&self, did: DefId) -> bool { unimplemented!() }
is_const_fn			    fn is_const_fn(&self, did: DefId) -> bool;
is_default_impl			    fn is_default_impl(&self, impl_did: DefId) -> bool { unimplemented!() }
is_default_impl			    fn is_default_impl(&self, impl_did: DefId) -> bool;
is_defaulted_trait			    fn is_defaulted_trait(&self, did: DefId) -> bool { unimplemented!() }
is_defaulted_trait			    fn is_defaulted_trait(&self, did: DefId) -> bool;
is_dtorck			    pub fn is_dtorck(&'tcx self, tcx: &ctxt<'tcx>) -> bool 
is_duplicate			    pub fn is_duplicate(&self, key: &ty::Predicate<'tcx>) -> bool 
is_duplicate_or_add			    fn is_duplicate_or_add(&mut self, key: &ty::Predicate<'tcx>) -> bool 
is_duplicate_or_add			    fn is_duplicate_or_add(&mut self,
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self, _cx: &ty::ctxt) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty_in			    pub fn is_empty_in(&self, space: ParamSpace) -> bool 
is_erased			    pub fn is_erased(&self) -> bool 
is_explicitly_linked			    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }
is_explicitly_linked			    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool;
is_exported			    pub fn is_exported(&self, id: Id) -> bool 
is_extern_fn			    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool { unimplemented!() }
is_extern_fn			    fn is_extern_fn(&self, tcx: &ty::ctxt<'tcx>, did: DefId) -> bool;
is_floating_point			    pub fn is_floating_point(&self) -> bool 
is_fn			    pub fn is_fn(&self) -> bool 
is_fn_like			    fn is_fn_like(&self) -> bool 
is_fp			    pub fn is_fp(&self) -> bool 
is_fresh			    pub fn is_fresh(&self) -> bool 
is_fundamental			    pub fn is_fundamental(&self) -> bool 
is_global			    fn is_global(&self) -> bool 
is_identity			    pub fn is_identity(&self) -> bool 
is_immutable			    pub fn is_immutable(&self) -> bool 
is_impl			    fn is_impl(&self, did: DefId) -> bool { unimplemented!() }
is_impl			    fn is_impl(&self, did: DefId) -> bool;
is_impl			    pub fn is_impl(&self, id: DefId) -> bool 
is_integral			    pub fn is_integral(&self) -> bool 
is_internal			fn is_internal(tcx: &ty::ctxt, span: Span) -> bool 
is_knowable			    fn is_knowable<'o>(&mut self,
is_local			    pub fn is_local(&self) -> bool 
is_machine			    pub fn is_machine(&self) -> bool 
is_met			    fn is_met<'tcx>(&self,
is_method_call			    pub fn is_method_call(&self, id: ast::NodeId) -> bool 
is_method_call			    pub fn is_method_call(&self, expr_id: NodeId) -> bool 
is_mutable			    pub fn is_mutable(&self) -> bool 
is_nil			    pub fn is_nil(&self) -> bool 
is_noop			    pub fn is_noop(&self) -> bool 
is_noop			    pub fn is_noop(&self) -> bool 
is_numeric			    pub fn is_numeric(&self) -> bool 
is_object_safe			pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,
is_overloaded_autoderef			    pub fn is_overloaded_autoderef(&self, expr_id: NodeId, autoderefs: u32) -> bool 
is_param			    pub fn is_param(&self, space: subst::ParamSpace, index: u32) -> bool 
is_payloadfree			    pub fn is_payloadfree(&self) -> bool 
is_phantom_data			    pub fn is_phantom_data(&self) -> bool 
is_phantom_data			    pub fn is_phantom_data(&self) -> bool 
is_present			    pub fn is_present(&self) -> bool 
is_primitive			    pub fn is_primitive(&self) -> bool 
is_public			    pub fn is_public(&self, id: Id) -> bool 
is_reachable			    pub fn is_reachable(&self, id: Id) -> bool 
is_refutable			fn is_refutable<A, F>(cx: &MatchCheckCtxt, pat: &Pat, refutable: F) -> Option<A> where
is_region_ptr			    pub fn is_region_ptr(&self) -> bool 
is_representable			    pub fn is_representable(&'tcx self, cx: &ty::ctxt<'tcx>, sp: Span) -> Representability 
is_rlib			                    fn is_rlib(p: &Path) -> bool 
is_scalar			    pub fn is_scalar(&self) -> bool 
is_self			    pub fn is_self(&self) -> bool 
is_signed			    pub fn is_signed(&self) -> bool 
is_simd			    pub fn is_simd(&self) -> bool 
is_simd			    pub fn is_simd(&self) -> bool 
is_sized			    pub fn is_sized<'a>(&'tcx self, param_env: &ParameterEnvironment<'a,'tcx>,
is_sized_uncached			    fn is_sized_uncached<'a>(&'tcx self, param_env: &ParameterEnvironment<'a,'tcx>,
is_slice			    fn is_slice(&self) -> bool 
is_stable			    pub fn is_stable(&self) -> bool 
is_staged_api			    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }
is_staged_api			    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool;
is_staged_api			fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool 
is_static			    fn is_static(&self, did: DefId) -> bool { unimplemented!() }
is_static			    fn is_static(&self, did: DefId) -> bool;
is_static			    pub fn is_static(&self, super_region: ty::FreeRegion) -> bool 
is_static_method			    fn is_static_method(&self, did: DefId) -> bool { unimplemented!() }
is_static_method			    fn is_static_method(&self, did: DefId) -> bool;
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }
is_statically_included_foreign_item			    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;
is_structural			    pub fn is_structural(&self) -> bool 
is_subregion_of			    pub fn is_subregion_of(&self,
is_subscope_of			    pub fn is_subscope_of(&self,
is_trait			    pub fn is_trait(&self) -> bool 
is_tuple_struct			    pub fn is_tuple_struct(&self) -> bool 
is_ty_var			    pub fn is_ty_var(&self) -> bool 
is_type_parameter			fn is_type_parameter<'tcx>(ty: Ty<'tcx>) -> bool 
is_type_structurally_recursive			        fn is_type_structurally_recursive<'tcx>(cx: &ty::ctxt<'tcx>,
is_typedef			    fn is_typedef(&self, did: DefId) -> bool { unimplemented!() }
is_typedef			    fn is_typedef(&self, did: DefId) -> bool;
is_uint			    pub fn is_uint(&self) -> bool 
is_unique			    pub fn is_unique(&self) -> bool 
is_univariant			    pub fn is_univariant(&self) -> bool 
is_unsafe_ptr			    pub fn is_unsafe_ptr(&self) -> bool 
is_useful			fn is_useful(cx: &MatchCheckCtxt,
is_useful_specialized			fn is_useful_specialized(cx: &MatchCheckCtxt, &Matrix(ref m): &Matrix,
is_valid			    fn is_valid(&self) -> bool 
is_var_in_set			fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region) -> bool 
is_vtable_safe_method			pub fn is_vtable_safe_method<'tcx>(tcx: &ty::ctxt<'tcx>,
item_attrs			    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { unimplemented!() }
item_attrs			    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;
item_children			    fn item_children(&self, did: DefId) -> Vec<ChildItem> { unimplemented!() }
item_children			    fn item_children(&self, did: DefId) -> Vec<ChildItem>;
item_extent			    pub fn item_extent(&self, n: ast::NodeId) -> CodeExtent 
item_is_mod			            fn item_is_mod(item: &Item) -> bool 
item_might_be_inlined			fn item_might_be_inlined(item: &hir::Item) -> bool 
item_name			    fn item_name(&self, def: DefId) -> ast::Name { unimplemented!() }
item_name			    fn item_name(&self, def: DefId) -> ast::Name;
item_name			    pub fn item_name(index: usize) -> &'static str 
item_name			    pub fn item_name(&self) -> Name 
item_name			    pub fn item_name(&self, id: DefId) -> ast::Name 
item_path			    fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }
item_path			    fn item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;
item_path_str			    pub fn item_path_str(&self, id: DefId) -> String 
item_path_str			fn item_path_str(def_id: DefId) -> String 
item_predicates			    fn item_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
item_scope_tag			        fn item_scope_tag(item: &hir::Item) -> &'static str 
item_super_predicates			    fn item_super_predicates(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
item_symbol			    fn item_symbol(&self, def: DefId) -> String { unimplemented!() }
item_symbol			    fn item_symbol(&self, def: DefId) -> String;
item_type			    fn item_type(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
item_variances			    fn item_variances(&self, def: DefId) -> ty::ItemVariances { unimplemented!() }
item_variances			    fn item_variances(&self, def: DefId) -> ty::ItemVariances;
item_variances			    pub fn item_variances(&self, item_id: DefId) -> Rc<ItemVariances> 
items			    pub fn items<'a>(&'a self) -> Enumerate<slice::Iter<'a, Option<DefId>>> 
iter			    pub fn iter<'a>(&'a self) -> Iter<'a,T> 
iter			    fn iter(&'o self) -> TraitObligationStackList<'o,'tcx> 
iter			    pub fn iter(&self) -> enum_set::Iter<BuiltinBound> 
iter			    pub fn iter(&self, kind: PathKind) -> Iter 
iter_enumerated			    pub fn iter_enumerated<'a>(&'a self) -> EnumeratedItems<'a,T> 
iterate_until_fixed_point			    fn iterate_until_fixed_point<F>(&self, tag: &str, mut body: F)
ivar			mod ivar;
join			    fn join(&self, a: usize, b: usize) -> usize { a & !b }
join			    fn join(&self, a: usize, b: usize) -> usize { a | b }
join			    fn join(&self, succ: usize, pred: usize) -> usize;
kind			    pub fn kind(self) -> FnKind<'a> 
kind			    pub fn kind(&self) -> VariantKind 
krate			    pub fn krate(&self) -> &'ast Crate 
krate			    pub fn krate<'ast>(&'ast self) -> &'ast Crate 
krate			pub fn krate(sess: &Session, krate: &hir::Crate, def_map: &DefMap) -> NamedRegionMap 
lang_items			    pub mod lang_items;
lang_items			    fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>
lang_items			    fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>;
lattice			pub mod lattice;
leak_check			pub fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
leak_check			    pub fn leak_check(&self,
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self, space: ParamSpace) -> usize 
level_src			    fn level_src(&self, lint: &'static Lint) -> Option<LevelSource> 
level_stack			    fn level_stack(&mut self) -> &mut Vec<(LintId, LevelSource)> 
level_stack			    fn level_stack(&mut self) -> &mut Vec<(LintId, LevelSource)>;
lib			pub mod lib 
liberate_late_bound_regions			    pub fn liberate_late_bound_regions<T>(&self,
lifetimes_in_scope			fn lifetimes_in_scope(tcx: &ty::ctxt,
lift			    pub fn lift<T: ?Sized + Lift<'tcx>>(&self, value: &T) -> Option<T::Lifted> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<&'tcx Substs<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Self::Lifted>;
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Ty<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, _: &ty::ctxt<'tcx>) -> Option<ty::Region> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<Self::Lifted> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<TraitRef<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<ty::EquatePredicate<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<ty::ProjectionPredicate<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ty::ctxt<'tcx>) -> Option<ty::TraitPredicate<'tcx>> 
limits			    fn limits(&self, space: ParamSpace) -> (usize, usize) 
link_name			pub fn link_name(attrs: &[ast::Attribute]) -> Option<InternedString> 
lint			pub mod lint;
lint			    fn lint(&self, lint: &'static Lint, msg: &str) 
lints			    fn lints(&self) -> &LintStore 
lints			    fn lints(&self) -> &LintStore;
list			    fn list(&'o self) -> TraitObligationStackList<'o,'tcx> 
lit_to_const			fn lit_to_const(lit: &ast::Lit, ty_hint: Option<Ty>) -> ConstVal 
live_node			    fn live_node(&self, node_id: NodeId, span: Span) -> LiveNode 
live_node_kind_to_string			fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &ty::ctxt) -> String 
live_on_entry			    fn live_on_entry(&self, ln: LiveNode, var: Variable)
live_on_exit			    fn live_on_exit(&self, ln: LiveNode, var: Variable)
liveness			    pub mod liveness;
ln_str			    fn ln_str(&self, ln: LiveNode) -> String 
lnk			    fn lnk(&self, ln: LiveNode) -> LiveNodeKind 
local			    pub fn local(index: DefIndex) -> DefId 
local_def_id			    pub fn local_def_id(&self, node: NodeId) -> DefId 
local_var_name_str			    pub fn local_var_name_str(&self, id: NodeId) -> InternedString 
lookup			    fn lookup(&self,
lookup			fn lookup(values: &Vec<VarValue>, rid: ty::RegionVid) -> ty::Region 
lookup_adt_def			    pub fn lookup_adt_def(&self, did: DefId) -> AdtDef<'tcx> 
lookup_adt_def_master			    pub fn lookup_adt_def_master(&self, did: DefId) -> AdtDefMaster<'tcx> 
lookup_and_emit			    fn lookup_and_emit(&self, lint: &'static Lint, span: Option<Span>, msg: &str) 
lookup_and_handle_definition			    fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) 
lookup_and_handle_method			    fn lookup_and_handle_method(&mut self, id: ast::NodeId) 
lookup_code_extent			    pub fn lookup_code_extent(&self, e: CodeExtentData) -> CodeExtent 
lookup_const_by_id			pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,
lookup_const_fn_by_id			pub fn lookup_const_fn_by_id<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: DefId)
lookup_deprecation			pub fn lookup_deprecation<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Deprecation> 
lookup_deprecation_uncached			fn lookup_deprecation_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<Deprecation> 
lookup_item_type			    pub fn lookup_item_type(&self, did: DefId) -> TypeScheme<'tcx> 
lookup_locally_or_in_crate_store			fn lookup_locally_or_in_crate_store<M, F>(descr: &str,
lookup_packed			    pub fn lookup_packed(&self, did: DefId) -> bool 
lookup_predicates			    pub fn lookup_predicates(&self, did: DefId) -> GenericPredicates<'tcx> 
lookup_repr_hints			    pub fn lookup_repr_hints(&self, did: DefId) -> Rc<Vec<attr::ReprAttr>> 
lookup_simd			    pub fn lookup_simd(&self, did: DefId) -> bool 
lookup_stability			pub fn lookup_stability<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> 
lookup_stability_uncached			fn lookup_stability_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> 
lookup_super_predicates			    pub fn lookup_super_predicates(&self, did: DefId) -> GenericPredicates<'tcx> 
lookup_trait_def			    pub fn lookup_trait_def(&self, did: DefId) -> &'tcx TraitDef<'tcx> 
lookup_variant_by_id			fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,
loop_query			pub fn loop_query<P>(b: &hir::Block, p: P) -> bool where P: FnMut(&hir::Expr_) -> bool 
lto			    pub fn lto(&self) -> bool 
lub			    fn lub(&mut self, mode: MatchMode) 
lub			fn lub() 
lub			    pub fn lub(&self) -> Lub<'a, 'tcx> 
lub			    pub fn lub(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
lub			pub mod lub;
lub_concrete_regions			    fn lub_concrete_regions(&self, free_regions: &FreeRegionMap, a: Region, b: Region) -> Region 
lub_free_regions			    pub fn lub_free_regions(&self, fr_a: FreeRegion, fr_b: FreeRegion) -> Region 
lub_regions			    pub fn lub_regions(&self, origin: SubregionOrigin<'tcx>, a: Region, b: Region) -> Region 
lvalue_ty			    pub fn lvalue_ty(&self,
macros			mod macros;
main			pub fn main(swap_in: Receiver<Vec<DepMessage>>,
main			fn main() 
make_def_path			pub fn make_def_path<FN>(start_index: DefIndex, mut get_key: FN) -> DefPath
make_eqregion			    pub fn make_eqregion(&self, origin: SubregionOrigin<'tcx>, sub: Region, sup: Region) 
make_node			    fn make_node(&mut self, id: DepNode) -> IdIndex 
make_subregion			    pub fn make_subregion(&self, origin: SubregionOrigin<'tcx>, sub: Region, sup: Region) 
make_substs_for_receiver_types			    pub fn make_substs_for_receiver_types(&self,
make_target_lib_path			fn make_target_lib_path(sysroot: &Path,
map			    pub mod map;
map			    pub fn map<F>(self, op: F) -> RegionSubsts where
map			    pub fn map<U, P>(&self, pred: P) -> VecPerParamSpace<U> where P: FnMut(&T) -> U 
map			    pub fn map<M, F>(self, f: F) -> Vtable<'tcx, M> where F: FnMut(N) -> M 
map_bound			    pub fn map_bound<F,U>(self, f: F) -> Binder<U>
map_bound_ref			    pub fn map_bound_ref<F,U>(&self, f: F) -> Binder<U>
map_crate			pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> 
map_decoded_item			pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,
map_enumerated			    pub fn map_enumerated<U, P>(&self, pred: P) -> VecPerParamSpace<U> where
maps			pub mod maps;
mark_live_symbols			    fn mark_live_symbols(&mut self) 
match_			    fn match_(&mut self, id: ast::NodeId, discr: &hir::Expr,
match_fresh_trait_refs			    fn match_fresh_trait_refs(&self,
match_impl			    fn match_impl(&mut self,
match_mode			    fn match_mode(&self) -> MatchMode 
match_poly_trait_ref			    fn match_poly_trait_ref(&self,
match_projection			    fn match_projection(&mut self,
match_projection_obligation_against_bounds_from_trait			    fn match_projection_obligation_against_bounds_from_trait(
match_where_clause_trait_ref			    fn match_where_clause_trait_ref(&mut self,
matched_pat			    fn matched_pat(&mut self,
matched_pat			    fn matched_pat(&mut self, _: &Pat, _: cmt, _: euv::MatchMode) {}
matched_pat			    fn matched_pat(&mut self,
matched_pat			    fn matched_pat(&mut self,
matches_names			    fn matches_names(&self, parent_of_n: NodeId, name: Name) -> bool 
may_apply			    fn may_apply(&self) -> bool 
may_apply			    pub fn may_apply(&self) -> bool 
maybe_do_stability_check			fn maybe_do_stability_check(tcx: &ty::ctxt, id: DefId, span: Span,
maybe_get_item_ast			    fn maybe_get_item_ast(&'tcx self, tcx: &ty::ctxt<'tcx>, def: DefId)
maybe_get_item_mir			    fn maybe_get_item_mir(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
maybe_print_constraints_for			pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a, 'tcx>,
maybe_report_ambiguity			pub fn maybe_report_ambiguity<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
maybe_walk			    pub fn maybe_walk<F>(&'tcx self, mut f: F)
mem_categorization			    pub mod mem_categorization;
memoize			    fn memoize<OP>(&self, key: M::Key, op: OP) -> M::Value
memoize			    fn memoize<OP>(&self, key: K, op: OP) -> V
memoize			    fn memoize<OP>(&self, key: Self::Key, op: OP) -> Self::Value
merge_from_succ			    fn merge_from_succ(&mut self,
meta_stats			    pub fn meta_stats(&self) -> bool { self.opts.debugging_opts.meta_stats }
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8] { unimplemented!() }
metadata_encoding_version			    fn metadata_encoding_version(&self) -> &[u8];
metadata_filename			    fn metadata_filename(&self) -> &str { unimplemented!() }
metadata_filename			    fn metadata_filename(&self) -> &str;
metadata_section_name			    fn metadata_section_name(&self, target: &Target) -> &str { unimplemented!() }
metadata_section_name			    fn metadata_section_name(&self, target: &Target) -> &str;
method_arg_names			    fn method_arg_names(&self, did: DefId) -> Vec<String> { unimplemented!() }
method_arg_names			    fn method_arg_names(&self, did: DefId) -> Vec<String>;
method_might_be_inlined			fn method_might_be_inlined(tcx: &ty::ctxt, sig: &hir::MethodSig,
method_to_trait			    pub fn method_to_trait(self) -> Substs<'tcx> 
middle			pub mod middle 
mir			pub mod mir 
misc			    pub fn misc(span: Span, body_id: ast::NodeId) -> ObligationCause<'tcx> 
misc			    pub fn misc(span: Span, body_id: ast::NodeId, trait_ref: O) -> Obligation<'tcx, O> 
missing_constructor			fn missing_constructor(cx: &MatchCheckCtxt, &Matrix(ref rows): &Matrix,
missing_lang_items			    fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>
missing_lang_items			    fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>;
mk_array			    pub fn mk_array(&self, ty: Ty<'tcx>, n: usize) -> Ty<'tcx> 
mk_bare_fn			    pub fn mk_bare_fn(&self, bare_fn: BareFnTy<'tcx>) -> &'tcx BareFnTy<'tcx> 
mk_bool			    pub fn mk_bool(&self) -> Ty<'tcx> 
mk_box			    pub fn mk_box(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_closure			    pub fn mk_closure(&self,
mk_closure_from_closure_substs			    pub fn mk_closure_from_closure_substs(&self,
mk_ctor_fn			    pub fn mk_ctor_fn(&self,
mk_enum			    pub fn mk_enum(&self, def: AdtDef<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> 
mk_eq_trait_refs			pub fn mk_eq_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_eqty			pub fn mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_float_var			    pub fn mk_float_var(&self, v: FloatVid) -> Ty<'tcx> 
mk_fn			    pub fn mk_fn(&self,
mk_imm_ptr			    pub fn mk_imm_ptr(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_imm_ref			    pub fn mk_imm_ref(&self, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_infer			    pub fn mk_infer(&self, it: InferTy) -> Ty<'tcx> 
mk_int_var			    pub fn mk_int_var(&self, v: IntVid) -> Ty<'tcx> 
mk_mach_float			    pub fn mk_mach_float(&self, tm: ast::FloatTy) -> Ty<'tcx> 
mk_mach_int			    pub fn mk_mach_int(&self, tm: ast::IntTy) -> Ty<'tcx> 
mk_mach_uint			    pub fn mk_mach_uint(&self, tm: ast::UintTy) -> Ty<'tcx> 
mk_mut_ptr			    pub fn mk_mut_ptr(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_mut_ref			    pub fn mk_mut_ref(&self, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_nil			    pub fn mk_nil(&self) -> Ty<'tcx> 
mk_nil_ptr			    pub fn mk_nil_ptr(&self) -> Ty<'tcx> 
mk_param			    pub fn mk_param(&self,
mk_param_from_def			    pub fn mk_param_from_def(&self, def: &ty::TypeParameterDef) -> Ty<'tcx> 
mk_projection			    pub fn mk_projection(&self,
mk_ptr			    pub fn mk_ptr(&self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> 
mk_ref			    pub fn mk_ref(&self, r: &'tcx Region, tm: TypeAndMut<'tcx>) -> Ty<'tcx> 
mk_region			    pub fn mk_region(&self, region: Region) -> &'tcx Region 
mk_self_type			    pub fn mk_self_type(&self) -> Ty<'tcx> 
mk_slice			    pub fn mk_slice(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_static_str			    pub fn mk_static_str(&self) -> Ty<'tcx> 
mk_str			    pub fn mk_str(&self) -> Ty<'tcx> 
mk_struct			    pub fn mk_struct(&self, def: AdtDef<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> 
mk_sub_poly_trait_refs			pub fn mk_sub_poly_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_subr			pub fn mk_subr<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_substs			    pub fn mk_substs(&self, substs: Substs<'tcx>) -> &'tcx Substs<'tcx> 
mk_subty			pub fn mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_trait			    pub fn mk_trait(&self,
mk_tup			    pub fn mk_tup(&self, ts: Vec<Ty<'tcx>>) -> Ty<'tcx> 
mk_ty			    pub fn mk_ty(&self, st: TypeVariants<'tcx>) -> Ty<'tcx> 
mk_var			    pub fn mk_var(&self, v: TyVid) -> Ty<'tcx> 
moves_by_default			    pub fn moves_by_default<'a>(&'tcx self, param_env: &ParameterEnvironment<'a,'tcx>,
msg			    fn msg(&self) -> &'static str 
multi			    pub fn   multi(a: S, b: S, c: S, d: S) -> R { stable(getopts::optmulti(a, b, c, d)) }
multi_u			    pub fn   multi_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optmulti(a, b, c, d)) }
must_hold			    pub fn must_hold(&self) -> bool 
mut_bits_to_string			fn mut_bits_to_string(words: &mut [usize]) -> String 
mut_lints			    fn mut_lints(&mut self) -> &mut LintStore 
mut_lints			    fn mut_lints(&mut self) -> &mut LintStore;
mut_regions			    pub fn mut_regions<'a>(&'a mut self) -> &'a mut VecPerParamSpace<ty::Region> 
mutate			    fn mutate(&mut self,
mutate			    fn mutate(&mut self, _: NodeId, span: Span, _: cmt, mode: MutateMode) 
mutate			    fn mutate(&mut self,
mutate			    fn mutate(&mut self,
mutate_expr			    fn mutate_expr(&mut self,
name			    fn name(&self) -> Name;
name			    pub fn name(&self) -> Name 
name			    pub fn name(&self) -> Name 
name_lower			    pub fn name_lower(&self) -> String 
name_to_dummy_lifetime			fn name_to_dummy_lifetime(name: ast::Name) -> hir::Lifetime 
named_element_ty			    pub fn named_element_ty(&self,
native_libraries			    fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>
native_libraries			    fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>;
nearest_common_ancestor			    pub fn nearest_common_ancestor(&self,
necessary_variants			pub fn necessary_variants(dm: &DefMap, pat: &hir::Pat) -> Vec<DefId> 
need_type_info			fn need_type_info<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
needs_drop			    pub fn needs_drop(&self, _: &ty::ctxt) -> bool 
needs_infer			    fn needs_infer(&self) -> bool 
needs_infer			    pub fn needs_infer(&self) -> bool 
needs_subst			    fn needs_subst(&self) -> bool 
nested_obligations			    pub fn nested_obligations(self) -> Vec<N> 
new			    pub fn new(graph: DepGraph) -> DepTrackingMap<M> 
new			    fn new(v: usize) -> IdIndex 
new			    pub fn new() -> DepGraphEdges 
new			    pub fn new(enabled: bool) -> DepGraph 
new			    pub fn new(nodes: &[DepNode], edges: &[(DepNode, DepNode)]) -> DepGraphQuery 
new			    pub fn new(data: &'graph DepGraphThreadData) -> IgnoreTask<'graph> 
new			    pub fn new(data: &'graph DepGraphThreadData, key: DepNode) -> DepTask<'graph> 
new			    pub fn new(enabled: bool) -> DepGraphThreadData 
new			    fn new(d: &'a FnDecl, b: &'a Block, id: NodeId, s: Span) -> ClosureParts<'a> 
new			    pub fn new() -> Definitions 
new			    pub fn new(krate: Crate) -> Forest 
new			    fn new(sess: &'a Session,
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new() -> LintStore 
new			    pub fn new(tcx: &ty::ctxt,
new			    pub fn new<'b>(tcx: &'b ty::ctxt<'tcx>,
new			    fn new(v: &'a CheckCrateVisitor<'a, 'ast>, span: &'a Span)
new			    pub fn new(tcx: &'a ty::ctxt<'tcx>,
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new(base_def: Def,
new			    pub fn new(x: usize) -> DefIndex 
new			    fn new(root: RootUnsafeContext) -> UnsafeContext 
new			    pub fn new(delegate: &'d mut (Delegate<'tcx>+'d),
new			    pub fn new() -> FreeRegionMap 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Bivariate<'a, 'tcx> 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Equate<'a, 'tcx> 
new			            fn new(sub_fr: ty::FreeRegion,
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> TypeFreshener<'a, 'tcx> 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Glb<'a, 'tcx> 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Lub<'a, 'tcx> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> RegionVarBindings<'a, 'tcx> 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> OpportunisticTypeResolver<'a, 'tcx> 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self 
new			    pub fn new(f: CombineFields<'a, 'tcx>) -> Sub<'a, 'tcx> 
new			    pub fn new() -> TypeVariableTable<'tcx> 
new			    pub fn new() -> LanguageItems 
new			    pub fn new(session: &'a Session, ast_map: &'a hir_map::Map<'tcx>)
new			    fn new(ir: &'a mut IrMaps<'a, 'tcx>, specials: Specials) -> Liveness<'a, 'tcx> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>) -> IrMaps<'a, 'tcx> 
new			    pub fn new(typer: &'t infer::InferCtxt<'a, 'tcx>) -> MemCategorizationContext<'t, 'a, 'tcx> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>) -> ReachableContext<'a, 'tcx> 
new			    pub fn new(krate: &Crate) -> Index<'tcx> 
new			    fn new(v: &'a VecPerParamSpace<T>) -> EnumeratedItems<'a,T> 
new			    pub fn new(t: Vec<T>, s: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> 
new			    pub fn new(t: VecPerParamSpace<Ty<'tcx>>,
new			    pub fn new() -> FulfilledPredicates<'tcx> 
new			    pub fn new(errors_will_be_reported: bool) -> FulfillmentContext<'tcx> 
new			    fn new(obligation: PredicateObligation<'tcx>,
new			    pub fn new(cause: ObligationCause<'tcx>,
new			    pub fn new(span: Span,
new			    fn new(selcx: &'a mut SelectionContext<'b,'tcx>,
new			    pub fn new() -> EvaluationCache<'tcx> 
new			    pub fn new() -> SelectionCache<'tcx> 
new			    pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>)
new			    fn new(base: I) -> FilterToTraits<I> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>) -> PredicateSet<'a,'tcx> 
new			    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> Match<'a, 'tcx> 
new			    fn new(arena: &'tcx TypedArena<TyS<'tcx>>,
new			    pub fn new() -> CtxtArenas<'tcx> 
new			    fn new() -> FlagComputation 
new			    fn new<F>(tcx: &'a ty::ctxt<'tcx>, fld_r: &'a mut F) -> RegionReplacer<'a, 'tcx>
new			    pub fn new<F>(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new() -> Self 
new			    fn new(tcx: &ctxt<'tcx>,
new			    pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>) -> TraitRef<'tcx> 
new			    pub fn new(did: DefId,
new			    pub fn new(name: Name,
new			    pub fn new(depth: u32) -> DebruijnIndex 
new			    pub fn new(region_bound: ty::Region,
new			    pub fn new(space: subst::ParamSpace,
new			    pub fn new(unsafety: hir::Unsafety,
new			    pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> 
new			    pub fn new(index: usize) -> BasicBlock 
new			    pub fn new(terminator: Option<Terminator<'tcx>>) -> BasicBlockData<'tcx> 
new			    pub fn new(value: usize) -> Field 
new			    pub fn new(sysroot: &'a Path,
new			    pub fn new() -> SearchPaths 
new_bound			    pub fn new_bound(&self, debruijn: ty::DebruijnIndex) -> Region 
new_code_extent			    fn new_code_extent(&mut self, child_scope: CodeExtentData) -> CodeExtent 
new_def_id			    fn new_def_id(&self, def_id: DefId) -> DefId 
new_id			    fn new_id(&mut self, id: NodeId) -> NodeId 
new_id			    fn new_id(&self, id: NodeId) -> NodeId 
new_infer_ctxt			pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,
new_internal			    fn new_internal(content: Vec<T>, type_limit: usize, self_limit: usize)
new_node_extent			    fn new_node_extent(&mut self, child_scope: ast::NodeId) -> CodeExtent 
new_node_extent_with_dtor			    fn new_node_extent_with_dtor(&mut self, id: ast::NodeId) -> CodeExtent 
new_region_var			    pub fn new_region_var(&self, origin: RegionVariableOrigin) -> RegionVid 
new_skolemized			    pub fn new_skolemized(&self, br: ty::BoundRegion, snapshot: &RegionSnapshot) -> Region 
new_span			    fn new_span(&mut self, span: Span) -> Span 
new_span			    fn new_span(&self, span: Span) -> Span 
new_trait			    pub fn new_trait(t: Vec<Ty<'tcx>>,
new_type			    pub fn new_type(t: Vec<Ty<'tcx>>,
new_var			    pub fn new_var(&mut self,
next			    fn next(&mut self) -> Option<NodeId> 
next			    fn next(&mut self) -> Option<PathElem> 
next			    fn next(&mut self) -> Option<(ParamSpace, usize, &'a T)> 
next			    fn next(&mut self) -> Option<&'o TraitObligationStack<'o,'tcx>> 
next			    fn next(&mut self) -> Option<DefId> 
next			    fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> 
next			    fn next(&mut self) -> Option<ty::Predicate<'tcx>> 
next			    fn next(&mut self) -> Option<Ty<'tcx>> 
next			    fn next(&mut self) -> Option<(&'a Path, PathKind)> 
next_diverging_ty_var			    pub fn next_diverging_ty_var(&self) -> Ty<'tcx> 
next_float_var_id			    pub fn next_float_var_id(&self) -> FloatVid 
next_int_var_id			    pub fn next_int_var_id(&self) -> IntVid 
next_node_id			    fn next_node_id(&self) -> NodeId 
next_region_var			    pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region 
next_ty_var			    pub fn next_ty_var(&self) -> Ty<'tcx> 
next_ty_var_id			    pub fn next_ty_var_id(&self, diverging: bool) -> TyVid 
next_ty_var_with_default			    pub fn next_ty_var_with_default(&self,
next_ty_vars			    pub fn next_ty_vars(&self, n: usize) -> Vec<Ty<'tcx>> 
no_landing_pads			    pub fn no_landing_pads(&self) -> bool 
no_late_bound_regions			    pub fn no_late_bound_regions<T>(&self, value: &Binder<T>) -> Option<T>
no_verify			    pub fn no_verify(&self) -> bool { self.opts.debugging_opts.no_verify }
node_extent			    pub fn node_extent(&self, n: ast::NodeId) -> CodeExtent 
node_id			    fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> 
node_id			    fn node_id(&self, n: &Node) -> dot::Id 
node_id			    pub fn node_id(&self) -> ast::NodeId 
node_id			    pub fn node_id(&self, region_maps: &RegionMaps) -> ast::NodeId 
node_id_item_substs			    pub fn node_id_item_substs(&self, id: NodeId) -> ItemSubsts<'tcx> 
node_id_to_string			fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String 
node_id_to_type			    pub fn node_id_to_type(&self, id: NodeId) -> Ty<'tcx> 
node_id_to_type_opt			    pub fn node_id_to_type_opt(&self, id: NodeId) -> Option<Ty<'tcx>> 
node_is_reachable			    pub fn node_is_reachable(&self, id: ast::NodeId) -> bool 
node_label			    fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> 
node_label			    fn node_label(&self, n: &Node) -> dot::LabelText 
node_method_id			    pub fn node_method_id(&self, method_call: ty::MethodCall)
node_method_ty			    pub fn node_method_ty(&self, method_call: ty::MethodCall)
node_to_string			    pub fn node_to_string(&self, id: NodeId) -> String 
node_to_string			fn node_to_string(node_id: ast::NodeId) -> String 
node_to_user_string			    pub fn node_to_user_string(&self, id: NodeId) -> String 
node_ty			    pub fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> 
node_ty			    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> 
node_type			    pub fn node_type(&self, id: ast::NodeId) -> Ty<'tcx> 
node_type_insert			    pub fn node_type_insert(&self, id: NodeId, ty: Ty<'tcx>) 
node_types			    pub fn node_types(&self) -> Ref<NodeMap<Ty<'tcx>>> 
nodemap			    pub mod nodemap;
nodes			    pub fn nodes(&self) -> Vec<DepNode> 
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> 
nodes			    fn nodes(&self) -> dot::Nodes<Node> 
nodes_matching_suffix			    pub fn nodes_matching_suffix<'a>(&'a self, parts: &'a [String])
nominal			        fn nominal<'cx, 'tcx>(bound: ty::BuiltinBound,
nominal_obligations			    fn nominal_obligations(&mut self,
nonzeroing_move_hints			    pub fn nonzeroing_move_hints(&self) -> bool 
noop			fn noop() 
normalize			fn normalize(values: &Vec<VarValue>, r: ty::Region) -> ty::Region 
normalize			pub fn normalize<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,
normalize			    fn normalize(&mut self) -> Vec<traits::PredicateObligation<'tcx>> 
normalize_associated_type			pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T
normalize_param_env_or_error			pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvironment<'a,'tcx>,
normalize_projection_type			    pub fn normalize_projection_type<'a>(&mut self,
normalize_projection_type			pub fn normalize_projection_type<'a,'b,'tcx>(
normalize_to_error			fn normalize_to_error<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,
normalize_with_depth			pub fn normalize_with_depth<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,
normalizing_infer_ctxt			pub fn normalizing_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,
note_and_explain_region			    pub fn note_and_explain_region(&self,
note_and_explain_type_err			    pub fn note_and_explain_type_err(&self,
note_obligation_cause			fn note_obligation_cause<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,
note_obligation_cause_code			fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,
note_region_origin			    fn note_region_origin(&self, err: &mut DiagnosticBuilder, origin: &SubregionOrigin<'tcx>) 
note_region_origin			    fn note_region_origin(&self,
note_without_error			    pub fn note_without_error(&self, msg: &str) 
num			    pub mod num;
num_local_def_ids			    pub fn num_local_def_ids(&self) -> usize 
num_to_string			        fn num_to_string(counter: usize) -> String 
num_vars			    pub fn num_vars(&self) -> u32 
object			trait object (e.g. if `T: OtherTrait`, use `on: Box<OtherTrait>`). If the number
object_region_bounds			pub fn object_region_bounds<'tcx>(
object_region_bounds			pub fn object_region_bounds<'tcx>(
object_safety			mod object_safety;
object_safety			    pub fn object_safety(&self) -> Option<bool> 
object_safety_violation_for_method			fn object_safety_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,
object_safety_violations			pub fn object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,
object_safety_violations_for_trait			fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,
obligations			pub fn obligations<'a,'tcx>(infcx: &InferCtxt<'a, 'tcx>,
of			    pub fn of(lint: &'static Lint) -> LintId 
offset_cur_anon			    fn offset_cur_anon(&self) 
ok_if			        fn ok_if<'tcx>(v: Vec<Ty<'tcx>>)
operand_ty			    pub fn operand_ty(&self,
opportunistic_resolve_var			    pub fn opportunistic_resolve_var(&self, rid: RegionVid) -> ty::Region 
opposite			    fn opposite(self) -> RelationDir 
ops::BitAnd for TypeContents			impl ops::BitAnd for TypeContents 
ops::BitOr for TypeContents			impl ops::BitOr for TypeContents 
ops::Deref for BuiltinBounds			impl ops::Deref for BuiltinBounds 
ops::DerefMut for BuiltinBounds			impl ops::DerefMut for BuiltinBounds 
ops::Sub for TypeContents			impl ops::Sub for TypeContents 
opt			    pub fn     opt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optopt(a, b, c, d)) }
opt			mod opt 
opt_def_index			    pub fn opt_def_index(&self, node: ast::NodeId) -> Option<DefIndex> 
opt_destruction_extent			    pub fn opt_destruction_extent(&self, n: ast::NodeId) -> Option<CodeExtent> 
opt_encl_scope			    pub fn opt_encl_scope(&self, id: CodeExtent) -> Option<CodeExtent> 
opt_expr			    fn opt_expr(&mut self,
opt_get			    pub fn opt_get<'a>(&'a self,
opt_local_def_id			    pub fn opt_local_def_id(&self, node: ast::NodeId) -> Option<DefId> 
opt_local_def_id			    pub fn opt_local_def_id(&self, node: NodeId) -> Option<DefId> 
opt_normalize_projection_type			fn opt_normalize_projection_type<'a,'b,'tcx>(
opt_span			    pub fn opt_span(&self, id: NodeId) -> Option<Span> 
opt_span_bug			    pub fn opt_span_bug(&self, opt_sp: Option<Span>, msg: &str) -> ! 
opt_span_warn			    pub fn opt_span_warn(&self, opt_sp: Option<Span>, msg: &str) 
opt_u			    pub fn     opt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optopt(a, b, c, d)) }
optgroups			pub fn optgroups() -> Vec<getopts::OptGroup> 
or			    pub fn or(self, vb: VerifyBound) -> VerifyBound 
or			    pub fn or(self, other: LastPrivate) -> LastPrivate 
original_label			fn original_label(span: Span) -> Original 
original_lifetime			fn original_lifetime(l: &hir::Lifetime) -> Original 
orphan_check			pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,
orphan_check_trait_ref			fn orphan_check_trait_ref<'tcx>(tcx: &ty::ctxt<'tcx>,
outlives			pub mod outlives;
output			    pub fn output(&self) -> ty::Binder<FnOutput<'tcx>> 
overlap			fn overlap<'cx, 'tcx>(selcx: &mut SelectionContext<'cx, 'tcx>,
overlapping_impls			pub fn overlapping_impls<'cx, 'tcx>(infcx: &InferCtxt<'cx, 'tcx>,
overloaded_method_return_ty			    fn overloaded_method_return_ty(&self,
owned_pointer			    pub fn owned_pointer(&self) -> TypeContents 
owns_owned			    pub fn owns_owned(&self) -> bool 
param_env			    pub fn param_env<'b>(&'b self) -> &'b ty::ParameterEnvironment<'b,'tcx> 
param_env			    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'cx, 'tcx> 
parameterized			fn parameterized<GG>(f: &mut fmt::Formatter,
params_from_type			    pub fn params_from_type(types: Vec<T>) -> VecPerParamSpace<T> 
parent_def			    fn parent_def(&self) -> Option<DefIndex> 
parent_node			    fn parent_node(self) -> Option<NodeId> 
parse_bool			        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool 
parse_cfgspecs			pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig 
parse_crate_types_from_list			pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> 
parse_list			        fn parse_list(slot: &mut Vec<String>, v: Option<&str>)
parse_opt_bool			        fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool 
parse_opt_list			        fn parse_opt_list(slot: &mut Option<Vec<String>>, v: Option<&str>)
parse_opt_string			        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool 
parse_opt_uint			        fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool 
parse_passes			        fn parse_passes(slot: &mut Passes, v: Option<&str>) -> bool 
parse_string			        fn parse_string(slot: &mut String, v: Option<&str>) -> bool 
parse_uint			        fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool 
pat			    fn pat(&mut self, pat: &hir::Pat, pred: CFGIndex) -> CFGIndex 
pat_bindings			    fn pat_bindings<F>(&mut self, pat: &hir::Pat, mut f: F) where
pat_bindings			pub fn pat_bindings<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where
pat_bindings_ident			pub fn pat_bindings_ident<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where
pat_constructors			fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,
pat_contains_bindings			pub fn pat_contains_bindings(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_contains_bindings_or_wild			pub fn pat_contains_bindings_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_contains_ref_binding			pub fn pat_contains_ref_binding(dm: &RefCell<DefMap>, pat: &hir::Pat) -> Option<hir::Mutability> 
pat_contains_ref_binding			    pub fn pat_contains_ref_binding(&self, pat: &hir::Pat) -> Option<hir::Mutability> 
pat_id_map			pub fn pat_id_map(dm: &RefCell<DefMap>, pat: &hir::Pat) -> PatIdMap 
pat_is_binding			pub fn pat_is_binding(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_is_binding_or_wild			pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_is_const			pub fn pat_is_const(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_is_refutable			pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_is_resolved_const			pub fn pat_is_resolved_const(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_is_variant_or_struct			pub fn pat_is_variant_or_struct(dm: &DefMap, pat: &hir::Pat) -> bool 
pat_ty			    fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> 
pat_ty			    pub fn pat_ty(&self, pat: &hir::Pat) -> Ty<'tcx> 
pat_ty_opt			    pub fn pat_ty_opt(&self, pat: &hir::Pat) -> Option<Ty<'tcx>> 
pat_util			    pub mod pat_util;
path			    pub fn path(&self, flavor: OutputType) -> PathBuf 
path2cstr			pub fn path2cstr(p: &Path) -> CString 
path_to_str_with_name			    fn path_to_str_with_name(&self, id: NodeId, name: Name) -> String 
path_to_string			    pub fn path_to_string(&self, id: NodeId) -> String 
path_to_string			pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String 
pats_all			    fn pats_all<'b, I: Iterator<Item=&'b P<hir::Pat>>>(&mut self,
peek_node_id			    fn peek_node_id(&self) -> NodeId 
pending_obligations			    pub fn pending_obligations(&self) -> &[PredicateObligation<'tcx>] 
pick_candidate_cache			    fn pick_candidate_cache(&self) -> &SelectionCache<'tcx> 
pick_evaluation_cache			    fn pick_evaluation_cache(&self) -> &EvaluationCache<'tcx> 
pick_lifetime			    fn pick_lifetime(&self,
plug_leaks			pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
plug_leaks			    pub fn plug_leaks<T>(&self,
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>
plugin_registrar_fn			    fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;
poly_project_and_unify_type			pub fn poly_project_and_unify_type<'cx,'tcx>(
pop			    pub fn pop(&mut self, space: ParamSpace) -> Option<T> 
pop_ignore			    pub fn pop_ignore(&mut self) 
pop_task			    pub fn pop_task(&mut self, key: DepNode) 
populate_enum_discriminants			    fn populate_enum_discriminants(&self, enum_definition: &'ast hir::EnumDef) 
populate_implementations_for_primitive_if_necessary			    pub fn populate_implementations_for_primitive_if_necessary(&self,
populate_implementations_for_trait_if_necessary			    pub fn populate_implementations_for_trait_if_necessary(&self, trait_id: DefId) 
populate_inherent_implementations_for_type_if_necessary			    pub fn populate_inherent_implementations_for_type_if_necessary(&self,
positional_element_ty			    pub fn positional_element_ty(&self,
ppaux			    pub mod ppaux;
pprust::PpAnn for DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O> 
pre			    fn pre(&self,
predicate_for_builtin_bound			pub fn predicate_for_builtin_bound<'tcx>(
predicate_for_trait_def			pub fn predicate_for_trait_def<'tcx>(
predicate_for_trait_ref			pub fn predicate_for_trait_ref<'tcx>(
predicate_obligations			pub fn predicate_obligations<'a,'tcx>(infcx: &InferCtxt<'a, 'tcx>,
predicates			    pub fn predicates(&self, tcx: &ctxt<'tcx>) -> GenericPredicates<'tcx> 
predicates_for_generics			pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,
predicates_for_generics			pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,
pretty_print_to			    fn pretty_print_to<'b>(&self, wr: Box<io::Write + 'b>,
prim_ty_to_ty			pub fn prim_ty_to_ty<'tcx>(tcx: &ty::ctxt<'tcx>,
primary_libdir_name			    fn primary_libdir_name() -> String 
principal_def_id			    pub fn principal_def_id(&self) -> DefId 
principal_trait_ref_with_self_ty			    pub fn principal_trait_ref_with_self_ty(&self,
print_debug_stats			    pub fn print_debug_stats(&self) 
print_enum_sizes			    pub fn print_enum_sizes(&self) -> bool 
print_help_message			fn print_help_message() 
print_llvm_passes			    pub fn print_llvm_passes(&self) -> bool 
print_node			    fn print_node(&mut self, node: &Node) -> io::Result<()> 
print_node			    fn print_node(&mut self, node: &Node) -> io::Result<()>;
privacy			    pub mod privacy;
probe			    pub fn probe<R, F>(&self, f: F) -> R where
probe			    pub fn probe(&self, vid: ty::TyVid) -> Option<Ty<'tcx>> 
process_command_line			    pub fn process_command_line(&mut self, sess: &Session) 
process_edges			        fn process_edges<'a, 'tcx>(this: &RegionVarBindings<'a, 'tcx>,
process_errors			    fn process_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>)
process_predicate			fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,
prohibit_projection			pub fn prohibit_projection(tcx: &ty::ctxt, span: Span)
prohibit_type_params			pub fn prohibit_type_params(tcx: &ty::ctxt, segments: &[ast::PathSegment]) 
project			mod project;
project_adjustments			        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>)
project_and_unify_type			fn project_and_unify_type<'cx,'tcx>(
project_type			fn project_type<'cx,'tcx>(
projection			        fn projection<'a, 'tcx>(tables: &'a Tables<'tcx>) -> &'a NodeMap<Ty<'tcx>> 
projection_bounds_with_self_ty			    pub fn projection_bounds_with_self_ty(&self,
projection_ty			    pub fn projection_ty(self,
propagate			    pub fn propagate(&mut self, cfg: &cfg::CFG, blk: &hir::Block) 
propagate			    fn propagate(&mut self) 
propagate_bits_into_entry_set_for			    fn propagate_bits_into_entry_set_for(&mut self,
propagate_bits_into_graph_successors_of			    fn propagate_bits_into_graph_successors_of(&mut self,
propagate_node			    fn propagate_node(&mut self, node: &ast_map::Node,
propagate_through_block			    fn propagate_through_block(&mut self, blk: &hir::Block, succ: LiveNode)
propagate_through_decl			    fn propagate_through_decl(&mut self, decl: &hir::Decl, succ: LiveNode)
propagate_through_expr			    fn propagate_through_expr(&mut self, expr: &Expr, succ: LiveNode)
propagate_through_exprs			    fn propagate_through_exprs(&mut self, exprs: &[P<Expr>], succ: LiveNode)
propagate_through_fn_block			    fn propagate_through_fn_block(&mut self, _: &hir::FnDecl, blk: &hir::Block)
propagate_through_local			    fn propagate_through_local(&mut self, local: &hir::Local, succ: LiveNode)
propagate_through_loop			    fn propagate_through_loop(&mut self,
propagate_through_lvalue_components			    fn propagate_through_lvalue_components(&mut self,
propagate_through_opt_expr			    fn propagate_through_opt_expr(&mut self,
propagate_through_stmt			    fn propagate_through_stmt(&mut self, stmt: &hir::Stmt, succ: LiveNode)
provided_trait_methods			    fn provided_trait_methods(&self, tcx: &ty::ctxt<'tcx>, def: DefId)
provided_trait_methods			    pub fn provided_trait_methods(&self, id: DefId) -> Vec<Rc<Method<'tcx>>> 
ptr_sigil			pub fn ptr_sigil(ptr: PointerKind) -> &'static str 
push			    pub fn push(&mut self, other: BoundRegion) 
push			    pub fn push(&mut self, space: ParamSpace, value: T) 
push			    fn push(&mut self, predicate: &ty::Predicate<'tcx>) 
push_ignore			    pub fn push_ignore(&mut self) 
push_param_constraint			    fn push_param_constraint(&mut self,
push_param_constraint_from_top			    fn push_param_constraint_from_top(&mut self,
push_pass			    fn push_pass<P: LintPass + ?Sized + 'static>(&mut self,
push_projection_constraint_from_top			    fn push_projection_constraint_from_top(&mut self,
push_region_constraint_from_top			    fn push_region_constraint_from_top(&mut self,
push_region_constraints			fn push_region_constraints<'tcx>(out: &mut Vec<Component<'tcx>>, regions: Vec<ty::Region>) 
push_reversed			fn push_reversed<'tcx>(stack: &mut Vec<Ty<'tcx>>, tys: &[Ty<'tcx>]) 
push_sig_subtypes			fn push_sig_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, sig: &ty::PolyFnSig<'tcx>) 
push_stack			    fn push_stack<'o,'s:'o>(&mut self,
push_sub_region_constraint			    fn push_sub_region_constraint(&mut self,
push_subtypes			fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) 
push_task			    pub fn push_task(&mut self, key: DepNode) 
push_transmute_restriction			    fn push_transmute_restriction(&self, restriction: TransmuteRestriction<'tcx>) 
query			    pub fn query(&self) -> DepGraphQuery 
query			    pub fn query(&self) -> DepGraphQuery 
query			mod query;
query			    pub fn query(&self) -> DepGraphQuery 
raii			mod raii;
range_covered_by_constructor			fn range_covered_by_constructor(ctor: &Constructor,
raw_emit_lint			pub fn raw_emit_lint(sess: &Session,
raw_pat			fn raw_pat<'a>(p: &'a Pat) -> &'a Pat 
raw_struct_lint			pub fn raw_struct_lint<'a>(sess: &'a Session,
reachable			    pub mod reachable;
reachable_ids			    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId> { unimplemented!() }
reachable_ids			    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>;
read			    fn read(&self, k: &M::Key) 
read			    pub fn read(&mut self, v: DepNode) 
read			    pub fn read(&self, v: DepNode) 
read_trait_impls			    fn read_trait_impls(&self, tcx: &ty::ctxt<'tcx>) 
rebuild			    fn rebuild(&self)
rebuild_arg_ty_or_output			    fn rebuild_arg_ty_or_output(&self,
rebuild_args_ty			    fn rebuild_args_ty(&self,
rebuild_expl_self			    fn rebuild_expl_self(&self,
rebuild_generics			    fn rebuild_generics(&self,
rebuild_output			    fn rebuild_output(&self, ty: &hir::FunctionRetTy,
rebuild_path			    fn rebuild_path(&self,
rebuild_ty			    fn rebuild_ty(&self,
rebuild_ty_param_bounds			    fn rebuild_ty_param_bounds(&self,
rebuild_ty_params			    fn rebuild_ty_params(&self,
record_borrow			    fn record_borrow(&mut self, id: ast::NodeId, mutbl: hir::Mutability) 
record_fn_parent			    fn record_fn_parent(&self, sub_fn: ast::NodeId, sup_fn: ast::NodeId) 
record_impl			    pub fn record_impl(&self,
record_renamings			        fn record_renamings(const_expr: &hir::Expr,
record_rvalue_scope			    fn record_rvalue_scope(&self, var: ast::NodeId, lifetime: CodeExtent) 
record_rvalue_scope			    fn record_rvalue_scope<'a>(visitor: &mut RegionResolutionVisitor,
record_rvalue_scope_if_borrow_expr			    fn record_rvalue_scope_if_borrow_expr(visitor: &mut RegionResolutionVisitor,
record_trait_has_default_impl			    pub fn record_trait_has_default_impl(&self, trait_def_id: DefId) 
record_var_lifetime			fn record_var_lifetime(visitor: &mut RegionResolutionVisitor,
record_var_scope			    fn record_var_scope(&self, var: ast::NodeId, lifetime: CodeExtent) 
recursion_limit			    pub mod recursion_limit;
references_error			    fn references_error(&self) -> bool 
region			    pub mod region;
region_inference			pub mod region_inference;
region_obligations			    pub fn region_obligations(&self,
region_outlives_predicate			    pub fn region_outlives_predicate(&self,
region_vars_confined_to_snapshot			    fn region_vars_confined_to_snapshot(&self,
region_vars_for_defs			    pub fn region_vars_for_defs(&self,
regions			    fn regions(&mut self, a: ty::Region, _: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    pub fn regions<'a>(&'a self) -> &'a VecPerParamSpace<ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region)
regions			    pub fn regions(&self) -> Vec<ty::Region> 
register			    fn register(&mut self, name: &str, span: Span) 
register_builtin_bound			    pub fn register_builtin_bound<'a>(&mut self,
register_early_pass			    pub fn register_early_pass(&mut self,
register_future_incompatible			    pub fn register_future_incompatible(&mut self,
register_group			    pub fn register_group(&mut self, sess: Option<&Session>,
register_item_type			    pub fn register_item_type(&self, did: DefId, ty: TypeScheme<'tcx>) 
register_late_pass			    pub fn register_late_pass(&mut self,
register_predicate_obligation			    pub fn register_predicate_obligation<'a>(&mut self,
register_region_obligation			    pub fn register_region_obligation<'a>(&mut self,
register_region_obligation			fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,
register_removed			    pub fn register_removed(&mut self, name: &str, reason: &str) 
register_renamed			    pub fn register_renamed(&mut self, old_name: &str, new_name: &str) 
relate			pub mod relate;
relate			    fn relate<R:TypeRelation<'a,'tcx>>(relation: &mut R,
relate			    fn relate<R>(relation: &mut R,
relate			    fn relate<T:Relate<'a,'tcx>>(&mut self, a: &T, b: &T) -> RelateResult<'tcx, T> 
relate_arg_vecs			fn relate_arg_vecs<'a,'tcx:'a,R>(relation: &mut R,
relate_bound			    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> 
relate_bound			    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;
relate_bound			    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> 
relate_free_regions			    fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) 
relate_free_regions_from_implied_bounds			    pub fn relate_free_regions_from_implied_bounds<'tcx>(&mut self,
relate_free_regions_from_predicates			    pub fn relate_free_regions_from_predicates<'tcx>(&mut self,
relate_item_substs			fn relate_item_substs<'a,'tcx:'a,R>(relation: &mut R,
relate_region_params			fn relate_region_params<'a,'tcx:'a,R>(relation: &mut R,
relate_substs			fn relate_substs<'a,'tcx:'a,R>(relation: &mut R,
relate_to_static			    fn relate_to_static(&mut self, sup: FreeRegion) 
relate_type_params			fn relate_type_params<'a,'tcx:'a,R>(relation: &mut R,
relate_vars			    pub fn relate_vars(&mut self, a: ty::TyVid, dir: RelationDir, b: ty::TyVid) 
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_zip			    fn relate_zip<T:Relate<'a,'tcx>>(&mut self, a: &[T], b: &[T]) -> RelateResult<'tcx, Vec<T>> 
relations			    fn relations<'a>(&'a mut self, a: ty::TyVid) -> &'a mut Vec<Relation> 
relations			fn relations<'a>(v: &'a mut TypeVariableData) -> &'a mut Vec<Relation> 
relative_target_lib_path			pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf 
rematch_impl			    fn rematch_impl(&mut self,
replace			    pub fn replace(&mut self, space: ParamSpace, elems: Vec<T>) 
replace_if_possible			    pub fn replace_if_possible(&self, t: Ty<'tcx>) -> Ty<'tcx> 
replace_late_bound_regions			    pub fn replace_late_bound_regions<T,F>(&self,
replace_late_bound_regions_with_fresh_var			    pub fn replace_late_bound_regions_with_fresh_var<T>(
replace_newline_with_backslash_l			fn replace_newline_with_backslash_l(s: String) -> String 
report_and_explain_type_error			    fn report_and_explain_type_error(&self,
report_concrete_failure			    fn report_concrete_failure(&self,
report_conflicting_default_types			    pub fn report_conflicting_default_types(&self,
report_dead_assign			    fn report_dead_assign(&self, id: NodeId, sp: Span, var: Variable, is_argument: bool) 
report_fulfillment_error			fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_fulfillment_errors			pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_generic_bound_failure			    fn report_generic_bound_failure(&self,
report_inference_failure			    fn report_inference_failure(&self,
report_maybe_different			        fn report_maybe_different(f: &mut fmt::Formatter,
report_mismatched_types			    pub fn report_mismatched_types(&self,
report_object_safety_error			pub fn report_object_safety_error<'tcx>(tcx: &ty::ctxt<'tcx>,
report_on_unimplemented			fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_overflow_error			pub fn report_overflow_error<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,
report_processed_errors			    fn report_processed_errors(&self,
report_projection_error			pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_region_errors			    fn report_region_errors(&self,
report_selection_error			pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_sub_sup_conflict			    fn report_sub_sup_conflict(&self,
report_type_error			    fn report_type_error(&self,
repr			    pub mod repr;
repr_attrs			    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> { unimplemented!() }
repr_attrs			    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr>;
require			    pub fn require(&self, it: LangItem) -> Result<DefId, String> 
require_loop			    fn require_loop(&self, name: &str, span: Span) 
require_owned_box			    pub fn require_owned_box(&self) -> Result<DefId, String> 
require_unsafe			    fn require_unsafe(&mut self, span: Span, description: &str) 
required_region_bounds			    pub fn required_region_bounds(&self,
reserve_node_ids			    pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId 
reset			    fn reset(&mut self, bits: &mut [usize]) 
resolve			    fn resolve<'a>(&self, infcx: &InferCtxt<'a, 'tcx>) -> Self;
resolve			    fn resolve<'a>(&self, infcx: &InferCtxt<'a, 'tcx>) -> Ty<'tcx> 
resolve			    fn resolve<'a>(&self, infcx: &InferCtxt<'a, 'tcx>)
resolve			    fn resolve<'a>(&self,
resolve			pub mod resolve;
resolve_arm			fn resolve_arm(visitor: &mut RegionResolutionVisitor, arm: &hir::Arm) 
resolve_block			fn resolve_block(visitor: &mut RegionResolutionVisitor, blk: &hir::Block) 
resolve_crate			pub fn resolve_crate(sess: &Session, krate: &hir::Crate) -> RegionMaps 
resolve_expr			fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &hir::Expr) 
resolve_expr			    pub fn resolve_expr(&self, expr: &hir::Expr) -> def::Def 
resolve_fn			fn resolve_fn(visitor: &mut RegionResolutionVisitor,
resolve_free_lifetime_ref			    fn resolve_free_lifetime_ref(&mut self,
resolve_inlined_item			pub fn resolve_inlined_item(sess: &Session,
resolve_item			fn resolve_item(visitor: &mut RegionResolutionVisitor, item: &hir::Item) 
resolve_lifetime			    pub mod resolve_lifetime;
resolve_lifetime_ref			    fn resolve_lifetime_ref(&mut self, lifetime_ref: &hir::Lifetime) 
resolve_local			fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) 
resolve_pat			fn resolve_pat(visitor: &mut RegionResolutionVisitor, pat: &hir::Pat) 
resolve_regions			    pub fn resolve_regions(&self,
resolve_regions_and_report_errors			    pub fn resolve_regions_and_report_errors(&self,
resolve_stmt			fn resolve_stmt(visitor: &mut RegionResolutionVisitor, stmt: &hir::Stmt) 
resolve_trait_associated_const			fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,
resolve_type_and_region_vars_if_possible			    pub fn resolve_type_and_region_vars_if_possible<T>(&self, value: &T) -> T
resolve_type_vars_if_possible			    pub fn resolve_type_vars_if_possible<T>(&self, value: &T) -> T
resolve_type_vars_or_error			    fn resolve_type_vars_or_error(&self, t: &Ty<'tcx>) -> mc::McResult<Ty<'tcx>> 
resolve_var			    pub fn resolve_var(&self, rid: RegionVid) -> ty::Region 
rev_lookup			        fn rev_lookup(infcx: &InferCtxt,
reverse			    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry<'tcx>) 
rollback_to			    fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot) 
rollback_to			    pub fn rollback_to(&self, snapshot: RegionSnapshot) 
rollback_to			    pub fn rollback_to(&mut self, s: Snapshot) 
root			    pub fn root(krate: &'ast Crate) -> NodeCollector<'ast> 
rustc			mod rustc 
rustc_optgroups			pub fn rustc_optgroups() -> Vec<RustcOptGroup> 
rustc_short_optgroups			pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> 
rustlibdir			pub fn rustlibdir() -> String 
safe_to_unsafe_fn_ty			    pub fn safe_to_unsafe_fn_ty(&self, bare_fn: &BareFnTy<'tcx>) -> Ty<'tcx> 
same_struct_or_enum			        fn same_struct_or_enum<'tcx>(ty: Ty<'tcx>, def: ty::AdtDef<'tcx>) -> bool 
same_type			        fn same_type<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool 
scopes_intersect			    pub fn scopes_intersect(&self, scope1: CodeExtent, scope2: CodeExtent)
search			    pub fn search<F>(&self, mut pick: F)
search_lifetimes			fn search_lifetimes<'a>(lifetimes: &'a [hir::LifetimeDef],
search_paths			pub mod search_paths;
secondary_libdir_name			    fn secondary_libdir_name() -> String 
select			    fn select<'a>(&mut self,
select			mod select;
select			    pub fn select(&mut self, obligation: &TraitObligation<'tcx>)
select_all_or_error			    pub fn select_all_or_error<'a>(&mut self,
select_from_expr			    fn select_from_expr(&mut self, expr: &hir::Expr) 
select_new_obligations			    pub fn select_new_obligations<'a>(&mut self,
select_where_possible			    pub fn select_where_possible<'a>(&mut self,
self_ty			    pub fn self_ty(&self) -> Option<Ty<'tcx>> 
self_ty			    fn self_ty(&self) -> ty::Binder<Ty<'tcx>> 
self_ty			    pub fn self_ty(&self) -> Ty<'tcx> 
self_ty			    pub fn self_ty(&self) -> Ty<'tcx> 
sequence_element_type			    pub fn sequence_element_type(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
sess			    fn sess(&self) -> &Session 
sess			    fn sess(&self) -> &Session;
session			pub mod session;
set_bit			fn set_bit(words: &mut [usize], bit: usize) -> bool 
set_captures			    fn set_captures(&mut self, node_id: NodeId, cs: Vec<CaptureInfo>) 
set_destructor			    pub fn set_destructor(&self, dtor: DefId) 
set_level			    fn set_level(&mut self, lint: LintId, mut lvlsrc: LevelSource) 
set_object_safety			    pub fn set_object_safety(&self, is_safe: bool) 
shadower_label			fn shadower_label(span: Span) -> Shadower 
shadower_lifetime			fn shadower_lifetime(l: &hir::Lifetime) -> Shadower 
shallow_resolve			    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> 
shift_region			pub fn shift_region(region: ty::Region, amount: u32) -> ty::Region 
shift_region_through_binders			    fn shift_region_through_binders(&self, region: ty::Region) -> ty::Region 
shift_regions			pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>>(tcx: &ty::ctxt<'tcx>,
shift_regions_through_binders			    fn shift_regions_through_binders(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
shifted			    pub fn shifted(&self, amount: u32) -> DebruijnIndex 
short_optgroups			pub fn short_optgroups() -> Vec<getopts::OptGroup> 
shorthand			    fn shorthand(&self) -> &'static str 
should_explore			fn should_explore(tcx: &ty::ctxt, node_id: ast::NodeId) -> bool 
should_update_candidate_cache			    fn should_update_candidate_cache(&mut self,
should_warn			    fn should_warn(&self, var: Variable) -> Option<String> 
should_warn_about_field			    fn should_warn_about_field(&mut self, node: &hir::StructField_) -> bool 
should_warn_about_item			    fn should_warn_about_item(&mut self, item: &hir::Item) -> bool 
should_warn_about_variant			    fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool 
shuffle			    fn shuffle(early_bound: &mut Vec<ast::Name>,
signal_shadowing_problem			fn signal_shadowing_problem(sess: &Session, name: ast::Name, orig: Original, shadower: Shadower) 
simd_size			    pub fn simd_size(&self, _cx: &ty::ctxt) -> usize 
simd_type			    pub fn simd_type(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
simple_name			pub fn simple_name<'a>(pat: &'a hir::Pat) -> Option<ast::Name> 
simplify_type			pub fn simplify_type(tcx: &ty::ctxt,
skip_binder			    pub fn skip_binder(&self) -> &T 
skip_current_subtree			    pub fn skip_current_subtree(&mut self) 
skolemize_late_bound_regions			pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
skolemize_late_bound_regions			    pub fn skolemize_late_bound_regions<T>(&self,
snapshot			    pub fn snapshot(&mut self) -> Snapshot 
some_func			fn some_func() 
some_func			fn some_func<T: Foo>(foo: T) 
sort_key			    pub fn sort_key(&self) -> (DefId, Name) 
sort_key			    pub fn sort_key(&self) -> (DefId, Name) 
sort_string			    fn sort_string(&self, cx: &ty::ctxt) -> String 
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> 
source			    fn source(&self, edge: &Edge) -> Node 
span			    pub fn span(self) -> Span 
span			    pub fn span(&self, id: NodeId) -> Span 
span			    pub fn span(&self) -> Span 
span			    fn span(&self) -> Span { self.span }
span			    fn span(&self) -> Span;
span			    pub fn span(&self, region_maps: &RegionMaps, ast_map: &ast_map::Map) -> Option<Span> 
span_bug			    pub fn span_bug(&self, sp: Span, msg: &str) -> ! 
span_debug			    fn span_debug(span: codemap::Span, f: &mut fmt::Formatter) -> fmt::Result 
span_err			    pub fn span_err(&self, sp: Span, msg: &str) 
span_err_or_warn			    pub fn span_err_or_warn(&self, is_warning: bool, sp: Span, msg: &str) 
span_err_with_code			    pub fn span_err_with_code(&self, sp: Span, msg: &str, code: &str) 
span_fatal			    pub fn span_fatal(&self, sp: Span, msg: &str) -> ! 
span_fatal_with_code			    pub fn span_fatal_with_code(&self, sp: Span, msg: &str, code: &str) -> ! 
span_if_local			    pub fn span_if_local(&self, id: DefId) -> Option<Span> 
span_lint			    fn span_lint(&self, lint: &'static Lint, span: Span, msg: &str) 
span_lint_help			    fn span_lint_help(&self, lint: &'static Lint, span: Span,
span_lint_note			    fn span_lint_note(&self, lint: &'static Lint, span: Span, msg: &str,
span_note_without_error			    pub fn span_note_without_error(&self, sp: Span, msg: &str) 
span_unimpl			    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! 
span_warn			    pub fn span_warn(&self, sp: Span, msg: &str) 
span_warn_with_code			    pub fn span_warn_with_code(&self, sp: Span, msg: &str, code: &str) 
specialize			pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],
split			    pub fn split(self) -> SeparateVecsPerParamSpace<T> 
split_msg_into_multilines			fn split_msg_into_multilines(msg: &str) -> Option<String> 
stability			    pub mod stability;
stability			    fn stability(&self, def: DefId) -> Option<attr::Stability> { unimplemented!() }
stability			    fn stability(&self, def: DefId) -> Option<attr::Stability>;
stable			    fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }
stable			    fn stable(g: getopts::OptGroup) -> RustcOptGroup 
start_snapshot			    fn start_snapshot(&self) -> CombinedSnapshot 
start_snapshot			    pub fn start_snapshot(&self) -> RegionSnapshot 
stmt			    fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex 
store_free_region_map			    pub fn store_free_region_map(&self, id: NodeId, map: FreeRegionMap) 
straightline			    fn straightline<'b, I: Iterator<Item=&'b hir::Expr>>(&mut self,
struct_err			    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  
struct_fatal			    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { unimplemented!() }
struct_field_names			    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;
struct_lockstep_tails			    pub fn struct_lockstep_tails(&self,
struct_span_err			    pub fn struct_span_err<'a>(&'a self,
struct_span_err_with_code			    pub fn struct_span_err_with_code<'a>(&'a self,
struct_span_fatal			    pub fn struct_span_fatal<'a>(&'a self,
struct_span_fatal_with_code			    pub fn struct_span_fatal_with_code<'a>(&'a self,
struct_span_lint			    fn struct_span_lint(&self,
struct_span_warn			    pub fn struct_span_warn<'a>(&'a self,
struct_span_warn_with_code			    pub fn struct_span_warn_with_code<'a>(&'a self,
struct_tail			    pub fn struct_tail(&self, mut ty: Ty<'tcx>) -> Ty<'tcx> 
struct_variant			    pub fn struct_variant(&self) -> &VariantDefData<'tcx, 'container> 
struct_warn			    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  
structural_impls			mod structural_impls;
structural_impls			mod structural_impls;
sty			mod sty;
sub			    pub fn sub(&self) -> Sub<'a, 'tcx> 
sub			    pub fn sub(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
sub			pub mod sub;
sub			    fn sub(self, other: TypeContents) -> TypeContents 
sub_free_region			    pub fn sub_free_region(&self, sub: FreeRegion, sup: FreeRegion) -> bool 
sub_poly_trait_refs			    pub fn sub_poly_trait_refs(&self,
sub_types			    pub fn sub_types(&self,
subst			    pub mod subst;
subst			    fn subst(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>) -> Self 
subst_spanned			    fn subst_spanned(&self, tcx: &ty::ctxt<'tcx>,
subst_spanned			    fn subst_spanned(&self,
subst_supertrait			    pub fn subst_supertrait(&self,
substs			    pub fn substs(&self) -> &'tcx Substs<'tcx> 
successors			    pub fn successors(&self) -> &[BasicBlock] 
successors_mut			    pub fn successors_mut(&mut self) -> &mut [BasicBlock] 
suffix_matches			    fn suffix_matches(&self, parent: NodeId) -> bool 
suggest_new_overflow_limit			fn suggest_new_overflow_limit(tcx: &ty::ctxt, err:&mut DiagnosticBuilder, span: Span) 
super_assign			            fn super_assign(&mut self,
super_basic_block_data			            fn super_basic_block_data(&mut self,
super_branch			            fn super_branch(&mut self,
super_combine_tys			pub fn super_combine_tys<'a,'tcx:'a,R>(infcx: &InferCtxt<'a, 'tcx>,
super_constant			            fn super_constant(&mut self,
super_def_id			            fn super_def_id(&mut self, _def_id: & 
super_fold_with			    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;
super_fold_with			                fn super_fold_with<F:TypeFolder<'tcx>>(&self, _: &mut F) -> 
super_fold_with			    fn super_fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> (T, U) 
super_fold_with			    fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_fold_with			    fn super_fold_with<F:ty::fold::TypeFolder<'tcx>>(&self, folder: &mut F) -> Self 
super_lattice_tys			pub fn super_lattice_tys<'a,'tcx,L:LatticeDir<'a,'tcx>>(this: &mut L,
super_literal			            fn super_literal(&mut self,
super_lvalue			            fn super_lvalue(&mut self,
super_mir			            fn super_mir(&mut self,
super_operand			            fn super_operand(&mut self,
super_relate_tys			pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,
super_rvalue			            fn super_rvalue(&mut self,
super_span			            fn super_span(&mut self, _span: & 
super_statement			            fn super_statement(&mut self,
super_terminator			            fn super_terminator(&mut self,
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool;
super_visit_with			                fn super_visit_with<F: TypeVisitor<'tcx>>(&self, _: &mut F) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
super_visit_with			    fn super_visit_with<V: ty::fold::TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
supertrait_def_ids			pub fn supertrait_def_ids<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,
supertraits			pub fn supertraits<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,
supertraits_reference_self			pub fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,
sv::SnapshotVecDelegate for Delegate			impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> 
swap			    fn swap(&self) 
switch_expected			    pub fn switch_expected(&self) -> CombineFields<'a, 'tcx> 
symbol_is_live			    fn symbol_is_live(&mut self,
sysroot			    pub fn sysroot<'a>(&'a self) -> &'a Path 
tables_are_tcx_tables			    pub fn tables_are_tcx_tables(&self) -> bool 
tag			    fn tag(&self) -> &'static str { "Bivariate" }
tag			    fn tag(&self) -> &'static str { "Equate" }
tag			    fn tag(&self) -> &'static str { "Glb" }
tag			    fn tag(&self) -> &'static str { "Lub" }
tag			    fn tag(&self) -> &'static str { "Sub" }
tag			    fn tag(_: Option<ty::FloatVid>) -> &'static str { "FloatVid" }
tag			    fn tag(_: Option<ty::IntVid>) -> &'static str { "IntVid" }
tag			    fn tag(_: Option<ty::RegionVid>) -> &'static str { "RegionVid" }
tag			    fn tag(&self) -> &'static str { "Match" }
tag			    fn tag(&self) -> &'static str;
tainted			    pub fn tainted(&self, mark: &RegionSnapshot, r0: Region) -> Vec<Region> 
tainted_regions			    fn tainted_regions(&self, snapshot: &CombinedSnapshot, r: ty::Region) -> Vec<ty::Region> 
tainted_regions			    fn tainted_regions(&self, snapshot: &CombinedSnapshot, r: ty::Region) -> Vec<ty::Region>;
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> 
target			    fn target(&self, edge: &Edge) -> Node 
target_filesearch			    pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch 
tc_ty			        fn tc_ty<'tcx>(cx: &ty::ctxt<'tcx>,
tcx			    pub mod tcx;
tcx			        fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;
tcx			    fn tcx(&self) -> &'t ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx<'b>(&'b self) -> &'b ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.infcx.tcx }
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    pub fn tcx(&self) -> &'cx ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.tcx }
tcx			            fn tcx(&self) -> &ty::ctxt<'tcx> { self.0 }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx>;
temp_path			    pub fn temp_path(&self, flavor: OutputType) -> PathBuf 
temporary_scope			    pub fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> 
temporary_scope			    pub fn temporary_scope(&self, id: ast::NodeId) -> ty::Region 
temporary_scope			    pub fn temporary_scope(&self, expr_id: ast::NodeId) -> Option<CodeExtent> 
terminator			    pub fn terminator(&self) -> &Terminator<'tcx> 
terminator_mut			    pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> 
test			    fn test(&self) -> i32 
tests			mod tests 
thread			mod thread;
time			pub fn time<T, F>(do_it: bool, what: &str, f: F) -> T where
time_llvm_passes			    pub fn time_llvm_passes(&self) -> bool 
time_passes			    pub fn time_passes(&self) -> bool { self.opts.debugging_opts.time_passes }
tls			pub mod tls 
tls			pub mod tls 
to_bound_region			    pub fn to_bound_region(&self) -> ty::BoundRegion 
to_builtin_kind			    pub fn to_builtin_kind(&self, id: DefId) -> Option<ty::BuiltinBound> 
to_code_extent			    pub fn to_code_extent(&self, region_maps: &RegionMaps) -> CodeExtent 
to_dep_node			    fn to_dep_node(key: &Self::Key) -> DepNode;
to_dep_node			            fn to_dep_node(key: &
to_early_bound_region			    pub fn to_early_bound_region(&self) -> ty::Region 
to_fn_parts			    pub fn to_fn_parts(self) -> FnParts<'a> 
to_hir_binop			    pub fn to_hir_binop(self) -> hir::BinOp_ 
to_i16			    fn to_i16(&self) -> Option<i16> 
to_i16			    fn to_i16(&self) -> Option<i16>;
to_i32			    fn to_i32(&self) -> Option<i32> 
to_i32			    fn to_i32(&self) -> Option<i32>;
to_i64			    fn to_i64(&self) -> Option<i64> 
to_i64			    fn to_i64(&self) -> Option<i64>;
to_i8			    fn to_i8(&self) -> Option<i8> 
to_i8			    fn to_i8(&self) -> Option<i8>;
to_mutbl_lossy			    pub fn to_mutbl_lossy(self) -> hir::Mutability 
to_mutbl_lossy			    pub fn to_mutbl_lossy(self) -> hir::Mutability 
to_node			    fn to_node(self) -> Option<Node<'ast>> 
to_opt_poly_trait_ref			    pub fn to_opt_poly_trait_ref(&self) -> Option<PolyTraitRef<'tcx>> 
to_poly_trait_predicate			    pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> 
to_poly_trait_ref			    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> 
to_poly_trait_ref			    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
to_predicate			    fn to_predicate(&self) -> Predicate<'tcx> 
to_predicate			    fn to_predicate(&self) -> Predicate<'tcx>;
to_predicates			    pub fn to_predicates<'tcx>(&self,
to_string			    pub fn to_string(&self) -> String 
to_ty			    pub fn to_ty(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_ty			    pub fn to_ty<'tcx>(self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_ty			    fn to_ty<'tcx>(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_ty			    fn to_ty<'tcx>(&self, cx: &ty::ctxt<'tcx>) -> Ty<'tcx>;
to_ty			    pub fn to_ty(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_type			    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_type			    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx>;
to_u16			    fn to_u16(&self) -> Option<u16> 
to_u16			    fn to_u16(&self) -> Option<u16>;
to_u32			    fn to_u32(&self) -> Option<u32> 
to_u32			    fn to_u32(&self) -> Option<u32>;
to_u64			    fn to_u64(&self) -> Option<u64> 
to_u64			    fn to_u64(&self) -> Option<u64>;
to_u8			    fn to_u8(&self) -> Option<u8> 
to_u8			    fn to_u8(&self) -> Option<u8>;
to_uint			    pub fn to_uint(self) -> usize 
to_user_str			    pub fn to_user_str(&self) -> &'static str 
to_user_str			    pub fn to_user_str(&self) -> &'static str 
to_usize			    fn to_usize(&self) -> usize 
track_anon			    fn track_anon(&self, anon: u32) 
trait_def			    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>
trait_def			    fn trait_def(&self, tcx: &ty::ctxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>;
trait_def			pub mod trait_def;
trait_did			    pub fn trait_did(&self, cx: &ctxt) -> DefId 
trait_has_default_impl			    pub fn trait_has_default_impl(&self, trait_def_id: DefId) -> bool 
trait_has_sized_self			fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,
trait_id_of_impl			    pub fn trait_id_of_impl(&self, def_id: DefId) -> Option<DefId> 
trait_impl_polarity			    pub fn trait_impl_polarity(&self, id: DefId) -> Option<hir::ImplPolarity> 
trait_item_def_ids			    fn trait_item_def_ids(&self, def: DefId)
trait_item_def_ids			    pub fn trait_item_def_ids(&self, id: DefId) -> Rc<Vec<ImplOrTraitItemId>> 
trait_item_of_item			    pub fn trait_item_of_item(&self, def_id: DefId) -> Option<ImplOrTraitItemId> 
trait_items			    pub fn trait_items(&self, trait_did: DefId) -> Rc<Vec<ty::ImplOrTraitItem<'tcx>>> 
trait_obligations			pub fn trait_obligations<'a,'tcx>(infcx: &InferCtxt<'a, 'tcx>,
trait_of_item			    fn trait_of_item(&self, tcx: &ty::ctxt<'tcx>, def_id: DefId)
trait_of_item			    pub fn trait_of_item(&self, def_id: DefId) -> Option<DefId> 
trait_ref_for_builtin_bound			pub fn trait_ref_for_builtin_bound<'tcx>(
trait_ref_is_knowable			pub fn trait_ref_is_knowable<'tcx>(tcx: &ty::ctxt<'tcx>, trait_ref: &ty::TraitRef<'tcx>) -> bool
trait_ref_to_def_id			    pub fn trait_ref_to_def_id(&self, tr: &hir::TraitRef) -> DefId 
trait_ref_to_string			    pub fn trait_ref_to_string(&self, t: &ty::TraitRef<'tcx>) -> String 
traits			    pub mod traits;
trans_empty			    pub fn trans_empty() -> Substs<'tcx> 
trans_stats			    pub fn trans_stats(&self) -> bool { self.opts.debugging_opts.trans_stats }
transitive_bounds			pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,
translate_def_id			        fn translate_def_id(&self, def_id: DefId) -> DefId;
transmute			    fn transmute(Vec<Self>) -> Foo<Self>
transmute			    fn transmute(x: Foo<String>) -> Vec<String> 
transmute			    fn transmute(x: Foo<u8>) -> Vec<u8> 
truncate			    pub fn truncate(&mut self, space: ParamSpace, len: usize) 
try_add_builtin_trait			    pub fn try_add_builtin_trait(&self,
tuple_struct_definition_if_ctor			    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>
tuple_struct_definition_if_ctor			    fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>;
ty			    pub mod ty;
ty			impl<'tcx, 'container> ty::AdtDefData<'tcx, 'container> 
ty			impl<'tcx> ty::ctxt<'tcx> 
ty			impl<'tcx> ty::TyS<'tcx> 
ty			impl<'tcx> ty::TyS<'tcx> 
ty			impl<'tcx> ty::TyS<'tcx> 
ty			impl<'tcx> ty::ctxt<'tcx> 
ty			impl<'tcx> ty::ctxt<'tcx> 
ty			    pub fn ty(&self, tcx: &ctxt<'tcx>, subst: &Substs<'tcx>) -> Ty<'tcx> 
ty			impl<'tcx> ty::ctxt<'tcx> 
ty			impl<'tcx> ty::TyS<'tcx> 
ty			impl<'tcx> ty::ctxt<'tcx> 
ty::fold::TypeFolder for FullTypeResolver			impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> 
ty::fold::TypeFolder for Generalizer			impl<'cx, 'tcx> ty::fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> 
ty::fold::TypeFolder for OpportunisticTypeAndRegionResolver			impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver<'a, 'tcx> 
ty::fold::TypeFolder for OpportunisticTypeResolver			impl<'a, 'tcx> ty::fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx> 
ty_adt_def			    pub fn ty_adt_def(&self) -> Option<AdtDef<'tcx>> 
ty_for_param			    fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> 
ty_is_local			fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, infer_is_local: InferIsLocal) -> bool
ty_is_local_constructor			fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,
ty_to_def_id			    pub fn ty_to_def_id(&self) -> Option<DefId> 
ty_to_string			    pub fn ty_to_string(&self, t: Ty<'tcx>) -> String 
type_contents			    pub fn type_contents(&'tcx self, cx: &ty::ctxt<'tcx>) -> TypeContents 
type_error_message			    pub fn type_error_message<M>(&self,
type_error_message_str			    pub fn type_error_message_str<M>(&self,
type_error_message_str_with_expected			    pub fn type_error_message_str_with_expected<M>(&self,
type_error_struct			    pub fn type_error_struct<M>(&self,
type_error_struct_str			    pub fn type_error_struct_str<M>(&self,
type_error_struct_str_with_expected			    pub fn type_error_struct_str_with_expected<M>(&self,
type_for_def			    pub fn type_for_def(&self, ty_param_def: &ty::TypeParameterDef) -> Ty<'tcx> 
type_is_unconstrained_numeric			    pub fn type_is_unconstrained_numeric(&'a self, ty: Ty) -> UnconstrainedNumeric 
type_is_unsafe_function			fn type_is_unsafe_function(ty: Ty) -> bool 
type_known_to_meet_builtin_bound			pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
type_moves_by_default			    pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool 
type_needs_drop_given_env			    pub fn type_needs_drop_given_env<'a>(&self,
type_parameter_def			    pub fn type_parameter_def(&self,
type_scheme			    pub fn type_scheme(&self, tcx: &ctxt<'tcx>) -> TypeScheme<'tcx> 
type_var_diverges			    pub fn type_var_diverges(&'a self, ty: Ty) -> bool 
type_variable			pub mod type_variable;
type_vars_for_defs			    pub fn type_vars_for_defs(&self,
types			    pub fn types(origin: TypeOrigin,
types_escaping_snapshot			    pub fn types_escaping_snapshot(&self, s: &Snapshot) -> Vec<Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>)
tys_to_string			    pub fn tys_to_string(&self, ts: &[Ty<'tcx>]) -> String 
u64_to_disr			    fn u64_to_disr(&self, val: u64) -> Option<Disr> 
u64_to_disr			    fn u64_to_disr(&self, val: u64) -> Option<Disr>;
uncovered_tys			fn uncovered_tys<'tcx>(tcx: &ty::ctxt<'tcx>,
unify_float_variable			fn unify_float_variable<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
unify_integral_variable			fn unify_integral_variable<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
unify_key			pub mod unify_key;
unimpl			    pub fn unimpl(&self, msg: &str) -> ! 
union			    pub fn union<T, F>(v: &[T], mut f: F) -> TypeContents where
unresolved_lifetime_ref			    fn unresolved_lifetime_ref(&self, lifetime_ref: &hir::Lifetime) 
unsafe_with_decoding_context			    pub unsafe fn unsafe_with_decoding_context<F, R>(f: F) -> R
unsafe_with_encoding_context			    pub unsafe fn unsafe_with_encoding_context<F, R>(f: F) -> R
unsolved_variables			    pub fn unsolved_variables(&self) -> Vec<ty::Ty<'tcx>> 
unsolved_variables			    pub fn unsolved_variables(&self) -> Vec<ty::TyVid> 
unstable			    fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }
unstable			    fn unstable(g: getopts::OptGroup) -> RustcOptGroup 
unstable_options			    pub fn unstable_options(&self) -> bool 
unsubst_ty			    pub fn unsubst_ty(&self) -> Ty<'tcx> 
untracked_get			    fn untracked_get(&self) -> Option<Ty<'tcx>> 
unwrap			    pub fn unwrap(&self, dep_node: DepNode) -> Ty<'tcx> 
unwrap			    pub fn unwrap(self) -> Ty<'tcx> 
unwrap_or			    pub fn unwrap_or(self, def: Ty<'tcx>) -> Ty<'tcx> 
upcast			pub fn upcast<'tcx>(tcx: &ty::ctxt<'tcx>,
update_recursion_limit			pub fn update_recursion_limit(sess: &Session, krate: &ast::Crate) 
upvar			    pub fn upvar(&self) -> Option<cmt<'tcx>> 
upvar_capture			    pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> 
upvar_capture			    pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> 
used_crate_source			    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource { unimplemented!() }
used_crate_source			    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource;
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>
used_crates			    fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>;
used_libraries			    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)> { vec![] }
used_libraries			    fn used_libraries(&self) -> Vec<(String, NativeLibraryKind)>;
used_link_args			    fn used_link_args(&self) -> Vec<String> { vec![] }
used_link_args			    fn used_link_args(&self) -> Vec<String>;
used_on_entry			    fn used_on_entry(&self, ln: LiveNode, var: Variable) -> bool 
util			pub mod util 
util			mod util;
util			pub mod util;
validate_crate_name			pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) 
values_are_none			    fn values_are_none(&self) -> bool 
values_str			    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String> 
values_str			    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String>;
var_diverges			    pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool 
var_id			    pub fn var_id(&self) -> ast::NodeId 
var_ids			fn var_ids<'a, 'tcx>(fields: &CombineFields<'a, 'tcx>,
var_region			    pub fn var_region(&self, id: ast::NodeId) -> ty::Region 
var_scope			    pub fn var_scope(&self, var_id: ast::NodeId) -> CodeExtent 
variable			    fn variable(&self, node_id: NodeId, span: Span) -> Variable 
variable_name			    fn variable_name(&self, var: Variable) -> String 
variadic			    pub fn variadic(&self) -> bool 
variant_def_ids			    pub fn variant_def_ids(&self) -> Option<(DefId, DefId)> 
variant_expr			    fn variant_expr<'a>(variants: &'a [hir::Variant], id: ast::NodeId)
variant_index_with_id			    pub fn variant_index_with_id(&self, vid: DefId) -> usize 
variant_of_ctor			    fn variant_of_ctor(&self,
variant_of_def			    pub fn variant_of_def(&self, def: def::Def) -> &VariantDefData<'tcx, 'container> 
variant_with_id			    pub fn variant_with_id(&self, vid: DefId) -> &VariantDefData<'tcx, 'container> 
vars_created_since_snapshot			    pub fn vars_created_since_snapshot(&self, mark: &RegionSnapshot) -> Vec<RegionVid> 
vec_slice_info			        fn vec_slice_info(tcx: &ty::ctxt,
verbose			    pub fn verbose(&self) -> bool { self.opts.debugging_opts.verbose }
verbose			pub fn verbose() -> bool 
verify			fn verify(sess: &Session, items: &lang_items::LanguageItems) 
verify_generic_bound			    pub fn verify_generic_bound(&self,
verify_generic_bound			    pub fn verify_generic_bound(&self,
verify_ok			fn verify_ok(sess: &session::Session, list: &[Linkage]) 
virtual_call_violation_for_method			fn virtual_call_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,
vis			    pub fn vis(&self) -> hir::Visibility 
visit			    pub mod visit;
visit			    pub fn visit<'ast,V>(&'ast self, visitor: &mut V)
visit_all_items_in_krate			pub fn visit_all_items_in_krate<'tcx,V,F>(tcx: &ty::ctxt<'tcx>,
visit_all_items_in_krate			    pub fn visit_all_items_in_krate<V,F>(&self,
visit_arm			    fn visit_arm(&mut self, a: &ast::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &hir::Arm) 
visit_arm			    fn visit_arm(&mut self, arm: &hir::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &hir::Arm) { visit_arm(self, a); }
visit_arm			    fn visit_arm(&mut self, a: &hir::Arm) 
visit_arm			fn visit_arm(ir: &mut IrMaps, arm: &hir::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &Arm) 
visit_assign			            fn visit_assign(&mut self,
visit_attribute			    fn visit_attribute(&mut self, attr: &ast::Attribute) 
visit_basic_block_data			            fn visit_basic_block_data(&mut self,
visit_block			    fn visit_block(&mut self, block: &'ast Block) 
visit_block			    fn visit_block(&mut self, b: &ast::Block) 
visit_block			    fn visit_block(&mut self, b: &hir::Block) 
visit_block			    fn visit_block(&mut self, block: &hir::Block) 
visit_block			    fn visit_block(&mut self, block: &hir::Block) 
visit_block			    fn visit_block(&mut self, b: &Block) 
visit_block			    fn visit_block(&mut self, b: &hir::Block) 
visit_branch			            fn visit_branch(&mut self,
visit_constant			            fn visit_constant(&mut self,
visit_decl			    fn visit_decl(&mut self, d: &ast::Decl) 
visit_decl			    fn visit_decl(&mut self, d: &hir::Decl) 
visit_def_id			            fn visit_def_id(&mut self,
visit_early_late			    fn visit_early_late<F>(&mut self,
visit_enum_def			    fn visit_enum_def(&mut self, enum_definition: &'ast hir::EnumDef,
visit_explicit_self			    fn visit_explicit_self(&mut self, es: &ast::ExplicitSelf) 
visit_explicit_self			    fn visit_explicit_self(&mut self, es: &hir::ExplicitSelf) 
visit_expr			    fn visit_expr(&mut self, expr: &'ast Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &'ast hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr) { visit_expr(self, ex); }
visit_expr			    fn visit_expr(&mut self, ex: &Expr) 
visit_expr			fn visit_expr(ir: &mut IrMaps, expr: &Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr) 
visit_expr			        fn visit_expr(&mut self, ex: &'v hir::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &hir::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &hir::Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, e: &ast::Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, e: &hir::Expr) 
visit_fn			    fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, decl: &'v ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: hir_visit::FnKind<'v>, decl: &'v hir::FnDecl,
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self, fn_kind: FnKind<'v>, fn_decl: &'v hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,
visit_fn			fn visit_fn(ir: &mut IrMaps,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, it: &ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, it: &hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, item: &hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &hir::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, generics: &'ast Generics) 
visit_generics			    fn visit_generics(&mut self, g: &ast::Generics) 
visit_generics			    fn visit_generics(&mut self, g: &hir::Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &hir::Generics) 
visit_id			    fn visit_id(&mut self, id: ast::NodeId) 
visit_id			    fn visit_id(&mut self, node_id: NodeId) 
visit_ident			    fn visit_ident(&mut self, sp: Span, id: ast::Ident) 
visit_ids			    fn visit_ids<F>(&mut self, f: F)
visit_ids			    pub fn visit_ids<O: IdVisitingOperation>(&self, operation: &mut O) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'ast ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, i: &'v hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &hir::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &hir::ImplItem) 
visit_item			        fn visit_item(&mut self, i: &'tcx hir::Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &'ast Item) 
visit_item			    fn visit_item(&mut self, it: &ast::Item) 
visit_item			    fn visit_item(&mut self, it: &hir::Item) 
visit_item			    fn visit_item(&mut self, i: &hir::Item) 
visit_item			    fn visit_item(&mut self, i: &hir::Item) 
visit_item			    fn visit_item(&mut self, it: &'ast hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &'tcx Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, i: &Item) 
visit_item			        fn visit_item(&mut self, _: &hir::Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_item			    fn visit_item(&mut self, i: &Item) 
visit_item			    fn visit_item(&mut self, item: &hir::Item) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lt: &ast::Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lt: &hir::Lifetime) 
visit_lifetime			        fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, def: &'ast LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lt: &ast::LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lt: &hir::LifetimeDef) 
visit_literal			            fn visit_literal(&mut self,
visit_local			    fn visit_local(&mut self, l: &ast::Local) 
visit_local			    fn visit_local(&mut self, l: &hir::Local) 
visit_local			    fn visit_local(&mut self, l: &hir::Local) 
visit_local			    fn visit_local(&mut self, l: &hir::Local) { visit_local(self, l); }
visit_local			    fn visit_local(&mut self, l: &hir::Local) 
visit_local			fn visit_local(ir: &mut IrMaps, local: &hir::Local) 
visit_local			    fn visit_local(&mut self, l: &Local) 
visit_lvalue			            fn visit_lvalue(&mut self,
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'ast MacroDef) 
visit_macro_def			    fn visit_macro_def(&mut self, md: &'v hir::MacroDef) 
visit_mir			            fn visit_mir(&mut self, mir: & 
visit_mod			    fn visit_mod(&mut self, m: &ast::Mod, s: Span, n: ast::NodeId) 
visit_mod			    fn visit_mod(&mut self, m: &hir::Mod, s: Span, n: ast::NodeId) 
visit_name			    fn visit_name(&mut self, sp: Span, name: ast::Name) 
visit_nested_item			    fn visit_nested_item(&mut self, item: ItemId) 
visit_nested_item			    fn visit_nested_item(&mut self, item: hir::ItemId) 
visit_nested_item			    fn visit_nested_item(&mut self, item: hir::ItemId) 
visit_nested_item			    fn visit_nested_item(&mut self, item: hir::ItemId) 
visit_node			    fn visit_node(&mut self, node: &ast_map::Node) 
visit_operand			            fn visit_operand(&mut self,
visit_pat			    fn visit_pat(&mut self, pat: &'ast Pat) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &hir::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &hir::Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &Pat) 
visit_pat			            fn visit_pat(&mut self, p: &hir::Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &hir::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &hir::Pat) 
visit_path			    fn visit_path(&mut self, p: &ast::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, p: &hir::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, path: &hir::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, path: &hir::Path, id: ast::NodeId) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &ast::Path, item: &ast::PathListItem) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &hir::Path, item: &hir::PathListItem) 
visit_path_list_item			    fn visit_path_list_item(&mut self, path: &hir::Path, item: &hir::PathListItem) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &hir::Path, item: &hir::PathListItem) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self,
visit_region			    fn visit_region(&mut self, r: ty::Region) -> bool 
visit_rvalue			            fn visit_rvalue(&mut self,
visit_span			            fn visit_span(&mut self,
visit_statement			            fn visit_statement(&mut self,
visit_stmt			    fn visit_stmt(&mut self, stmt: &'ast Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &ast::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &hir::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &Stmt) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &ast::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &hir::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, field: &hir::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &StructField) 
visit_terminator			            fn visit_terminator(&mut self,
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'ast TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, t: &'v hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &hir::TraitItem) 
visit_ty			    fn visit_ty(&mut self, t: &ast::Ty) 
visit_ty			    fn visit_ty(&mut self, t: &hir::Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &hir::Ty) 
visit_ty			    fn visit_ty(&mut self, t: Ty) -> bool 
visit_ty			    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool 
visit_variant			    fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics, item_id: ast::NodeId) 
visit_variant			    fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics, item_id: ast::NodeId) 
visit_variant			    fn visit_variant(&mut self, variant: &'ast hir::Variant,
visit_variant			    fn visit_variant(&mut self, variant: &hir::Variant, g: &hir::Generics, id: ast::NodeId) 
visit_variant			    fn visit_variant(&mut self, var: &Variant, g: &'v Generics, item_id: NodeId) 
visit_variant_data			    fn visit_variant_data(&mut self,
visit_variant_data			    fn visit_variant_data(&mut self, def: &hir::VariantData, _: ast::Name,
visit_with			    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
visit_with			    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool 
vtable_builtin_data			    fn vtable_builtin_data(&mut self,
vtable_default_impl			    fn vtable_default_impl(&mut self,
vtable_impl			    fn vtable_impl(&mut self,
walk			    pub fn walk(&'tcx self) -> TypeWalker<'tcx> 
walk			pub mod walk;
walk_adjustment			    fn walk_adjustment(&mut self, expr: &hir::Expr) 
walk_arg_patterns			    fn walk_arg_patterns(&mut self,
walk_arm			    fn walk_arm(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &hir::Arm, mode: MatchMode) 
walk_autoderefref			    fn walk_autoderefref(&mut self,
walk_autoderefs			    fn walk_autoderefs(&mut self,
walk_autoref			    fn walk_autoref(&mut self,
walk_block			    fn walk_block(&mut self, blk: &hir::Block) 
walk_callee			    fn walk_callee(&mut self, call: &hir::Expr, callee: &hir::Expr) 
walk_captures			    fn walk_captures(&mut self, closure_expr: &hir::Expr) 
walk_cfg			    fn walk_cfg(&mut self,
walk_expr			    pub fn walk_expr(&mut self, expr: &hir::Expr) 
walk_fn			    pub fn walk_fn(&mut self,
walk_irrefutable_pat			    fn walk_irrefutable_pat(&mut self, cmt_discr: mc::cmt<'tcx>, pat: &hir::Pat) 
walk_local			    fn walk_local(&mut self, local: &hir::Local) 
walk_overloaded_operator			    fn walk_overloaded_operator(&mut self,
walk_parent_nodes			    fn walk_parent_nodes<F>(&self, start_id: NodeId, found: F) -> Result<NodeId, NodeId>
walk_pat			    fn walk_pat(&mut self,
walk_shallow			    pub fn walk_shallow(&'tcx self) -> IntoIter<Ty<'tcx>> 
walk_shallow			pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> 
walk_stmt			    fn walk_stmt(&mut self, stmt: &hir::Stmt) 
walk_struct_expr			    fn walk_struct_expr(&mut self,
walk_tys			    pub fn walk_tys(&self) -> IntoIter<Ty<'tcx>> 
warn			    pub fn warn(&self, msg: &str) 
warn_about_dead_assign			    fn warn_about_dead_assign(&self,
warn_about_unused			    fn warn_about_unused(&self,
warn_about_unused_args			    fn warn_about_unused_args(&self, decl: &hir::FnDecl, entry_ln: LiveNode) 
warn_about_unused_or_dead_vars_in_pat			    fn warn_about_unused_or_dead_vars_in_pat(&mut self, pat: &hir::Pat) 
warn_dead_code			    fn warn_dead_code(&mut self,
weak_lang_items			    pub mod weak_lang_items;
wf			pub mod wf;
when			    pub fn when(&self, cond: bool) -> TypeContents 
with			    fn with<F>(&mut self, wrap_scope: ScopeChain, f: F) where
with			    pub fn with<P>(&self, value: P) -> Obligation<'tcx,P> 
with			    pub fn with<U>(self, value: U) -> Normalized<'tcx,U> 
with			    fn with(r: &'o TraitObligationStack<'o,'tcx>) -> TraitObligationStackList<'o,'tcx> 
with			    pub fn with<F: FnOnce(&ty::ctxt) -> R, R>(f: F) -> R 
with_caller_bounds			    pub fn with_caller_bounds(&self,
with_cause			    fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R
with_cause			    fn with_cause<F,R>(&mut self, _cause: Cause, f: F) -> R
with_context			    fn with_context<F>(&mut self, cx: Context, f: F) where
with_decoding_context			    pub fn with_decoding_context<'decoder, 'tcx, D, F, R>(d: &'decoder mut D, f: F) -> R
with_depth			    fn with_depth(cause: ObligationCause<'tcx>,
with_each_combination			    fn with_each_combination(&self,
with_encoding_context			    pub fn with_encoding_context<'tcx, E, F, R>(encoder: &mut E, f: F) -> R
with_euv			    fn with_euv<'b, F, R>(&'b mut self, item_id: Option<ast::NodeId>, f: F) -> R where
with_extension			    pub fn with_extension(&self, extension: &str) -> PathBuf 
with_freevars			    pub fn with_freevars<T, F>(&self, fid: NodeId, f: F) -> T where
with_ignore			    pub fn with_ignore<OP,R>(&self, op: OP) -> R
with_item_id_pushed			    fn with_item_id_pushed<F>(&mut self, id: ast::NodeId, f: F)
with_lint_attrs			    fn with_lint_attrs<F>(&mut self,
with_loop_nodes			    fn with_loop_nodes<R, F>(&mut self,
with_method			    pub fn with_method(self,
with_mode			    fn with_mode<F, R>(&mut self, mode: Mode, f: F) -> R where
with_opt			    pub fn with_opt<F: FnOnce(Option<&ty::ctxt>) -> R, R>(f: F) -> R 
with_path			    pub fn with_path<T, F>(&self, id: NodeId, f: F) -> T where
with_path			    pub fn with_path<T, F>(&self, id: DefId, f: F) -> T where
with_path_next			    fn with_path_next<T, F>(&self, id: NodeId, next: LinkedPath, f: F) -> T where
with_self_ty			    pub fn with_self_ty(&self, self_ty: Ty<'tcx>) -> Substs<'tcx> 
with_taken			    fn with_taken(taken: &[hir::LifetimeDef]) -> LifeGiver 
with_task			    pub fn with_task<OP,R>(&self, key: DepNode, op: OP) -> R
with_vec			    pub fn with_vec(mut self, space: ParamSpace, vec: Vec<T>)
write			    fn write(&self, k: &M::Key) 
write			    pub fn write(&mut self, v: DepNode) 
write			    pub fn write(&self, v: DepNode) 
write_lvalue			    fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: u32)
write_trait_impls			    fn write_trait_impls(&self, tcx: &ty::ctxt<'tcx>) 
write_vars			    fn write_vars<F>(&self,
