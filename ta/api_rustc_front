AngleBracketedParameterData			impl AngleBracketedParameterData 
AngleBracketedParameterData			pub struct AngleBracketedParameterData 
AnnNode			pub enum AnnNode<'a> 
Arg			impl Arg 
Arg			pub struct Arg 
Arm			pub struct Arm 
BareFnTy			pub struct BareFnTy 
BinOp_			pub enum BinOp_ 
BindingMode			pub enum BindingMode 
Block			pub struct Block 
BlockCheckMode			pub enum BlockCheckMode 
CaptureClause			pub enum CaptureClause 
Constness			pub enum Constness 
Crate			impl Crate 
Crate			pub struct Crate 
Decl_			pub enum Decl_ 
Decodable for Ident			impl Decodable for Ident 
Encodable for Ident			impl Encodable for Ident 
EnumDef			pub struct EnumDef 
ExplicitSelf_			pub enum ExplicitSelf_ 
Expr			pub struct Expr 
Expr_			pub enum Expr_ 
FakeExtCtxt			    trait FakeExtCtxt 
FakeExtCtxt for parse			    impl FakeExtCtxt for parse::ParseSess 
Field			pub struct Field 
FieldPat			pub struct FieldPat 
FnDecl			pub struct FnDecl 
FnKind			pub enum FnKind<'a> 
Folder			pub trait Folder : Sized 
Folder for MockAssigner			    impl Folder for MockAssigner 
ForeignItem			pub struct ForeignItem 
ForeignItem_			impl ForeignItem_ 
ForeignItem_			pub enum ForeignItem_ 
ForeignMod			pub struct ForeignMod 
FunctionRetTy			impl FunctionRetTy 
FunctionRetTy			pub enum FunctionRetTy 
Generics			impl Generics 
Generics			pub struct Generics 
Hash for Ident			impl Hash for Ident 
IdVisitor			impl<'a, O: ast_util::IdVisitingOperation> IdVisitor<'a, O> 
IdVisitor			pub struct IdVisitor<'a, O: 'a> 
Ident			impl Ident 
Ident			pub struct Ident 
ImplItem			pub struct ImplItem 
ImplItemKind			pub enum ImplItemKind 
ImplPolarity			pub enum ImplPolarity 
InlineAsm			pub struct InlineAsm 
InlineAsmOutput			pub struct InlineAsmOutput 
Item			pub struct Item 
ItemId			pub struct ItemId 
ItemLowerer			struct ItemLowerer<'lcx, 'interner: 'lcx> 
Item_			impl Item_ 
Item_			pub enum Item_ 
Lifetime			pub struct Lifetime 
LifetimeDef			pub struct LifetimeDef 
Local			pub struct Local 
LoweringContext			impl<'a, 'hir> LoweringContext<'a> 
LoweringContext			pub struct LoweringContext<'a> 
MacroDef			pub struct MacroDef 
MatchSource			pub enum MatchSource 
MethodSig			pub struct MethodSig 
MockAssigner			    impl MockAssigner 
MockAssigner			    struct MockAssigner 
Mod			pub struct Mod 
MutTy			pub struct MutTy 
Mutability			pub enum Mutability 
NoAnn			pub struct NoAnn;
NodeIdAssigner for MockAssigner			    impl NodeIdAssigner for MockAssigner 
ParenthesizedParameterData			pub struct ParenthesizedParameterData 
PartialEq for Ident			impl PartialEq for Ident 
Pat			pub struct Pat 
PatKind			pub enum PatKind 
Path			pub struct Path 
PathListItem_			impl PathListItem_ 
PathListItem_			pub enum PathListItem_ 
PathParameters			impl PathParameters 
PathParameters			pub enum PathParameters 
PathSegment			pub struct PathSegment 
PolyTraitRef			pub struct PolyTraitRef 
PpAnn			pub trait PpAnn 
PpAnn for NoAnn			impl PpAnn for NoAnn {}
PrimTy			pub enum PrimTy 
PrintState for State			impl<'a> PrintState<'a> for State<'a> 
QSelf			pub struct QSelf 
State			impl<'a> State<'a> 
State			pub struct State<'a> 
Stmt_			pub enum Stmt_ 
StructFieldKind			impl StructFieldKind 
StructFieldKind			pub enum StructFieldKind 
StructField_			impl StructField_ 
StructField_			pub struct StructField_ 
TraitBoundModifier			pub enum TraitBoundModifier 
TraitItem			pub struct TraitItem 
TraitItem_			pub enum TraitItem_ 
TraitRef			pub struct TraitRef 
Ty			pub struct Ty 
TyParam			pub struct TyParam 
TyParamBound			pub enum TyParamBound 
Ty_			pub enum Ty_ 
TypeBinding			pub struct TypeBinding 
UnOp			pub enum UnOp 
UnsafeSource			pub enum UnsafeSource 
Unsafety			pub enum Unsafety 
VariantData			impl VariantData 
VariantData			pub enum VariantData 
Variant_			pub struct Variant_ 
ViewPath_			pub enum ViewPath_ 
Visibility			impl Visibility 
Visibility			pub enum Visibility 
Visitor			pub trait Visitor<'v> : Sized 
Visitor for IdVisitor			impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> 
Visitor for ItemLowerer			impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> 
WhereBoundPredicate			pub struct WhereBoundPredicate 
WhereClause			pub struct WhereClause 
WhereEqPredicate			pub struct WhereEqPredicate 
WherePredicate			pub enum WherePredicate 
WhereRegionPredicate			pub struct WhereRegionPredicate 
arg_to_string			pub fn arg_to_string(arg: &hir::Arg) -> String 
arm			fn arm(pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm 
arm_to_string			pub fn arm_to_string(arm: &hir::Arm) -> String 
bclose			    pub fn bclose(&mut self, span: codemap::Span) -> io::Result<()> 
bclose_			    pub fn bclose_(&mut self, span: codemap::Span, indented: usize) -> io::Result<()> 
bclose_maybe_open			    pub fn bclose_maybe_open(&mut self,
bindings			    pub fn bindings(&self) -> HirVec<&TypeBinding> 
binop_to_string			pub fn binop_to_string(op: BinOpToken) -> &'static str 
binop_to_string			pub fn binop_to_string(op: BinOp_) -> &'static str 
block_all			fn block_all(lctx: &LoweringContext,
block_expr			fn block_expr(lctx: &LoweringContext, expr: P<hir::Expr>) -> P<hir::Block> 
block_to_string			pub fn block_to_string(blk: &hir::Block) -> String 
bopen			    pub fn bopen(&mut self) -> io::Result<()> 
bounds_to_string			pub fn bounds_to_string(bounds: &[hir::TyParamBound]) -> String 
boxes			    fn boxes(&mut self) -> &mut Vec<pp::Breaks> 
break_offset_if_not_bol			    pub fn break_offset_if_not_bol(&mut self, n: usize, off: isize) -> io::Result<()> 
cache_ids			fn cache_ids<'a, OP, R>(lctx: &LoweringContext, expr_id: NodeId, op: OP) -> R
call_site			        fn call_site(&self) -> codemap::Span 
call_site			        fn call_site(&self) -> codemap::Span;
cbox			    pub fn cbox(&mut self, u: usize) -> io::Result<()> 
cfg			        fn cfg(&self) -> ast::CrateConfig 
cfg			        fn cfg(&self) -> ast::CrateConfig;
commasep_cmnt			    pub fn commasep_cmnt<T, F, G>(&mut self,
commasep_exprs			    pub fn commasep_exprs(&mut self, b: Breaks, exprs: &[P<hir::Expr>]) -> io::Result<()> 
comments			    fn comments(&mut self) -> &mut Option<Vec<comments::Comment>> 
compute_id_range_for_fn_body			pub fn compute_id_range_for_fn_body(fk: FnKind,
core_path			fn core_path(lctx: &LoweringContext, span: Span, components: &[&str]) -> hir::Path 
cur_cmnt_and_lit			    fn cur_cmnt_and_lit(&mut self) -> &mut ast_pp::CurrentCommentAndLiteral 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<Ident, D::Error> 
descriptive_variant			    pub fn descriptive_variant(&self) -> &str 
empty_generics			pub fn empty_generics() -> Generics 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
eq			    fn eq(&self, other: &Ident) -> bool 
explicit_self_to_string			pub fn explicit_self_to_string(explicit_self: &hir::ExplicitSelf_) -> String 
expr			fn expr(lctx: &LoweringContext, span: Span, node: hir::Expr_,
expr_block			fn expr_block(lctx: &LoweringContext, b: P<hir::Block>,
expr_break			fn expr_break(lctx: &LoweringContext, span: Span,
expr_call			fn expr_call(lctx: &LoweringContext,
expr_ident			fn expr_ident(lctx: &LoweringContext, span: Span, id: hir::Ident,
expr_match			fn expr_match(lctx: &LoweringContext,
expr_mut_addr_of			fn expr_mut_addr_of(lctx: &LoweringContext, span: Span, e: P<hir::Expr>,
expr_path			fn expr_path(lctx: &LoweringContext, path: hir::Path,
expr_requires_semi_to_be_stmt			fn expr_requires_semi_to_be_stmt(e: &hir::Expr) -> bool 
expr_to_string			pub fn expr_to_string(e: &hir::Expr) -> String 
expr_tuple			fn expr_tuple(lctx: &LoweringContext, sp: Span, exprs: hir::HirVec<P<hir::Expr>>,
fields			    pub fn fields(&self) -> &[StructField] 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Expr			impl fmt::Debug for Expr 
fmt::Debug for Ident			impl fmt::Debug for Ident 
fmt::Debug for ImplPolarity			impl fmt::Debug for ImplPolarity 
fmt::Debug for Lifetime			impl fmt::Debug for Lifetime 
fmt::Debug for Pat			impl fmt::Debug for Pat 
fmt::Debug for Path			impl fmt::Debug for Path 
fmt::Debug for Stmt_			impl fmt::Debug for Stmt_ 
fmt::Debug for Ty			impl fmt::Debug for Ty 
fmt::Display for Ident			impl fmt::Display for Ident 
fmt::Display for Path			impl fmt::Display for Path 
fmt::Display for Unsafety			impl fmt::Display for Unsafety 
fn_block_to_string			pub fn fn_block_to_string(p: &hir::FnDecl) -> String 
fold			pub mod fold;
fold_angle_bracketed_parameter_data			    fn fold_angle_bracketed_parameter_data(&mut self,
fold_arg			    fn fold_arg(&mut self, a: Arg) -> Arg 
fold_arm			    fn fold_arm(&mut self, a: Arm) -> Arm 
fold_attribute			    fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> 
fold_attrs			pub fn fold_attrs<T: Folder>(attrs: HirVec<Attribute>, fld: &mut T) -> HirVec<Attribute> 
fold_block			    fn fold_block(&mut self, b: P<Block>) -> P<Block> 
fold_bounds			    fn fold_bounds(&mut self, b: TyParamBounds) -> TyParamBounds 
fold_crate			    fn fold_crate(&mut self, c: Crate) -> Crate 
fold_decl			    fn fold_decl(&mut self, d: P<Decl>) -> P<Decl> 
fold_explicit_self			    fn fold_explicit_self(&mut self, es: ExplicitSelf) -> ExplicitSelf 
fold_explicit_self_underscore			    fn fold_explicit_self_underscore(&mut self, es: ExplicitSelf_) -> ExplicitSelf_ 
fold_expr			    fn fold_expr(&mut self, e: P<Expr>) -> P<Expr> 
fold_field			    fn fold_field(&mut self, field: Field) -> Field 
fold_fn_decl			    fn fold_fn_decl(&mut self, d: P<FnDecl>) -> P<FnDecl> 
fold_foreign_item			    fn fold_foreign_item(&mut self, ni: ForeignItem) -> ForeignItem 
fold_foreign_mod			    fn fold_foreign_mod(&mut self, nm: ForeignMod) -> ForeignMod 
fold_generics			    fn fold_generics(&mut self, generics: Generics) -> Generics 
fold_ident			    fn fold_ident(&mut self, i: Ident) -> Ident 
fold_impl_item			    fn fold_impl_item(&mut self, i: ImplItem) -> ImplItem 
fold_item			    fn fold_item(&mut self, i: Item) -> Item 
fold_item_id			    fn fold_item_id(&mut self, i: ItemId) -> ItemId 
fold_item_underscore			    fn fold_item_underscore(&mut self, i: Item_) -> Item_ 
fold_lifetime			    fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime 
fold_lifetime_def			    fn fold_lifetime_def(&mut self, l: LifetimeDef) -> LifetimeDef 
fold_lifetime_defs			    fn fold_lifetime_defs(&mut self, lts: HirVec<LifetimeDef>) -> HirVec<LifetimeDef> 
fold_lifetimes			    fn fold_lifetimes(&mut self, lts: HirVec<Lifetime>) -> HirVec<Lifetime> 
fold_local			    fn fold_local(&mut self, l: P<Local>) -> P<Local> 
fold_meta_item			    fn fold_meta_item(&mut self, meta_item: P<MetaItem>) -> P<MetaItem> 
fold_meta_items			    fn fold_meta_items(&mut self, meta_items: HirVec<P<MetaItem>>) -> HirVec<P<MetaItem>> 
fold_mod			    fn fold_mod(&mut self, m: Mod) -> Mod 
fold_mt			    fn fold_mt(&mut self, mt: MutTy) -> MutTy 
fold_name			    fn fold_name(&mut self, n: Name) -> Name 
fold_opt_bounds			    fn fold_opt_bounds(&mut self,
fold_opt_lifetime			    fn fold_opt_lifetime(&mut self, o_lt: Option<Lifetime>) -> Option<Lifetime> 
fold_parenthesized_parameter_data			    fn fold_parenthesized_parameter_data(&mut self,
fold_pat			    fn fold_pat(&mut self, p: P<Pat>) -> P<Pat> 
fold_path			    fn fold_path(&mut self, p: Path) -> Path 
fold_path_parameters			    fn fold_path_parameters(&mut self, p: PathParameters) -> PathParameters 
fold_poly_trait_ref			    fn fold_poly_trait_ref(&mut self, p: PolyTraitRef) -> PolyTraitRef 
fold_stmt			    fn fold_stmt(&mut self, s: Stmt) -> Stmt 
fold_struct_field			    fn fold_struct_field(&mut self, sf: StructField) -> StructField 
fold_trait_item			    fn fold_trait_item(&mut self, i: TraitItem) -> TraitItem 
fold_trait_ref			    fn fold_trait_ref(&mut self, p: TraitRef) -> TraitRef 
fold_ty			    fn fold_ty(&mut self, t: P<Ty>) -> P<Ty> 
fold_ty_binding			    fn fold_ty_binding(&mut self, t: TypeBinding) -> TypeBinding 
fold_ty_param			    fn fold_ty_param(&mut self, tp: TyParam) -> TyParam 
fold_ty_param_bound			    fn fold_ty_param_bound(&mut self, tpb: TyParamBound) -> TyParamBound 
fold_ty_params			    fn fold_ty_params(&mut self, tps: HirVec<TyParam>) -> HirVec<TyParam> 
fold_usize			    fn fold_usize(&mut self, i: usize) -> usize 
fold_variant			    fn fold_variant(&mut self, v: Variant) -> Variant 
fold_variant_data			    fn fold_variant_data(&mut self, vdata: VariantData) -> VariantData 
fold_view_path			    fn fold_view_path(&mut self, view_path: P<ViewPath>) -> P<ViewPath> 
fold_where_clause			    fn fold_where_clause(&mut self, where_clause: WhereClause) -> WhereClause 
fold_where_predicate			    fn fold_where_predicate(&mut self, where_predicate: WherePredicate) -> WherePredicate 
from_name			    pub fn from_name(name: Name) -> Ident 
fun_to_string			pub fn fun_to_string(decl: &hir::FnDecl,
generics_to_string			pub fn generics_to_string(generics: &hir::Generics) -> String 
has_lifetimes			    pub fn has_lifetimes(&self) -> bool 
has_types			    pub fn has_types(&self) -> bool 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
head			    pub fn head(&mut self, w: &str) -> io::Result<()> 
hir			pub mod hir;
id			    pub fn id(&self) -> NodeId 
ident_of			        fn ident_of(&self, st: &str) -> ast::Ident 
ident_of			        fn ident_of(&self, st: &str) -> ast::Ident;
ident_to_path			pub fn ident_to_path(s: Span, ident: Ident) -> Path 
impl_item_to_string			pub fn impl_item_to_string(i: &hir::ImplItem) -> String 
in_cbox			    pub fn in_cbox(&self) -> bool 
inherit_from			    pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility 
intravisit			pub mod intravisit;
is_by_value_binop			pub fn is_by_value_binop(b: BinOp_) -> bool 
is_by_value_unop			pub fn is_by_value_unop(u: UnOp) -> bool 
is_comparison_binop			pub fn is_comparison_binop(b: BinOp_) -> bool 
is_empty			    fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_lt_parameterized			    pub fn is_lt_parameterized(&self) -> bool 
is_parameterized			    pub fn is_parameterized(&self) -> bool 
is_path			pub fn is_path(e: P<Expr>) -> bool 
is_shift_binop			pub fn is_shift_binop(b: BinOp_) -> bool 
is_struct			    pub fn is_struct(&self) -> bool 
is_tuple			    pub fn is_tuple(&self) -> bool 
is_type_parameterized			    pub fn is_type_parameterized(&self) -> bool 
is_unit			    pub fn is_unit(&self) -> bool 
is_unnamed			    pub fn is_unnamed(&self) -> bool 
item			    pub fn item(&self, id: NodeId) -> &Item 
item_to_string			pub fn item_to_string(i: &hir::Item) -> String 
lazy_binop			pub fn lazy_binop(b: BinOp_) -> bool 
lifetime_to_string			pub fn lifetime_to_string(e: &hir::Lifetime) -> String 
lifetimes			    pub fn lifetimes(&self) -> HirVec<&Lifetime> 
literals			    fn literals(&self) -> &Option<Vec<comments::Literal>> 
lower_angle_bracketed_parameter_data			pub fn lower_angle_bracketed_parameter_data(lctx: &LoweringContext,
lower_arg			pub fn lower_arg(lctx: &LoweringContext, arg: &Arg) -> hir::Arg 
lower_arm			pub fn lower_arm(lctx: &LoweringContext, arm: &Arm) -> hir::Arm 
lower_attrs			pub fn lower_attrs(_lctx: &LoweringContext, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> 
lower_binding_mode			pub fn lower_binding_mode(lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode 
lower_binop			pub fn lower_binop(_lctx: &LoweringContext, b: BinOp) -> hir::BinOp 
lower_block			pub fn lower_block(lctx: &LoweringContext, b: &Block) -> P<hir::Block> 
lower_block_check_mode			pub fn lower_block_check_mode(lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode 
lower_bounds			fn lower_bounds(lctx: &LoweringContext, bounds: &TyParamBounds) -> hir::TyParamBounds 
lower_capture_clause			pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::CaptureClause 
lower_constness			pub fn lower_constness(_lctx: &LoweringContext, c: Constness) -> hir::Constness 
lower_crate			pub fn lower_crate(lctx: &LoweringContext, c: &Crate) -> hir::Crate 
lower_decl			pub fn lower_decl(lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> 
lower_explicit_self			pub fn lower_explicit_self(lctx: &LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf 
lower_explicit_self_underscore			pub fn lower_explicit_self_underscore(lctx: &LoweringContext,
lower_expr			pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> 
lower_field			pub fn lower_field(lctx: &LoweringContext, f: &Field) -> hir::Field 
lower_fn_decl			pub fn lower_fn_decl(lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> 
lower_foreign_item			pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::ForeignItem 
lower_foreign_mod			pub fn lower_foreign_mod(lctx: &LoweringContext, fm: &ForeignMod) -> hir::ForeignMod 
lower_generics			pub fn lower_generics(lctx: &LoweringContext, g: &Generics) -> hir::Generics 
lower_ident			pub fn lower_ident(_lctx: &LoweringContext, ident: Ident) -> hir::Ident 
lower_impl_item			pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem 
lower_impl_polarity			pub fn lower_impl_polarity(_lctx: &LoweringContext, i: ImplPolarity) -> hir::ImplPolarity 
lower_item			pub fn lower_item(lctx: &LoweringContext, i: &Item) -> hir::Item 
lower_item_id			pub fn lower_item_id(_lctx: &LoweringContext, i: &Item) -> hir::ItemId 
lower_item_kind			pub fn lower_item_kind(lctx: &LoweringContext, i: &ItemKind) -> hir::Item_ 
lower_lifetime			pub fn lower_lifetime(_lctx: &LoweringContext, l: &Lifetime) -> hir::Lifetime 
lower_lifetime_def			pub fn lower_lifetime_def(lctx: &LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef 
lower_lifetime_defs			pub fn lower_lifetime_defs(lctx: &LoweringContext,
lower_lifetimes			pub fn lower_lifetimes(lctx: &LoweringContext, lts: &Vec<Lifetime>) -> hir::HirVec<hir::Lifetime> 
lower_local			pub fn lower_local(lctx: &LoweringContext, l: &Local) -> P<hir::Local> 
lower_macro_def			pub fn lower_macro_def(lctx: &LoweringContext, m: &MacroDef) -> hir::MacroDef 
lower_method_sig			pub fn lower_method_sig(lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodSig 
lower_mod			pub fn lower_mod(lctx: &LoweringContext, m: &Mod) -> hir::Mod 
lower_mt			pub fn lower_mt(lctx: &LoweringContext, mt: &MutTy) -> hir::MutTy 
lower_mutability			pub fn lower_mutability(_lctx: &LoweringContext, m: Mutability) -> hir::Mutability 
lower_opt_bounds			pub fn lower_opt_bounds(lctx: &LoweringContext,
lower_opt_lifetime			pub fn lower_opt_lifetime(lctx: &LoweringContext,
lower_parenthesized_parameter_data			pub fn lower_parenthesized_parameter_data(lctx: &LoweringContext,
lower_pat			pub fn lower_pat(lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> 
lower_path			pub fn lower_path(lctx: &LoweringContext, p: &Path) -> hir::Path 
lower_path_full			pub fn lower_path_full(lctx: &LoweringContext, p: &Path, maybe_hygienic: bool) -> hir::Path 
lower_path_list_item			fn lower_path_list_item(path_list_ident: &PathListItem) -> hir::PathListItem 
lower_path_parameters			pub fn lower_path_parameters(lctx: &LoweringContext,
lower_poly_trait_ref			pub fn lower_poly_trait_ref(lctx: &LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef 
lower_stmt			pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> hir::Stmt 
lower_struct_field			pub fn lower_struct_field(lctx: &LoweringContext, f: &StructField) -> hir::StructField 
lower_struct_field_kind			pub fn lower_struct_field_kind(lctx: &LoweringContext,
lower_trait_bound_modifier			pub fn lower_trait_bound_modifier(_lctx: &LoweringContext,
lower_trait_item			pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> hir::TraitItem 
lower_trait_ref			pub fn lower_trait_ref(lctx: &LoweringContext, p: &TraitRef) -> hir::TraitRef 
lower_ty			pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> 
lower_ty_binding			pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> hir::TypeBinding 
lower_ty_param			pub fn lower_ty_param(lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam 
lower_ty_param_bound			pub fn lower_ty_param_bound(lctx: &LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound 
lower_ty_params			pub fn lower_ty_params(lctx: &LoweringContext,
lower_unop			pub fn lower_unop(_lctx: &LoweringContext, u: UnOp) -> hir::UnOp 
lower_unsafe_source			pub fn lower_unsafe_source(_lctx: &LoweringContext, u: UnsafeSource) -> hir::UnsafeSource 
lower_unsafety			pub fn lower_unsafety(_lctx: &LoweringContext, u: Unsafety) -> hir::Unsafety 
lower_variant			pub fn lower_variant(lctx: &LoweringContext, v: &Variant) -> hir::Variant 
lower_variant_data			pub fn lower_variant_data(lctx: &LoweringContext, vdata: &VariantData) -> hir::VariantData 
lower_view_path			pub fn lower_view_path(lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> 
lower_visibility			pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibility 
lower_where_clause			pub fn lower_where_clause(lctx: &LoweringContext, wc: &WhereClause) -> hir::WhereClause 
lower_where_predicate			pub fn lower_where_predicate(lctx: &LoweringContext,
lowering			pub mod lowering;
map_id			    fn map_id(&mut self, i: NodeId) -> NodeId 
maybe_print_trailing_comment			    pub fn maybe_print_trailing_comment(&mut self,
name			    pub fn name(&self) -> Option<Name> 
name_of			        fn name_of(&self, st: &str) -> ast::Name 
name_of			        fn name_of(&self, st: &str) -> ast::Name;
name_to_string			pub fn name_to_string(name: ast::Name) -> String 
nbsp			    pub fn nbsp(&mut self) -> io::Result<()> 
needs_parentheses			fn needs_parentheses(expr: &hir::Expr) -> bool 
new			        fn new() -> MockAssigner 
new			    pub fn new(id_assigner: &'a NodeIdAssigner, c: Option<&Crate>) -> LoweringContext<'a> 
new			    pub fn new(cm: &'a CodeMap,
new			    pub fn new(operation: &'a mut O) -> IdVisitor<'a, O> 
new_from_input			    pub fn new_from_input(cm: &'a CodeMap,
new_id			    fn new_id(&mut self, i: NodeId) -> NodeId 
new_id			        fn new_id(&mut self, old_id: NodeId) -> NodeId 
new_self			    pub fn new_self(span: Span, mutability: Mutability, self_ident: Ident) -> Arg 
new_span			    fn new_span(&mut self, sp: Span) -> Span 
next_id			    fn next_id(&self) -> NodeId 
next_node_id			        fn next_node_id(&self) -> NodeId 
none			    pub fn none() -> PathParameters 
noop_fold_angle_bracketed_parameter_data			pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedParameterData,
noop_fold_arg			pub fn noop_fold_arg<T: Folder>(Arg { id, pat, ty }: Arg, fld: &mut T) -> Arg 
noop_fold_arm			pub fn noop_fold_arm<T: Folder>(Arm { attrs, pats, guard, body }: Arm, fld: &mut T) -> Arm 
noop_fold_attribute			pub fn noop_fold_attribute<T: Folder>(at: Attribute, fld: &mut T) -> Option<Attribute> 
noop_fold_block			pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> 
noop_fold_bounds			fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T) -> TyParamBounds 
noop_fold_crate			pub fn noop_fold_crate<T: Folder>(Crate { module, attrs, config, span,
noop_fold_decl			pub fn noop_fold_decl<T: Folder>(d: P<Decl>, fld: &mut T) -> P<Decl> 
noop_fold_explicit_self			pub fn noop_fold_explicit_self<T: Folder>(Spanned { span, node }: ExplicitSelf,
noop_fold_explicit_self_underscore			pub fn noop_fold_explicit_self_underscore<T: Folder>(es: ExplicitSelf_,
noop_fold_expr			pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &mut T) -> Expr 
noop_fold_field			pub fn noop_fold_field<T: Folder>(Field { name, expr, span }: Field, folder: &mut T) -> Field 
noop_fold_fn_decl			pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> 
noop_fold_foreign_item			pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem 
noop_fold_foreign_mod			pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod { abi, items }: ForeignMod,
noop_fold_generics			pub fn noop_fold_generics<T: Folder>(Generics { ty_params, lifetimes, where_clause }: Generics,
noop_fold_ident			pub fn noop_fold_ident<T: Folder>(i: Ident, _: &mut T) -> Ident 
noop_fold_impl_item			pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T) -> ImplItem 
noop_fold_item			pub fn noop_fold_item<T: Folder>(item: Item, folder: &mut T) -> Item 
noop_fold_item_id			pub fn noop_fold_item_id<T: Folder>(i: ItemId, folder: &mut T) -> ItemId 
noop_fold_item_underscore			pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ 
noop_fold_lifetime			pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime 
noop_fold_lifetime_def			pub fn noop_fold_lifetime_def<T: Folder>(l: LifetimeDef, fld: &mut T) -> LifetimeDef 
noop_fold_lifetime_defs			pub fn noop_fold_lifetime_defs<T: Folder>(lts: HirVec<LifetimeDef>,
noop_fold_lifetimes			pub fn noop_fold_lifetimes<T: Folder>(lts: HirVec<Lifetime>, fld: &mut T) -> HirVec<Lifetime> 
noop_fold_local			pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> 
noop_fold_meta_item			pub fn noop_fold_meta_item<T: Folder>(mi: P<MetaItem>, fld: &mut T) -> P<MetaItem> 
noop_fold_meta_items			pub fn noop_fold_meta_items<T: Folder>(meta_items: HirVec<P<MetaItem>>,
noop_fold_method_sig			pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig 
noop_fold_mod			pub fn noop_fold_mod<T: Folder>(Mod { inner, item_ids }: Mod, folder: &mut T) -> Mod 
noop_fold_mt			pub fn noop_fold_mt<T: Folder>(MutTy { ty, mutbl }: MutTy, folder: &mut T) -> MutTy 
noop_fold_name			pub fn noop_fold_name<T: Folder>(n: Name, _: &mut T) -> Name 
noop_fold_opt_bounds			pub fn noop_fold_opt_bounds<T: Folder>(b: Option<TyParamBounds>,
noop_fold_opt_lifetime			pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: Option<Lifetime>, fld: &mut T) -> Option<Lifetime> 
noop_fold_parenthesized_parameter_data			pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedParameterData,
noop_fold_pat			pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> 
noop_fold_path			pub fn noop_fold_path<T: Folder>(Path { global, segments, span }: Path, fld: &mut T) -> Path 
noop_fold_path_parameters			pub fn noop_fold_path_parameters<T: Folder>(path_parameters: PathParameters,
noop_fold_poly_trait_ref			pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> PolyTraitRef 
noop_fold_stmt			pub fn noop_fold_stmt<T: Folder>(stmt: Stmt, folder: &mut T) -> Stmt 
noop_fold_struct_field			pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField 
noop_fold_trait_item			pub fn noop_fold_trait_item<T: Folder>(i: TraitItem,
noop_fold_trait_ref			pub fn noop_fold_trait_ref<T: Folder>(p: TraitRef, fld: &mut T) -> TraitRef 
noop_fold_ty			pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> 
noop_fold_ty_binding			pub fn noop_fold_ty_binding<T: Folder>(b: TypeBinding, fld: &mut T) -> TypeBinding 
noop_fold_ty_param			pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam 
noop_fold_ty_param_bound			pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T) -> TyParamBound
noop_fold_ty_params			pub fn noop_fold_ty_params<T: Folder>(tps: HirVec<TyParam>,
noop_fold_usize			pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize 
noop_fold_variant			pub fn noop_fold_variant<T: Folder>(v: Variant, fld: &mut T) -> Variant 
noop_fold_variant_data			pub fn noop_fold_variant_data<T: Folder>(vdata: VariantData, fld: &mut T) -> VariantData 
noop_fold_view_path			pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<ViewPath> 
noop_fold_where_clause			pub fn noop_fold_where_clause<T: Folder>(WhereClause { id, predicates }: WhereClause,
noop_fold_where_predicate			pub fn noop_fold_where_predicate<T: Folder>(pred: WherePredicate, fld: &mut T) -> WherePredicate 
parse_sess			        fn parse_sess(&self) -> &parse::ParseSess 
parse_sess			        fn parse_sess(&self) -> &parse::ParseSess;
pat			fn pat(lctx: &LoweringContext, span: Span, pat: hir::PatKind) -> P<hir::Pat> 
pat_enum			fn pat_enum(lctx: &LoweringContext,
pat_ident			fn pat_ident(lctx: &LoweringContext, span: Span, ident: hir::Ident) -> P<hir::Pat> 
pat_ident_binding_mode			fn pat_ident_binding_mode(lctx: &LoweringContext,
pat_none			fn pat_none(lctx: &LoweringContext, span: Span) -> P<hir::Pat> 
pat_some			fn pat_some(lctx: &LoweringContext, span: Span, pat: P<hir::Pat>) -> P<hir::Pat> 
pat_to_string			pub fn pat_to_string(pat: &hir::Pat) -> String 
pat_wild			fn pat_wild(lctx: &LoweringContext, span: Span) -> P<hir::Pat> 
path			fn path(span: Span, strs: Vec<hir::Ident>) -> hir::Path 
path_all			fn path_all(sp: Span,
path_global			fn path_global(span: Span, strs: Vec<hir::Ident>) -> hir::Path 
path_ident			fn path_ident(span: Span, id: hir::Ident) -> hir::Path 
path_to_string			pub fn path_to_string(p: &hir::Path) -> String 
peek_node_id			        fn peek_node_id(&self) -> NodeId 
post			    fn post(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> 
pprust			    pub mod pprust;
pre			    fn pre(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> 
print			pub mod print 
print_arg			    pub fn print_arg(&mut self, input: &hir::Arg, is_closure: bool) -> io::Result<()> 
print_arm			    fn print_arm(&mut self, arm: &hir::Arm) -> io::Result<()> 
print_associated_const			    fn print_associated_const(&mut self,
print_associated_type			    fn print_associated_type(&mut self,
print_block			    pub fn print_block(&mut self, blk: &hir::Block) -> io::Result<()> 
print_block_maybe_unclosed			    pub fn print_block_maybe_unclosed(&mut self,
print_block_unclosed			    pub fn print_block_unclosed(&mut self, blk: &hir::Block) -> io::Result<()> 
print_block_unclosed_indent			    pub fn print_block_unclosed_indent(&mut self,
print_block_with_attrs			    pub fn print_block_with_attrs(&mut self,
print_bounds			    pub fn print_bounds(&mut self, prefix: &str, bounds: &[hir::TyParamBound]) -> io::Result<()> 
print_call_post			    fn print_call_post(&mut self, args: &[P<hir::Expr>]) -> io::Result<()> 
print_capture_clause			    pub fn print_capture_clause(&mut self, capture_clause: hir::CaptureClause) -> io::Result<()> 
print_crate			pub fn print_crate<'a>(cm: &'a CodeMap,
print_decl			    pub fn print_decl(&mut self, decl: &hir::Decl) -> io::Result<()> 
print_else			    fn print_else(&mut self, els: Option<&hir::Expr>) -> io::Result<()> 
print_enum_def			    pub fn print_enum_def(&mut self,
print_explicit_self			    fn print_explicit_self(&mut self,
print_expr			    pub fn print_expr(&mut self, expr: &hir::Expr) -> io::Result<()> 
print_expr_addr_of			    fn print_expr_addr_of(&mut self,
print_expr_binary			    fn print_expr_binary(&mut self,
print_expr_call			    fn print_expr_call(&mut self, func: &hir::Expr, args: &[P<hir::Expr>]) -> io::Result<()> 
print_expr_maybe_paren			    pub fn print_expr_maybe_paren(&mut self, expr: &hir::Expr) -> io::Result<()> 
print_expr_method_call			    fn print_expr_method_call(&mut self,
print_expr_repeat			    fn print_expr_repeat(&mut self, element: &hir::Expr, count: &hir::Expr) -> io::Result<()> 
print_expr_struct			    fn print_expr_struct(&mut self,
print_expr_tup			    fn print_expr_tup(&mut self, exprs: &[P<hir::Expr>]) -> io::Result<()> 
print_expr_unary			    fn print_expr_unary(&mut self, op: hir::UnOp, expr: &hir::Expr) -> io::Result<()> 
print_expr_vec			    fn print_expr_vec(&mut self, exprs: &[P<hir::Expr>]) -> io::Result<()> 
print_extern_opt_abi			    pub fn print_extern_opt_abi(&mut self, opt_abi: Option<Abi>) -> io::Result<()> 
print_fn			    pub fn print_fn(&mut self,
print_fn_args			    pub fn print_fn_args(&mut self,
print_fn_args_and_ret			    pub fn print_fn_args_and_ret(&mut self,
print_fn_block_args			    pub fn print_fn_block_args(&mut self, decl: &hir::FnDecl) -> io::Result<()> 
print_fn_header_info			    pub fn print_fn_header_info(&mut self,
print_fn_output			    pub fn print_fn_output(&mut self, decl: &hir::FnDecl) -> io::Result<()> 
print_for_decl			    pub fn print_for_decl(&mut self, loc: &hir::Local, coll: &hir::Expr) -> io::Result<()> 
print_foreign_item			    pub fn print_foreign_item(&mut self, item: &hir::ForeignItem) -> io::Result<()> 
print_foreign_mod			    pub fn print_foreign_mod(&mut self,
print_formal_lifetime_list			    fn print_formal_lifetime_list(&mut self, lifetimes: &[hir::LifetimeDef]) -> io::Result<()> 
print_generics			    pub fn print_generics(&mut self, generics: &hir::Generics) -> io::Result<()> 
print_if			    pub fn print_if(&mut self,
print_if_let			    pub fn print_if_let(&mut self,
print_impl_item			    pub fn print_impl_item(&mut self, ii: &hir::ImplItem) -> io::Result<()> 
print_item			    pub fn print_item(&mut self, item: &hir::Item) -> io::Result<()> 
print_item_id			    pub fn print_item_id(&mut self, item_id: &hir::ItemId) -> io::Result<()> 
print_lifetime			    pub fn print_lifetime(&mut self, lifetime: &hir::Lifetime) -> io::Result<()> 
print_lifetime_def			    pub fn print_lifetime_def(&mut self, lifetime: &hir::LifetimeDef) -> io::Result<()> 
print_local_decl			    pub fn print_local_decl(&mut self, loc: &hir::Local) -> io::Result<()> 
print_method_sig			    pub fn print_method_sig(&mut self,
print_mod			    pub fn print_mod(&mut self, _mod: &hir::Mod, attrs: &[ast::Attribute]) -> io::Result<()> 
print_mt			    pub fn print_mt(&mut self, mt: &hir::MutTy) -> io::Result<()> 
print_mutability			    pub fn print_mutability(&mut self, mutbl: hir::Mutability) -> io::Result<()> 
print_name			    pub fn print_name(&mut self, name: ast::Name) -> io::Result<()> 
print_opt_abi_and_extern_if_nondefault			    pub fn print_opt_abi_and_extern_if_nondefault(&mut self,
print_opt_lifetime			    pub fn print_opt_lifetime(&mut self, lifetime: &Option<hir::Lifetime>) -> io::Result<()> 
print_pat			    pub fn print_pat(&mut self, pat: &hir::Pat) -> io::Result<()> 
print_path			    fn print_path(&mut self,
print_path_parameters			    fn print_path_parameters(&mut self,
print_poly_trait_ref			    fn print_poly_trait_ref(&mut self, t: &hir::PolyTraitRef) -> io::Result<()> 
print_qpath			    fn print_qpath(&mut self,
print_remaining_comments			    pub fn print_remaining_comments(&mut self) -> io::Result<()> 
print_stmt			    pub fn print_stmt(&mut self, st: &hir::Stmt) -> io::Result<()> 
print_struct			    pub fn print_struct(&mut self,
print_trait_item			    pub fn print_trait_item(&mut self, ti: &hir::TraitItem) -> io::Result<()> 
print_trait_ref			    fn print_trait_ref(&mut self, t: &hir::TraitRef) -> io::Result<()> 
print_ty_fn			    pub fn print_ty_fn(&mut self,
print_ty_param			    pub fn print_ty_param(&mut self, param: &hir::TyParam) -> io::Result<()> 
print_type			    pub fn print_type(&mut self, ty: &hir::Ty) -> io::Result<()> 
print_unsafety			    pub fn print_unsafety(&mut self, s: hir::Unsafety) -> io::Result<()> 
print_usize			    pub fn print_usize(&mut self, i: usize) -> io::Result<()> 
print_variant			    pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> 
print_variants			    pub fn print_variants(&mut self,
print_view_path			    pub fn print_view_path(&mut self, vp: &hir::ViewPath) -> io::Result<()> 
print_visibility			    pub fn print_visibility(&mut self, vis: hir::Visibility) -> io::Result<()> 
print_where_clause			    pub fn print_where_clause(&mut self, where_clause: &hir::WhereClause) -> io::Result<()> 
rename			    pub fn rename(&self) -> Option<Name> 
rust_printer			pub fn rust_printer<'a>(writer: Box<Write + 'a>, krate: Option<&'a Crate>) -> State<'a> 
rust_printer_annotated			pub fn rust_printer_annotated<'a>(writer: Box<Write + 'a>,
signal_block_expr			fn signal_block_expr(lctx: &LoweringContext,
space_if_not_bol			    pub fn space_if_not_bol(&mut self) -> io::Result<()> 
span			    pub fn span(&self) -> Span 
std_path			fn std_path(lctx: &LoweringContext, components: &[&str]) -> Vec<hir::Ident> 
stmt_ends_with_semi			fn stmt_ends_with_semi(stmt: &hir::Stmt_) -> bool 
stmt_id			pub fn stmt_id(s: &Stmt) -> NodeId 
stmt_let			fn stmt_let(lctx: &LoweringContext,
stmt_to_string			pub fn stmt_to_string(stmt: &hir::Stmt) -> String 
str_to_ident			    fn str_to_ident(&self, s: &'static str) -> hir::Ident 
synth_comment			    pub fn synth_comment(&mut self, text: String) -> io::Result<()> 
test			mod test 
to_string			pub fn to_string<F>(f: F) -> String
trait_item_to_string			pub fn trait_item_to_string(i: &hir::TraitItem) -> String 
ty_to_string			pub fn ty_to_string(ty: &hir::Ty) -> String 
types			    pub fn types(&self) -> HirVec<&P<Ty>> 
unop_to_string			pub fn unop_to_string(op: UnOp) -> &'static str 
util			pub mod util;
variant_to_string			pub fn variant_to_string(var: &hir::Variant) -> String 
visibility			    pub fn visibility(&self) -> Visibility 
visibility_qualified			pub fn visibility_qualified(vis: hir::Visibility, s: &str) -> String 
visit_all_items			    pub fn visit_all_items<'hir, V:Visitor<'hir>>(&'hir self, visitor: &mut V) 
visit_arm			    fn visit_arm(&mut self, a: &'v Arm) 
visit_assoc_type_binding			    fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding) 
visit_attribute			    fn visit_attribute(&mut self, _attr: &'v Attribute) 
visit_block			    fn visit_block(&mut self, b: &'v Block) 
visit_block			    fn visit_block(&mut self, block: &Block) 
visit_decl			    fn visit_decl(&mut self, d: &'v Decl) 
visit_enum_def			    fn visit_enum_def(&mut self,
visit_explicit_self			    fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) 
visit_expr			    fn visit_expr(&mut self, ex: &'v Expr) 
visit_expr			    fn visit_expr(&mut self, expression: &Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, _ex: &'v Expr) 
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) 
visit_fn			    fn visit_fn(&mut self,
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &'v ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) 
visit_generics			    fn visit_generics(&mut self, g: &'v Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &Generics) 
visit_generics_helper			    fn visit_generics_helper(&mut self, generics: &Generics) 
visit_ident			    fn visit_ident(&mut self, span: Span, ident: Ident) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'v ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &hir::ImplItem) 
visit_item			    fn visit_item(&mut self, i: &'v Item) 
visit_item			    fn visit_item(&mut self, item: &'lcx Item) 
visit_item			    fn visit_item(&mut self, item: &Item) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &'v Lifetime) 
visit_lifetime			    fn visit_lifetime(&mut self, lifetime: &Lifetime) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, def: &LifetimeDef) 
visit_local			    fn visit_local(&mut self, l: &'v Local) 
visit_local			    fn visit_local(&mut self, local: &Local) 
visit_macro_def			    fn visit_macro_def(&mut self, macro_def: &'v MacroDef) 
visit_mod			    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) 
visit_mod			    fn visit_mod(&mut self, module: &Mod, _: Span, node_id: NodeId) 
visit_name			    fn visit_name(&mut self, _span: Span, _name: Name) 
visit_nested_item			    fn visit_nested_item(&mut self, id: ItemId) 
visit_pat			    fn visit_pat(&mut self, p: &'v Pat) 
visit_pat			    fn visit_pat(&mut self, pattern: &Pat) 
visit_path			    fn visit_path(&mut self, path: &'v Path, _id: NodeId) 
visit_path_list_item			    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) 
visit_path_parameters			    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) 
visit_path_segment			    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) 
visit_stmt			    fn visit_stmt(&mut self, s: &'v Stmt) 
visit_stmt			    fn visit_stmt(&mut self, statement: &Stmt) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &'v StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, struct_field: &StructField) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'v TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &hir::TraitItem) 
visit_trait_ref			    fn visit_trait_ref(&mut self, t: &'v TraitRef) 
visit_trait_ref			    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) 
visit_ty			    fn visit_ty(&mut self, t: &'v Ty) 
visit_ty			    fn visit_ty(&mut self, typ: &Ty) 
visit_ty_param_bound			    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) 
visit_variant			    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) 
visit_variant_data			    fn visit_variant_data(&mut self,
visit_variant_data			    fn visit_variant_data(&mut self,
walk_arm			pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) 
walk_assoc_type_binding			pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,
walk_block			pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) 
walk_crate			pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) 
walk_decl			pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) 
walk_enum_def			pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,
walk_explicit_self			pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V, explicit_self: &'v ExplicitSelf) 
walk_expr			pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) 
walk_fn			pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,
walk_fn_decl			pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) 
walk_fn_decl_nopat			pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) 
walk_fn_kind			pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'v>) 
walk_fn_ret_ty			pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy) 
walk_foreign_item			pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) 
walk_generics			pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) 
walk_ident			pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, ident: Ident) 
walk_impl_item			pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) 
walk_item			pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) 
walk_lifetime			pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) 
walk_lifetime_def			pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V, lifetime_def: &'v LifetimeDef) 
walk_local			pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) 
walk_macro_def			pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) 
walk_mod			pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod) 
walk_opt_ident			pub fn walk_opt_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_ident: Option<Ident>) 
walk_opt_name			pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) 
walk_pat			pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) 
walk_pat			pub fn walk_pat<F>(pat: &Pat, mut it: F) -> bool
walk_pat_			    fn walk_pat_<G>(pat: &Pat, it: &mut G) -> bool
walk_path			pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) 
walk_path_list_item			pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V,
walk_path_parameters			pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,
walk_path_segment			pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,
walk_poly_trait_ref			pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,
walk_stmt			pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) 
walk_struct_def			pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) 
walk_struct_field			pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) 
walk_trait_item			pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) 
walk_trait_ref			pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)
walk_ty			pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) 
walk_ty_param_bound			pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyParamBound) 
walk_variant			pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,
where_clause_to_string			pub fn where_clause_to_string(i: &hir::WhereClause) -> String 
word_nbsp			    pub fn word_nbsp(&mut self, w: &str) -> io::Result<()> 
writer			    fn writer(&mut self) -> &mut pp::Printer<'a> 
