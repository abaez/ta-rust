Add for String			impl<'a> Add<&'a str> for String 
AsMut			impl<T> AsMut<Vec<T>> for Vec<T> 
AsMut for Vec			impl<T> AsMut<[T]> for Vec<T> 
AsRef			impl<T> AsRef<Vec<T>> for Vec<T> 
AsRef for Cow			impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> 
AsRef for String			impl AsRef<[u8]> for String 
AsRef for String			impl AsRef<str> for String 
AsRef for Vec			impl<T> AsRef<[T]> for Vec<T> 
BTreeMap			impl<K, V> BTreeMap<K, V> 
BTreeMap			impl<K: Ord, V> BTreeMap<K, V> 
BTreeMap			pub struct BTreeMap<K, V> 
BTreeSet			impl<T: Ord> BTreeSet<T> 
BTreeSet			impl<T> BTreeSet<T> 
BTreeSet			pub struct BTreeSet<T> 
BackPlace			pub struct BackPlace<'a, T: 'a> 
BinaryHeap			impl<T: Ord> BinaryHeap<T> 
BinaryHeap			pub struct BinaryHeap<T> 
BitAnd			impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitAnd for EnumSet			impl<E: CLike> BitAnd for EnumSet<E> 
BitOr			impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitOr for EnumSet			impl<E: CLike> BitOr for EnumSet<E> 
BitXor			impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitXor for EnumSet			impl<E: CLike> BitXor for EnumSet<E> 
Borrow for Cow			impl<'a, B: ?Sized> Borrow<B> for Cow<'a, B>
Borrow for String			impl Borrow<str> for String 
Borrow for Vec			impl<T> Borrow<[T]> for Vec<T> 
BorrowMut for Vec			impl<T> BorrowMut<[T]> for Vec<T> 
Bound			pub enum Bound<T> 
BoxedNode			impl<K, V> BoxedNode<K, V> 
BoxedNode			struct BoxedNode<K, V> 
CLike			pub trait CLike 
Clone for BTreeMap			impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> 
Clone for BinaryHeap			impl<T: Clone> Clone for BinaryHeap<T> 
Clone for Cow			impl<'a, B: ?Sized> Clone for Cow<'a, B> where B: ToOwned 
Clone for Difference			impl<'a, T> Clone for Difference<'a, T> 
Clone for EnumSet			impl<E> Clone for EnumSet<E> 
Clone for Handle			impl<Node: Copy, Type> Clone for Handle<Node, Type> 
Clone for Intersection			impl<'a, T> Clone for Intersection<'a, T> 
Clone for IntoIter			impl<T: Clone> Clone for IntoIter<T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, K, V> Clone for Iter<'a, K, V> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<E> Clone for Iter<E> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Keys			impl<'a, K, V> Clone for Keys<'a, K, V> 
Clone for LinkedList			impl<A: Clone> Clone for LinkedList<A> 
Clone for NodeRef			impl<'a, K: 'a, V: 'a, Type> Clone for NodeRef<marker::Immut<'a>, K, V, Type> 
Clone for ParseError			impl Clone for ParseError 
Clone for Range			impl<'a, K, V> Clone for Range<'a, K, V> 
Clone for Range			impl<'a, T> Clone for Range<'a, T> 
Clone for Rawlink			impl<T> Clone for Rawlink<T> 
Clone for String			impl Clone for String 
Clone for SymmetricDifference			impl<'a, T> Clone for SymmetricDifference<'a, T> 
Clone for Union			impl<'a, T> Clone for Union<'a, T> 
Clone for Values			impl<'a, K, V> Clone for Values<'a, K, V> 
Clone for Vec			impl<T: Clone> Clone for Vec<T> 
Clone for VecDeque			impl<T: Clone> Clone for VecDeque<T> 
Copy for EnumSet			impl<E> Copy for EnumSet<E> {}
Copy for Handle			impl<Node: Copy, Type> Copy for Handle<Node, Type> { }
Copy for NodeRef			impl<'a, K: 'a, V: 'a, Type> Copy for NodeRef<marker::Immut<'a>, K, V, Type> { }
Copy for Rawlink			impl<T> Copy for Rawlink<T> {}
Cow			impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned 
Cow			pub enum Cow<'a, B: ?Sized + 'a>
Debug for BTreeMap			impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> 
Debug for BTreeSet			impl<T: Debug> Debug for BTreeSet<T> 
Default for BTreeMap			impl<K: Ord, V> Default for BTreeMap<K, V> 
Default for BTreeSet			impl<T: Ord> Default for BTreeSet<T> 
Default for BinaryHeap			impl<T: Ord> Default for BinaryHeap<T> 
Default for LinkedList			impl<T> Default for LinkedList<T> 
Default for String			impl Default for String 
Default for Vec			impl<T> Default for Vec<T> 
Default for VecDeque			impl<T> Default for VecDeque<T> 
Deref for Cow			impl<'a, B: ?Sized> Deref for Cow<'a, B> where B: ToOwned 
Difference			pub struct Difference<'a, T: 'a> 
DoubleEndedIterator for Drain			impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a> DoubleEndedIterator for Drain<'a> 
DoubleEndedIterator for Drain			impl<'a, T> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<K, V> DoubleEndedIterator for IntoIter<K, V> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<A> DoubleEndedIterator for IntoIter<A> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a, K: 'a, V: 'a> DoubleEndedIterator for Iter<'a, K, V> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a, A> DoubleEndedIterator for Iter<'a, A> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for IterMut			impl<'a, K: 'a, V: 'a> DoubleEndedIterator for IterMut<'a, K, V> 
DoubleEndedIterator for IterMut			impl<'a, A> DoubleEndedIterator for IterMut<'a, A> 
DoubleEndedIterator for IterMut			impl<'a, T> DoubleEndedIterator for IterMut<'a, T> 
DoubleEndedIterator for Keys			impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> 
DoubleEndedIterator for Range			impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> 
DoubleEndedIterator for Range			impl<'a, T> DoubleEndedIterator for Range<'a, T> 
DoubleEndedIterator for RangeMut			impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> 
DoubleEndedIterator for Values			impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> 
DoubleEndedIterator for ValuesMut			impl<'a, K, V> DoubleEndedIterator for ValuesMut<'a, K, V> 
Drain			pub struct Drain<'a, T: 'a> 
Drain			pub struct Drain<'a> 
Drain			pub struct Drain<'a, T: 'a> 
Drain			pub struct Drain<'a, T: 'a> 
Drop for BTreeMap			impl<K, V> Drop for BTreeMap<K, V> 
Drop for Drain			impl<'a> Drop for Drain<'a> 
Drop for Drain			impl<'a, T> Drop for Drain<'a, T> 
Drop for Drain			impl<'a, T: 'a> Drop for Drain<'a, T> 
Drop for Hole			impl<'a, T> Drop for Hole<'a, T> 
Drop for IntoIter			impl<K, V> Drop for IntoIter<K, V> 
Drop for IntoIter			impl<T> Drop for IntoIter<T> 
Drop for LinkedList			impl<T> Drop for LinkedList<T> 
Drop for Vec			impl<T> Drop for Vec<T> 
Drop for VecDeque			impl<T> Drop for VecDeque<T> 
Edge			    pub enum Edge { }
EncodeUtf16			pub struct EncodeUtf16<'a> 
Entry			impl<'a, K: Ord, V> Entry<'a, K, V> 
Entry			pub enum Entry<'a, K: 'a, V: 'a> 
EnumSet			impl<E: CLike> EnumSet<E> 
EnumSet			pub struct EnumSet<E> 
Eq for BTreeMap			impl<K: Eq, V: Eq> Eq for BTreeMap<K, V> {}
Eq for Cow			impl<'a, B: ?Sized> Eq for Cow<'a, B> where B: Eq + ToOwned {}
Eq for LinkedList			impl<A: Eq> Eq for LinkedList<A> {}
Eq for ParseError			impl Eq for ParseError {}
Eq for Vec			impl<T: Eq> Eq for Vec<T> {}
Eq for VecDeque			impl<A: Eq> Eq for VecDeque<A> {}
ExactSizeIterator for Drain			impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for Drain			impl<'a, T> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for Drain			impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for IntoIter			impl<K, V> ExactSizeIterator for IntoIter<K, V> 
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> 
ExactSizeIterator for IntoIter			impl<A> ExactSizeIterator for IntoIter<A> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> {}
ExactSizeIterator for Iter			impl<'a, K: 'a, V: 'a> ExactSizeIterator for Iter<'a, K, V> 
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> 
ExactSizeIterator for Iter			impl<'a, A> ExactSizeIterator for Iter<'a, A> {}
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> {}
ExactSizeIterator for IterMut			impl<'a, K: 'a, V: 'a> ExactSizeIterator for IterMut<'a, K, V> 
ExactSizeIterator for IterMut			impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}
ExactSizeIterator for IterMut			impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}
ExactSizeIterator for Keys			impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> 
ExactSizeIterator for Values			impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> 
ExactSizeIterator for ValuesMut			impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> 
Extend for BTreeMap			impl<'a, K: Ord + Copy, V: Copy> Extend<(&'a K, &'a V)> for BTreeMap<K, V> 
Extend for BTreeMap			impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> 
Extend for BTreeSet			impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> 
Extend for BTreeSet			impl<T: Ord> Extend<T> for BTreeSet<T> 
Extend for BinaryHeap			impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> 
Extend for BinaryHeap			impl<T: Ord> Extend<T> for BinaryHeap<T> 
Extend for EnumSet			impl<'a, E: 'a + CLike + Copy> Extend<&'a E> for EnumSet<E> 
Extend for EnumSet			impl<E: CLike> Extend<E> for EnumSet<E> 
Extend for LinkedList			impl<'a, T: 'a + Copy> Extend<&'a T> for LinkedList<T> 
Extend for LinkedList			impl<A> Extend<A> for LinkedList<A> 
Extend for String			impl Extend<String> for String 
Extend for String			impl Extend<char> for String 
Extend for String			impl<'a> Extend<&'a char> for String 
Extend for String			impl<'a> Extend<&'a str> for String 
Extend for Vec			impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> 
Extend for Vec			impl<T> Extend<T> for Vec<T> 
Extend for VecDeque			impl<'a, T: 'a + Copy> Extend<&'a T> for VecDeque<T> 
Extend for VecDeque			impl<A> Extend<A> for VecDeque<A> 
ForceResult			pub enum ForceResult<Leaf, Internal> 
From			impl<T: Ord> From<Vec<T>> for BinaryHeap<T> 
From			impl<T> From<BinaryHeap<T>> for Vec<T> 
From			impl<'a, T> From<&'a mut Link<T>> for Rawlink<Node<T>> 
From			impl<'a, T: Clone> From<Vec<T>> for Cow<'a, [T]> 
From for Cow			impl<'a> From<&'a str> for Cow<'a, str> 
From for Cow			impl<'a> From<String> for Cow<'a, str> 
From for Cow			impl<'a, T: Clone> From<&'a [T]> for Cow<'a, [T]> 
From for String			impl<'a> From<&'a str> for String 
From for Vec			impl<'a, T: Clone> From<&'a [T]> for Vec<T> 
From for Vec			impl<'a> From<&'a str> for Vec<u8> 
FromIterator for BTreeMap			impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> 
FromIterator for BTreeSet			impl<T: Ord> FromIterator<T> for BTreeSet<T> 
FromIterator for BinaryHeap			impl<T: Ord> FromIterator<T> for BinaryHeap<T> 
FromIterator for Cow			impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone 
FromIterator for EnumSet			impl<E: CLike> FromIterator<E> for EnumSet<E> 
FromIterator for LinkedList			impl<A> FromIterator<A> for LinkedList<A> 
FromIterator for String			impl FromIterator<String> for String 
FromIterator for String			impl FromIterator<char> for String 
FromIterator for String			impl<'a> FromIterator<&'a str> for String 
FromIterator for Vec			impl<T> FromIterator<T> for Vec<T> 
FromIterator for VecDeque			impl<A> FromIterator<A> for VecDeque<A> 
FromStr for String			impl FromStr for String 
FromUtf16Error			pub struct FromUtf16Error(());
FromUtf8Error			impl FromUtf8Error 
FromUtf8Error			pub struct FromUtf8Error 
FrontPlace			pub struct FrontPlace<'a, T: 'a> 
Handle			impl<'a, K, V, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> 
Handle			impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> 
Handle			impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV> 
Handle			impl<Node, Type> Handle<Node, Type> 
Handle			pub struct Handle<Node, Type> 
Hash for BTreeMap			impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> 
Hash for Cow			impl<'a, B: ?Sized> Hash for Cow<'a, B> where B: Hash + ToOwned 
Hash for LinkedList			impl<A: Hash> Hash for LinkedList<A> 
Hash for Vec			impl<T: Hash> Hash for Vec<T> 
Hash for VecDeque			impl<A: Hash> Hash for VecDeque<A> 
Hole			impl<'a, T> Hole<'a, T> 
Hole			struct Hole<'a, T: 'a> 
Immut			    pub struct Immut<'a>(PhantomData<&'a ()>);
InPlace for BackPlace			impl<'a, T> InPlace<T> for BackPlace<'a, T> 
InPlace for FrontPlace			impl<'a, T> InPlace<T> for FrontPlace<'a, T> 
Index for BTreeMap			impl<'a, K: Ord, Q: ?Sized, V> Index<&'a Q> for BTreeMap<K, V>
Index for Vec			impl<T> Index<usize> for Vec<T> 
Index for VecDeque			impl<A> Index<usize> for VecDeque<A> 
IndexMut for Vec			impl<T> IndexMut<usize> for Vec<T> 
IndexMut for VecDeque			impl<A> IndexMut<usize> for VecDeque<A> 
InsertResult			pub enum InsertResult<'a, K, V, Type> 
Internal			    pub enum Internal { }
InternalNode			impl<K, V> InternalNode<K, V> 
InternalNode			struct InternalNode<K, V> 
Intersection			pub struct Intersection<'a, T: 'a> 
Into			impl Into<Vec<u8>> for String 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<K, V> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord 
IntoIterator			impl<'a, K: 'a, V: 'a> IntoIterator for &'a BTreeMap<K, V> 
IntoIterator			impl<'a, K: 'a, V: 'a> IntoIterator for &'a mut BTreeMap<K, V> 
IntoIterator			impl<'a, T> IntoIterator for &'a BTreeSet<T> 
IntoIterator			impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike
IntoIterator			impl<'a, T> IntoIterator for &'a LinkedList<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut LinkedList<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a Vec<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut Vec<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a VecDeque<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut VecDeque<T> 
IntoIterator for BTreeMap			impl<K, V> IntoIterator for BTreeMap<K, V> 
IntoIterator for BTreeSet			impl<T> IntoIterator for BTreeSet<T> 
IntoIterator for BinaryHeap			impl<T: Ord> IntoIterator for BinaryHeap<T> 
IntoIterator for LinkedList			impl<T> IntoIterator for LinkedList<T> 
IntoIterator for Vec			impl<T> IntoIterator for Vec<T> 
IntoIterator for VecDeque			impl<T> IntoIterator for VecDeque<T> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			pub struct Iter<'a, K: 'a, V: 'a> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			impl<E: CLike> Iter<E> 
Iter			pub struct Iter<E> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			pub struct Iter<'a, T: 'a> 
IterMut			pub struct IterMut<'a, K: 'a, V: 'a> 
IterMut			impl<'a, A> IterMut<'a, A> 
IterMut			pub struct IterMut<'a, T: 'a> 
IterMut			pub struct IterMut<'a, T: 'a> 
Iterator for Difference			impl<'a, T: Ord> Iterator for Difference<'a, T> 
Iterator for Drain			impl<'a, T: 'a> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a> Iterator for Drain<'a> 
Iterator for Drain			impl<'a, T> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a, T: 'a> Iterator for Drain<'a, T> 
Iterator for EncodeUtf16			impl<'a> Iterator for EncodeUtf16<'a> 
Iterator for Intersection			impl<'a, T: Ord> Iterator for Intersection<'a, T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<K, V> Iterator for IntoIter<K, V> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<A> Iterator for IntoIter<A> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<E: CLike> Iterator for Iter<E> 
Iterator for Iter			impl<'a, A> Iterator for Iter<'a, A> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for IterMut			impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> 
Iterator for IterMut			impl<'a, A> Iterator for IterMut<'a, A> 
Iterator for IterMut			impl<'a, T> Iterator for IterMut<'a, T> 
Iterator for Keys			impl<'a, K, V> Iterator for Keys<'a, K, V> 
Iterator for Range			impl<'a, K, V> Iterator for Range<'a, K, V> 
Iterator for Range			impl<'a, T> Iterator for Range<'a, T> 
Iterator for RangeMut			impl<'a, K, V> Iterator for RangeMut<'a, K, V> 
Iterator for SymmetricDifference			impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> 
Iterator for Union			impl<'a, T: Ord> Iterator for Union<'a, T> 
Iterator for Values			impl<'a, K, V> Iterator for Values<'a, K, V> 
Iterator for ValuesMut			impl<'a, K, V> Iterator for ValuesMut<'a, K, V> 
KV			    pub enum KV { }
Keys			pub struct Keys<'a, K: 'a, V: 'a> 
Leaf			    pub enum Leaf { }
LeafNode			impl<K, V> LeafNode<K, V> 
LeafNode			struct LeafNode<K, V> 
LeafOrInternal			    pub enum LeafOrInternal { }
LinkedList			impl<T> LinkedList<T> 
LinkedList			pub struct LinkedList<T> 
Mut			    pub struct Mut<'a>(PhantomData<&'a mut ()>);
Node			impl<T> Node<T> 
Node			struct Node<T> 
NodeRef			impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> 
NodeRef			impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> 
NodeRef			impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> 
NodeRef			impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> 
NodeRef			impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> 
NodeRef			impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> 
NodeRef			impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> 
NodeRef			impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> 
NodeRef			impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> 
NodeRef			impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> 
NodeRef			impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> 
NodeRef			pub struct NodeRef<BorrowType, K, V, Type> 
OccupiedEntry			impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> 
OccupiedEntry			pub struct OccupiedEntry<'a, K: 'a, V: 'a> 
Ord for BTreeMap			impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> 
Ord for Cow			impl<'a, B: ?Sized> Ord for Cow<'a, B> where B: Ord + ToOwned 
Ord for LinkedList			impl<A: Ord> Ord for LinkedList<A> 
Ord for Vec			impl<T: Ord> Ord for Vec<T> 
Ord for VecDeque			impl<A: Ord> Ord for VecDeque<A> 
Owned			    pub enum Owned { }
ParseError			pub enum ParseError {}
PartialEq			impl<'a, 'b, B: ?Sized, C: ?Sized> PartialEq<Cow<'b, C>> for Cow<'a, B>
PartialEq			impl<BorrowType, K, V, NodeType, HandleType> PartialEq
PartialEq			        impl<'a, 'b> PartialEq<
PartialEq			        impl<'a, 'b> PartialEq<
PartialEq			        impl<'a, 'b, A: 
PartialEq for BTreeMap			impl<K: PartialEq, V: PartialEq> PartialEq for BTreeMap<K, V> 
PartialEq for LinkedList			impl<A: PartialEq> PartialEq for LinkedList<A> 
PartialEq for ParseError			impl PartialEq for ParseError 
PartialEq for String			impl PartialEq for String 
PartialEq for VecDeque			impl<A: PartialEq> PartialEq for VecDeque<A> 
PartialOrd for BTreeMap			impl<K: PartialOrd, V: PartialOrd> PartialOrd for BTreeMap<K, V> 
PartialOrd for Cow			impl<'a, B: ?Sized> PartialOrd for Cow<'a, B> where B: PartialOrd + ToOwned 
PartialOrd for LinkedList			impl<A: PartialOrd> PartialOrd for LinkedList<A> 
PartialOrd for Vec			impl<T: PartialOrd> PartialOrd for Vec<T> 
PartialOrd for VecDeque			impl<A: PartialOrd> PartialOrd for VecDeque<A> 
Pattern			impl<'a, 'b> Pattern<'a> for &'b String 
Place for BackPlace			impl<'a, T> Place<T> for BackPlace<'a, T> 
Place for FrontPlace			impl<'a, T> Place<T> for FrontPlace<'a, T> 
Placer for BackPlace			impl<'a, T> Placer<T> for BackPlace<'a, T> 
Placer for FrontPlace			impl<'a, T> Placer<T> for FrontPlace<'a, T> 
Range			impl<'a, K, V> Range<'a, K, V> 
Range			pub struct Range<'a, K: 'a, V: 'a> 
Range			pub struct Range<'a, T: 'a> 
RangeArgument			pub trait RangeArgument<T> 
RangeArgument for Range			impl<T> RangeArgument<T> for Range<T> 
RangeArgument for RangeFrom			impl<T> RangeArgument<T> for RangeFrom<T> 
RangeArgument for RangeFull			impl<T> RangeArgument<T> for RangeFull {}
RangeArgument for RangeTo			impl<T> RangeArgument<T> for RangeTo<T> 
RangeMut			impl<'a, K, V> RangeMut<'a, K, V> 
RangeMut			pub struct RangeMut<'a, K: 'a, V: 'a> 
Rawlink			impl<T> Rawlink<T> 
Rawlink			struct Rawlink<T> 
Recover			trait Recover<Q: ?Sized> 
Root			impl<K, V> Root<K, V> 
Root			pub struct Root<K, V> 
SearchResult			pub enum SearchResult<BorrowType, K, V, FoundType, GoDownType> 
Send			unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send
Send			unsafe impl<'a, K: Sync + 'a, V: Sync + 'a, Type> Send
Send			unsafe impl<K: Send, V: Send, Type> Send
Send for Drain			unsafe impl<'a> Send for Drain<'a> {}
Send for Drain			unsafe impl<'a, T: Send> Send for Drain<'a, T> {}
Send for Drain			unsafe impl<'a, T: Send> Send for Drain<'a, T> {}
Send for IntoIter			unsafe impl<T: Send> Send for IntoIter<T> {}
Send for Rawlink			unsafe impl<T: Send> Send for Rawlink<T> {}
Send for Root			unsafe impl<K: Send, V: Send> Send for Root<K, V> { }
SliceConcatExt			pub trait SliceConcatExt<T: ?Sized> 
String			impl String 
String			pub struct String 
Sub			impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>> for &'a BTreeSet<T> 
Sub for EnumSet			impl<E: CLike> Sub for EnumSet<E> 
SymmetricDifference			pub struct SymmetricDifference<'a, T: 'a> 
Sync			unsafe impl<BorrowType, K: Sync, V: Sync, Type> Sync
Sync for Drain			unsafe impl<'a> Sync for Drain<'a> {}
Sync for Drain			unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}
Sync for Drain			unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}
Sync for IntoIter			unsafe impl<T: Sync> Sync for IntoIter<T> {}
Sync for Rawlink			unsafe impl<T: Sync> Sync for Rawlink<T> {}
Sync for Root			unsafe impl<K: Sync, V: Sync> Sync for Root<K, V> { }
ToOwned			pub trait ToOwned 
ToOwned			impl<T: Clone> ToOwned for [T] 
ToOwned for T			impl<T> ToOwned for T where T: Clone 
ToOwned for str			impl ToOwned for str 
ToString			pub trait ToString 
ToString for T			impl<T: fmt::Display + ?Sized> ToString for T 
ToString for str			impl ToString for str 
UnderflowResult			enum UnderflowResult<'a, K, V> 
Union			pub struct Union<'a, T: 'a> 
VacantEntry			impl<'a, K: Ord, V> VacantEntry<'a, K, V> 
VacantEntry			pub struct VacantEntry<'a, K: 'a, V: 'a> 
Values			pub struct Values<'a, K: 'a, V: 'a> 
ValuesMut			pub struct ValuesMut<'a, K: 'a, V: 'a> 
Vec			impl<T: Clone> Vec<T> 
Vec			impl<T: PartialEq> Vec<T> 
Vec			impl<T> Vec<T> 
Vec			pub struct Vec<T> 
VecDeque			impl<T: Clone> VecDeque<T> 
VecDeque			impl<T> VecDeque<T> 
VecDeque			pub struct VecDeque<T> 
a			    fn a<'a>(x: LinkedList<&'static str>) -> LinkedList<&'a str> { x }
add			    fn add(mut self, other: &str) -> String 
append			    pub fn append(&mut self, other: &mut LinkedList<T>) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
as_bytes			    pub fn as_bytes(&self) -> &[u8] 
as_bytes			    pub fn as_bytes(&self) -> &[u8] 
as_internal			    fn as_internal(&self) -> &InternalNode<K, V> 
as_internal_mut			    fn as_internal_mut(&mut self) -> &mut InternalNode<K, V> 
as_leaf			    fn as_leaf(&self) -> &LeafNode<K, V> 
as_leaf_mut			    fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> 
as_mut			    pub fn as_mut(&mut self)
as_mut			    fn as_mut(&mut self) -> &mut Vec<T> 
as_mut			    fn as_mut(&mut self) -> &mut [T] 
as_mut_ptr			    pub fn as_mut_ptr(&mut self) -> *mut T 
as_mut_slice			    pub fn as_mut_slice(&mut self) -> &mut [T] 
as_mut_slices			    pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) 
as_mut_str			    pub fn as_mut_str(&mut self) -> &mut str 
as_mut_vec			    pub unsafe fn as_mut_vec(&mut self) -> &mut Vec<u8> 
as_ptr			    fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> 
as_ptr			    pub fn as_ptr(&self) -> *const T 
as_ptr			    pub fn as_ptr(&self) -> *const u8 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    pub fn as_ref(&self)
as_ref			    fn as_ref(&self) -> &[u8] 
as_ref			    fn as_ref(&self) -> &str 
as_ref			    fn as_ref(&self) -> &Vec<T> 
as_ref			    fn as_ref(&self) -> &[T] 
as_slice			    pub fn as_slice(&self) -> &[T] 
as_slices			    pub fn as_slices(&self) -> (&[T], &[T]) 
as_str			    pub fn as_str(&self) -> &str 
ascend			    pub fn ascend(self) -> Result<
assert_covariance			fn assert_covariance() 
b			    fn b<'i, 'a>(x: Iter<'i, &'static str>) -> Iter<'i, &'a str> { x }
back			    pub fn back(&self) -> Option<&T> 
back			    pub fn back(&self) -> Option<&T> 
back_mut			    pub fn back_mut(&mut self) -> Option<&mut T> 
back_mut			    pub fn back_mut(&mut self) -> Option<&mut T> 
back_place			    pub fn back_place(&mut self) -> BackPlace<T> 
bench_pop_back_100			    fn bench_pop_back_100(b: &mut test::Bencher) 
bench_pop_front_100			    fn bench_pop_front_100(b: &mut test::Bencher) 
bench_push_back_100			    fn bench_push_back_100(b: &mut test::Bencher) 
bench_push_front_100			    fn bench_push_front_100(b: &mut test::Bencher) 
binary_heap			pub mod binary_heap;
binary_search			    pub fn binary_search(&self, x: &T) -> Result<usize, usize>
binary_search_by			    pub fn binary_search_by<F>(&self, f: F) -> Result<usize, usize>
bit			fn bit<E: CLike>(e: &E) -> usize 
bitand			    fn bitand(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitand			    fn bitand(self, e: EnumSet<E>) -> EnumSet<E> 
bitor			    fn bitor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitor			    fn bitor(self, e: EnumSet<E>) -> EnumSet<E> 
bitxor			    fn bitxor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitxor			    fn bitxor(self, e: EnumSet<E>) -> EnumSet<E> 
borrow			    fn borrow(&self) -> &B 
borrow			pub mod borrow;
borrow			    fn borrow(&self) -> &[T] 
borrow			    fn borrow(&self) -> &str 
borrow_mut			    fn borrow_mut(&mut self) -> &mut [T] 
btree			mod btree;
btree_map			pub mod btree_map 
btree_set			pub mod btree_set 
buffer_as_mut_slice			    unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] 
buffer_as_slice			    unsafe fn buffer_as_slice(&self) -> &[T] 
buffer_read			    unsafe fn buffer_read(&mut self, off: usize) -> T 
buffer_write			    unsafe fn buffer_write(&mut self, off: usize, value: T) 
bytes			    pub fn bytes(&self) -> Bytes 
c			    fn c<'a>(x: IntoIter<&'static str>) -> IntoIter<&'a str> { x }
can_merge			    pub fn can_merge(&self) -> bool 
cap			    fn cap(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
case_ignoreable_then_cased			        fn case_ignoreable_then_cased<I: Iterator<Item = char>>(iter: I) -> bool 
cast_unchecked			    unsafe fn cast_unchecked<NewType>(&mut self)
char_at			    pub fn char_at(&self, i: usize) -> char 
char_at_reverse			    pub fn char_at_reverse(&self, i: usize) -> char 
char_indices			    pub fn char_indices(&self) -> CharIndices 
char_range_at			    pub fn char_range_at(&self, start: usize) -> CharRange 
char_range_at_reverse			    pub fn char_range_at_reverse(&self, start: usize) -> CharRange 
chars			    pub fn chars(&self) -> Chars 
check_links			    pub fn check_links<T>(list: &LinkedList<T>) 
chunks			    pub fn chunks(&self, size: usize) -> Chunks<T> 
chunks_mut			    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Cow<'a, B> 
clone			    fn clone(&self) -> BTreeMap<K, V> 
clone			    fn clone(&self) -> Iter<'a, K, V> 
clone			    fn clone(&self) -> Keys<'a, K, V> 
clone			    fn clone(&self) -> Range<'a, K, V> 
clone			    fn clone(&self) -> Values<'a, K, V> 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> Difference<'a, T> 
clone			    fn clone(&self) -> Intersection<'a, T> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> Range<'a, T> 
clone			    fn clone(&self) -> SymmetricDifference<'a, T> 
clone			    fn clone(&self) -> Union<'a, T> 
clone			    fn clone(&self) -> EnumSet<E> 
clone			    fn clone(&self) -> Iter<E> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> LinkedList<A> 
clone			    fn clone(&self) -> Rawlink<T> 
clone			    fn clone(&self) -> ParseError 
clone			    fn clone(&self) -> Self 
clone			    fn clone(&self) -> IntoIter<T> 
clone			    fn clone(&self) -> Vec<T> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> VecDeque<T> 
clone_from			    fn clone_from(&mut self, source: &Self) 
clone_from			    fn clone_from(&mut self, source: &Self) 
clone_from			    fn clone_from(&mut self, other: &Vec<T>) 
clone_from_slice			    pub fn clone_from_slice(&mut self, src: &[T]) where T: Clone 
clone_subtree			        fn clone_subtree<K: Clone, V: Clone>(
cmp			    fn cmp(&self, other: &Cow<'a, B>) -> Ordering 
cmp			    fn cmp(&self, other: &BTreeMap<K, V>) -> Ordering 
cmp			    fn cmp(&self, other: &LinkedList<A>) -> Ordering 
cmp			    fn cmp(&self, other: &Vec<T>) -> Ordering 
cmp			    fn cmp(&self, other: &VecDeque<A>) -> Ordering 
cmp_opt			fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering) -> Ordering 
concat			    fn concat(&self) -> Self::Output;
concat			    fn concat(&self) -> Vec<T> 
concat			    fn concat(&self) -> String 
connect			    fn connect(&self, sep: &T) -> Self::Output;
connect			    fn connect(&self, sep: &T) -> Vec<T> 
connect			    fn connect(&self, sep: &str) -> String 
contains			    pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool
contains			    pub fn contains(&self, e: &E) -> bool 
contains			    pub fn contains(&self, x: &T) -> bool
contains			    pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool 
contains_key			    pub fn contains_key<Q: ?Sized>(&self, key: &Q) -> bool where K: Borrow<Q>, Q: Ord 
copy			    unsafe fn copy(&self, dst: usize, src: usize, len: usize) 
copy_from_slice			    pub fn copy_from_slice(&mut self, src: &[T]) where T: Copy 
copy_nonoverlapping			    unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) 
correct_parent_link			    fn correct_parent_link(mut self) 
count			    fn count(self) -> usize 
count			fn count(tail: usize, head: usize, size: usize) -> usize 
deallocate_and_ascend			    pub unsafe fn deallocate_and_ascend(self) -> Option<
dedup			    pub fn dedup(&mut self) 
default			    fn default() -> BinaryHeap<T> 
default			    fn default() -> BTreeMap<K, V> 
default			    fn default() -> BTreeSet<T> 
default			    fn default() -> LinkedList<T> 
default			    fn default() -> String 
default			    fn default() -> Vec<T> 
default			    fn default() -> VecDeque<T> 
deref			    fn deref(&self) -> &B 
deref			    fn deref(&self) -> &str 
deref			    fn deref(&self) -> &[T] 
deref_mut			    fn deref_mut(&mut self) -> &mut str 
deref_mut			    fn deref_mut(&mut self) -> &mut [T] 
descend			    pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> 
diff			        fn diff(a: usize, b: usize) -> usize 
difference			    pub fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T> 
drain			    pub fn drain(&mut self) -> Drain<T> 
drain			    pub fn drain<R>(&mut self, range: R) -> Drain
drain			    pub fn drain<R>(&mut self, range: R) -> Drain<T>
drain			    pub fn drain<R>(&mut self, range: R) -> Drain<T>
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
element			    fn element(&self) -> &T 
encode_utf16			    pub fn encode_utf16(&self) -> EncodeUtf16 
end			    fn end(&self) -> Option<&T> 
ends_with			    pub fn ends_with(&self, needle: &[T]) -> bool
ends_with			    pub fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool
entry			    pub fn entry(&mut self, key: K) -> Entry<K, V> 
enum_set			pub mod enum_set;
eq			    fn eq(&self, other: &Cow<'b, C>) -> bool 
eq			    fn eq(&self, other: &BTreeMap<K, V>) -> bool 
eq			    fn eq(&self, other: &Self) -> bool 
eq			    fn eq(&self, other: &LinkedList<A>) -> bool 
eq			            fn eq(&self, other: &
eq			            fn eq(&self, other: &
eq			    fn eq(&self, _: &ParseError) -> bool 
eq			    fn eq(&self, other: &String) -> bool 
eq			            fn eq(&self, other: &
eq			    fn eq(&self, other: &VecDeque<A>) -> bool 
escape_default			    pub fn escape_default(&self) -> String 
escape_unicode			    pub fn escape_unicode(&self) -> String 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item=(&'a K, &'a V)>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item=(K, V)>>(&mut self, iter: T) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<Iter: IntoIterator<Item = T>>(&mut self, iter: Iter) 
extend			    fn extend<I: IntoIterator<Item = &'a E>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = E>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) 
extend			    fn extend<I: IntoIterator<Item = &'a char>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a str>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = String>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) 
extend			    fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) 
extend_desugared			    fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) 
extend_from_slice			    pub fn extend_from_slice(&mut self, other: &[T]) 
extend_with_element			    fn extend_with_element(&mut self, n: usize, value: T) 
finalize			    unsafe fn finalize(self) 
finalize			unsafe fn finalize<T>(node: IntermediateBox<Node<T>>) -> Box<Node<T>> 
find			    pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> 
first			    pub fn first(&self) -> Option<&T> 
first_edge			    pub fn first_edge(self) -> Handle<Self, marker::Edge> 
first_leaf_edge			fn first_leaf_edge<BorrowType, K, V>(
first_mut			    pub fn first_mut(&mut self) -> Option<&mut T> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			pub mod fmt;
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for BinaryHeap			impl<T: fmt::Debug + Ord> fmt::Debug for BinaryHeap<T> 
fmt::Debug for Cow			impl<'a, B: ?Sized> fmt::Debug for Cow<'a, B>
fmt::Debug for EnumSet			impl<E: CLike + fmt::Debug> fmt::Debug for EnumSet<E> 
fmt::Debug for LinkedList			impl<A: fmt::Debug> fmt::Debug for LinkedList<A> 
fmt::Debug for ParseError			impl fmt::Debug for ParseError 
fmt::Debug for String			impl fmt::Debug for String 
fmt::Debug for Vec			impl<T: fmt::Debug> fmt::Debug for Vec<T> 
fmt::Debug for VecDeque			impl<T: fmt::Debug> fmt::Debug for VecDeque<T> 
fmt::Display for Cow			impl<'a, B: ?Sized> fmt::Display for Cow<'a, B>
fmt::Display for FromUtf16Error			impl fmt::Display for FromUtf16Error 
fmt::Display for FromUtf8Error			impl fmt::Display for FromUtf8Error 
fmt::Display for ParseError			impl fmt::Display for ParseError 
fmt::Display for String			impl fmt::Display for String 
fmt::Write for String			impl fmt::Write for String 
force			    pub fn force(self) -> ForceResult<
forget_type			    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> 
format			pub fn format(args: Arguments) -> string::String 
from			    fn from(heap: BinaryHeap<T>) -> Vec<T> 
from			    fn from(vec: Vec<T>) -> BinaryHeap<T> 
from			    fn from(node: &'a mut Link<T>) -> Self 
from			    fn from(s: &'a str) -> Cow<'a, str> 
from			    fn from(s: &'a str) -> String 
from			    fn from(s: String) -> Cow<'a, str> 
from			    fn from(s: &'a [T]) -> Cow<'a, [T]> 
from			    fn from(s: &'a [T]) -> Vec<T> 
from			    fn from(s: &'a str) -> Vec<u8> 
from			    fn from(v: Vec<T>) -> Cow<'a, [T]> 
from_elem			pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> 
from_internal			    fn from_internal(node: Box<InternalNode<K, V>>) -> Self 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BinaryHeap<T> 
from_iter			    fn from_iter<T: IntoIterator<Item=(K, V)>>(iter: T) -> BTreeMap<K, V> 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> BTreeSet<T> 
from_iter			    fn from_iter<I: IntoIterator<Item = E>>(iter: I) -> EnumSet<E> 
from_iter			    fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> LinkedList<A> 
from_iter			    fn from_iter<I: IntoIterator<Item = &'a str>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = String>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(it: I) -> Cow<'a, [T]> 
from_iter			    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> 
from_iter			    fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> VecDeque<A> 
from_leaf			    fn from_leaf(node: Box<LeafNode<K, V>>) -> Self 
from_ptr			    unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self 
from_raw_parts			    pub unsafe fn from_raw_parts(buf: *mut u8, length: usize, capacity: usize) -> String 
from_raw_parts			    pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Vec<T> 
from_str			    fn from_str(s: &str) -> Result<String, ParseError> 
from_str			    pub fn from_str(_: &str) -> String 
from_usize			    fn from_usize(usize) -> Self;
from_utf16			    pub fn from_utf16(v: &[u16]) -> Result<String, FromUtf16Error> 
from_utf16_lossy			    pub fn from_utf16_lossy(v: &[u16]) -> String 
from_utf8			    pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> 
from_utf8_lossy			    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> 
from_utf8_unchecked			    pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String 
front			    pub fn front(&self) -> Option<&T> 
front			    pub fn front(&self) -> Option<&T> 
front_mut			    pub fn front_mut(&mut self) -> Option<&mut T> 
front_mut			    pub fn front_mut(&mut self) -> Option<&mut T> 
front_place			    pub fn front_place(&mut self) -> FrontPlace<T> 
fuzz_test			    fn fuzz_test(sz: i32) 
get			    unsafe fn get(&self, index: usize) -> &T 
get			    fn get(&self, key: &Q) -> Option<&K> 
get			    pub fn get(&self) -> &V 
get			    pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V> where K: Borrow<Q>, Q: Ord 
get			    fn get(&self, key: &Q) -> Option<&Self::Key>;
get			    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>
get			    pub fn get(&self, index: usize) -> Option<&T> 
get			    pub fn get(&self, index: usize) -> Option<&T> 
get_mut			    pub fn get_mut(&mut self) -> &mut V 
get_mut			    pub fn get_mut<Q: ?Sized>(&mut self, key: &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Ord 
get_mut			    pub fn get_mut(&mut self, index: usize) -> Option<&mut T> 
get_mut			    pub fn get_mut(&mut self, index: usize) -> Option<&mut T> 
get_unchecked			    pub unsafe fn get_unchecked(&self, index: usize) -> &T 
get_unchecked_mut			    pub unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut T 
hack			mod hack 
handle_cap_increase			    unsafe fn handle_cap_increase(&mut self, old_cap: usize) 
handle_underfull_node			fn handle_underfull_node<'a, K, V>(node: NodeRef<marker::Mut<'a>,
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, hasher: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash::Hash for String			impl hash::Hash for String 
index			    fn index(&self, key: &Q) -> &V 
index			    fn index(&self, _index: ops::RangeFull) -> &str 
index			    fn index(&self, index: ops::Range<usize>) -> &str 
index			    fn index(&self, index: ops::RangeFrom<usize>) -> &str 
index			    fn index(&self, index: ops::RangeInclusive<usize>) -> &str 
index			    fn index(&self, index: ops::RangeTo<usize>) -> &str 
index			    fn index(&self, index: ops::RangeToInclusive<usize>) -> &str 
index			    fn index(&self, _index: ops::RangeFull) -> &[T] 
index			    fn index(&self, index: ops::Range<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeInclusive<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeTo<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] 
index			    fn index(&self, index: usize) -> &T 
index			    fn index(&self, index: usize) -> &A 
index_mut			    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str 
index_mut			    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: usize) -> &mut T 
index_mut			    fn index_mut(&mut self, index: usize) -> &mut A 
insert			    pub fn insert(&mut self, key: K, value: V) -> Option<V> 
insert			    pub fn insert(&mut self, value: V) -> V 
insert			    pub fn insert(self, value: V) -> &'a mut V 
insert			    pub fn insert(mut self, key: K, val: V)
insert			    pub fn insert(mut self, key: K, val: V, edge: Root<K, V>)
insert			    pub fn insert(&mut self, value: T) -> bool 
insert			    pub fn insert(&mut self, e: E) -> bool 
insert			    pub fn insert(&mut self, idx: usize, ch: char) 
insert			    pub fn insert(&mut self, index: usize, element: T) 
insert			    pub fn insert(&mut self, index: usize, value: T) 
insert_fit			    fn insert_fit(&mut self, key: K, val: V) -> *mut V 
insert_fit			    fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) 
insert_next			    pub fn insert_next(&mut self, elt: A) 
insert_next_node			    fn insert_next_node(&mut self, mut ins_node: Box<Node<A>>) 
insertion_sort			fn insertion_sort<T, F>(v: &mut [T], mut compare: F)
intersection			    pub fn intersection<'a>(&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T> 
intersection			    pub fn intersection(&self, e: EnumSet<E>) -> EnumSet<E> 
into			    fn into(self) -> Vec<u8> 
into_boxed_slice			    pub fn into_boxed_slice(mut self) -> Box<[T]> 
into_boxed_str			    pub fn into_boxed_str(self) -> Box<str> 
into_bytes			    pub fn into_bytes(self) -> Vec<u8> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<K, V> 
into_iter			    fn into_iter(self) -> Iter<'a, K, V> 
into_iter			    fn into_iter(self) -> IterMut<'a, K, V> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    fn into_iter(self) -> Iter<E> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    fn into_iter(mut self) -> IntoIter<T> 
into_iter			    fn into_iter(mut self) -> slice::IterMut<'a, T> 
into_iter			    fn into_iter(self) -> slice::Iter<'a, T> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_kv			    pub fn into_kv(self) -> (&'a K, &'a V) 
into_kv_mut			    pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) 
into_mut			    pub fn into_mut(self) -> &'a mut V 
into_node			    pub fn into_node(self) -> Node 
into_owned			    pub fn into_owned(self) -> <B as ToOwned>::Owned 
into_ref			    pub fn into_ref(self)
into_root_mut			    pub fn into_root_mut(self) -> &'a mut Root<K, V> 
into_searcher			    fn into_searcher(self, haystack: &'a str) -> <&'b str as Pattern<'a>>::Searcher 
into_slices			    pub fn into_slices(self) -> (&'a [K], &'a [V]) 
into_slices_mut			    pub fn into_slices_mut(mut self) -> (&'a mut [K], &'a mut [V]) 
into_sorted_vec			    pub fn into_sorted_vec(mut self) -> Vec<T> 
into_string			    pub fn into_string(self: Box<str>) -> String 
into_vec			    pub fn into_vec(self) -> Vec<T> 
into_vec			    pub fn into_vec(self: Box<Self>) -> Vec<T> 
into_vec			    pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> 
is_char_boundary			    pub fn is_char_boundary(&self, index: usize) -> bool 
is_contained_in			    fn is_contained_in(self, haystack: &'a str) -> bool 
is_contiguous			    fn is_contiguous(&self) -> bool 
is_disjoint			    pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool 
is_disjoint			    pub fn is_disjoint(&self, other: &EnumSet<E>) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_full			    fn is_full(&self) -> bool 
is_prefix_of			    fn is_prefix_of(self, haystack: &'a str) -> bool 
is_subset			    pub fn is_subset(&self, other: &BTreeSet<T>) -> bool 
is_subset			    pub fn is_subset(&self, other: &EnumSet<E>) -> bool 
is_superset			    pub fn is_superset(&self, other: &BTreeSet<T>) -> bool 
is_superset			    pub fn is_superset(&self, other: &EnumSet<E>) -> bool 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<K, V> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<E> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<K, V> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
join			    fn join(&self, sep: &T) -> Self::Output;
join			    fn join(&self, sep: &T) -> Vec<T> 
join			    fn join(&self, sep: &str) -> String 
key			    pub fn key(&self) -> &K 
keys			    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> 
keys			    pub fn keys(&self) -> &[K] 
keys_mut			    pub fn keys_mut(&mut self) -> &mut [K] 
kv_mut			    pub fn kv_mut(&mut self) -> (&mut K, &mut V) 
last			    pub fn last(&self) -> Option<&T> 
last_edge			    pub fn last_edge(self) -> Handle<Self, marker::Edge> 
last_leaf_edge			fn last_leaf_edge<BorrowType, K, V>(
last_mut			    pub fn last_mut(&mut self) -> Option<&mut T> 
left_edge			    pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> 
left_kv			    pub fn left_kv(self)
len			    pub fn len(&self) -> usize 
len			    fn len(&self) -> usize { self.length }
len			    fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    fn len(&self) -> usize { self.iter.len() }
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
lines			    pub fn lines(&self) -> Lines 
lines_any			    pub fn lines_any(&self) -> LinesAny 
link_no_prev			fn link_no_prev<T>(mut next: Box<Node<T>>) -> Link<T> 
linked_list			pub mod linked_list;
list_from			    fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> 
macros			mod macros;
make_place			    fn make_place(self) -> Self 
map			pub mod map;
map_uppercase_sigma			        fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) 
marker			pub mod marker 
match_indices			    pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> 
matches			    pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> 
merge			    pub fn merge(mut self)
merge_sort			fn merge_sort<T, F>(v: &mut [T], mut compare: F)
move_to			    unsafe fn move_to(&mut self, index: usize) 
ne			    fn ne(&self, other: &LinkedList<A>) -> bool 
ne			            fn ne(&self, other: &
ne			            fn ne(&self, other: &
ne			    fn ne(&self, other: &String) -> bool 
ne			            fn ne(&self, other: &
new			    fn new(data: &'a mut [T], pos: usize) -> Self 
new			    pub fn new() -> BinaryHeap<T> 
new			    pub fn new() -> BTreeMap<K, V> 
new			    unsafe fn new() -> Self 
new			    pub fn new() -> BTreeSet<T> 
new			    fn new(bits: usize) -> Iter<E> 
new			    pub fn new() -> EnumSet<E> 
new			    fn new(v: T) -> Node<T> 
new			    pub fn new() -> LinkedList<T> 
new			    pub fn new() -> String 
new			    pub fn new() -> Vec<T> 
new			    pub fn new() -> VecDeque<T> 
new_edge			    pub fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self 
new_kv			    pub fn new_kv(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self 
new_leaf			    pub fn new_leaf() -> Self 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<&'a K> 
next			    fn next(&mut self) -> Option<&'a V> 
next			    fn next(&mut self) -> Option<&'a mut V> 
next			    fn next(&mut self) -> Option<(&'a K, &'a V)> 
next			    fn next(&mut self) -> Option<(&'a K, &'a mut V)> 
next			    fn next(&mut self) -> Option<(K, V)> 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<E> 
next			    fn next(&mut self) -> Option<&'a A> 
next			    fn next(&mut self) -> Option<&'a mut A> 
next			    fn next(&mut self) -> Option<A> 
next			    fn next(&mut self) -> Option<u16> 
next			    fn next(&mut self) -> Option<char> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<&'a mut T> 
next			    fn next(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a K> 
next_back			    fn next_back(&mut self) -> Option<&'a V> 
next_back			    fn next_back(&mut self) -> Option<&'a mut V> 
next_back			    fn next_back(&mut self) -> Option<(&'a K, &'a V)> 
next_back			    fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> 
next_back			    fn next_back(&mut self) -> Option<(K, V)> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a A> 
next_back			    fn next_back(&mut self) -> Option<&'a mut A> 
next_back			    fn next_back(&mut self) -> Option<A> 
next_back			    fn next_back(&mut self) -> Option<char> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<&'a mut T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back_unchecked			    unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a V) 
next_back_unchecked			    unsafe fn next_back_unchecked(&mut self) -> (&'a K, &'a mut V) 
next_unchecked			    unsafe fn next_unchecked(&mut self) -> (&'a K, &'a V) 
next_unchecked			    unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) 
node			mod node;
none			    fn none() -> Rawlink<T> 
ops			impl ops::Index<ops::Range<usize>> for String 
ops			impl ops::Index<ops::RangeFrom<usize>> for String 
ops			impl ops::Index<ops::RangeInclusive<usize>> for String 
ops			impl ops::Index<ops::RangeTo<usize>> for String 
ops			impl ops::Index<ops::RangeToInclusive<usize>> for String 
ops			impl ops::IndexMut<ops::Range<usize>> for String 
ops			impl ops::IndexMut<ops::RangeFrom<usize>> for String 
ops			impl ops::IndexMut<ops::RangeInclusive<usize>> for String 
ops			impl ops::IndexMut<ops::RangeTo<usize>> for String 
ops			impl ops::IndexMut<ops::RangeToInclusive<usize>> for String 
ops			impl<T> ops::Index<ops::Range<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for Vec<T> 
ops::Deref for String			impl ops::Deref for String 
ops::Deref for Vec			impl<T> ops::Deref for Vec<T> 
ops::DerefMut for String			impl ops::DerefMut for String 
ops::DerefMut for Vec			impl<T> ops::DerefMut for Vec<T> 
ops::Index for String			impl ops::Index<ops::RangeFull> for String 
ops::Index for Vec			impl<T> ops::Index<ops::RangeFull> for Vec<T> 
ops::IndexMut for String			impl ops::IndexMut<ops::RangeFull> for String 
ops::IndexMut for Vec			impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> 
or_insert			    pub fn or_insert(self, default: V) -> &'a mut V 
or_insert_with			    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V 
parse			    pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> 
partial_cmp			    fn partial_cmp(&self, other: &Cow<'a, B>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &BTreeMap<K, V>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &LinkedList<A>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Vec<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &VecDeque<A>) -> Option<Ordering> 
peek			    pub fn peek(&self) -> Option<&T> 
peek_next			    pub fn peek_next(&mut self) -> Option<&mut A> 
pointer			    fn pointer(&mut self) -> *mut T 
pop			    pub fn pop(&mut self) -> Option<T> 
pop			    pub fn pop(&mut self) -> (K, V, Option<Root<K, V>>) 
pop			    pub fn pop(&mut self) -> Option<char> 
pop			    pub fn pop(&mut self) -> Option<T> 
pop_back			    pub fn pop_back(&mut self) -> Option<T> 
pop_back			    pub fn pop_back(&mut self) -> Option<T> 
pop_back_node			    fn pop_back_node(&mut self) -> Option<Box<Node<T>>> 
pop_front			    pub fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) 
pop_front			    pub fn pop_front(&mut self) -> Option<T> 
pop_front			    pub fn pop_front(&mut self) -> Option<T> 
pop_front_node			    fn pop_front_node(&mut self) -> Option<Box<Node<T>>> 
pop_level			    pub fn pop_level(&mut self) 
pos			    fn pos(&self) -> usize 
ptr			    fn ptr(&self) -> *mut T 
push			    pub fn push(&mut self, item: T) 
push			    pub fn push(&mut self, key: K, val: V) 
push			    pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) 
push			    pub fn push(&mut self, ch: char) 
push			    pub fn push(&mut self, value: T) 
push_back			    pub fn push_back(&mut self, elt: T) 
push_back			    pub fn push_back(&mut self, value: T) 
push_back_node			    fn push_back_node(&mut self, new_tail: Box<Node<T>>) 
push_front			    pub fn push_front(&mut self, key: K, val: V) 
push_front			    pub fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) 
push_front			    pub fn push_front(&mut self, elt: T) 
push_front			    pub fn push_front(&mut self, value: T) 
push_front_node			    fn push_front_node(&mut self, mut new_head: Box<Node<T>>) 
push_level			    pub fn push_level(&mut self)
push_pop			    pub fn push_pop(&mut self, mut item: T) -> T 
push_str			    pub fn push_str(&mut self, string: &str) 
range			    pub fn range<Min: ?Sized + Ord, Max: ?Sized + Ord>(&self,
range			    pub fn range<'a, Min: ?Sized + Ord, Max: ?Sized + Ord>(&'a self,
range			pub mod range;
range_mut			    pub fn range_mut<Min: ?Sized + Ord, Max: ?Sized + Ord>(&mut self,
reborrow			    fn reborrow<'a>(&'a self) -> NodeRef<marker::Immut<'a>, K, V, Type> 
reborrow			    pub fn reborrow(&self)
reborrow_mut			    pub unsafe fn reborrow_mut(&mut self)
reborrow_mut			    unsafe fn reborrow_mut(&mut self) -> NodeRef<marker::Mut, K, V, Type> 
remove			    pub fn remove(self) -> V 
remove			    pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V> where K: Borrow<Q>, Q: Ord 
remove			    pub fn remove(mut self)
remove			    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool
remove			    pub fn remove(&mut self, e: &E) -> bool 
remove			    pub fn remove(&mut self, idx: usize) -> char 
remove			    pub fn remove(&mut self, index: usize) -> T 
remove			    pub fn remove(&mut self, index: usize) -> Option<T> 
remove_kv			    fn remove_kv(self) -> (K, V) 
replace			    pub fn replace(&mut self, mut item: T) -> Option<T> 
replace			    fn replace(&mut self, key: K) -> Option<K> 
replace			    fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;
replace			    pub fn replace(&mut self, value: T) -> Option<T> 
replace			    pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
resize			    pub fn resize(&mut self, new_len: usize, value: T) 
resize			    pub fn resize(&mut self, new_len: usize, value: T) 
resolve			    unsafe fn resolve<'a>(&self) -> Option<&'a T> 
resolve_mut			    unsafe fn resolve_mut<'a>(&mut self) -> Option<&'a mut T> 
retain			    pub fn retain<F>(&mut self, mut f: F)
retain			    pub fn retain<F>(&mut self, mut f: F)
reverse			    pub fn reverse(&mut self) 
rfind			    pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>
right_edge			    pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> 
right_kv			    pub fn right_kv(self)
rmatch_indices			    pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>
rmatches			    pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>
rsplit			    pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>
rsplit_terminator			    pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>
rsplitn			    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<T, F>
rsplitn			    pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P>
rsplitn_mut			    pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<T, F>
safe_get			        fn safe_get(xs: &[u8], i: usize, total: usize) -> u8 
search			mod search;
search_linear			fn search_linear<BorrowType, K, V, Type, Q: ?Sized>(
search_node			pub fn search_node<BorrowType, K, V, Type, Q: ?Sized>(
search_tree			pub fn search_tree<BorrowType, K, V, Q: ?Sized>(
set			pub mod set;
set_len			    pub unsafe fn set_len(&mut self, len: usize) 
set_next			    fn set_next(&mut self, mut next: Box<Node<T>>) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
sift_down			    fn sift_down(&mut self, pos: usize) 
sift_down_range			    fn sift_down_range(&mut self, pos: usize, end: usize) 
sift_down_to_bottom			    fn sift_down_to_bottom(&mut self, mut pos: usize) 
sift_up			    fn sift_up(&mut self, start: usize, pos: usize) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
slice			pub mod slice;
slice_insert			unsafe fn slice_insert<T>(slice: &mut [T], idx: usize, val: T) 
slice_mut_unchecked			    pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str 
slice_remove			unsafe fn slice_remove<T>(slice: &mut [T], idx: usize) -> T 
slice_shift_char			    pub fn slice_shift_char(&self) -> Option<(char, &str)> 
slice_unchecked			    pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str 
some			    fn some(n: &mut T) -> Rawlink<T> 
sort			    pub fn sort(&mut self)
sort_by			    pub fn sort_by<F>(&mut self, compare: F)
sort_by_key			    pub fn sort_by_key<B, F>(&mut self, mut f: F)
split			    pub fn split(mut self)
split			    pub fn split<F>(&self, pred: F) -> Split<T, F>
split			    pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> 
split_at			    pub fn split_at(&self, mid: usize) -> (&[T], &[T]) 
split_at			    pub fn split_at(&self, mid: usize) -> (&str, &str) 
split_at_mut			    pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) 
split_at_mut			    pub fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str) 
split_first			    pub fn split_first(&self) -> Option<(&T, &[T])> 
split_first_mut			    pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> 
split_last			    pub fn split_last(&self) -> Option<(&T, &[T])> 
split_last_mut			    pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> 
split_mut			    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F>
split_off			    pub fn split_off(&mut self, at: usize) -> LinkedList<T> 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_terminator			    pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> 
split_whitespace			    pub fn split_whitespace(&self) -> SplitWhitespace 
splitn			    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<T, F>
splitn			    pub fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> 
splitn_mut			    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>
start			    fn start(&self) -> Option<&T> 
starts_with			    pub fn starts_with(&self, needle: &[T]) -> bool
starts_with			    pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool 
std			mod std 
step			    unsafe fn step<T>(ptr: &mut *mut T) -> *mut T 
str			pub mod str;
str			impl str 
string			pub mod string;
sub			    fn sub(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
sub			    fn sub(self, e: EnumSet<E>) -> EnumSet<E> 
super::Recover for BTreeMap			impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>
swap			    pub fn swap(&mut self, a: usize, b: usize) 
swap			    pub fn swap(&mut self, i: usize, j: usize) 
swap_remove			    pub fn swap_remove(&mut self, index: usize) -> T 
swap_remove_back			    pub fn swap_remove_back(&mut self, index: usize) -> Option<T> 
swap_remove_front			    pub fn swap_remove_front(&mut self, index: usize) -> Option<T> 
symmetric_difference			    pub fn symmetric_difference<'a>(&'a self,
take			    fn take(&mut self, key: &Q) -> Option<K> 
take			    fn take(&mut self, key: &Q) -> Option<Self::Key>;
take			    pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>
take			    fn take(&mut self) -> Rawlink<T> 
test			        fn test(back: bool) 
tests			mod tests 
tests			mod tests 
to_lowercase			    pub fn to_lowercase(&self) -> String 
to_mut			    pub fn to_mut(&mut self) -> &mut <B as ToOwned>::Owned 
to_owned			    fn to_owned(&self) -> Self::Owned;
to_owned			    fn to_owned(&self) -> T 
to_owned			    fn to_owned(&self) -> Vec<T> 
to_owned			    fn to_owned(&self) -> String 
to_string			    fn to_string(&self) -> String 
to_string			    fn to_string(&self) -> String;
to_uppercase			    pub fn to_uppercase(&self) -> String 
to_usize			    fn to_usize(&self) -> usize;
to_vec			    pub fn to_vec(&self) -> Vec<T>
to_vec			    pub fn to_vec<T>(s: &[T]) -> Vec<T>
trim			    pub fn trim(&self) -> &str 
trim_left			    pub fn trim_left(&self) -> &str 
trim_left_matches			    pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str 
trim_matches			    pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str
trim_right			    pub fn trim_right(&self) -> &str 
trim_right_matches			    pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str
truncate			    pub fn truncate(&mut self, new_len: usize) 
truncate			    pub fn truncate(&mut self, len: usize) 
truncate			    pub fn truncate(&mut self, len: usize) 
union			    pub fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> Union<'a, T> 
union			    pub fn union(&self, e: EnumSet<E>) -> EnumSet<E> 
unsafe_get			        fn unsafe_get(xs: &[u8], i: usize) -> u8 
unwrap_unchecked			unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T 
utf16_units			    pub fn utf16_units(&self) -> Utf16Units 
utf8_error			    pub fn utf8_error(&self) -> Utf8Error 
vals			    pub fn vals(&self) -> &[V] 
vals_mut			    pub fn vals_mut(&mut self) -> &mut [V] 
values			    pub fn values<'a>(&'a self) -> Values<'a, K, V> 
values_mut			    pub fn values_mut<'a>(&'a mut self) -> ValuesMut<'a, K, V> 
vec			pub mod vec;
vec_deque			pub mod vec_deque;
windows			    pub fn windows(&self, size: usize) -> Windows<T> 
with_capacity			    pub fn with_capacity(capacity: usize) -> BinaryHeap<T> 
with_capacity			    pub fn with_capacity(capacity: usize) -> String 
with_capacity			    pub fn with_capacity(capacity: usize) -> Vec<T> 
with_capacity			    pub fn with_capacity(n: usize) -> VecDeque<T> 
wrap_add			    fn wrap_add(&self, idx: usize, addend: usize) -> usize 
wrap_copy			    unsafe fn wrap_copy(&self, dst: usize, src: usize, len: usize) 
wrap_index			    fn wrap_index(&self, idx: usize) -> usize 
wrap_index			fn wrap_index(index: usize, size: usize) -> usize 
wrap_sub			    fn wrap_sub(&self, idx: usize, subtrahend: usize) -> usize 
write_char			    fn write_char(&mut self, c: char) -> fmt::Result 
write_str			    fn write_str(&mut self, s: &str) -> fmt::Result 
