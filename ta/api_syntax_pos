Add for BytePos			impl Add for BytePos 
Add for CharPos			impl Add for CharPos 
BytePos			pub struct BytePos(pub u32);
CharPos			pub struct CharPos(pub usize);
Decodable for BytePos			impl Decodable for BytePos 
Decodable for FileMap			impl Decodable for FileMap 
DistinctSources			pub struct DistinctSources 
Encodable for BytePos			impl Encodable for BytePos 
Encodable for FileMap			impl Encodable for FileMap 
ExpnId			impl ExpnId 
ExpnId			pub struct ExpnId(pub u32);
FileLines			pub struct FileLines 
FileMap			impl FileMap 
FileMap			pub struct FileMap 
FileMapAndBytePos			pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }
FileMapAndLine			pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: usize }
From for MultiSpan			impl From<Span> for MultiSpan 
LineInfo			pub struct LineInfo 
Loc			pub struct Loc 
LocWithOpt			pub struct LocWithOpt 
MacroBacktrace			pub struct MacroBacktrace 
MalformedCodemapPositions			pub struct MalformedCodemapPositions 
MultiByteChar			pub struct MultiByteChar 
MultiSpan			impl MultiSpan 
MultiSpan			pub struct MultiSpan 
Pos			pub trait Pos 
Pos for BytePos			impl Pos for BytePos 
Pos for CharPos			impl Pos for CharPos 
Span			impl Span 
Span			pub struct Span 
SpanLabel			pub struct SpanLabel 
SpanLinesError			pub enum SpanLinesError 
SpanSnippetError			pub enum SpanSnippetError 
Sub for BytePos			impl Sub for BytePos 
Sub for CharPos			impl Sub for CharPos 
add			    fn add(self, rhs: BytePos) -> BytePos 
add			    fn add(self, rhs: CharPos) -> CharPos 
byte_length			    pub fn byte_length(&self) -> u32 
contains			    pub fn contains(self, other: Span) -> bool 
count_lines			    pub fn count_lines(&self) -> usize 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<BytePos, D::Error> 
decode			    fn decode<D: Decoder>(d: &mut D) -> Result<FileMap, D::Error> 
default_decode			    fn default_decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> 
default_encode			    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
default_span_debug			fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result 
encode			    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> 
end_point			    pub fn end_point(self) -> Span 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for FileMap			impl fmt::Debug for FileMap 
fmt::Debug for Span			impl fmt::Debug for Span 
from			    fn from(span: Span) -> MultiSpan 
from_span			    pub fn from_span(primary_span: Span) -> MultiSpan 
from_spans			    pub fn from_spans(vec: Vec<Span>) -> MultiSpan 
from_u32			    pub fn from_u32(id: u32) -> ExpnId 
from_usize			    fn from_usize(n: usize) -> BytePos { BytePos(n as u32) }
from_usize			    fn from_usize(n: usize) -> CharPos { CharPos(n) }
from_usize			    fn from_usize(n: usize) -> Self;
get_line			    pub fn get_line(&self, line_number: usize) -> Option<&str> 
into_u32			    pub fn into_u32(self) -> u32 
is_imported			    pub fn is_imported(&self) -> bool 
is_real_file			    pub fn is_real_file(&self) -> bool 
line_bounds			    pub fn line_bounds(&self, line_index: usize) -> (BytePos, BytePos) 
lookup_line			    pub fn lookup_line(&self, pos: BytePos) -> Option<usize> 
lookup_line			fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize 
mk_sp			pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span 
new			    pub fn new() -> MultiSpan 
next_line			    pub fn next_line(&self, pos: BytePos) 
primary_span			    pub fn primary_span(&self) -> Option<Span> 
primary_spans			    pub fn primary_spans(&self) -> &[Span] 
push_span_label			    pub fn push_span_label(&mut self, span: Span, label: String) 
record_multibyte_char			    pub fn record_multibyte_char(&self, pos: BytePos, bytes: usize) 
replace			    pub fn replace(&mut self, before: Span, after: Span) -> bool 
serialize::UseSpecializedDecodable for Span			impl serialize::UseSpecializedDecodable for Span 
serialize::UseSpecializedEncodable for Span			impl serialize::UseSpecializedEncodable for Span 
source_equal			    pub fn source_equal(&self, other: &Span) -> bool 
span_labels			    pub fn span_labels(&self) -> Vec<SpanLabel> 
sub			    fn sub(self, rhs: BytePos) -> BytePos 
sub			    fn sub(self, rhs: CharPos) -> CharPos 
substitute_dummy			    pub fn substitute_dummy(self, other: Span) -> Span 
tests			mod tests 
to_usize			    fn to_usize(&self) -> usize { let BytePos(n) = *self; n as usize }
to_usize			    fn to_usize(&self) -> usize { let CharPos(n) = *self; n }
to_usize			    fn to_usize(&self) -> usize;
trim_start			    pub fn trim_start(self, other: Span) -> Option<Span> 
