Edge			    struct Edge 
GraphWalk			pub trait GraphWalk<'a, N: Clone, E: Clone> 
GraphWalk for LabelledGraph			    impl<'a> GraphWalk<'a, Node, &'a Edge> for LabelledGraph 
GraphWalk for LabelledGraphWithEscStrs			    impl<'a> GraphWalk<'a, Node, &'a Edge> for LabelledGraphWithEscStrs 
Id			impl<'a> Id<'a> 
Id			pub struct Id<'a> 
IntoCow			impl<'a, T: Clone> IntoCow<'a, [T]> for &'a [T] 
IntoCow			impl<'a> IntoCow<'a, str> for &'a str 
IntoCow			pub trait IntoCow<'a, B: ?Sized> where B: ToOwned 
IntoCow for String			impl<'a> IntoCow<'a, str> for String 
IntoCow for Vec			impl<'a, T: Clone> IntoCow<'a, [T]> for Vec<T> 
LabelText			impl<'a> LabelText<'a> 
LabelText			pub enum LabelText<'a> 
LabelledGraph			    impl LabelledGraph 
LabelledGraph			    struct LabelledGraph 
LabelledGraphWithEscStrs			    impl LabelledGraphWithEscStrs 
LabelledGraphWithEscStrs			    struct LabelledGraphWithEscStrs 
Labeller			pub trait Labeller<'a,N,E> 
Labeller for LabelledGraph			    impl<'a> Labeller<'a, Node, &'a Edge> for LabelledGraph 
Labeller for LabelledGraphWithEscStrs			    impl<'a> Labeller<'a, Node, &'a Edge> for LabelledGraphWithEscStrs 
NodeLabels			    enum NodeLabels<L> 
NodeLabels			    impl NodeLabels<&'static str> 
RenderOption			pub enum RenderOption 
Style			impl Style 
Style			pub enum Style 
as_slice			    pub fn as_slice(&'a self) -> &'a str 
as_slice			    pub fn as_slice(self) -> &'static str 
badly_formatted_id			    fn badly_formatted_id() 
default_options			pub fn default_options() -> Vec<RenderOption> 
edge			    fn edge(from: usize, to: usize, label: &'static str, style: Style) -> Edge 
edge_label			        fn edge_label(&'a self, e: &&'a Edge) -> LabelText<'a> 
edge_label			    fn edge_label(&'a self, e: &E) -> LabelText<'a> 
edge_style			        fn edge_style(&'a self, e: &&'a Edge) -> Style 
edge_style			    fn edge_style(&'a self, _e: &E) -> Style 
edges			        fn edges(&'a self) -> Edges<'a, &'a Edge> 
edges			    fn edges(&'a self) -> Edges<'a, E>;
empty_graph			    fn empty_graph() 
escape_char			    fn escape_char<F>(c: char, mut f: F)
escape_html			pub fn escape_html(s: &str) -> String 
escape_str			    fn escape_str(s: &str) -> String 
escaped			    pub fn escaped<S: IntoCow<'a, str>>(s: S) -> LabelText<'a> 
graph_id			        fn graph_id(&'a self) -> Id<'a> 
graph_id			    fn graph_id(&'a self) -> Id<'a>;
hasse_diagram			    fn hasse_diagram() 
html			    pub fn html<S: IntoCow<'a, str>>(s: S) -> LabelText<'a> 
id_name			    fn id_name<'a>(n: &Node) -> Id<'a> 
in_range			        fn in_range(low: char, c: char, high: char) -> bool 
indent			    fn indent<W: Write>(w: &mut W) -> io::Result<()> 
into_cow			    fn into_cow(self) -> Cow<'a, B>;
into_cow			    fn into_cow(self) -> Cow<'a, [T]> 
into_cow			    fn into_cow(self) -> Cow<'a, str> 
is_constituent			        fn is_constituent(c: char) -> bool 
is_letter_or_underscore			        fn is_letter_or_underscore(c: char) -> bool 
label			    pub fn label<S: IntoCow<'a, str>>(s: S) -> LabelText<'a> 
left_aligned_text			    fn left_aligned_text() 
len			        fn len(&self) -> usize 
name			    pub fn name(self) -> Cow<'a, str> 
new			        fn new(name: &'static str,
new			    pub fn new<Name: IntoCow<'a, str>>(name: Name) -> Result<Id<'a>, ()> 
node_id			        fn node_id(&'a self, n: &Node) -> Id<'a> 
node_id			    fn node_id(&'a self, n: &N) -> Id<'a>;
node_label			        fn node_label(&'a self, n: &Node) -> LabelText<'a> 
node_label			    fn node_label(&'a self, n: &N) -> LabelText<'a> 
node_shape			    fn node_shape(&'a self, _node: &N) -> Option<LabelText<'a>> 
node_style			        fn node_style(&'a self, n: &Node) -> Style 
node_style			    fn node_style(&'a self, _n: &N) -> Style 
nodes			        fn nodes(&'a self) -> Nodes<'a, Node> 
nodes			    fn nodes(&'a self) -> Nodes<'a, N>;
pre_escaped_content			    fn pre_escaped_content(self) -> Cow<'a, str> 
prefix_line			    pub fn prefix_line(self, prefix: LabelText) -> LabelText<'static> 
render			pub fn render<'a,
render_opts			pub fn render_opts<'a,
simple_id_construction			    fn simple_id_construction() 
single_cyclic_node			    fn single_cyclic_node() 
single_edge			    fn single_edge() 
single_edge_with_style			    fn single_edge_with_style() 
single_node			    fn single_node() 
single_node_with_style			    fn single_node_with_style() 
source			        fn source(&'a self, edge: &&'a Edge) -> Node 
source			    fn source(&'a self, edge: &E) -> N;
suffix_line			    pub fn suffix_line(self, suffix: LabelText) -> LabelText<'static> 
target			        fn target(&'a self, edge: &&'a Edge) -> Node 
target			    fn target(&'a self, edge: &E) -> N;
tests			mod tests 
to_dot_string			    pub fn to_dot_string(&self) -> String 
to_opt_strs			        fn to_opt_strs(self) -> Vec<Option<&'static str>> 
writeln			    fn writeln<W: Write>(w: &mut W, arg: &[&str]) -> io::Result<()> 
