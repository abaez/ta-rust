Bad			    struct Bad;
BadElem			    struct BadElem(i32);
Bar			    enum Bar 
CLike for Bar			    impl CLike for Bar 
CLike for Foo			impl CLike for Foo 
Canary			    struct Canary 
Clone for Canary			    impl Clone for Canary 
DeterministicRng			impl DeterministicRng 
DeterministicRng			struct DeterministicRng 
Drop for BadElem			    impl Drop for BadElem 
Drop for Canary			    impl Drop for Canary 
Drop for DropCounter			impl<'a> Drop for DropCounter<'a> 
Drop for Elem			    impl Drop for Elem 
Drop for Elem			    impl Drop for Elem 
DropCounter			struct DropCounter<'a> 
Elem			    struct Elem(i32);
Elem			    struct Elem;
Eq for Bad			    impl Eq for Bad {}
Eq for Foo			    impl Eq for Foo {}
Foo			    struct Foo(&'static str, i32);
Foo			enum Foo 
Foo			struct Foo;
IntoCow			impl<'a> IntoCow<'a, str> for &'a str 
IntoCow			pub trait IntoCow<'a, B: ?Sized> where B: ToOwned 
IntoCow for String			impl<'a> IntoCow<'a, str> for String 
Ord for Bad			    impl Ord for Bad 
Ord for Foo			    impl Ord for Foo 
PartialEq for Bad			    impl PartialEq for Bad 
PartialEq for Foo			    impl PartialEq for Foo 
PartialOrd for Bad			    impl PartialOrd for Bad 
PartialOrd for Foo			    impl PartialOrd for Foo 
RecCy			struct RecCy 
Taggy			enum Taggy 
Taggypar			enum Taggypar<T> 
TwoVec			    struct TwoVec<T> 
a_million_letter_a			    fn a_million_letter_a() -> String 
a_million_letter_x			    fn a_million_letter_x() -> String 
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
bench			mod bench 
bench			mod bench;
bench			mod bench 
bench			mod bench 
bench_clone_0000			fn bench_clone_0000(b: &mut Bencher) 
bench_clone_0010			fn bench_clone_0010(b: &mut Bencher) 
bench_clone_0100			fn bench_clone_0100(b: &mut Bencher) 
bench_clone_1000			fn bench_clone_1000(b: &mut Bencher) 
bench_clone_from_01_0000_0000			fn bench_clone_from_01_0000_0000(b: &mut Bencher) 
bench_clone_from_01_0000_0010			fn bench_clone_from_01_0000_0010(b: &mut Bencher) 
bench_clone_from_01_0000_0100			fn bench_clone_from_01_0000_0100(b: &mut Bencher) 
bench_clone_from_01_0000_1000			fn bench_clone_from_01_0000_1000(b: &mut Bencher) 
bench_clone_from_01_0010_0000			fn bench_clone_from_01_0010_0000(b: &mut Bencher) 
bench_clone_from_01_0010_0010			fn bench_clone_from_01_0010_0010(b: &mut Bencher) 
bench_clone_from_01_0010_0100			fn bench_clone_from_01_0010_0100(b: &mut Bencher) 
bench_clone_from_01_0100_0010			fn bench_clone_from_01_0100_0010(b: &mut Bencher) 
bench_clone_from_01_0100_0100			fn bench_clone_from_01_0100_0100(b: &mut Bencher) 
bench_clone_from_01_0100_1000			fn bench_clone_from_01_0100_1000(b: &mut Bencher) 
bench_clone_from_01_1000_0100			fn bench_clone_from_01_1000_0100(b: &mut Bencher) 
bench_clone_from_01_1000_1000			fn bench_clone_from_01_1000_1000(b: &mut Bencher) 
bench_clone_from_10_0000_0000			fn bench_clone_from_10_0000_0000(b: &mut Bencher) 
bench_clone_from_10_0000_0010			fn bench_clone_from_10_0000_0010(b: &mut Bencher) 
bench_clone_from_10_0000_0100			fn bench_clone_from_10_0000_0100(b: &mut Bencher) 
bench_clone_from_10_0000_1000			fn bench_clone_from_10_0000_1000(b: &mut Bencher) 
bench_clone_from_10_0010_0000			fn bench_clone_from_10_0010_0000(b: &mut Bencher) 
bench_clone_from_10_0010_0010			fn bench_clone_from_10_0010_0010(b: &mut Bencher) 
bench_clone_from_10_0010_0100			fn bench_clone_from_10_0010_0100(b: &mut Bencher) 
bench_clone_from_10_0100_0010			fn bench_clone_from_10_0100_0010(b: &mut Bencher) 
bench_clone_from_10_0100_0100			fn bench_clone_from_10_0100_0100(b: &mut Bencher) 
bench_clone_from_10_0100_1000			fn bench_clone_from_10_0100_1000(b: &mut Bencher) 
bench_clone_from_10_1000_0100			fn bench_clone_from_10_1000_0100(b: &mut Bencher) 
bench_clone_from_10_1000_1000			fn bench_clone_from_10_1000_1000(b: &mut Bencher) 
bench_collect_into			fn bench_collect_into(b: &mut test::Bencher) 
bench_contains_bad_naive			    fn bench_contains_bad_naive(b: &mut Bencher) 
bench_contains_equal			    fn bench_contains_equal(b: &mut Bencher) 
bench_contains_short_long			    fn bench_contains_short_long(b: &mut Bencher) 
bench_contains_short_short			    fn bench_contains_short_short(b: &mut Bencher) 
bench_exact_size_shrink_to_fit			fn bench_exact_size_shrink_to_fit(b: &mut Bencher) 
bench_extend_0000_0000			fn bench_extend_0000_0000(b: &mut Bencher) 
bench_extend_0000_0010			fn bench_extend_0000_0010(b: &mut Bencher) 
bench_extend_0000_0100			fn bench_extend_0000_0100(b: &mut Bencher) 
bench_extend_0000_1000			fn bench_extend_0000_1000(b: &mut Bencher) 
bench_extend_0010_0010			fn bench_extend_0010_0010(b: &mut Bencher) 
bench_extend_0100_0100			fn bench_extend_0100_0100(b: &mut Bencher) 
bench_extend_1000_1000			fn bench_extend_1000_1000(b: &mut Bencher) 
bench_from			fn bench_from(b: &mut Bencher) 
bench_from_elem_0000			fn bench_from_elem_0000(b: &mut Bencher) 
bench_from_elem_0010			fn bench_from_elem_0010(b: &mut Bencher) 
bench_from_elem_0100			fn bench_from_elem_0100(b: &mut Bencher) 
bench_from_elem_1000			fn bench_from_elem_1000(b: &mut Bencher) 
bench_from_fn_0000			fn bench_from_fn_0000(b: &mut Bencher) 
bench_from_fn_0010			fn bench_from_fn_0010(b: &mut Bencher) 
bench_from_fn_0100			fn bench_from_fn_0100(b: &mut Bencher) 
bench_from_fn_1000			fn bench_from_fn_1000(b: &mut Bencher) 
bench_from_iter_0000			fn bench_from_iter_0000(b: &mut Bencher) 
bench_from_iter_0010			fn bench_from_iter_0010(b: &mut Bencher) 
bench_from_iter_0100			fn bench_from_iter_0100(b: &mut Bencher) 
bench_from_iter_1000			fn bench_from_iter_1000(b: &mut Bencher) 
bench_from_slice_0000			fn bench_from_slice_0000(b: &mut Bencher) 
bench_from_slice_0010			fn bench_from_slice_0010(b: &mut Bencher) 
bench_from_slice_0100			fn bench_from_slice_0100(b: &mut Bencher) 
bench_from_slice_1000			fn bench_from_slice_1000(b: &mut Bencher) 
bench_from_str			fn bench_from_str(b: &mut Bencher) 
bench_grow_1025			fn bench_grow_1025(b: &mut test::Bencher) 
bench_iter			    fn bench_iter(b: &mut Bencher, size: i32) 
bench_iter			fn bench_iter(b: &mut test::Bencher) 
bench_iter_1000			fn bench_iter_1000(b: &mut test::Bencher) 
bench_iter_mut			fn bench_iter_mut(b: &mut test::Bencher) 
bench_iter_mut_rev			fn bench_iter_mut_rev(b: &mut test::Bencher) 
bench_iter_rev			fn bench_iter_rev(b: &mut test::Bencher) 
bench_join			    fn bench_join(b: &mut Bencher) 
bench_mut_iter_1000			fn bench_mut_iter_1000(b: &mut test::Bencher) 
bench_new			fn bench_new(b: &mut Bencher) 
bench_new			fn bench_new(b: &mut test::Bencher) 
bench_push_all_0000_0000			fn bench_push_all_0000_0000(b: &mut Bencher) 
bench_push_all_0000_0010			fn bench_push_all_0000_0010(b: &mut Bencher) 
bench_push_all_0000_0100			fn bench_push_all_0000_0100(b: &mut Bencher) 
bench_push_all_0000_1000			fn bench_push_all_0000_1000(b: &mut Bencher) 
bench_push_all_0010_0010			fn bench_push_all_0010_0010(b: &mut Bencher) 
bench_push_all_0100_0100			fn bench_push_all_0100_0100(b: &mut Bencher) 
bench_push_all_1000_1000			fn bench_push_all_1000_1000(b: &mut Bencher) 
bench_push_all_move_0000_0000			fn bench_push_all_move_0000_0000(b: &mut Bencher) 
bench_push_all_move_0000_0010			fn bench_push_all_move_0000_0010(b: &mut Bencher) 
bench_push_all_move_0000_0100			fn bench_push_all_move_0000_0100(b: &mut Bencher) 
bench_push_all_move_0000_1000			fn bench_push_all_move_0000_1000(b: &mut Bencher) 
bench_push_all_move_0010_0010			fn bench_push_all_move_0010_0010(b: &mut Bencher) 
bench_push_all_move_0100_0100			fn bench_push_all_move_0100_0100(b: &mut Bencher) 
bench_push_all_move_1000_1000			fn bench_push_all_move_1000_1000(b: &mut Bencher) 
bench_push_back			fn bench_push_back(b: &mut test::Bencher) 
bench_push_back_pop_back			fn bench_push_back_pop_back(b: &mut test::Bencher) 
bench_push_char_one_byte			fn bench_push_char_one_byte(b: &mut Bencher) 
bench_push_char_two_bytes			fn bench_push_char_two_bytes(b: &mut Bencher) 
bench_push_front			fn bench_push_front(b: &mut test::Bencher) 
bench_push_front_pop_front			fn bench_push_front_pop_front(b: &mut test::Bencher) 
bench_push_str			fn bench_push_str(b: &mut Bencher) 
bench_push_str_one_byte			fn bench_push_str_one_byte(b: &mut Bencher) 
bench_to_string			fn bench_to_string(b: &mut Bencher) 
bench_with_capacity			fn bench_with_capacity(b: &mut Bencher) 
bench_with_capacity_0000			fn bench_with_capacity_0000(b: &mut Bencher) 
bench_with_capacity_0010			fn bench_with_capacity_0010(b: &mut Bencher) 
bench_with_capacity_0100			fn bench_with_capacity_0100(b: &mut Bencher) 
bench_with_capacity_1000			fn bench_with_capacity_1000(b: &mut Bencher) 
binary_heap			mod binary_heap;
btree			mod btree;
bwd			                fn bwd() 
case			    fn case(a: Vec<i32>, b: Vec<i32>) 
char_indicesator			    fn char_indicesator(b: &mut Bencher) 
char_indicesator_rev			    fn char_indicesator_rev(b: &mut Bencher) 
char_iterator			    fn char_iterator(b: &mut Bencher) 
char_iterator_ascii			    fn char_iterator_ascii(b: &mut Bencher) 
char_iterator_for			    fn char_iterator_for(b: &mut Bencher) 
char_iterator_rev			    fn char_iterator_rev(b: &mut Bencher) 
char_iterator_rev_for			    fn char_iterator_rev_for(b: &mut Bencher) 
check			fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)
check_contains_all_substrings			fn check_contains_all_substrings(s: &str) 
check_cow_add_assign_cow			fn check_cow_add_assign_cow() 
check_cow_add_assign_str			fn check_cow_add_assign_str() 
check_cow_add_cow			fn check_cow_add_cow() 
check_cow_add_str			fn check_cow_add_str() 
check_difference			    fn check_difference(a: &[i32], b: &[i32], expected: &[i32]) 
check_intersection			    fn check_intersection(a: &[i32], b: &[i32], expected: &[i32]) 
check_symmetric_difference			    fn check_symmetric_difference(a: &[i32], b: &[i32], expected: &[i32]) 
check_to_vec			fn check_to_vec(mut data: Vec<i32>) 
check_union			    fn check_union(a: &[i32], b: &[i32], expected: &[i32]) 
clone			        fn clone(&self) -> Self 
cmp			        fn cmp(&self, _: &Self) -> Ordering 
cmp			        fn cmp(&self, other: &Self) -> Ordering 
cmp_search_to_vec			    fn cmp_search_to_vec<'a, P: Pattern<'a>>(rev: bool, pat: P, haystack: &'a str,
concat			    fn concat(b: &mut Bencher) 
contains_last_element			    fn contains_last_element(b: &mut Bencher) 
contains_weird_cases			fn contains_weird_cases() 
cow_str			mod cow_str;
different_str_pattern_forwarding_lifetimes			fn different_str_pattern_forwarding_lifetimes() 
do_bench_clone			fn do_bench_clone(b: &mut Bencher, src_len: usize) 
do_bench_clone_from			fn do_bench_clone_from(b: &mut Bencher, times: usize, dst_len: usize, src_len: usize) 
do_bench_extend			fn do_bench_extend(b: &mut Bencher, dst_len: usize, src_len: usize) 
do_bench_from_elem			fn do_bench_from_elem(b: &mut Bencher, src_len: usize) 
do_bench_from_fn			fn do_bench_from_fn(b: &mut Bencher, src_len: usize) 
do_bench_from_iter			fn do_bench_from_iter(b: &mut Bencher, src_len: usize) 
do_bench_from_slice			fn do_bench_from_slice(b: &mut Bencher, src_len: usize) 
do_bench_push_all			fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) 
do_bench_push_all_move			fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) 
do_bench_with_capacity			fn do_bench_with_capacity(b: &mut Bencher, src_len: usize) 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drop			        fn drop(&mut self) 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			        fn drop(&mut self) 
ends_with_diff_one_element_at_beginning			    fn ends_with_diff_one_element_at_beginning(b: &mut Bencher) 
ends_with_same_vector			    fn ends_with_same_vector(b: &mut Bencher) 
ends_with_single_element			    fn ends_with_single_element(b: &mut Bencher) 
enum_set			mod enum_set;
eq			        fn eq(&self, _: &Self) -> bool 
eq			        fn eq(&self, other: &Self) -> bool 
fmt			mod fmt;
foo			    fn foo<'a, P>(p: P) where for<'b> &'b P: Pattern<'a> 
from_usize			        fn from_usize(v: usize) -> Bar 
from_usize			    fn from_usize(v: usize) -> Foo 
from_utf8_lossy_100_ascii			fn from_utf8_lossy_100_ascii(b: &mut Bencher) 
from_utf8_lossy_100_invalid			fn from_utf8_lossy_100_invalid(b: &mut Bencher) 
from_utf8_lossy_100_multibyte			fn from_utf8_lossy_100_multibyte(b: &mut Bencher) 
from_utf8_lossy_invalid			fn from_utf8_lossy_invalid(b: &mut Bencher) 
from_utf8_mostly_ascii			fn from_utf8_mostly_ascii() 
fwd			                fn fwd() 
generate_test			fn generate_test() -> LinkedList<i32> 
half_a_million_letter_a			    fn half_a_million_letter_a() -> String 
half_a_million_letter_x			    fn half_a_million_letter_x() -> String 
hash			fn hash<T: Hash>(t: &T) -> u64 
insert			fn insert() 
insert_bad1			fn insert_bad1() 
insert_bad2			fn insert_bad2() 
into_cow			    fn into_cow(self) -> Cow<'a, B>;
into_cow			    fn into_cow(self) -> Cow<'a, str> 
into_iter			    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> 
into_iter			    fn into_iter<'new>(i: IntoIter<&'static str>) -> IntoIter<&'new str> 
into_iter_key			    fn into_iter_key<'new>(v: IntoIter<&'static str, ()>) -> IntoIter<&'new str, ()> 
into_iter_val			    fn into_iter_val<'new>(v: IntoIter<(), &'static str>) -> IntoIter<(), &'new str> 
is_odd			fn is_odd(n: &usize) -> bool 
iter			    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> 
iter_1000			    pub fn iter_1000(b: &mut Bencher) 
iter_100000			    pub fn iter_100000(b: &mut Bencher) 
iter_20			    pub fn iter_20(b: &mut Bencher) 
iter_equal			    fn iter_equal<I: Iterator<Item = i32>>(it: I, slice: &[i32]) 
iter_key			    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, ()>) -> Iter<'a, &'new str, ()> 
iter_val			    fn iter_val<'a, 'new>(v: Iter<'a, (), &'static str>) -> Iter<'a, (), &'new str> 
iterator			    fn iterator(b: &mut Bencher) 
join			    fn join(b: &mut Bencher) 
keys			    fn keys<'a, 'new>(v: Keys<'a, &'static str, ()>) -> Keys<'a, &'new str, ()> 
linked_list			mod linked_list;
list_from			fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> 
map			mod map;
map_key			    fn map_key<'new>(v: BTreeMap<&'static str, ()>) -> BTreeMap<&'new str, ()> 
map_val			    fn map_val<'new>(v: BTreeMap<(), &'static str>) -> BTreeMap<(), &'new str> 
mut_iterator			    fn mut_iterator(b: &mut Bencher) 
new			    fn new() -> Self 
next			    fn next(&mut self) -> u32 
partial_cmp			        fn partial_cmp(&self, _: &Self) -> Option<Ordering> 
partial_cmp			        fn partial_cmp(&self, other: &Self) -> Option<Ordering> 
pattern			mod pattern 
pred			        fn pred(c: char) -> bool { c == ' ' }
push			    fn push(b: &mut Bencher) 
rand_data			fn rand_data(len: usize) -> Vec<(u32, u32)> 
rand_data			fn rand_data(len: usize) -> Vec<u32> 
random_inserts			    fn random_inserts(b: &mut Bencher) 
random_removes			    fn random_removes(b: &mut Bencher) 
range			    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> 
range_key			    fn range_key<'a, 'new>(v: Range<'a, &'static str, ()>) -> Range<'a, &'new str, ()> 
range_val			    fn range_val<'a, 'new>(v: Range<'a, (), &'static str>) -> Range<'a, (), &'new str> 
remove			fn remove() 
remove_bad			fn remove_bad() 
s			fn s(x: &str) -> String { x.to_string() }
set			mod set;
set			    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> 
slice			mod slice;
sort_big_random_large			    fn sort_big_random_large(b: &mut Bencher) 
sort_big_random_medium			    fn sort_big_random_medium(b: &mut Bencher) 
sort_big_random_small			    fn sort_big_random_small(b: &mut Bencher) 
sort_big_sorted			    fn sort_big_sorted(b: &mut Bencher) 
sort_random_large			    fn sort_random_large(b: &mut Bencher) 
sort_random_medium			    fn sort_random_medium(b: &mut Bencher) 
sort_random_small			    fn sort_random_small(b: &mut Bencher) 
sort_sorted			    fn sort_sorted(b: &mut Bencher) 
split_ascii			    fn split_ascii(b: &mut Bencher) 
split_closure			    fn split_closure(b: &mut Bencher) 
split_extern_fn			    fn split_extern_fn(b: &mut Bencher) 
split_slice			    fn split_slice(b: &mut Bencher) 
split_unicode_ascii			    fn split_unicode_ascii(b: &mut Bencher) 
square			fn square(n: usize) -> usize 
starts_short_long			fn starts_short_long() 
starts_with_diff_one_element_at_end			    fn starts_with_diff_one_element_at_end(b: &mut Bencher) 
starts_with_in_unicode			fn starts_with_in_unicode() 
starts_with_same_vector			    fn starts_with_same_vector(b: &mut Bencher) 
starts_with_single_element			    fn starts_with_single_element(b: &mut Bencher) 
str			mod str;
string			mod string;
strslice_issue_16589			fn strslice_issue_16589() 
strslice_issue_16878			fn strslice_issue_16878() 
sum_len			    fn sum_len(v: &[&str]) -> usize 
t			    fn t(s: &str, sep: &str, u: &[&str]) 
t			    fn t<S: Default + AsRef<str>>() 
test			    fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) 
test			    fn test<T>(size: usize, mut iter: T)
to_lowercase			fn to_lowercase() 
to_uppercase			fn to_uppercase() 
to_usize			        fn to_usize(&self) -> usize 
to_usize			    fn to_usize(&self) -> usize 
trim_ws			fn trim_ws() 
vals			    fn vals<'a, 'new>(v: Values<'a, (), &'static str>) -> Values<'a, (), &'new str> 
vec			mod vec;
vec_deque			mod vec_deque;
vec_str_conversions			fn vec_str_conversions() 
zero_1kb_from_elem			    fn zero_1kb_from_elem(b: &mut Bencher) 
zero_1kb_loop_set			    fn zero_1kb_loop_set(b: &mut Bencher) 
zero_1kb_mut_iter			    fn zero_1kb_mut_iter(b: &mut Bencher) 
zero_1kb_set_memory			    fn zero_1kb_set_memory(b: &mut Bencher) 
zero_sized_values			fn zero_sized_values() 
