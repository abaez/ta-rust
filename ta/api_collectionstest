Bad			    struct Bad;
BadElem			    struct BadElem(i32);
Canary			    struct Canary 
Clone for Canary			    impl Clone for Canary 
DeterministicRng			impl DeterministicRng 
DeterministicRng			struct DeterministicRng 
Drop for BadElem			    impl Drop for BadElem 
Drop for Canary			    impl Drop for Canary 
Drop for DropCounter			impl<'a> Drop for DropCounter<'a> 
Drop for Elem			    impl Drop for Elem 
Drop for Elem			    impl Drop for Elem 
DropCounter			struct DropCounter<'a> 
Elem			    struct Elem(i32);
Elem			    struct Elem;
Eq for Bad			    impl Eq for Bad {}
Eq for Foo			    impl Eq for Foo {}
Foo			    struct Foo(&'static str, i32);
Foo			struct Foo;
IntoCow			impl<'a> IntoCow<'a, str> for &'a str 
IntoCow			pub trait IntoCow<'a, B: ?Sized> where B: ToOwned 
IntoCow for String			impl<'a> IntoCow<'a, str> for String 
Ord for Bad			    impl Ord for Bad 
Ord for Foo			    impl Ord for Foo 
PartialEq for Bad			    impl PartialEq for Bad 
PartialEq for Foo			    impl PartialEq for Foo 
PartialOrd for Bad			    impl PartialOrd for Bad 
PartialOrd for Foo			    impl PartialOrd for Foo 
RecCy			struct RecCy 
Taggy			enum Taggy 
Taggypar			enum Taggypar<T> 
TwoVec			    struct TwoVec<T> 
a_million_letter_a			    fn a_million_letter_a() -> String 
a_million_letter_x			    fn a_million_letter_x() -> String 
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
assert_covariance			fn assert_covariance() 
binary_heap			mod binary_heap;
btree			mod btree;
bwd			                fn bwd() 
case			    fn case(a: Vec<i32>, b: Vec<i32>) 
check			    fn check<'a, L, R>(lhs: L, rhs: R)
check			fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)
check_contains_all_substrings			fn check_contains_all_substrings(s: &str) 
check_cow_add_assign_cow			fn check_cow_add_assign_cow() 
check_cow_add_assign_str			fn check_cow_add_assign_str() 
check_cow_add_cow			fn check_cow_add_cow() 
check_cow_add_str			fn check_cow_add_str() 
check_difference			    fn check_difference(a: &[i32], b: &[i32], expected: &[i32]) 
check_intersection			    fn check_intersection(a: &[i32], b: &[i32], expected: &[i32]) 
check_symmetric_difference			    fn check_symmetric_difference(a: &[i32], b: &[i32], expected: &[i32]) 
check_to_vec			fn check_to_vec(mut data: Vec<i32>) 
check_union			    fn check_union(a: &[i32], b: &[i32], expected: &[i32]) 
clone			        fn clone(&self) -> Self 
cmp			        fn cmp(&self, _: &Self) -> Ordering 
cmp			        fn cmp(&self, other: &Self) -> Ordering 
cmp_search_to_vec			    fn cmp_search_to_vec<'a, P: Pattern<'a>>(rev: bool, pat: P, haystack: &'a str,
contains_weird_cases			fn contains_weird_cases() 
cow_str			mod cow_str;
different_str_pattern_forwarding_lifetimes			fn different_str_pattern_forwarding_lifetimes() 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drain			    fn drain<'new>(d: Drain<'static, &'static str>) -> Drain<'new, &'new str> 
drop			        fn drop(&mut self) 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			        fn drop(&mut self) 
eq			        fn eq(&self, _: &Self) -> bool 
eq			        fn eq(&self, other: &Self) -> bool 
fmt			mod fmt;
foo			    fn foo<'a, P>(p: P) where for<'b> &'b P: Pattern<'a> 
from_utf8_mostly_ascii			fn from_utf8_mostly_ascii() 
fwd			                fn fwd() 
generate_test			fn generate_test() -> LinkedList<i32> 
half_a_million_letter_a			    fn half_a_million_letter_a() -> String 
half_a_million_letter_x			    fn half_a_million_letter_x() -> String 
hash			fn hash<T: Hash>(t: &T) -> u64 
insert			fn insert() 
insert_bad1			fn insert_bad1() 
insert_bad2			fn insert_bad2() 
into_cow			    fn into_cow(self) -> Cow<'a, B>;
into_cow			    fn into_cow(self) -> Cow<'a, str> 
into_iter			    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> 
into_iter			    fn into_iter<'new>(i: IntoIter<&'static str>) -> IntoIter<&'new str> 
into_iter_key			    fn into_iter_key<'new>(v: IntoIter<&'static str, ()>) -> IntoIter<&'new str, ()> 
into_iter_val			    fn into_iter_val<'new>(v: IntoIter<(), &'static str>) -> IntoIter<(), &'new str> 
is_odd			fn is_odd(n: &usize) -> bool 
iter			    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> 
iter_equal			    fn iter_equal<I: Iterator<Item = i32>>(it: I, slice: &[i32]) 
iter_key			    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, ()>) -> Iter<'a, &'new str, ()> 
iter_val			    fn iter_val<'a, 'new>(v: Iter<'a, (), &'static str>) -> Iter<'a, (), &'new str> 
keys			    fn keys<'a, 'new>(v: Keys<'a, &'static str, ()>) -> Keys<'a, &'new str, ()> 
linked_list			mod linked_list;
list_from			fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> 
map			mod map;
map_key			    fn map_key<'new>(v: BTreeMap<&'static str, ()>) -> BTreeMap<&'new str, ()> 
map_val			    fn map_val<'new>(v: BTreeMap<(), &'static str>) -> BTreeMap<(), &'new str> 
mkpanic			    fn mkpanic() -> usize { panic!() }
mkpanic			    fn mkpanic() -> usize { panic!() }
new			    fn new() -> Self 
next			    fn next(&mut self) -> u32 
partial_cmp			        fn partial_cmp(&self, _: &Self) -> Option<Ordering> 
partial_cmp			        fn partial_cmp(&self, other: &Self) -> Option<Ordering> 
pattern			mod pattern 
rand_data			fn rand_data(len: usize) -> Vec<(u32, u32)> 
rand_data			fn rand_data(len: usize) -> Vec<u32> 
range			    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> 
range_key			    fn range_key<'a, 'new>(v: Range<'a, &'static str, ()>) -> Range<'a, &'new str, ()> 
range_val			    fn range_val<'a, 'new>(v: Range<'a, (), &'static str>) -> Range<'a, (), &'new str> 
remove			fn remove() 
remove_bad			fn remove_bad() 
s			fn s(x: &str) -> String { x.to_string() }
set			mod set;
set			    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> 
slice			mod slice;
square			fn square(n: usize) -> usize 
starts_short_long			fn starts_short_long() 
starts_with_in_unicode			fn starts_with_in_unicode() 
str			mod str;
string			mod string;
strslice_issue_16589			fn strslice_issue_16589() 
strslice_issue_16878			fn strslice_issue_16878() 
sum_len			    fn sum_len(v: &[&str]) -> usize 
t			    fn t(s: &str, sep: &str, u: &[&str]) 
t			    fn t<S: Default + AsRef<str>>() 
test			    fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) 
test			    fn test<T>(size: usize, mut iter: T)
to_lowercase			fn to_lowercase() 
to_uppercase			fn to_uppercase() 
trim_ws			fn trim_ws() 
vals			    fn vals<'a, 'new>(v: Values<'a, (), &'static str>) -> Values<'a, (), &'new str> 
vec			mod vec;
vec_deque			mod vec_deque;
vec_str_conversions			fn vec_str_conversions() 
zero_sized_values			fn zero_sized_values() 
