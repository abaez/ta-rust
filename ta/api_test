BenchMode			pub enum BenchMode 
BenchSamples			pub struct BenchSamples 
Bencher			impl Bencher 
Bencher			pub struct Bencher 
Clone for MetricMap			impl Clone for MetricMap 
ColorConfig			pub enum ColorConfig 
ConsoleTestState			impl<T: Write> ConsoleTestState<T> 
ConsoleTestState			struct ConsoleTestState<T> 
FnBox			pub trait FnBox<T>: Send + 'static 
FnBox for F			impl<T, F: FnOnce(T) + Send + 'static> FnBox<T> for F 
GetConsoleMode			        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;
GetStdHandle			        fn GetStdHandle(which: DWORD) -> HANDLE;
GetSystemInfo			            fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;
Metric			impl Metric 
Metric			pub struct Metric 
MetricMap			impl MetricMap 
MetricMap			pub struct MetricMap(BTreeMap<String, Metric>);
NamePadding			pub enum NamePadding 
OutputLocation			enum OutputLocation<T> 
SYSTEM_INFO			        struct SYSTEM_INFO 
Send for TestResult			unsafe impl Send for TestResult {}
ShouldPanic			pub enum ShouldPanic 
Sink			        struct Sink(Arc<Mutex<Vec<u8>>>);
Stats			impl Stats for [f64] 
Stats			pub trait Stats 
Summary			impl Summary 
Summary			pub struct Summary 
TDynBenchFn			pub trait TDynBenchFn: Send 
TestDesc			impl TestDesc 
TestDesc			pub struct TestDesc 
TestDescAndFn			pub struct TestDescAndFn 
TestEvent			pub enum TestEvent 
TestFn			impl TestFn 
TestFn			pub enum TestFn 
TestName			impl TestName 
TestName			pub enum TestName 
TestOpts			impl TestOpts 
TestOpts			pub struct TestOpts 
TestPaths			pub struct TestPaths 
TestResult			pub enum TestResult 
Write for Sink			        impl Write for Sink 
as_slice			    fn as_slice(&self) -> &str 
bench			    pub fn bench<F>(&mut self, mut f: F) -> Option<stats::Summary>
bench			pub mod bench 
bench			mod bench 
benchmark			    pub fn benchmark<F>(f: F) -> BenchSamples
black_box			pub fn black_box<T>(dummy: T) -> T 
calc_result			fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> TestResult 
calc_timeout			    fn calc_timeout(running_tests: &HashMap<TestDesc, Instant>) -> Option<Duration> 
call_box			    fn call_box(self: Box<F>, t: T) 
call_box			    fn call_box(self: Box<Self>, t: T);
callback			    fn callback<T: Write>(event: &TestEvent, st: &mut ConsoleTestState<T>) -> io::Result<()> 
check			    fn check(samples: &[f64], summ: &Summary) 
clone			    fn clone(&self) -> MetricMap 
convert_benchmarks_to_tests			pub fn convert_benchmarks_to_tests(tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> 
do_not_run_ignored_tests			    pub fn do_not_run_ignored_tests() 
exact_filter_match			    pub fn exact_filter_match() 
f			        fn f() 
f			        fn f() {}
f			        fn f(_: &mut Bencher) {}
f			        fn f(b: &mut Bencher) 
filter			        fn filter(test: TestDescAndFn) -> Option<TestDescAndFn> 
filter_for_ignored_option			    pub fn filter_for_ignored_option() 
filter_tests			pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> 
flush			            fn flush(&mut self) -> io::Result<()> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for TestFn			impl fmt::Debug for TestFn 
fmt::Display for TestName			impl fmt::Display for TestName 
fmt_bench_samples			pub fn fmt_bench_samples(bs: &BenchSamples) -> String 
fmt_metrics			    pub fn fmt_metrics(&self) -> String 
fmt_thousands_sep			fn fmt_thousands_sep(mut n: usize, sep: char) -> String 
get_concurrency			fn get_concurrency() -> usize 
get_timed_out_tests			    fn get_timed_out_tests(running_tests: &mut HashMap<TestDesc, Instant>) -> Vec<TestDesc> 
ignored_tests_result_in_ignored			    pub fn ignored_tests_result_in_ignored() 
insert_metric			    pub fn insert_metric(&mut self, name: &str, value: f64, noise: f64) 
iqr			    fn iqr(&self) -> f64 
iqr			    fn iqr(&self) -> f64;
iter			    pub fn iter<T, F>(&mut self, mut inner: F)
iter			pub fn iter<T, F>(inner: &mut F) -> stats::Summary
len_if_padded			    fn len_if_padded(t: &TestDescAndFn) -> usize 
list_tests_console			pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Result<()> 
local_cmp			fn local_cmp(x: f64, y: f64) -> Ordering 
local_sort			fn local_sort(v: &mut [f64]) 
max			    fn max(&self) -> f64 
max			    fn max(&self) -> f64;
mean			    fn mean(&self) -> f64 
mean			    fn mean(&self) -> f64;
median			    fn median(&self) -> f64 
median			    fn median(&self) -> f64;
median_abs_dev			    fn median_abs_dev(&self) -> f64 
median_abs_dev			    fn median_abs_dev(&self) -> f64;
median_abs_dev_pct			    fn median_abs_dev_pct(&self) -> f64 
median_abs_dev_pct			    fn median_abs_dev_pct(&self) -> f64;
min			    fn min(&self) -> f64 
min			    fn min(&self) -> f64;
new			    fn new() -> TestOpts 
new			    pub fn new() -> MetricMap 
new			    pub fn new(opts: &TestOpts, _: Option<T>) -> io::Result<ConsoleTestState<io::Stdout>> 
new			    pub fn new(value: f64, noise: f64) -> Metric 
new			    pub fn new(samples: &[f64]) -> Summary 
no_iter			    pub fn no_iter(_: &mut Bencher) {}
ns_from_dur			fn ns_from_dur(dur: Duration) -> u64 
ns_iter_inner			fn ns_iter_inner<T, F>(inner: &mut F, k: u64) -> u64
num_cpus			    fn num_cpus() -> usize 
optgroups			fn optgroups() -> Vec<getopts::OptGroup> 
padded_name			    fn padded_name(&self, column_count: usize, align: NamePadding) -> String 
padding			    fn padding(&self) -> NamePadding 
parse_ignored_flag			    fn parse_ignored_flag() 
parse_opts			pub fn parse_opts(args: &[String]) -> Option<OptRes> 
percentile			    fn percentile(&self, pct: f64) -> f64 
percentile			    fn percentile(&self, pct: f64) -> f64;
percentile_of_sorted			fn percentile_of_sorted(sorted_samples: &[f64], pct: f64) -> f64 
plural			    fn plural(count: u32, s: &str) -> String 
quartiles			    fn quartiles(&self) -> (f64, f64, f64) 
quartiles			    fn quartiles(&self) -> (f64, f64, f64);
run			    fn run(&self, harness: &mut Bencher);
run_once			    pub fn run_once<F>(f: F)
run_test			pub fn run_test(opts: &TestOpts,
run_test_inner			    fn run_test_inner(desc: TestDesc,
run_tests			pub fn run_tests<F>(opts: &TestOpts, tests: Vec<TestDescAndFn>, mut callback: F) -> io::Result<()>
run_tests_console			pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Result<bool> 
should_sort_failures_before_printing_them			fn should_sort_failures_before_printing_them() 
sort_tests			    pub fn sort_tests() 
stats			pub mod stats;
std_dev			    fn std_dev(&self) -> f64 
std_dev			    fn std_dev(&self) -> f64;
std_dev_pct			    fn std_dev_pct(&self) -> f64 
std_dev_pct			    fn std_dev_pct(&self) -> f64;
stdout_isatty			fn stdout_isatty() -> bool 
sum			    fn sum(&self) -> f64 
sum			    fn sum(&self) -> f64;
sum_many_f64			    pub fn sum_many_f64(b: &mut Bencher) 
sum_three_items			    pub fn sum_three_items(b: &mut Bencher) 
test			pub mod test 
testfn			            fn testfn() {}
tests			        fn tests() -> Vec<TestDescAndFn> 
tests			mod tests 
tests			mod tests 
usage			fn usage(binary: &str) 
use_color			fn use_color(opts: &TestOpts) -> bool 
var			    fn var(&self) -> f64 
var			    fn var(&self) -> f64;
winsorize			pub fn winsorize(samples: &mut [f64], pct: f64) 
write			            fn write(&mut self, data: &[u8]) -> io::Result<usize> 
write_bench			    pub fn write_bench(&mut self) -> io::Result<()> 
write_failed			    pub fn write_failed(&mut self) -> io::Result<()> 
write_failures			    pub fn write_failures(&mut self) -> io::Result<()> 
write_ignored			    pub fn write_ignored(&mut self) -> io::Result<()> 
write_log			    pub fn write_log<S: AsRef<str>>(&mut self, msg: S) -> io::Result<()> 
write_log_result			    pub fn write_log_result(&mut self, test: &TestDesc, result: &TestResult) -> io::Result<()> 
write_metric			    pub fn write_metric(&mut self) -> io::Result<()> 
write_ok			    pub fn write_ok(&mut self) -> io::Result<()> 
write_plain			    pub fn write_plain<S: AsRef<str>>(&mut self, s: S) -> io::Result<()> 
write_pretty			    pub fn write_pretty(&mut self, word: &str, color: term::color::Color) -> io::Result<()> 
write_result			    pub fn write_result(&mut self, result: &TestResult) -> io::Result<()> 
write_run_finish			    pub fn write_run_finish(&mut self) -> io::Result<bool> 
write_run_start			    pub fn write_run_start(&mut self, len: usize) -> io::Result<()> 
write_short_result			    pub fn write_short_result(&mut self, verbose: &str, quiet: &str, color: term::color::Color)
write_test_start			    pub fn write_test_start(&mut self, test: &TestDesc, align: NamePadding) -> io::Result<()> 
write_timeout			    pub fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()> 
